pyproject.toml:11:16: RUF200 Failed to parse pyproject.toml: Version specifier `= 2.3.0` doesn't match PEP 440 rules
torch = 2.3.0
      ^^^^^^^
   |
 9 |   ]
10 |   
11 |   dependencies = [
   |  ________________^
12 | |   "pandas",
13 | |   "numpy",
14 | |   "matplotlib",
15 | |   "torch = 2.3.0", 
16 | |   "botorch",
17 | |   "gpytorch",
18 | |   "stko",
19 | |   "stk",
20 | |   "scikit-learn",
21 | |   "rdkit",
22 | |   "ipywidgets",
23 | |   "psutil",
24 | |   "pytorch-lightning",
25 | |   "torchmetrics",  
26 | |   "ase",
27 | |   "packaging",
28 | |   "e3nn",
29 | |   "transformers",
30 | |   "selfies",
31 | |   "atom3d",
32 | |   "cffi",
33 | |   "biopython",
34 | |   "cython",
35 | |   "networkx",
36 | |   "ogb",
37 | |   "ipykernel",
38 | |   "torch_geometric",
39 | |   "lightning",
40 | |   "mordred",
41 | |   "wandb",
42 | |   "swifter",
43 | | ]
   | |_^ RUF200
44 |   requires-python = ">=3.7"
45 |   dynamic = ["version"]
   |

src\dev_scripts\Calculate_polymer_properties.py:1:1: INP001 File `src\dev_scripts\Calculate_polymer_properties.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\Calculate_polymer_properties.py:1:1: D100 Missing docstring in public module
src\dev_scripts\Calculate_polymer_properties.py:5:5: D103 Missing docstring in public function
  |
5 | def main(df_path,oligomer_size):
  |     ^^^^ D103
6 |     #read_dataframme from path
7 |     df_total = pd.read_csv(df_path)
  |

src\dev_scripts\Calculate_polymer_properties.py:13:31: N806 Variable `Inchikey` in function should be lowercase
   |
11 |     for i in range(df_elements.shape[0]):
12 |         try:
13 |             fitness_function, Inchikey = calculator.evaluate_element(df_elements.iloc[[i]])
   |                               ^^^^^^^^ N806
14 |             print(f"Fitness function: {fitness_function} Inchikey: {Inchikey}")
15 |         except Exception as e:
   |

src\dev_scripts\Calculate_polymer_properties.py:14:13: T201 `print` found
   |
12 |         try:
13 |             fitness_function, Inchikey = calculator.evaluate_element(df_elements.iloc[[i]])
14 |             print(f"Fitness function: {fitness_function} Inchikey: {Inchikey}")
   |             ^^^^^ T201
15 |         except Exception as e:
16 |             print(f"Error in {df_elements.iloc[i]}")
   |
   = help: Remove `print`

src\dev_scripts\Calculate_polymer_properties.py:15:9: PERF203 `try`-`except` within a loop incurs performance overhead
   |
13 |               fitness_function, Inchikey = calculator.evaluate_element(df_elements.iloc[[i]])
14 |               print(f"Fitness function: {fitness_function} Inchikey: {Inchikey}")
15 |           except Exception as e:
   |  _________^
16 | |             print(f"Error in {df_elements.iloc[i]}")
17 | |             print(e)
18 | |             continue
   | |____________________^ PERF203
19 |   
20 |   if __name__ == "__main__":
   |

src\dev_scripts\Calculate_polymer_properties.py:15:16: BLE001 Do not catch blind exception: `Exception`
   |
13 |             fitness_function, Inchikey = calculator.evaluate_element(df_elements.iloc[[i]])
14 |             print(f"Fitness function: {fitness_function} Inchikey: {Inchikey}")
15 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
16 |             print(f"Error in {df_elements.iloc[i]}")
17 |             print(e)
   |

src\dev_scripts\Calculate_polymer_properties.py:16:13: T201 `print` found
   |
14 |             print(f"Fitness function: {fitness_function} Inchikey: {Inchikey}")
15 |         except Exception as e:
16 |             print(f"Error in {df_elements.iloc[i]}")
   |             ^^^^^ T201
17 |             print(e)
18 |             continue
   |
   = help: Remove `print`

src\dev_scripts\Calculate_polymer_properties.py:17:13: T201 `print` found
   |
15 |         except Exception as e:
16 |             print(f"Error in {df_elements.iloc[i]}")
17 |             print(e)
   |             ^^^^^ T201
18 |             continue
   |
   = help: Remove `print`

src\dev_scripts\get_frag_encoding.py:1:1: INP001 File `src\dev_scripts\get_frag_encoding.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\get_frag_encoding.py:1:1: D100 Missing docstring in public module
src\dev_scripts\get_frag_encoding.py:15:5: PLR0915 Too many statements (54 > 50)
   |
15 | def main(config_dir):
   |     ^^^^ PLR0915
16 |     """Evaluate the model on the datasets and save the results
17 |             in the ephemeral folder
   |

src\dev_scripts\get_frag_encoding.py:16:5: D205 1 blank line required between summary line and description
   |
15 |   def main(config_dir):
16 |       """Evaluate the model on the datasets and save the results
   |  _____^
17 | |             in the ephemeral folder
18 | |     Args:
19 | |        config_dir (str): The path to the directory containing the
20 | |            configuration file.
21 | | 
22 | |     """
   | |_______^ D205
23 |       config = read_config(config_dir)
24 |       (
   |
   = help: Insert single blank line

src\dev_scripts\get_frag_encoding.py:34:8: PTH113 `os.path.isfile()` should be replaced by `Path.is_file()`
   |
32 |         config,
33 |     )
34 |     if os.path.isfile(config["dataset_all_path"]):
   |        ^^^^^^^^^^^^^^ PTH113
35 |         dataset_all = torch.load(
36 |             config["dataset_all_path"], map_location=config["device"]
   |

src\dev_scripts\get_frag_encoding.py:39:9: T201 `print` found
   |
37 |         )
38 |     else:
39 |         print(" no global dataset found ")
   |         ^^^^^ T201
40 |         dataset_all = torch.tensor([])
41 |     # save the dataset in the ephemeral folder
   |
   = help: Remove `print`

src\dev_scripts\get_frag_encoding.py:49:10: PTH123 `open()` should be replaced by `Path.open()`
   |
47 |     config, min_val_loss = train_models.get_best_embedding_model(config_dir)
48 |     output_file = config_dir + "/info.txt"
49 |     with open(output_file, "a") as file:
   |          ^^^^ PTH123
50 |         file.write(f"Best model: {config['model_embedding_chkpt']}\n")
51 |         file.write(f"Best model val loss: {min_val_loss}\n")
   |

src\dev_scripts\get_frag_encoding.py:62:8: PTH113 `os.path.isfile()` should be replaced by `Path.is_file()`
   |
60 |         config, dataset_opt=dataset_test, dataset_name="test"
61 |     )
62 |     if os.path.isfile(config["dataset_all_frag_path"]):
   |        ^^^^^^^^^^^^^^ PTH113
63 |         print(config["dataset_all_frag_path"])
64 |         dataset_all_frag = torch.load(
   |

src\dev_scripts\get_frag_encoding.py:63:9: T201 `print` found
   |
61 |     )
62 |     if os.path.isfile(config["dataset_all_frag_path"]):
63 |         print(config["dataset_all_frag_path"])
   |         ^^^^^ T201
64 |         dataset_all_frag = torch.load(
65 |             config["dataset_all_frag_path"], map_location=config["device"]
   |
   = help: Remove `print`

src\dev_scripts\get_frag_encoding.py:124:10: PTH123 `open()` should be replaced by `Path.open()`
    |
122 |     mae_val, mse_val, r2_val = evaluale_model_performance(df_val_pred)
123 |     mae_test, mse_test, r2_test = evaluale_model_performance(df_test_pred)
124 |     with open(output_file, "a") as file:
    |          ^^^^ PTH123
125 |         file.write(
126 |             f"MAE train: {mae_train:.2f}, MSE train: {mse_train:.2f}, R2 train: {r2_train:.2f}\n"
    |

src\dev_scripts\get_frag_encoding.py:163:5: F841 Local variable `encoding_dataset_all` is assigned to but never used
    |
161 |         )
162 |     )
163 |     encoding_dataset_all = (
    |     ^^^^^^^^^^^^^^^^^^^^ F841
164 |         oligomer_encoding_with_transformer.save_encoding_dataset(
165 |             dataset_all_frag,
    |
    = help: Remove assignment to unused variable `encoding_dataset_all`

src\dev_scripts\get_frag_encoding.py:203:10: PTH123 `open()` should be replaced by `Path.open()`
    |
201 |         df_test_pred_learned, target_name=config["target_name"]
202 |     )
203 |     with open(output_file, "a") as file:
    |          ^^^^ PTH123
204 |         file.write(" Perfomance with learned embedding\n")
205 |         file.write(
    |

src\dev_scripts\get_frag_encoding.py:216:5: D103 Missing docstring in public function
    |
216 | def save_datasets(
    |     ^^^^^^^^^^^^^ D103
217 |     config, dataset_train, dataset_val, dataset_test, dataset_all
218 | ):
    |

src\dev_scripts\get_frag_encoding.py:235:5: D103 Missing docstring in public function
    |
235 | def save_datasets_frag(
    |     ^^^^^^^^^^^^^^^^^^ D103
236 |     config, dataset_train, dataset_val, dataset_test, dataset_all_frag
237 | ):
    |

src\dev_scripts\get_frag_encoding.py:262:5: D103 Missing docstring in public function
    |
262 | def evaluate_model(
    |     ^^^^^^^^^^^^^^ D103
263 |     pymodel, loader, name_df="train", target_name="target", config_dir=""
264 | ):
    |

src\dev_scripts\get_frag_encoding.py:265:5: N806 Variable `InChIKeys` in function should be lowercase
    |
263 |     pymodel, loader, name_df="train", target_name="target", config_dir=""
264 | ):
265 |     InChIKeys = []
    |     ^^^^^^^^^ N806
266 |     predicted_target = []
267 |     for batch in loader:
    |

src\dev_scripts\get_frag_encoding.py:277:13: ERA001 Found commented-out code
    |
275 |                 .flatten()
276 |             )
277 |             # print("embedding size", batch[0].y.shape)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
278 |     df_pred = pd.DataFrame(
279 |         {
    |
    = help: Remove commented-out code

src\dev_scripts\get_frag_encoding.py:291:5: D103 Missing docstring in public function
    |
291 | def evaluale_model_performance(df_pred, aim=0.0, target_name="target"):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
292 |     from sklearn.metrics import (
293 |         mean_absolute_error,
    |

src\dev_scripts\get_frag_encoding.py:291:41: ARG001 Unused function argument: `aim`
    |
291 | def evaluale_model_performance(df_pred, aim=0.0, target_name="target"):
    |                                         ^^^ ARG001
292 |     from sklearn.metrics import (
293 |         mean_absolute_error,
    |

src\dev_scripts\get_frag_encoding.py:307:5: T201 `print` found
    |
305 |         df_pred[f"{target_name}"], df_pred[f"predicted_{target_name}"]
306 |     )
307 |     print(f"MAE: {mae:.2f}, MSE: {mse:.2f}, R2: {r2:.2f}")
    |     ^^^^^ T201
308 | 
309 |     return mae, mse, r2
    |
    = help: Remove `print`

src\dev_scripts\get_frag_encoding.py:312:5: D103 Missing docstring in public function
    |
312 | def evaluate_model_learned(
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
313 |     pymodel, datase_frag, name_df="train", target_name="target", config_dir=""
314 | ):
    |

src\dev_scripts\get_frag_encoding.py:315:5: N806 Variable `InChIKeys` in function should be lowercase
    |
313 |     pymodel, datase_frag, name_df="train", target_name="target", config_dir=""
314 | ):
315 |     InChIKeys = []
    |     ^^^^^^^^^ N806
316 |     predicted_target = []
317 |     # get model device
    |

src\dev_scripts\get_frag_encoding.py:348:5: D103 Missing docstring in public function
    |
348 | def evaluale_model_performance_learned(df_pred, target_name="target"):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
349 |     from sklearn.metrics import (
350 |         mean_absolute_error,
    |

src\dev_scripts\get_frag_encoding.py:367:5: T201 `print` found
    |
365 |         df_pred[f"predicted_{target_name}_learned_embedding"],
366 |     )
367 |     print(f"MAE: {mae:.2f}, MSE: {mse:.2f}, R2: {r2:.2f}")
    |     ^^^^^ T201
368 | 
369 |     return mae, mse, r2
    |
    = help: Remove `print`

src\dev_scripts\run_learn_representation.py:1:1: INP001 File `src\dev_scripts\run_learn_representation.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\run_learn_representation.py:1:1: D100 Missing docstring in public module
src\dev_scripts\run_learn_representation.py:8:5: PLR0913 Too many arguments in function definition (9 > 5)
   |
 8 | def run_training(
   |     ^^^^^^^^^^^^ PLR0913
 9 |     target_name="target",
10 |     aim=0.0,
   |

src\dev_scripts\run_learn_representation.py:8:5: D103 Missing docstring in public function
   |
 8 | def run_training(
   |     ^^^^^^^^^^^^ D103
 9 |     target_name="target",
10 |     aim=0.0,
   |

src\dev_scripts\run_learn_representation.py:14:5: FBT002 Boolean default positional argument in function definition
   |
12 |     max_epochs=5,
13 |     running_dir="/rds/general/user/ma11115/home/STK_Search/STK_search/data/representation_learning",
14 |     training=True,
   |     ^^^^^^^^ FBT002
15 |     load_dataset=0,
16 |     num_fragment=3,
   |

src\dev_scripts\run_learn_representation.py:51:13: PTH207 Replace `glob` with `Path.glob` or `Path.rglob`
   |
49 |     train_models.main(config_dir)
50 |     config = read_config(config_dir, model_name="SchNet")
51 |     files = glob.glob(config_dir + "/*.ckpt")
   |             ^^^^^^^^^ PTH207
52 |     min_val_loss = 1000
53 |     for file in files:
   |

src\dev_scripts\run_learn_representation.py:57:13: T201 `print` found
   |
55 |         val_loss = float(file.split("val_loss=")[1].split("-")[0])
56 |         if val_loss < min_val_loss:
57 |             print(file)
   |             ^^^^^ T201
58 |             min_val_loss = val_loss
59 |             config["model_embedding_chkpt"] = file
   |
   = help: Remove `print`

src\dev_scripts\run_learn_representation_new.py:1:1: INP001 File `src\dev_scripts\run_learn_representation_new.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\run_learn_representation_new.py:1:1: D100 Missing docstring in public module
src\dev_scripts\run_learn_representation_new.py:15:5: PLR0915 Too many statements (63 > 50)
   |
15 | def main(config_dir):
   |     ^^^^ PLR0915
16 |     """Train the model using the given configuration.
   |

src\dev_scripts\run_learn_representation_new.py:41:10: PTH123 `open()` should be replaced by `Path.open()`
   |
39 |     # save some information into a file
40 |     output_file = config_dir + "info.txt"
41 |     with open(output_file, "w") as file:
   |          ^^^^ PTH123
42 |         file.write(f"Model: {config['name']}\n")
43 |         file.write(f"Target: {config['target_name']}\n")
   |

src\dev_scripts\run_learn_representation_new.py:57:10: PTH123 `open()` should be replaced by `Path.open()`
   |
55 |     config, min_val_loss = train_models.get_best_embedding_model(config_dir)
56 |     output_file = config_dir + "info.txt"
57 |     with open(output_file, "a") as file:
   |          ^^^^ PTH123
58 |         file.write(f"Best model: {config['model_embedding_chkpt']}\n")
59 |         file.write(f"Best model val loss: {min_val_loss}\n")
   |

src\dev_scripts\run_learn_representation_new.py:117:10: PTH123 `open()` should be replaced by `Path.open()`
    |
115 |     mae_val, mse_val, r2_val = evaluale_model_performance(df_val_pred)
116 |     mae_test, mse_test, r2_test = evaluale_model_performance(df_test_pred)
117 |     with open(output_file, "a") as file:
    |          ^^^^ PTH123
118 |         file.write(
119 |             f"MAE train: {mae_train:.2f}, MSE train: {mse_train:.2f}, R2 train: {r2_train:.2f}\n"
    |

src\dev_scripts\run_learn_representation_new.py:129:5: N806 Variable `EncodingModel` in function should be lowercase
    |
128 |     # run encoding training
129 |     EncodingModel = oligomer_encoding_with_transformer.run_encoding_training(
    |     ^^^^^^^^^^^^^ N806
130 |         config, train_loader_frag, val_loader_frag
131 |     )
    |

src\dev_scripts\run_learn_representation_new.py:129:5: F841 Local variable `EncodingModel` is assigned to but never used
    |
128 |     # run encoding training
129 |     EncodingModel = oligomer_encoding_with_transformer.run_encoding_training(
    |     ^^^^^^^^^^^^^ F841
130 |         config, train_loader_frag, val_loader_frag
131 |     )
    |
    = help: Remove assignment to unused variable `EncodingModel`

src\dev_scripts\run_learn_representation_new.py:155:5: T201 `print` found
    |
153 |     ]:
154 |         [dataset_frag.append(x) for x in dataset]
155 |     print(len(dataset_frag))
    |     ^^^^^ T201
156 |     torch.save(dataset_frag, config_dir + "/transformer/" + "dataset_frag.pt")
157 |     df_train_pred_learned = evaluate_model_learned(
    |
    = help: Remove `print`

src\dev_scripts\run_learn_representation_new.py:188:10: PTH123 `open()` should be replaced by `Path.open()`
    |
186 |         df_test_pred_learned, target_name=config["target_name"]
187 |     )
188 |     with open(output_file, "a") as file:
    |          ^^^^ PTH123
189 |         file.write(" Perfomance with learned embedding\n")
190 |         file.write(
    |

src\dev_scripts\run_learn_representation_new.py:201:5: D103 Missing docstring in public function
    |
201 | def save_datasets(config, dataset_train, dataset_val, dataset_test):
    |     ^^^^^^^^^^^^^ D103
202 |     name = config["name"]
203 |     ephemeral_dir = config["ephemeral_path"] + f"/{name.replace('_','/')}/"
    |

src\dev_scripts\run_learn_representation_new.py:216:5: D103 Missing docstring in public function
    |
216 | def save_datasets_frag(config, dataset_train, dataset_val, dataset_test):
    |     ^^^^^^^^^^^^^^^^^^ D103
217 |     name = config["name"]
218 |     ephemeral_dir = (
    |

src\dev_scripts\run_learn_representation_new.py:240:5: D103 Missing docstring in public function
    |
240 | def evaluate_model(
    |     ^^^^^^^^^^^^^^ D103
241 |     pymodel, loader, name_df="train", target_name="target", config_dir=""
242 | ):
    |

src\dev_scripts\run_learn_representation_new.py:243:5: N806 Variable `InChIKeys` in function should be lowercase
    |
241 |     pymodel, loader, name_df="train", target_name="target", config_dir=""
242 | ):
243 |     InChIKeys = []
    |     ^^^^^^^^^ N806
244 |     predicted_target = []
245 |     for batch in loader:
    |

src\dev_scripts\run_learn_representation_new.py:255:13: ERA001 Found commented-out code
    |
253 |                 .flatten()
254 |             )
255 |             # print("embedding size", batch[0].y.shape)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
256 |     df_pred = pd.DataFrame(
257 |         {
    |
    = help: Remove commented-out code

src\dev_scripts\run_learn_representation_new.py:269:5: D103 Missing docstring in public function
    |
269 | def evaluale_model_performance(df_pred, aim=0.0, target_name="target"):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
270 |     from sklearn.metrics import (
271 |         mean_absolute_error,
    |

src\dev_scripts\run_learn_representation_new.py:269:41: ARG001 Unused function argument: `aim`
    |
269 | def evaluale_model_performance(df_pred, aim=0.0, target_name="target"):
    |                                         ^^^ ARG001
270 |     from sklearn.metrics import (
271 |         mean_absolute_error,
    |

src\dev_scripts\run_learn_representation_new.py:285:5: T201 `print` found
    |
283 |         df_pred[f"{target_name}"], df_pred[f"predicted_{target_name}"]
284 |     )
285 |     print(f"MAE: {mae:.2f}, MSE: {mse:.2f}, R2: {r2:.2f}")
    |     ^^^^^ T201
286 | 
287 |     return mae, mse, r2
    |
    = help: Remove `print`

src\dev_scripts\run_learn_representation_new.py:290:5: D103 Missing docstring in public function
    |
290 | def evaluate_model_learned(
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
291 |     pymodel, datase_frag, name_df="train", target_name="target", config_dir=""
292 | ):
    |

src\dev_scripts\run_learn_representation_new.py:293:5: N806 Variable `InChIKeys` in function should be lowercase
    |
291 |     pymodel, datase_frag, name_df="train", target_name="target", config_dir=""
292 | ):
293 |     InChIKeys = []
    |     ^^^^^^^^^ N806
294 |     predicted_target = []
295 |     # get model device
    |

src\dev_scripts\run_learn_representation_new.py:326:5: D103 Missing docstring in public function
    |
326 | def evaluale_model_performance_learned(df_pred, target_name="target"):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
327 |     from sklearn.metrics import (
328 |         mean_absolute_error,
    |

src\dev_scripts\run_learn_representation_new.py:345:5: T201 `print` found
    |
343 |         df_pred[f"predicted_{target_name}_learned_embedding"],
344 |     )
345 |     print(f"MAE: {mae:.2f}, MSE: {mse:.2f}, R2: {r2:.2f}")
    |     ^^^^^ T201
346 | 
347 |     return mae, mse, r2
    |
    = help: Remove `print`

src\dev_scripts\run_representation_learning_polymer.py:1:1: INP001 File `src\dev_scripts\run_representation_learning_polymer.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\run_representation_learning_polymer.py:1:1: D100 Missing docstring in public module
src\dev_scripts\run_representation_learning_polymer.py:13:5: D103 Missing docstring in public function
   |
13 | def main(config_dir):
   |     ^^^^ D103
14 |     config = read_config(config_dir)
15 |     bbs_dict = polymer_GNN_architecture_utils.get_bbs_dict(
   |

src\dev_scripts\run_representation_learning_polymer.py:35:10: PTH123 `open()` should be replaced by `Path.open()`
   |
33 |     config_dir = config["running_dir"]
34 |     output_file = config_dir + "info.txt"
35 |     with open(output_file, "w") as file:
   |          ^^^^ PTH123
36 |         file.write(f"Model: {config['name']}\n")
37 |         file.write(f"Target: {config['target_name']}\n")
   |

src\dev_scripts\run_representation_learning_polymer.py:52:5: T201 `print` found
   |
50 |     pymodel = load_model(config_dir, config)
51 |     pymodel.eval()
52 |     print("Model loaded")
   |     ^^^^^ T201
53 |     with open(output_file, "a") as file:
54 |         file.write("Model loaded\n")
   |
   = help: Remove `print`

src\dev_scripts\run_representation_learning_polymer.py:53:10: PTH123 `open()` should be replaced by `Path.open()`
   |
51 |     pymodel.eval()
52 |     print("Model loaded")
53 |     with open(output_file, "a") as file:
   |          ^^^^ PTH123
54 |         file.write("Model loaded\n")
55 |     df_train_pred = evaluate_model_prediction(
   |

src\dev_scripts\run_representation_learning_polymer.py:64:5: T201 `print` found
   |
62 |         test_loader, pymodel, config_dir, name_df="test"
63 |     )
64 |     print("Model evaluation done")
   |     ^^^^^ T201
65 |     with open(output_file, "a") as file:
66 |         file.write("Model evaluation done\n")
   |
   = help: Remove `print`

src\dev_scripts\run_representation_learning_polymer.py:65:10: PTH123 `open()` should be replaced by `Path.open()`
   |
63 |     )
64 |     print("Model evaluation done")
65 |     with open(output_file, "a") as file:
   |          ^^^^ PTH123
66 |         file.write("Model evaluation done\n")
   |

src\dev_scripts\run_representation_learning_polymer.py:71:10: PTH123 `open()` should be replaced by `Path.open()`
   |
69 |     mae_val, mse_val, r2_val = evaluale_model_performance(df_val_pred)
70 |     mae_test, mse_test, r2_test = evaluale_model_performance(df_test_pred)
71 |     with open(output_file, "a") as file:
   |          ^^^^ PTH123
72 |         file.write(" Perfomance with learned embedding\n")
73 |         file.write(
   |

src\dev_scripts\run_representation_learning_polymer.py:84:5: D103 Missing docstring in public function
   |
84 | def load_model(config_dir, config):
   |     ^^^^^^^^^^ D103
85 |     config, min_val_loss = train_models.get_best_embedding_model(config_dir)
86 |     output_file = config_dir + "info.txt"
   |

src\dev_scripts\run_representation_learning_polymer.py:87:10: PTH123 `open()` should be replaced by `Path.open()`
   |
85 |     config, min_val_loss = train_models.get_best_embedding_model(config_dir)
86 |     output_file = config_dir + "info.txt"
87 |     with open(output_file, "a") as file:
   |          ^^^^ PTH123
88 |         file.write(f"Best model: {config['model_embedding_chkpt']}\n")
89 |         file.write(f"Best model val loss: {min_val_loss}\n")
   |

src\dev_scripts\run_representation_learning_polymer.py:92:5: T201 `print` found
   |
91 |     model, graph_pred_linear = pl_model.model_setup(config)
92 |     print("Model loaded: ", config["model_name"])
   |     ^^^^^ T201
93 |     # Pass the model and graph_pred_linear to the Pymodel constructor
94 |     pymodel = pl_model.Pymodel_new(model, graph_pred_linear, config)
   |
   = help: Remove `print`

src\dev_scripts\run_representation_learning_polymer.py:97:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
95 |     # Load the state dictionary
96 |     chkpt_path = config["model_embedding_chkpt"]
97 |     if os.path.exists(chkpt_path):
   |        ^^^^^^^^^^^^^^ PTH110
98 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
99 |         pymodel.load_state_dict(state_dict=checkpoint["state_dict"])
   |

src\dev_scripts\run_representation_learning_polymer.py:104:5: D103 Missing docstring in public function
    |
104 | def evaluate_pymodel(data, pymodel, device):
    |     ^^^^^^^^^^^^^^^^ D103
105 |     with torch.no_grad():
106 |         z = pymodel.molecule_3D_repr(
    |

src\dev_scripts\run_representation_learning_polymer.py:117:5: ERA001 Found commented-out code
    |
115 |         z = pymodel.graph_pred_linear(z)
116 |         z_opt = pymodel.graph_pred_linear(z_opt)
117 |     # print(z,z_opt,data.y)
    |     ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
118 |     return z, z_opt, data.y
    |
    = help: Remove commented-out code

src\dev_scripts\run_representation_learning_polymer.py:121:5: D103 Missing docstring in public function
    |
121 | def evaluate_model_prediction(loader, pymodel, config_dir, name_df="train"):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ D103
122 |     y_pred_list, y_pred_opt_list, y_list = [], [], []
123 |     Inchikey_list = []
    |

src\dev_scripts\run_representation_learning_polymer.py:123:5: N806 Variable `Inchikey_list` in function should be lowercase
    |
121 | def evaluate_model_prediction(loader, pymodel, config_dir, name_df="train"):
122 |     y_pred_list, y_pred_opt_list, y_list = [], [], []
123 |     Inchikey_list = []
    |     ^^^^^^^^^^^^^ N806
124 |     for batch in loader:
125 |         y_pred, y_pred_opt, y = evaluate_pymodel(
    |

src\dev_scripts\run_representation_learning_polymer.py:144:5: D103 Missing docstring in public function
    |
144 | def evaluale_model_performance(df_pred):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
145 |     from sklearn.metrics import (
146 |         mean_absolute_error,
    |

src\dev_scripts\run_representation_learning_polymer.py:154:5: T201 `print` found
    |
152 |     mse = mean_squared_error(df_pred["y"], df_pred["y_pred"])
153 |     r2 = r2_score(df_pred["y"], df_pred["y_pred"])
154 |     print(f"MAE: {mae:.2f}, MSE: {mse:.2f}, R2: {r2:.2f}")
    |     ^^^^^ T201
155 | 
156 |     return mae, mse, r2
    |
    = help: Remove `print`

src\dev_scripts\run_search.py:1:1: INP001 File `src\dev_scripts\run_search.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\run_search.py:1:1: D100 Missing docstring in public module
src\dev_scripts\run_search.py:21:5: PLR0915 Too many statements (82 > 50)
   |
20 | # %%
21 | def main(num_iteration, num_elem_initialisation, test_name="test", case="slatm",search_space_loc = "data/input/search_space/test/search_space1.pkl"):
   |     ^^^^ PLR0915
22 |     # Load the searched space
23 |     df_path = "data/output/Full_dataset/df_total_2023_11_09.csv"
   |

src\dev_scripts\run_search.py:21:5: D103 Missing docstring in public function
   |
20 | # %%
21 | def main(num_iteration, num_elem_initialisation, test_name="test", case="slatm",search_space_loc = "data/input/search_space/test/search_space1.pkl"):
   |     ^^^^ D103
22 |     # Load the searched space
23 |     df_path = "data/output/Full_dataset/df_total_2023_11_09.csv"
   |

src\dev_scripts\run_search.py:33:9: N806 Variable `BO` in function should be lowercase
   |
32 |     if case == "slatm":
33 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
34 |         BO.Representation = Representation_slatm.Representation_slatm()
35 |         BO.PCA_input = True
   |

src\dev_scripts\run_search.py:38:9: N806 Variable `BO` in function should be lowercase
   |
36 |         search_algorithm = BO
37 |     elif case == "slatm_org":
38 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
39 |         BO.Representation = Representation_slatm.Representation_slatm_org(df_total)
40 |         BO.PCA_input = True
   |

src\dev_scripts\run_search.py:43:9: N806 Variable `BO` in function should be lowercase
   |
41 |         search_algorithm = BO
42 |     elif case == "precursor":
43 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
44 |         df_precursors_old_path = "data/output/Prescursor_data/calculation_data_precursor_190923_clean.pkl"
45 |         df_precursors_old = pd.read_pickle(df_precursors_old_path)
   |

src\dev_scripts\run_search.py:45:29: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
43 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
44 |         df_precursors_old_path = "data/output/Prescursor_data/calculation_data_precursor_190923_clean.pkl"
45 |         df_precursors_old = pd.read_pickle(df_precursors_old_path)
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
46 |         frag_properties = []
47 |         frag_properties = df_precursors_old.columns[1:7]
   |

src\dev_scripts\run_search.py:49:9: T201 `print` found
   |
47 |         frag_properties = df_precursors_old.columns[1:7]
48 |         frag_properties = frag_properties.append(df_precursors_old.columns[17:23])
49 |         print(frag_properties)
   |         ^^^^^ T201
50 |         BO.Representation = RepresentationPrecursor.RepresentationPrecursor(
51 |             df_precursors_old, frag_properties
   |
   = help: Remove `print`

src\dev_scripts\run_search.py:72:9: N806 Variable `EncodingModel` in function should be lowercase
   |
70 |             node_class=model_config["node_class"],
71 |         )
72 |         EncodingModel = Fragment_encoder(
   |         ^^^^^^^^^^^^^ N806
73 |             input_dim = config["emb_dim"]*config["number_of_fragement"],
74 |             model_dim=config["emb_dim"],
   |

src\dev_scripts\run_search.py:87:9: N806 Variable `BO` in function should be lowercase
   |
85 |         EncodingModel.load_state_dict(state_dict["state_dict"])
86 |         ## load search algorithm
87 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
88 |         client = pymongo.MongoClient(config["pymongo_client"])
89 |         db_poly = stk.ConstructedMoleculeMongoDb(
   |

src\dev_scripts\run_search.py:124:9: N806 Variable `EncodingModel` in function should be lowercase
    |
122 |         state_dict = torch.load(config["model_embedding_chkpt"],map_location=torch.device("cpu"))
123 |         pymodel.load_state_dict(state_dict["state_dict"])
124 |         EncodingModel = Fragment_encoder(
    |         ^^^^^^^^^^^^^ N806
125 |             input_dim = config["emb_dim"]*config["number_of_fragement"],
126 |             model_dim=config["emb_dim"],
    |

src\dev_scripts\run_search.py:156:15: TRY003 Avoid specifying long messages outside the exception class
    |
154 |         search_algorithm = ea_surrogate
155 |     else:
156 |         raise ValueError("case not recognised")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
157 | 
158 |     number_of_iterations = num_iteration
    |

src\dev_scripts\run_search.py:156:26: EM101 Exception must not use a string literal, assign to variable first
    |
154 |         search_algorithm = ea_surrogate
155 |     else:
156 |         raise ValueError("case not recognised")
    |                          ^^^^^^^^^^^^^^^^^^^^^ EM101
157 | 
158 |     number_of_iterations = num_iteration
    |
    = help: Assign to variable; remove string literal

src\dev_scripts\run_search.py:160:5: PLW0127 Self-assignment of variable `num_elem_initialisation`
    |
158 |     number_of_iterations = num_iteration
159 |     verbose = True
160 |     num_elem_initialisation = num_elem_initialisation
    |     ^^^^^^^^^^^^^^^^^^^^^^^ PLW0127
161 |     S_exp = SearchExp.Search_exp(
162 |         search_space_loc,
    |

src\dev_scripts\run_search.py:161:5: N806 Variable `S_exp` in function should be lowercase
    |
159 |     verbose = True
160 |     num_elem_initialisation = num_elem_initialisation
161 |     S_exp = SearchExp.Search_exp(
    |     ^^^^^ N806
162 |         search_space_loc,
163 |         search_algorithm,
    |

src\dev_scripts\run_search_new.py:1:1: INP001 File `src\dev_scripts\run_search_new.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\run_search_new.py:1:1: D100 Missing docstring in public module
src\dev_scripts\run_search_new.py:32:5: C901 `main` is too complex (12 > 10)
   |
31 | # %%
32 | def main(
   |     ^^^^ C901
33 |     num_iteration,
34 |     num_elem_initialisation,
   |

src\dev_scripts\run_search_new.py:32:5: PLR0913 Too many arguments in function definition (17 > 5)
   |
31 | # %%
32 | def main(
   |     ^^^^ PLR0913
33 |     num_iteration,
34 |     num_elem_initialisation,
   |

src\dev_scripts\run_search_new.py:32:5: PLR0912 Too many branches (15 > 12)
   |
31 | # %%
32 | def main(
   |     ^^^^ PLR0912
33 |     num_iteration,
34 |     num_elem_initialisation,
   |

src\dev_scripts\run_search_new.py:32:5: PLR0915 Too many statements (83 > 50)
   |
31 | # %%
32 | def main(
   |     ^^^^ PLR0915
33 |     num_iteration,
34 |     num_elem_initialisation,
   |

src\dev_scripts\run_search_new.py:32:5: D103 Missing docstring in public function
   |
31 | # %%
32 | def main(
   |     ^^^^ D103
33 |     num_iteration,
34 |     num_elem_initialisation,
   |

src\dev_scripts\run_search_new.py:46:5: FBT002 Boolean default positional argument in function definition
   |
44 |     df_path="",
45 |     df_representation_path="data/output/Prescursor_data/calculation_data_precursor_190923_clean.pkl",
46 |     benchmark=False,
   |     ^^^^^^^^^ FBT002
47 |     dataset_representation_path="",
48 |     frag_properties="all",
   |

src\dev_scripts\run_search_new.py:53:10: PTH123 `open()` should be replaced by `Path.open()`
   |
51 |     input_json = locals()
52 |     search_space_loc = "data/input/STK_search_space/search_space_test.pkl"
53 |     with open(search_space_loc, "rb") as f:
   |          ^^^^ PTH123
54 |         search_space = pickle.load(f)
55 |     # Load the searched space
   |

src\dev_scripts\run_search_new.py:54:24: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
52 |     search_space_loc = "data/input/STK_search_space/search_space_test.pkl"
53 |     with open(search_space_loc, "rb") as f:
54 |         search_space = pickle.load(f)
   |                        ^^^^^^^^^^^^^^ S301
55 |     # Load the searched space
56 |     print(" number of fragment", oligomer_size)
   |

src\dev_scripts\run_search_new.py:56:5: T201 `print` found
   |
54 |         search_space = pickle.load(f)
55 |     # Load the searched space
56 |     print(" number of fragment", oligomer_size)
   |     ^^^^^ T201
57 |     print(benchmark, "benchmark")
58 |     df_total = pd.read_csv(df_path)
   |
   = help: Remove `print`

src\dev_scripts\run_search_new.py:57:5: T201 `print` found
   |
55 |     # Load the searched space
56 |     print(" number of fragment", oligomer_size)
57 |     print(benchmark, "benchmark")
   |     ^^^^^ T201
58 |     df_total = pd.read_csv(df_path)
59 |     df_representation = pd.read_pickle(df_representation_path)
   |
   = help: Remove `print`

src\dev_scripts\run_search_new.py:59:25: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
57 |     print(benchmark, "benchmark")
58 |     df_total = pd.read_csv(df_path)
59 |     df_representation = pd.read_pickle(df_representation_path)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
60 | 
61 |     # get initial elements
   |

src\dev_scripts\run_search_new.py:68:9: T201 `print` found
   |
66 |     else:
67 |         objective_function = IP_ES1_fosc(oligomer_size)
68 |         print("objective function")
   |         ^^^^^ T201
69 |         dataset_representation_path = (
70 |             ""  # the dataset representation is only used for the benchmark
   |
   = help: Remove `print`

src\dev_scripts\run_search_new.py:72:5: T201 `print` found
   |
70 |             ""  # the dataset representation is only used for the benchmark
71 |         )
72 |     print(case, "  case  ")
   |     ^^^^^ T201
73 |     if case == "BO_precursor":
74 |         BO = BayesianOptimisation.BayesianOptimisation(
   |
   = help: Remove `print`

src\dev_scripts\run_search_new.py:74:9: N806 Variable `BO` in function should be lowercase
   |
72 |     print(case, "  case  ")
73 |     if case == "BO_precursor":
74 |         BO = BayesianOptimisation.BayesianOptimisation(
   |         ^^ N806
75 |             which_acquisition=which_acquisition, lim_counter=lim_counter
76 |         )
   |

src\dev_scripts\run_search_new.py:87:9: T201 `print` found
   |
85 |                 include=[np.number]
86 |             ).columns
87 |         print(frag_properties)
   |         ^^^^^ T201
88 |         BO.Representation = (
89 |             Representation_from_fragment.Representation_from_fragment(
   |
   = help: Remove `print`

src\dev_scripts\run_search_new.py:96:9: N806 Variable `BO` in function should be lowercase
   |
95 |     elif case == "BO_learned":
96 |         BO = BayesianOptimisation.BayesianOptimisation(
   |         ^^ N806
97 |             which_acquisition=which_acquisition, lim_counter=lim_counter
98 |         )
   |

src\dev_scripts\run_search_new.py:100:9: ERA001 Found commented-out code
    |
 98 |         )
 99 |         BO.verbose = True
100 |         # BO.normalise_input = False
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
101 |         BO.device = "cpu"  # "cuda:0" if torch.cuda.is_available() else "cpu"
102 |         BO.Representation = load_representation_BO_graph_frag(
    |
    = help: Remove commented-out code

src\dev_scripts\run_search_new.py:108:9: N806 Variable `BO` in function should be lowercase
    |
107 |     elif case == "BO_learned_new":
108 |         BO = BayesianOptimisation.BayesianOptimisation(
    |         ^^ N806
109 |             which_acquisition=which_acquisition, lim_counter=lim_counter
110 |         )
    |

src\dev_scripts\run_search_new.py:112:9: ERA001 Found commented-out code
    |
110 |         )
111 |         BO.verbose = True
112 |         # BO.normalise_input = False
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
113 |         BO.device = "cpu"  # "cuda:0" if torch.cuda.is_available() else "cpu"
114 |         BO.Representation, pymodel = load_representation_model(config_dir)
    |
    = help: Remove commented-out code

src\dev_scripts\run_search_new.py:119:9: N806 Variable `MFBO` in function should be lowercase
    |
118 |     elif case == "MFBO":
119 |         MFBO = MultifidelityBayesianOptimisation.MultifidelityBayesianOptimisation(
    |         ^^^^ N806
120 |             budget=budget,
121 |             which_acquisition=which_acquisition,
    |

src\dev_scripts\run_search_new.py:131:9: T201 `print` found
    |
129 |                 include=[np.number]
130 |             ).columns
131 |         print(frag_properties)
    |         ^^^^^ T201
132 |         MFBO.fidelity_col = len(frag_properties) * oligomer_size
133 |         MFBO.Representation = (
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:142:9: ERA001 Found commented-out code
    |
140 |         ea_surrogate = Ea_surrogate.Ea_surrogate()
141 |         ea_surrogate.verbose = True
142 |         # BO.normalise_input = False
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
143 |         ea_surrogate.device = (
144 |             "cpu"  # "cuda:0" if torch.cuda.is_available() else "cpu"
    |
    = help: Remove commented-out code

src\dev_scripts\run_search_new.py:170:15: TRY003 Avoid specifying long messages outside the exception class
    |
168 |         search_algorithm = ea_surrogate
169 |     else:
170 |         raise ValueError("case not recognised")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
171 | 
172 |     number_of_iterations = num_iteration
    |

src\dev_scripts\run_search_new.py:170:26: EM101 Exception must not use a string literal, assign to variable first
    |
168 |         search_algorithm = ea_surrogate
169 |     else:
170 |         raise ValueError("case not recognised")
    |                          ^^^^^^^^^^^^^^^^^^^^^ EM101
171 | 
172 |     number_of_iterations = num_iteration
    |
    = help: Assign to variable; remove string literal

src\dev_scripts\run_search_new.py:174:5: N806 Variable `S_exp` in function should be lowercase
    |
172 |     number_of_iterations = num_iteration
173 |     verbose = True
174 |     S_exp = SearchExp.SearchExp(
    |     ^^^^^ N806
175 |         search_space,
176 |         search_algorithm,
    |

src\dev_scripts\run_search_new.py:197:5: D103 Missing docstring in public function
    |
197 | def save_run_search_inputs(inputs, save_path="run_search_new_inputs.json"):
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
198 |     # Get the current git version
199 |     git_version = (
    |

src\dev_scripts\run_search_new.py:200:9: S603 `subprocess` call: check for execution of untrusted input
    |
198 |     # Get the current git version
199 |     git_version = (
200 |         subprocess.check_output(["git", "rev-parse", "HEAD"])
    |         ^^^^^^^^^^^^^^^^^^^^^^^ S603
201 |         .strip()
202 |         .decode("utf-8")
    |

src\dev_scripts\run_search_new.py:200:33: S607 Starting a process with a partial executable path
    |
198 |     # Get the current git version
199 |     git_version = (
200 |         subprocess.check_output(["git", "rev-parse", "HEAD"])
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
201 |         .strip()
202 |         .decode("utf-8")
    |

src\dev_scripts\run_search_new.py:209:10: PTH123 `open()` should be replaced by `Path.open()`
    |
208 |     # Save the inputs to a file
209 |     with open(save_path, "w") as f:
    |          ^^^^ PTH123
210 |         json.dump(inputs, f)
    |

src\dev_scripts\run_search_new.py:212:5: T201 `print` found
    |
210 |         json.dump(inputs, f)
211 | 
212 |     print("Inputs saved.")
    |     ^^^^^ T201
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:215:5: D103 Missing docstring in public function
    |
215 | def save_represention_dataset(config_dir, representation):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ D103
216 |     import datetime
    |

src\dev_scripts\run_search_new.py:222:11: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
220 |         f"{config['running_dir']}/{config['name']}" + "/transformer"
221 |     )
222 |     now = datetime.datetime.now().strftime("_%Y_%m_%d")
    |           ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
223 |     torch.save(
224 |         representation.dataset,
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\dev_scripts\run_search_new.py:230:5: N802 Function name `load_representation_BO_graph_frag` should be lowercase
    |
230 | def load_representation_BO_graph_frag(config_dir, df_total, dataset_path=""):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
231 |     import uuid
    |

src\dev_scripts\run_search_new.py:230:5: D103 Missing docstring in public function
    |
230 | def load_representation_BO_graph_frag(config_dir, df_total, dataset_path=""):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
231 |     import uuid
    |

src\dev_scripts\run_search_new.py:235:5: T201 `print` found
    |
233 |     repr_id = str(uuid.uuid4())
234 |     config = read_config(config_dir)
235 |     print(config["model_transformer_chkpt"])
    |     ^^^^^ T201
236 |     device = "cuda:0" if torch.cuda.is_available() else "cpu"
237 |     if os.path.exists(dataset_path):
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:237:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
235 |     print(config["model_transformer_chkpt"])
236 |     device = "cuda:0" if torch.cuda.is_available() else "cpu"
237 |     if os.path.exists(dataset_path):
    |        ^^^^^^^^^^^^^^ PTH110
238 |         print("loading representation from ", dataset_path)
239 |         data_list = torch.load(dataset_path, map_location=device)
    |

src\dev_scripts\run_search_new.py:238:9: T201 `print` found
    |
236 |     device = "cuda:0" if torch.cuda.is_available() else "cpu"
237 |     if os.path.exists(dataset_path):
238 |         print("loading representation from ", dataset_path)
    |         ^^^^^ T201
239 |         data_list = torch.load(dataset_path, map_location=device)
240 |         print("size of data list", len(data_list))
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:240:9: T201 `print` found
    |
238 |         print("loading representation from ", dataset_path)
239 |         data_list = torch.load(dataset_path, map_location=device)
240 |         print("size of data list", len(data_list))
    |         ^^^^^ T201
241 |     else:
242 |         print("no dataset found")
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:242:9: T201 `print` found
    |
240 |         print("size of data list", len(data_list))
241 |     else:
242 |         print("no dataset found")
    |         ^^^^^ T201
243 |         data_list = None
244 |         name = config["name"]
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:246:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
244 |         name = config["name"]
245 |         ephemeral_dir = config["ephemeral_path"] + f"/{name.replace('_','/')}/"
246 |         os.makedirs(ephemeral_dir + "/local_dataset", exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
247 |         save_dataset_path = (
248 |             ephemeral_dir + f"/local_dataset/local_dataset_new{repr_id}.pt"
    |

src\dev_scripts\run_search_new.py:250:5: N806 Variable `EncodingModel` in function should be lowercase
    |
248 |             ephemeral_dir + f"/local_dataset/local_dataset_new{repr_id}.pt"
249 |         )
250 |     EncodingModel = initialise_model(config)
    |     ^^^^^^^^^^^^^ N806
251 |     BO = BayesianOptimisation.BayesianOptimisation()
252 |     client = pymongo.MongoClient(config["pymongo_client"])
    |

src\dev_scripts\run_search_new.py:251:5: N806 Variable `BO` in function should be lowercase
    |
249 |         )
250 |     EncodingModel = initialise_model(config)
251 |     BO = BayesianOptimisation.BayesianOptimisation()
    |     ^^ N806
252 |     client = pymongo.MongoClient(config["pymongo_client"])
253 |     db_poly = stk.ConstructedMoleculeMongoDb(
    |

src\dev_scripts\run_search_new.py:261:5: N806 Variable `Representation` in function should be lowercase
    |
259 |         database=config["database_name"],
260 |     )
261 |     Representation = (
    |     ^^^^^^^^^^^^^^ N806
262 |         Representation_3d_from_fragment.Representation_3d_from_fragment(
263 |             EncodingModel,
    |

src\dev_scripts\run_search_new.py:271:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
269 |         )
270 |     )
271 |     if not os.path.exists(dataset_path):
    |            ^^^^^^^^^^^^^^ PTH110
272 |         Representation.save_dataset_path = save_dataset_path
273 |         Representation.db_name = config["name"]
    |

src\dev_scripts\run_search_new.py:277:5: N802 Function name `load_representation_model_SUEA` should be lowercase
    |
277 | def load_representation_model_SUEA(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
278 |     config_dir, df_total, dataset_path="", device="cpu"
279 | ):
    |

src\dev_scripts\run_search_new.py:277:5: D103 Missing docstring in public function
    |
277 | def load_representation_model_SUEA(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
278 |     config_dir, df_total, dataset_path="", device="cpu"
279 | ):
    |

src\dev_scripts\run_search_new.py:284:5: T201 `print` found
    |
282 |     repr_id = str(uuid.uuid4())
283 |     config = read_config(config_dir)
284 |     print(config["device"])
    |     ^^^^^ T201
285 |     device = "cuda:0" if torch.cuda.is_available() else "cpu"
286 |     if os.path.exists(dataset_path):
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:286:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
284 |     print(config["device"])
285 |     device = "cuda:0" if torch.cuda.is_available() else "cpu"
286 |     if os.path.exists(dataset_path):
    |        ^^^^^^^^^^^^^^ PTH110
287 |         data_list = torch.load(dataset_path, map_location=device)
288 |         print("size of data list", len(data_list))
    |

src\dev_scripts\run_search_new.py:288:9: T201 `print` found
    |
286 |     if os.path.exists(dataset_path):
287 |         data_list = torch.load(dataset_path, map_location=device)
288 |         print("size of data list", len(data_list))
    |         ^^^^^ T201
289 |     else:
290 |         data_list = None
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:293:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
291 |         name = config["name"]
292 |         ephemeral_dir = config["ephemeral_path"] + f"/{name.replace('_','/')}/"
293 |         os.makedirs(ephemeral_dir + "/local_dataset", exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
294 | 
295 |         save_dataset_path = (
    |

src\dev_scripts\run_search_new.py:316:5: N806 Variable `EncodingModel` in function should be lowercase
    |
314 |     )
315 |     pymodel.load_state_dict(state_dict["state_dict"])
316 |     EncodingModel = initialise_model(config)
    |     ^^^^^^^^^^^^^ N806
317 |     ## load search algorithm
318 |     ea_surrogate = Ea_surrogate.Ea_surrogate()
    |

src\dev_scripts\run_search_new.py:329:5: N806 Variable `Representation` in function should be lowercase
    |
327 |     )
328 |     pymodel.graph_pred_linear.eval()
329 |     Representation = (
    |     ^^^^^^^^^^^^^^ N806
330 |         Representation_3d_from_fragment.Representation_3d_from_fragment(
331 |             EncodingModel,
    |

src\dev_scripts\run_search_new.py:339:9: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
337 |         )
338 |     )
339 |     if ~os.path.exists(dataset_path):
    |         ^^^^^^^^^^^^^^ PTH110
340 |         Representation.save_dataset_path = save_dataset_path
341 |         Representation.db_name = config["name"]
    |

src\dev_scripts\run_search_new.py:346:5: D205 1 blank line required between summary line and description
    |
345 |   def load_representation_model(config_dir):
346 |       """New model representation for the search algorithm
    |  _____^
347 | |     Args:
348 | |         config_dir: str
349 | |             path to the config file
350 | |             Returns:
351 | |             representation: Representation_poly_3d
352 | |     pymodel: Pymodel
353 | |     """
    | |_______^ D205
354 |       from stk_search.geom3d import pl_model
355 |       from stk_search.Representation import Representation_poly_3d
    |
    = help: Insert single blank line

src\dev_scripts\run_search_new.py:346:5: D400 First line should end with a period
    |
345 |   def load_representation_model(config_dir):
346 |       """New model representation for the search algorithm
    |  _____^
347 | |     Args:
348 | |         config_dir: str
349 | |             path to the config file
350 | |             Returns:
351 | |             representation: Representation_poly_3d
352 | |     pymodel: Pymodel
353 | |     """
    | |_______^ D400
354 |       from stk_search.geom3d import pl_model
355 |       from stk_search.Representation import Representation_poly_3d
    |
    = help: Add period

src\dev_scripts\run_search_new.py:346:5: D401 First line of docstring should be in imperative mood: "New model representation for the search algorithm"
    |
345 |   def load_representation_model(config_dir):
346 |       """New model representation for the search algorithm
    |  _____^
347 | |     Args:
348 | |         config_dir: str
349 | |             path to the config file
350 | |             Returns:
351 | |             representation: Representation_poly_3d
352 | |     pymodel: Pymodel
353 | |     """
    | |_______^ D401
354 |       from stk_search.geom3d import pl_model
355 |       from stk_search.Representation import Representation_poly_3d
    |

src\dev_scripts\run_search_new.py:346:5: D415 First line should end with a period, question mark, or exclamation point
    |
345 |   def load_representation_model(config_dir):
346 |       """New model representation for the search algorithm
    |  _____^
347 | |     Args:
348 | |         config_dir: str
349 | |             path to the config file
350 | |             Returns:
351 | |             representation: Representation_poly_3d
352 | |     pymodel: Pymodel
353 | |     """
    | |_______^ D415
354 |       from stk_search.geom3d import pl_model
355 |       from stk_search.Representation import Representation_poly_3d
    |
    = help: Add closing punctuation

src\dev_scripts\run_search_new.py:361:5: T201 `print` found
    |
359 |     checkpoint = torch.load(chkpt_path, map_location=config["device"])
360 |     model, graph_pred_linear = pl_model.model_setup(config)
361 |     print("Model loaded: ", config["model_name"])
    |     ^^^^^ T201
362 |     # Pass the model and graph_pred_linear to the Pymodel constructor
363 |     pymodel = pl_model.Pymodel_new(model, graph_pred_linear, config)
    |
    = help: Remove `print`

src\dev_scripts\run_search_new.py:366:5: ERA001 Found commented-out code
    |
364 |     # Load the state dictionary
365 |     pymodel.load_state_dict(state_dict=checkpoint["state_dict"])
366 |     # pymodel.load_state_dict(state_dict=checkpoint["state_dict"])
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
367 |     pymodel.to(config["device"])
368 |     representation = Representation_poly_3d.Representation_poly_3d(
    |
    = help: Remove commented-out code

src\dev_scripts\run_search_test.py:1:1: INP001 File `src\dev_scripts\run_search_test.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\run_search_test.py:1:1: D100 Missing docstring in public module
src\dev_scripts\run_search_test.py:24:5: PLR0913 Too many arguments in function definition (9 > 5)
   |
23 | # %%
24 | def main(num_iteration, num_elem_initialisation, test_name="test",case="slatm",target_name="target",config_dir ="",aim=0,which_acquisition="EI",
   |     ^^^^ PLR0913
25 |                                                          lim_counter=2):
26 |     # Load the searched space
   |

src\dev_scripts\run_search_test.py:24:5: PLR0915 Too many statements (68 > 50)
   |
23 | # %%
24 | def main(num_iteration, num_elem_initialisation, test_name="test",case="slatm",target_name="target",config_dir ="",aim=0,which_acquisition="EI",
   |     ^^^^ PLR0915
25 |                                                          lim_counter=2):
26 |     # Load the searched space
   |

src\dev_scripts\run_search_test.py:24:5: D103 Missing docstring in public function
   |
23 | # %%
24 | def main(num_iteration, num_elem_initialisation, test_name="test",case="slatm",target_name="target",config_dir ="",aim=0,which_acquisition="EI",
   |     ^^^^ D103
25 |                                                          lim_counter=2):
26 |     # Load the searched space
   |

src\dev_scripts\run_search_test.py:39:9: N806 Variable `BO` in function should be lowercase
   |
38 |     if case == "slatm":
39 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
40 |         BO.Representation = Representation_slatm.Representation_slatm()
41 |         BO.PCA_input = True
   |

src\dev_scripts\run_search_test.py:44:9: N806 Variable `BO` in function should be lowercase
   |
42 |         search_algorithm = BO
43 |     elif case == "slatm_org":
44 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
45 |         BO.Representation = Representation_slatm.Representation_slatm_org(df_total)
46 |         BO.PCA_input = True
   |

src\dev_scripts\run_search_test.py:49:9: N806 Variable `BO` in function should be lowercase
   |
47 |         search_algorithm = BO
48 |     elif case == "precursor":
49 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
50 |         frag_properties = []
51 |         frag_properties = df_precursors.columns[1:7]
   |

src\dev_scripts\run_search_test.py:53:9: T201 `print` found
   |
51 |         frag_properties = df_precursors.columns[1:7]
52 |         frag_properties = frag_properties.append(df_precursors.columns[17:23])
53 |         print(frag_properties)
   |         ^^^^^ T201
54 |         BO.Representation = RepresentationPrecursor.RepresentationPrecursor(
55 |             df_precursors, frag_properties
   |
   = help: Remove `print`

src\dev_scripts\run_search_test.py:59:9: ERA001 Found commented-out code
   |
57 |         search_algorithm = BO
58 |     elif case == "graph_frag":
59 |         #config_dir = "/rds/general/user/ma11115/home/Geom3D/Geom3D/training/SchNet_Trans_80K"
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
60 |         BO = Bayesian_Optimisation.Bayesian_Optimisation(which_acquisition=which_acquisition,
61 |                                                          lim_counter=lim_counter)
   |
   = help: Remove commented-out code

src\dev_scripts\run_search_test.py:60:9: N806 Variable `BO` in function should be lowercase
   |
58 |     elif case == "graph_frag":
59 |         #config_dir = "/rds/general/user/ma11115/home/Geom3D/Geom3D/training/SchNet_Trans_80K"
60 |         BO = Bayesian_Optimisation.Bayesian_Optimisation(which_acquisition=which_acquisition,
   |         ^^ N806
61 |                                                          lim_counter=lim_counter)
   |

src\dev_scripts\run_search_test.py:68:9: ERA001 Found commented-out code
   |
66 |         BO.Representation =  load_representation_BO_graph_frag(config_dir,df_total)
67 |         search_algorithm = BO
68 |         #X_explored_frag = BO.Representation.generate_repr(searched_space_df.iloc[inds])
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
69 |     elif case == "graph_geom":
70 |         #config_dir = "/rds/general/user/ma11115/home/Geom3D/Geom3D/training/SchNet_Trans_80K"
   |
   = help: Remove commented-out code

src\dev_scripts\run_search_test.py:70:9: ERA001 Found commented-out code
   |
68 |         #X_explored_frag = BO.Representation.generate_repr(searched_space_df.iloc[inds])
69 |     elif case == "graph_geom":
70 |         #config_dir = "/rds/general/user/ma11115/home/Geom3D/Geom3D/training/SchNet_Trans_80K"
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
71 |         config = read_config(config_dir)
72 |         pymodel = Pymodel.load_from_checkpoint(config["model_embedding_chkpt"])
   |
   = help: Remove commented-out code

src\dev_scripts\run_search_test.py:76:9: N806 Variable `BO` in function should be lowercase
   |
74 |         pymodel.to(config["device"] )
75 |         model_embedding = pymodel.molecule_3D_repr
76 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
77 |         client = pymongo.MongoClient(config["pymongo_client"])
78 |         db_poly = stk.ConstructedMoleculeMongoDb(
   |

src\dev_scripts\run_search_test.py:101:15: TRY003 Avoid specifying long messages outside the exception class
    |
 99 |         search_algorithm = ea_surrogate
100 |     else:
101 |         raise ValueError("case not recognised")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
102 | 
103 |     number_of_iterations = num_iteration
    |

src\dev_scripts\run_search_test.py:101:26: EM101 Exception must not use a string literal, assign to variable first
    |
 99 |         search_algorithm = ea_surrogate
100 |     else:
101 |         raise ValueError("case not recognised")
    |                          ^^^^^^^^^^^^^^^^^^^^^ EM101
102 | 
103 |     number_of_iterations = num_iteration
    |
    = help: Assign to variable; remove string literal

src\dev_scripts\run_search_test.py:105:5: PLW0127 Self-assignment of variable `num_elem_initialisation`
    |
103 |     number_of_iterations = num_iteration
104 |     verbose = True
105 |     num_elem_initialisation = num_elem_initialisation
    |     ^^^^^^^^^^^^^^^^^^^^^^^ PLW0127
106 |     S_exp = SearchExp.Search_exp(
107 |         search_space_loc,
    |

src\dev_scripts\run_search_test.py:106:5: N806 Variable `S_exp` in function should be lowercase
    |
104 |     verbose = True
105 |     num_elem_initialisation = num_elem_initialisation
106 |     S_exp = SearchExp.Search_exp(
    |     ^^^^^ N806
107 |         search_space_loc,
108 |         search_algorithm,
    |

src\dev_scripts\run_search_test.py:118:8: PLR1714 Consider merging multiple comparisons. Use a `set` if the elements are hashable.
    |
116 |     S_exp.df_total = df_total
117 |     S_exp.run_seach()
118 |     if case == "graph_geom" or case == "graph_frag" or case == "ea_surrogate":
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR1714
119 |         save_represention_dataset(config_dir,search_algorithm.Representation)
    |
    = help: Merge multiple comparisons

src\dev_scripts\run_search_test.py:122:5: D103 Missing docstring in public function
    |
122 | def save_represention_dataset(config_dir,representataion):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ D103
123 |     config = read_config(config_dir)
124 |     representation_dir = f"{config['running_dir']}/{config['name']}" + "_frag_" + str(config["number_of_fragement"])
    |

src\dev_scripts\run_search_test.py:128:5: N802 Function name `load_representation_BO_graph_frag` should be lowercase
    |
128 | def load_representation_BO_graph_frag(config_dir,df_total):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
129 |     config = read_config(config_dir)
130 |     print(config["model_transformer_chkpt"])
    |

src\dev_scripts\run_search_test.py:128:5: D103 Missing docstring in public function
    |
128 | def load_representation_BO_graph_frag(config_dir,df_total):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
129 |     config = read_config(config_dir)
130 |     print(config["model_transformer_chkpt"])
    |

src\dev_scripts\run_search_test.py:130:5: T201 `print` found
    |
128 | def load_representation_BO_graph_frag(config_dir,df_total):
129 |     config = read_config(config_dir)
130 |     print(config["model_transformer_chkpt"])
    |     ^^^^^ T201
131 |     representation_dir = f"{config['running_dir']}/{config['name']}" + "_frag_" + str(config["number_of_fragement"])
132 |     print("load representation from ",representation_dir)
    |
    = help: Remove `print`

src\dev_scripts\run_search_test.py:132:5: T201 `print` found
    |
130 |     print(config["model_transformer_chkpt"])
131 |     representation_dir = f"{config['running_dir']}/{config['name']}" + "_frag_" + str(config["number_of_fragement"])
132 |     print("load representation from ",representation_dir)
    |     ^^^^^ T201
133 |     data_list = torch.load( representation_dir + "/dataset_representation.pt")
134 |     print("size of data list",len(data_list))
    |
    = help: Remove `print`

src\dev_scripts\run_search_test.py:134:5: T201 `print` found
    |
132 |     print("load representation from ",representation_dir)
133 |     data_list = torch.load( representation_dir + "/dataset_representation.pt")
134 |     print("size of data list",len(data_list))
    |     ^^^^^ T201
135 |     EncodingModel = initialise_model(config)
136 |     BO = Bayesian_Optimisation.Bayesian_Optimisation()
    |
    = help: Remove `print`

src\dev_scripts\run_search_test.py:135:5: N806 Variable `EncodingModel` in function should be lowercase
    |
133 |     data_list = torch.load( representation_dir + "/dataset_representation.pt")
134 |     print("size of data list",len(data_list))
135 |     EncodingModel = initialise_model(config)
    |     ^^^^^^^^^^^^^ N806
136 |     BO = Bayesian_Optimisation.Bayesian_Optimisation()
137 |     client = pymongo.MongoClient(config["pymongo_client"])
    |

src\dev_scripts\run_search_test.py:136:5: N806 Variable `BO` in function should be lowercase
    |
134 |     print("size of data list",len(data_list))
135 |     EncodingModel = initialise_model(config)
136 |     BO = Bayesian_Optimisation.Bayesian_Optimisation()
    |     ^^ N806
137 |     client = pymongo.MongoClient(config["pymongo_client"])
138 |     db_poly = stk.ConstructedMoleculeMongoDb(
    |

src\dev_scripts\run_search_test.py:146:5: N806 Variable `Representation` in function should be lowercase
    |
144 |         database=config["database_name"],
145 |     )
146 |     Representation = Represenation_3D.Representation3DFrag_transformer(EncodingModel,df_total,data=data_list,db_poly=db_poly,db_frag=db_frag,device=BO.device)
    |     ^^^^^^^^^^^^^^ N806
147 |     return Representation
    |

src\dev_scripts\run_search_test.py:147:12: RET504 Unnecessary assignment to `Representation` before `return` statement
    |
145 |     )
146 |     Representation = Represenation_3D.Representation3DFrag_transformer(EncodingModel,df_total,data=data_list,db_poly=db_poly,db_frag=db_frag,device=BO.device)
147 |     return Representation
    |            ^^^^^^^^^^^^^^ RET504
148 | 
149 | def load_representation_model_SUEA(config_dir,df_total):
    |
    = help: Remove unnecessary assignment

src\dev_scripts\run_search_test.py:149:5: N802 Function name `load_representation_model_SUEA` should be lowercase
    |
147 |     return Representation
148 | 
149 | def load_representation_model_SUEA(config_dir,df_total):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
150 |     config = read_config(config_dir)
151 |     representation_dir = f"{config['running_dir']}/{config['name']}" + "_frag_" + str(config["number_of_fragement"])
    |

src\dev_scripts\run_search_test.py:149:5: D103 Missing docstring in public function
    |
147 |     return Representation
148 | 
149 | def load_representation_model_SUEA(config_dir,df_total):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
150 |     config = read_config(config_dir)
151 |     representation_dir = f"{config['running_dir']}/{config['name']}" + "_frag_" + str(config["number_of_fragement"])
    |

src\dev_scripts\run_search_test.py:169:5: N806 Variable `EncodingModel` in function should be lowercase
    |
167 |     state_dict = torch.load(config["model_embedding_chkpt"],map_location=torch.device("cpu"))
168 |     pymodel.load_state_dict(state_dict["state_dict"])
169 |     EncodingModel = initialise_model(config)
    |     ^^^^^^^^^^^^^ N806
170 |     ## load search algorithm
171 |     ea_surrogate = Ea_surrogate.Ea_surrogate()
    |

src\dev_scripts\run_search_test.py:182:5: N806 Variable `Representation` in function should be lowercase
    |
180 |     )
181 |     pymodel.graph_pred_linear.eval()
182 |     Representation=Represenation_3D.Representation3DFrag_transformer(EncodingModel,df_total,data=data_list,db_poly=db_poly,db_frag=db_frag,device=ea_surrogate.device)
    |     ^^^^^^^^^^^^^^ N806
183 |     return pymodel,Representation
    |

src\dev_scripts\test_BO.py:1:1: INP001 File `src\dev_scripts\test_BO.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\test_BO.py:1:1: D100 Missing docstring in public module
src\dev_scripts\test_BO.py:20:5: D103 Missing docstring in public function
   |
18 | # %%
19 | # Load the searched space
20 | def load_data():
   |     ^^^^^^^^^ D103
21 |     df_path = "data/output/Full_datatset/df_total_new2023_08_20.csv"
22 |     df_precursors_path = "data/output/Prescursor_data/calculation_data_precursor_190923_clean.pkl"  #'Data/output/Prescursor_data/calculation_data_precursor_310823_clean.pkl'
   |

src\dev_scripts\test_BO.py:26:5: N806 Variable `SP` in function should be lowercase
   |
24 |         df_path, df_precursors_path
25 |     )
26 |     SP = Searched_pace.Searched_Space(
   |     ^^ N806
27 |         number_of_fragments=6,
28 |         df=df_precursors,
   |

src\dev_scripts\test_BO.py:26:10: F821 Undefined name `Searched_pace`
   |
24 |         df_path, df_precursors_path
25 |     )
26 |     SP = Searched_pace.Searched_Space(
   |          ^^^^^^^^^^^^^ F821
27 |         number_of_fragments=6,
28 |         df=df_precursors,
   |

src\dev_scripts\test_BO.py:33:24: PD011 Use `.to_numpy()` instead of `.values`
   |
31 |     )
32 |     searched_space_df = SP.check_df_for_element_from_sp(df_to_check=df_total)
33 |     fitness_acquired = searched_space_df["target"].values
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
34 |     searched_space_df_InChIKey = searched_space_df[["InChIKey"]]
35 |     searched_space_df = searched_space_df[[f"InChIKey_{x}" for x in range(6)]]
   |

src\dev_scripts\test_BO.py:34:5: N806 Variable `searched_space_df_InChIKey` in function should be lowercase
   |
32 |     searched_space_df = SP.check_df_for_element_from_sp(df_to_check=df_total)
33 |     fitness_acquired = searched_space_df["target"].values
34 |     searched_space_df_InChIKey = searched_space_df[["InChIKey"]]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ N806
35 |     searched_space_df = searched_space_df[[f"InChIKey_{x}" for x in range(6)]]
36 |     return df_total, df_precursors, searched_space_df, fitness_acquired, searched_space_df_InChIKey
   |

src\dev_scripts\test_BO.py:39:5: D103 Missing docstring in public function
   |
39 | def prepare_run(case, df_precursors, df_total, searched_space_df_InChIKey):
   |     ^^^^^^^^^^^ D103
40 |     if case == "slatm":
41 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |

src\dev_scripts\test_BO.py:39:48: N803 Argument name `searched_space_df_InChIKey` should be lowercase
   |
39 | def prepare_run(case, df_precursors, df_total, searched_space_df_InChIKey):
   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ N803
40 |     if case == "slatm":
41 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |

src\dev_scripts\test_BO.py:41:9: N806 Variable `BO` in function should be lowercase
   |
39 | def prepare_run(case, df_precursors, df_total, searched_space_df_InChIKey):
40 |     if case == "slatm":
41 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
42 |         BO.Representation = Representation_slatm.Representation_slatm()
43 |     elif case == "slatm_org":
   |

src\dev_scripts\test_BO.py:44:9: N806 Variable `BO` in function should be lowercase
   |
42 |         BO.Representation = Representation_slatm.Representation_slatm()
43 |     elif case == "slatm_org":
44 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
45 |         BO.Representation = Representation_slatm.Representation_slatm_org(df_total, searched_space_df_InChIKey)
46 |     elif case == "precursor":
   |

src\dev_scripts\test_BO.py:47:9: N806 Variable `BO` in function should be lowercase
   |
45 |         BO.Representation = Representation_slatm.Representation_slatm_org(df_total, searched_space_df_InChIKey)
46 |     elif case == "precursor":
47 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
48 |         frag_properties = []
49 |         frag_properties = df_precursors.columns[1:7]
   |

src\dev_scripts\test_BO.py:51:9: T201 `print` found
   |
49 |         frag_properties = df_precursors.columns[1:7]
50 |         frag_properties = frag_properties.append(df_precursors.columns[17:23])
51 |         print(frag_properties)
   |         ^^^^^ T201
52 |         BO.Representation = RepresentationPrecursor.RepresentationPrecursor(
53 |             df_precursors, frag_properties
   |
   = help: Remove `print`

src\dev_scripts\test_BO.py:56:15: TRY003 Avoid specifying long messages outside the exception class
   |
54 |         )
55 |     else:
56 |         raise ValueError("case not recognised")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
57 | 
58 |     BO.verbose = True
   |

src\dev_scripts\test_BO.py:56:26: EM101 Exception must not use a string literal, assign to variable first
   |
54 |         )
55 |     else:
56 |         raise ValueError("case not recognised")
   |                          ^^^^^^^^^^^^^^^^^^^^^ EM101
57 | 
58 |     BO.verbose = True
   |
   = help: Assign to variable; remove string literal

src\dev_scripts\test_BO.py:60:5: F841 Local variable `test_set_size` is assigned to but never used
   |
58 |     BO.verbose = True
59 | 
60 |     test_set_size = 0.9
   |     ^^^^^^^^^^^^^ F841
61 |     return BO
   |
   = help: Remove assignment to unused variable `test_set_size`

src\dev_scripts\test_BO.py:64:5: N802 Function name `run_training_BO_torch` should be lowercase
   |
64 | def run_training_BO_torch(
   |     ^^^^^^^^^^^^^^^^^^^^^ N802
65 |     BO, kernel_name, test_BO_dict, count, searched_space_df,test_set_size, case, data, pca_N
66 | ):
   |

src\dev_scripts\test_BO.py:64:5: PLR0913 Too many arguments in function definition (9 > 5)
   |
64 | def run_training_BO_torch(
   |     ^^^^^^^^^^^^^^^^^^^^^ PLR0913
65 |     BO, kernel_name, test_BO_dict, count, searched_space_df,test_set_size, case, data, pca_N
66 | ):
   |

src\dev_scripts\test_BO.py:64:5: D103 Missing docstring in public function
   |
64 | def run_training_BO_torch(
   |     ^^^^^^^^^^^^^^^^^^^^^ D103
65 |     BO, kernel_name, test_BO_dict, count, searched_space_df,test_set_size, case, data, pca_N
66 | ):
   |

src\dev_scripts\test_BO.py:65:5: N803 Argument name `BO` should be lowercase
   |
64 | def run_training_BO_torch(
65 |     BO, kernel_name, test_BO_dict, count, searched_space_df,test_set_size, case, data, pca_N
   |     ^^ N803
66 | ):
67 |     class test_kernel(SingleTaskGP):
   |

src\dev_scripts\test_BO.py:65:22: N803 Argument name `test_BO_dict` should be lowercase
   |
64 | def run_training_BO_torch(
65 |     BO, kernel_name, test_BO_dict, count, searched_space_df,test_set_size, case, data, pca_N
   |                      ^^^^^^^^^^^^ N803
66 | ):
67 |     class test_kernel(SingleTaskGP):
   |

src\dev_scripts\test_BO.py:65:88: N803 Argument name `pca_N` should be lowercase
   |
64 | def run_training_BO_torch(
65 |     BO, kernel_name, test_BO_dict, count, searched_space_df,test_set_size, case, data, pca_N
   |                                                                                        ^^^^^ N803
66 | ):
67 |     class test_kernel(SingleTaskGP):
   |

src\dev_scripts\test_BO.py:67:11: N801 Class name `test_kernel` should use CapWords convention
   |
65 |     BO, kernel_name, test_BO_dict, count, searched_space_df,test_set_size, case, data, pca_N
66 | ):
67 |     class test_kernel(SingleTaskGP):
   |           ^^^^^^^^^^^ N801
68 |         def __init__(self, train_X, train_Y):
69 |             super().__init__(train_X, train_Y, GaussianLikelihood())
   |

src\dev_scripts\test_BO.py:68:13: ANN204 Missing return type annotation for special method `__init__`
   |
66 | ):
67 |     class test_kernel(SingleTaskGP):
68 |         def __init__(self, train_X, train_Y):
   |             ^^^^^^^^ ANN204
69 |             super().__init__(train_X, train_Y, GaussianLikelihood())
70 |             self.mean_module = ConstantMean()
   |
   = help: Add return type annotation: `None`

src\dev_scripts\test_BO.py:68:28: N803 Argument name `train_X` should be lowercase
   |
66 | ):
67 |     class test_kernel(SingleTaskGP):
68 |         def __init__(self, train_X, train_Y):
   |                            ^^^^^^^ N803
69 |             super().__init__(train_X, train_Y, GaussianLikelihood())
70 |             self.mean_module = ConstantMean()
   |

src\dev_scripts\test_BO.py:68:37: N803 Argument name `train_Y` should be lowercase
   |
66 | ):
67 |     class test_kernel(SingleTaskGP):
68 |         def __init__(self, train_X, train_Y):
   |                                     ^^^^^^^ N803
69 |             super().__init__(train_X, train_Y, GaussianLikelihood())
70 |             self.mean_module = ConstantMean()
   |

src\dev_scripts\test_BO.py:76:13: ANN202 Missing return type annotation for private function `change_kernel`
   |
74 |             self.to(train_X)  # make sure we're on the right device/dtype
75 | 
76 |         def change_kernel(self, kernel):
   |             ^^^^^^^^^^^^^ ANN202
77 |             self.covar_module = ScaleKernel(base_kernel=kernel)
   |
   = help: Add return type annotation: `None`

src\dev_scripts\test_BO.py:79:13: ANN202 Missing return type annotation for private function `forward`
   |
77 |             self.covar_module = ScaleKernel(base_kernel=kernel)
78 | 
79 |         def forward(self, x):
   |             ^^^^^^^ ANN202
80 |             mean_x = self.mean_module(x)
81 |             covar_x = self.covar_module(x)
   |
   = help: Add return type annotation

src\dev_scripts\test_BO.py:91:37: SLF001 Private member accessed: `_get_name`
   |
89 |     test_BO_dict[count]["test_set_size"] = test_set_size
90 |     test_BO_dict[count]["case"] = case
91 |     test_BO_dict[count]["kernel"] = kernel_name._get_name()  #'MaternKernel'
   |                                     ^^^^^^^^^^^^^^^^^^^^^ SLF001
92 |     test_BO_dict[count]["model_training"] = "Botorch"
93 |     test_BO_dict[count]["train_size"] = searched_space_df.shape[0] * (
   |

src\dev_scripts\test_BO.py:99:5: T201 `print` found
    |
 97 |         searched_space_df.shape[0] * (test_set_size)
 98 |     )
 99 |     print("Training size", data["X_train"].shape)
    |     ^^^^^ T201
100 |     # %%
    |
    = help: Remove `print`

src\dev_scripts\test_BO.py:122:11: SLF001 Private member accessed: `_get_name`
    |
120 |         + str(data["X_test"].shape[0])
121 |         + "_kernel_"
122 |         + kernel_name._get_name()
    |           ^^^^^^^^^^^^^^^^^^^^^ SLF001
123 |         + "_botorch.png"
124 |     )
    |

src\dev_scripts\test_BO.py:139:5: PLR0913 Too many arguments in function definition (9 > 5)
    |
139 | def run_training_gpytorch(
    |     ^^^^^^^^^^^^^^^^^^^^^ PLR0913
140 |     BO, kernel_name, test_BO_dict, count, searched_space_df, test_set_size, case, data, pca_N
141 | ):
    |

src\dev_scripts\test_BO.py:139:5: D103 Missing docstring in public function
    |
139 | def run_training_gpytorch(
    |     ^^^^^^^^^^^^^^^^^^^^^ D103
140 |     BO, kernel_name, test_BO_dict, count, searched_space_df, test_set_size, case, data, pca_N
141 | ):
    |

src\dev_scripts\test_BO.py:140:5: N803 Argument name `BO` should be lowercase
    |
139 | def run_training_gpytorch(
140 |     BO, kernel_name, test_BO_dict, count, searched_space_df, test_set_size, case, data, pca_N
    |     ^^ N803
141 | ):
142 |     class test_kernel(SingleTaskGP):
    |

src\dev_scripts\test_BO.py:140:22: N803 Argument name `test_BO_dict` should be lowercase
    |
139 | def run_training_gpytorch(
140 |     BO, kernel_name, test_BO_dict, count, searched_space_df, test_set_size, case, data, pca_N
    |                      ^^^^^^^^^^^^ N803
141 | ):
142 |     class test_kernel(SingleTaskGP):
    |

src\dev_scripts\test_BO.py:140:89: N803 Argument name `pca_N` should be lowercase
    |
139 | def run_training_gpytorch(
140 |     BO, kernel_name, test_BO_dict, count, searched_space_df, test_set_size, case, data, pca_N
    |                                                                                         ^^^^^ N803
141 | ):
142 |     class test_kernel(SingleTaskGP):
    |

src\dev_scripts\test_BO.py:142:11: N801 Class name `test_kernel` should use CapWords convention
    |
140 |     BO, kernel_name, test_BO_dict, count, searched_space_df, test_set_size, case, data, pca_N
141 | ):
142 |     class test_kernel(SingleTaskGP):
    |           ^^^^^^^^^^^ N801
143 |         def __init__(self, train_X, train_Y):
144 |             super().__init__(train_X, train_Y, GaussianLikelihood())
    |

src\dev_scripts\test_BO.py:143:13: ANN204 Missing return type annotation for special method `__init__`
    |
141 | ):
142 |     class test_kernel(SingleTaskGP):
143 |         def __init__(self, train_X, train_Y):
    |             ^^^^^^^^ ANN204
144 |             super().__init__(train_X, train_Y, GaussianLikelihood())
145 |             self.mean_module = ConstantMean()
    |
    = help: Add return type annotation: `None`

src\dev_scripts\test_BO.py:143:28: N803 Argument name `train_X` should be lowercase
    |
141 | ):
142 |     class test_kernel(SingleTaskGP):
143 |         def __init__(self, train_X, train_Y):
    |                            ^^^^^^^ N803
144 |             super().__init__(train_X, train_Y, GaussianLikelihood())
145 |             self.mean_module = ConstantMean()
    |

src\dev_scripts\test_BO.py:143:37: N803 Argument name `train_Y` should be lowercase
    |
141 | ):
142 |     class test_kernel(SingleTaskGP):
143 |         def __init__(self, train_X, train_Y):
    |                                     ^^^^^^^ N803
144 |             super().__init__(train_X, train_Y, GaussianLikelihood())
145 |             self.mean_module = ConstantMean()
    |

src\dev_scripts\test_BO.py:151:13: ANN202 Missing return type annotation for private function `change_kernel`
    |
149 |             self.to(train_X)  # make sure we're on the right device/dtype
150 | 
151 |         def change_kernel(self, kernel):
    |             ^^^^^^^^^^^^^ ANN202
152 |             self.covar_module = ScaleKernel(base_kernel=kernel)
    |
    = help: Add return type annotation: `None`

src\dev_scripts\test_BO.py:154:13: ANN202 Missing return type annotation for private function `forward`
    |
152 |             self.covar_module = ScaleKernel(base_kernel=kernel)
153 | 
154 |         def forward(self, x):
    |             ^^^^^^^ ANN202
155 |             mean_x = self.mean_module(x)
156 |             covar_x = self.covar_module(x)
    |
    = help: Add return type annotation

src\dev_scripts\test_BO.py:166:37: SLF001 Private member accessed: `_get_name`
    |
164 |     test_BO_dict[count]["test_set_size"] = test_set_size
165 |     test_BO_dict[count]["case"] = case
166 |     test_BO_dict[count]["kernel"] = kernel_name._get_name()  #'MaternKernel'
    |                                     ^^^^^^^^^^^^^^^^^^^^^ SLF001
167 |     test_BO_dict[count]["model_training"] = "gpytorch"
168 |     test_BO_dict[count]["train_size"] = searched_space_df.shape[0] * (
    |

src\dev_scripts\test_BO.py:182:11: SLF001 Private member accessed: `_get_name`
    |
180 |         + str(data["X_test"].shape[0])
181 |         + "_kernel_"
182 |         + kernel_name._get_name()
    |           ^^^^^^^^^^^^^^^^^^^^^ SLF001
183 |         + "_gpytorch.png"
184 |     )
    |

src\dev_scripts\test_BO.py:210:5: D103 Missing docstring in public function
    |
210 | def prepare_data(case, X_train, X_test,PCA_n=100):
    |     ^^^^^^^^^^^^ D103
211 |     if case == "slatm" or case == "slatm_org":
212 |         pca = PCA(n_components=PCA_n)
    |

src\dev_scripts\test_BO.py:210:24: N803 Argument name `X_train` should be lowercase
    |
210 | def prepare_data(case, X_train, X_test,PCA_n=100):
    |                        ^^^^^^^ N803
211 |     if case == "slatm" or case == "slatm_org":
212 |         pca = PCA(n_components=PCA_n)
    |

src\dev_scripts\test_BO.py:210:33: N803 Argument name `X_test` should be lowercase
    |
210 | def prepare_data(case, X_train, X_test,PCA_n=100):
    |                                 ^^^^^^ N803
211 |     if case == "slatm" or case == "slatm_org":
212 |         pca = PCA(n_components=PCA_n)
    |

src\dev_scripts\test_BO.py:210:40: N803 Argument name `PCA_n` should be lowercase
    |
210 | def prepare_data(case, X_train, X_test,PCA_n=100):
    |                                        ^^^^^ N803
211 |     if case == "slatm" or case == "slatm_org":
212 |         pca = PCA(n_components=PCA_n)
    |

src\dev_scripts\test_BO.py:211:8: PLR1714 Consider merging multiple comparisons: `case in ("slatm", "slatm_org")`. Use a `set` if the elements are hashable.
    |
210 | def prepare_data(case, X_train, X_test,PCA_n=100):
211 |     if case == "slatm" or case == "slatm_org":
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR1714
212 |         pca = PCA(n_components=PCA_n)
213 |         pca.fit(X_test[:5000])
    |
    = help: Merge multiple comparisons

src\dev_scripts\test_BO.py:214:9: N806 Variable `X_train` in function should be lowercase
    |
212 |         pca = PCA(n_components=PCA_n)
213 |         pca.fit(X_test[:5000])
214 |         X_train = pca.transform(X_train)
    |         ^^^^^^^ N806
215 |         X_test = pca.transform(X_test)
216 |     X_train = torch.tensor(X_train, dtype=torch.float64)
    |

src\dev_scripts\test_BO.py:215:9: N806 Variable `X_test` in function should be lowercase
    |
213 |         pca.fit(X_test[:5000])
214 |         X_train = pca.transform(X_train)
215 |         X_test = pca.transform(X_test)
    |         ^^^^^^ N806
216 |     X_train = torch.tensor(X_train, dtype=torch.float64)
217 |     X_test = torch.tensor(X_test, dtype=torch.float64)
    |

src\dev_scripts\test_BO.py:216:5: N806 Variable `X_train` in function should be lowercase
    |
214 |         X_train = pca.transform(X_train)
215 |         X_test = pca.transform(X_test)
216 |     X_train = torch.tensor(X_train, dtype=torch.float64)
    |     ^^^^^^^ N806
217 |     X_test = torch.tensor(X_test, dtype=torch.float64)
218 |     X_train = (X_train - X_test.min(axis=0).values) / (
    |

src\dev_scripts\test_BO.py:217:5: N806 Variable `X_test` in function should be lowercase
    |
215 |         X_test = pca.transform(X_test)
216 |     X_train = torch.tensor(X_train, dtype=torch.float64)
217 |     X_test = torch.tensor(X_test, dtype=torch.float64)
    |     ^^^^^^ N806
218 |     X_train = (X_train - X_test.min(axis=0).values) / (
219 |         X_test.max(axis=0).values - X_test.min(axis=0).values
    |

src\dev_scripts\test_BO.py:218:5: N806 Variable `X_train` in function should be lowercase
    |
216 |     X_train = torch.tensor(X_train, dtype=torch.float64)
217 |     X_test = torch.tensor(X_test, dtype=torch.float64)
218 |     X_train = (X_train - X_test.min(axis=0).values) / (
    |     ^^^^^^^ N806
219 |         X_test.max(axis=0).values - X_test.min(axis=0).values
220 |     )
    |

src\dev_scripts\test_BO.py:218:26: PD011 Use `.to_numpy()` instead of `.values`
    |
216 |     X_train = torch.tensor(X_train, dtype=torch.float64)
217 |     X_test = torch.tensor(X_test, dtype=torch.float64)
218 |     X_train = (X_train - X_test.min(axis=0).values) / (
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
219 |         X_test.max(axis=0).values - X_test.min(axis=0).values
220 |     )
    |

src\dev_scripts\test_BO.py:219:9: PD011 Use `.to_numpy()` instead of `.values`
    |
217 |     X_test = torch.tensor(X_test, dtype=torch.float64)
218 |     X_train = (X_train - X_test.min(axis=0).values) / (
219 |         X_test.max(axis=0).values - X_test.min(axis=0).values
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
220 |     )
221 |     X_test = (X_test - X_test.min(axis=0).values) / (
    |

src\dev_scripts\test_BO.py:219:37: PD011 Use `.to_numpy()` instead of `.values`
    |
217 |     X_test = torch.tensor(X_test, dtype=torch.float64)
218 |     X_train = (X_train - X_test.min(axis=0).values) / (
219 |         X_test.max(axis=0).values - X_test.min(axis=0).values
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
220 |     )
221 |     X_test = (X_test - X_test.min(axis=0).values) / (
    |

src\dev_scripts\test_BO.py:221:5: N806 Variable `X_test` in function should be lowercase
    |
219 |         X_test.max(axis=0).values - X_test.min(axis=0).values
220 |     )
221 |     X_test = (X_test - X_test.min(axis=0).values) / (
    |     ^^^^^^ N806
222 |         X_test.max(axis=0).values - X_test.min(axis=0).values
223 |     )
    |

src\dev_scripts\test_BO.py:221:24: PD011 Use `.to_numpy()` instead of `.values`
    |
219 |         X_test.max(axis=0).values - X_test.min(axis=0).values
220 |     )
221 |     X_test = (X_test - X_test.min(axis=0).values) / (
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
222 |         X_test.max(axis=0).values - X_test.min(axis=0).values
223 |     )
    |

src\dev_scripts\test_BO.py:222:9: PD011 Use `.to_numpy()` instead of `.values`
    |
220 |     )
221 |     X_test = (X_test - X_test.min(axis=0).values) / (
222 |         X_test.max(axis=0).values - X_test.min(axis=0).values
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
223 |     )
224 |     return X_train, X_test
    |

src\dev_scripts\test_BO.py:222:37: PD011 Use `.to_numpy()` instead of `.values`
    |
220 |     )
221 |     X_test = (X_test - X_test.min(axis=0).values) / (
222 |         X_test.max(axis=0).values - X_test.min(axis=0).values
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
223 |     )
224 |     return X_train, X_test
    |

src\dev_scripts\test_BO.py:227:5: D103 Missing docstring in public function
    |
227 | def save_data(test_BO_dict):
    |     ^^^^^^^^^ D103
228 |     df = pd.DataFrame.from_dict(test_BO_dict, orient="index")
229 |     df["r2_test"] = df["scores_test"].apply(lambda x: x["r2"])
    |

src\dev_scripts\test_BO.py:227:15: N803 Argument name `test_BO_dict` should be lowercase
    |
227 | def save_data(test_BO_dict):
    |               ^^^^^^^^^^^^ N803
228 |     df = pd.DataFrame.from_dict(test_BO_dict, orient="index")
229 |     df["r2_test"] = df["scores_test"].apply(lambda x: x["r2"])
    |

src\dev_scripts\test_BO.py:228:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
227 | def save_data(test_BO_dict):
228 |     df = pd.DataFrame.from_dict(test_BO_dict, orient="index")
    |     ^^ PD901
229 |     df["r2_test"] = df["scores_test"].apply(lambda x: x["r2"])
230 |     df["r2_train"] = df["scores_train"].apply(lambda x: x["r2"])
    |

src\dev_scripts\test_BO.py:237:5: D103 Missing docstring in public function
    |
237 | def run_full_test():
    |     ^^^^^^^^^^^^^ D103
238 |     df_total, df_precursors, searched_space_df, fitness_acquired, searched_space_df_InChIKey= load_data()
239 |     test_model_dict = {}
    |

src\dev_scripts\test_BO.py:238:67: N806 Variable `searched_space_df_InChIKey` in function should be lowercase
    |
237 | def run_full_test():
238 |     df_total, df_precursors, searched_space_df, fitness_acquired, searched_space_df_InChIKey= load_data()
    |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ N806
239 |     test_model_dict = {}
240 |     count = 0
    |

src\dev_scripts\test_BO.py:245:9: N806 Variable `BO` in function should be lowercase
    |
243 |         "slatm",
244 |     ]:  # "slatm_org","precursor",,'slatm']:#'precursor','slatm'.'precursor','slatm_PCA100',
245 |         BO = prepare_run(case, df_precursors,df_total,searched_space_df_InChIKey)
    |         ^^ N806
246 |         X_explored = BO.Representation.generate_repr(searched_space_df)
247 |             # limit the dataframe to only the numeric data
    |

src\dev_scripts\test_BO.py:246:9: N806 Variable `X_explored` in function should be lowercase
    |
244 |     ]:  # "slatm_org","precursor",,'slatm']:#'precursor','slatm'.'precursor','slatm_PCA100',
245 |         BO = prepare_run(case, df_precursors,df_total,searched_space_df_InChIKey)
246 |         X_explored = BO.Representation.generate_repr(searched_space_df)
    |         ^^^^^^^^^^ N806
247 |             # limit the dataframe to only the numeric data
248 |         y_explored = torch.tensor(
    |

src\dev_scripts\test_BO.py:255:17: N806 Variable `X_train` in function should be lowercase
    |
254 |             (
255 |                 X_train,
    |                 ^^^^^^^ N806
256 |                 X_test,
257 |                 y_train,
    |

src\dev_scripts\test_BO.py:256:17: N806 Variable `X_test` in function should be lowercase
    |
254 |             (
255 |                 X_train,
256 |                 X_test,
    |                 ^^^^^^ N806
257 |                 y_train,
258 |                 y_test,
    |

src\dev_scripts\test_BO.py:265:17: N806 Variable `pca_N` in function should be lowercase
    |
263 |                 test_set_size=test_set_size,
264 |             )
265 |             for pca_N in [10,30,50,100]:
    |                 ^^^^^ N806
266 |                 X_train_PCA, X_test_PCA = prepare_data(case, X_train, X_test,pca_N)
267 |                 data = {
    |

src\dev_scripts\test_BO.py:266:17: N806 Variable `X_train_PCA` in function should be lowercase
    |
264 |             )
265 |             for pca_N in [10,30,50,100]:
266 |                 X_train_PCA, X_test_PCA = prepare_data(case, X_train, X_test,pca_N)
    |                 ^^^^^^^^^^^ N806
267 |                 data = {
268 |                     "X_train": X_train_PCA,
    |

src\dev_scripts\test_BO.py:266:30: N806 Variable `X_test_PCA` in function should be lowercase
    |
264 |             )
265 |             for pca_N in [10,30,50,100]:
266 |                 X_train_PCA, X_test_PCA = prepare_data(case, X_train, X_test,pca_N)
    |                              ^^^^^^^^^^ N806
267 |                 data = {
268 |                     "X_train": X_train_PCA,
    |

src\dev_scripts\train_encoder.py:1:1: INP001 File `src\dev_scripts\train_encoder.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\train_encoder.py:1:1: D100 Missing docstring in public module
src\dev_scripts\train_encoder.py:5:1: ERA001 Found commented-out code
  |
3 | import numpy as np
4 | 
5 | #os.chdir("/home/ma11115/github_folder/STK_search")
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 | #os.chdir("C:\\Users\\ma11115\\OneDrive - Imperial College London\\github_folder\\STK_SEARCH")
7 | os.chdir("/rds/general/user/ma11115/home/STK_Search/STK_search")
  |
  = help: Remove commented-out code

src\dev_scripts\train_encoder.py:6:1: ERA001 Found commented-out code
  |
5 | #os.chdir("/home/ma11115/github_folder/STK_search")
6 | #os.chdir("C:\\Users\\ma11115\\OneDrive - Imperial College London\\github_folder\\STK_SEARCH")
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
7 | os.chdir("/rds/general/user/ma11115/home/STK_Search/STK_search")
8 | # %pip install pytorch-lightning
  |
  = help: Remove commented-out code

src\dev_scripts\train_encoder.py:9:1: E402 Module level import not at top of file
   |
 7 | os.chdir("/rds/general/user/ma11115/home/STK_Search/STK_search")
 8 | # %pip install pytorch-lightning
 9 | import pytorch_lightning as pl
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
10 | import torch
11 | import torch.nn.functional as F
   |

src\dev_scripts\train_encoder.py:10:1: E402 Module level import not at top of file
   |
 8 | # %pip install pytorch-lightning
 9 | import pytorch_lightning as pl
10 | import torch
   | ^^^^^^^^^^^^ E402
11 | import torch.nn.functional as F
12 | from pytorch_lightning.loggers import WandbLogger
   |

src\dev_scripts\train_encoder.py:11:1: E402 Module level import not at top of file
   |
 9 | import pytorch_lightning as pl
10 | import torch
11 | import torch.nn.functional as F
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
12 | from pytorch_lightning.loggers import WandbLogger
13 | from torch import nn
   |

src\dev_scripts\train_encoder.py:11:8: N812 Lowercase `functional` imported as non-lowercase `F`
   |
 9 | import pytorch_lightning as pl
10 | import torch
11 | import torch.nn.functional as F
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
12 | from pytorch_lightning.loggers import WandbLogger
13 | from torch import nn
   |

src\dev_scripts\train_encoder.py:12:1: E402 Module level import not at top of file
   |
10 | import torch
11 | import torch.nn.functional as F
12 | from pytorch_lightning.loggers import WandbLogger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
13 | from torch import nn
14 | from torch.utils.data import DataLoader
   |

src\dev_scripts\train_encoder.py:13:1: E402 Module level import not at top of file
   |
11 | import torch.nn.functional as F
12 | from pytorch_lightning.loggers import WandbLogger
13 | from torch import nn
   | ^^^^^^^^^^^^^^^^^^^^ E402
14 | from torch.utils.data import DataLoader
   |

src\dev_scripts\train_encoder.py:14:1: E402 Module level import not at top of file
   |
12 | from pytorch_lightning.loggers import WandbLogger
13 | from torch import nn
14 | from torch.utils.data import DataLoader
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
15 | 
16 | import wandb
   |

src\dev_scripts\train_encoder.py:16:1: E402 Module level import not at top of file
   |
14 | from torch.utils.data import DataLoader
15 | 
16 | import wandb
   | ^^^^^^^^^^^^ E402
17 | from src.stk_search import Database_utils
   |

src\dev_scripts\train_encoder.py:17:1: E402 Module level import not at top of file
   |
16 | import wandb
17 | from src.stk_search import Database_utils
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

src\dev_scripts\train_encoder.py:22:5: D103 Missing docstring in public function
   |
20 | # %%
21 | # Load the searched space
22 | def load_data():
   |     ^^^^^^^^^ D103
23 |     df_path = "data/output/Full_datatset/df_total_new2023_08_20.csv"
24 |     df_precursors_path = "data/output/Prescursor_data/calculation_data_precursor_190923_clean.pkl"  #'Data/output/Prescursor_data/calculation_data_precursor_310823_clean.pkl'
   |

src\dev_scripts\train_encoder.py:51:7: D101 Missing docstring in public class
   |
51 | class Encoder(nn.Module):
   |       ^^^^^^^ D101
52 |     def __init__(self):
53 |         super().__init__()
   |

src\dev_scripts\train_encoder.py:52:9: ANN204 Missing return type annotation for special method `__init__`
   |
51 | class Encoder(nn.Module):
52 |     def __init__(self):
   |         ^^^^^^^^ ANN204
53 |         super().__init__()
54 |         self.l1 = nn.Sequential(
   |
   = help: Add return type annotation: `None`

src\dev_scripts\train_encoder.py:52:9: D107 Missing docstring in `__init__`
   |
51 | class Encoder(nn.Module):
52 |     def __init__(self):
   |         ^^^^^^^^ D107
53 |         super().__init__()
54 |         self.l1 = nn.Sequential(
   |

src\dev_scripts\train_encoder.py:57:9: D102 Missing docstring in public method
   |
55 |             nn.Linear(25638, 100), nn.ReLU(), nn.Linear(100, 14719)
56 |         )
57 |     def forward(self, x):
   |         ^^^^^^^ D102
58 |         return self.l1(x)
   |

src\dev_scripts\train_encoder.py:61:7: D101 Missing docstring in public class
   |
61 | class LitAutoEncoder(pl.LightningModule):
   |       ^^^^^^^^^^^^^^ D101
62 |     def __init__(self, encoder):
63 |         super().__init__()
   |

src\dev_scripts\train_encoder.py:62:9: ANN204 Missing return type annotation for special method `__init__`
   |
61 | class LitAutoEncoder(pl.LightningModule):
62 |     def __init__(self, encoder):
   |         ^^^^^^^^ ANN204
63 |         super().__init__()
64 |         self.encoder = encoder
   |
   = help: Add return type annotation: `None`

src\dev_scripts\train_encoder.py:62:9: D107 Missing docstring in `__init__`
   |
61 | class LitAutoEncoder(pl.LightningModule):
62 |     def __init__(self, encoder):
   |         ^^^^^^^^ D107
63 |         super().__init__()
64 |         self.encoder = encoder
   |

src\dev_scripts\train_encoder.py:66:9: D102 Missing docstring in public method
   |
64 |         self.encoder = encoder
65 | 
66 |     def training_step(self, batch, batch_idx):
   |         ^^^^^^^^^^^^^ D102
67 |         # training_step defines the train loop.
68 |         loss = self._get_preds_loss_accuracy(batch)
   |

src\dev_scripts\train_encoder.py:66:36: ARG002 Unused method argument: `batch_idx`
   |
64 |         self.encoder = encoder
65 | 
66 |     def training_step(self, batch, batch_idx):
   |                                    ^^^^^^^^^ ARG002
67 |         # training_step defines the train loop.
68 |         loss = self._get_preds_loss_accuracy(batch)
   |

src\dev_scripts\train_encoder.py:74:38: ARG002 Unused method argument: `batch_idx`
   |
74 |     def validation_step(self, batch, batch_idx):
   |                                      ^^^^^^^^^ ARG002
75 |         """Used for logging metrics"""
76 |         loss = self._get_preds_loss_accuracy(batch)
   |

src\dev_scripts\train_encoder.py:75:9: D400 First line should end with a period
   |
74 |     def validation_step(self, batch, batch_idx):
75 |         """Used for logging metrics"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
76 |         loss = self._get_preds_loss_accuracy(batch)
   |
   = help: Add period

src\dev_scripts\train_encoder.py:75:9: D401 First line of docstring should be in imperative mood: "Used for logging metrics"
   |
74 |     def validation_step(self, batch, batch_idx):
75 |         """Used for logging metrics"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
76 |         loss = self._get_preds_loss_accuracy(batch)
   |

src\dev_scripts\train_encoder.py:75:9: D415 First line should end with a period, question mark, or exclamation point
   |
74 |     def validation_step(self, batch, batch_idx):
75 |         """Used for logging metrics"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
76 |         loss = self._get_preds_loss_accuracy(batch)
   |
   = help: Add closing punctuation

src\dev_scripts\train_encoder.py:82:9: ANN202 Missing return type annotation for private function `_get_preds_loss_accuracy`
   |
80 |         return loss
81 | 
82 |     def _get_preds_loss_accuracy(self, batch):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
83 |         """Convenience function since train/valid/test steps are similar"""
84 |         x, y = batch
   |
   = help: Add return type annotation

src\dev_scripts\train_encoder.py:83:9: D400 First line should end with a period
   |
82 |     def _get_preds_loss_accuracy(self, batch):
83 |         """Convenience function since train/valid/test steps are similar"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
84 |         x, y = batch
85 |         x = x.view(x.size(0), -1)
   |
   = help: Add period

src\dev_scripts\train_encoder.py:83:9: D401 First line of docstring should be in imperative mood: "Convenience function since train/valid/test steps are similar"
   |
82 |     def _get_preds_loss_accuracy(self, batch):
83 |         """Convenience function since train/valid/test steps are similar"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
84 |         x, y = batch
85 |         x = x.view(x.size(0), -1)
   |

src\dev_scripts\train_encoder.py:83:9: D415 First line should end with a period, question mark, or exclamation point
   |
82 |     def _get_preds_loss_accuracy(self, batch):
83 |         """Convenience function since train/valid/test steps are similar"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
84 |         x, y = batch
85 |         x = x.view(x.size(0), -1)
   |
   = help: Add closing punctuation

src\dev_scripts\train_encoder.py:88:16: RET504 Unnecessary assignment to `loss` before `return` statement
   |
86 |         z = self.encoder(x)
87 |         loss = F.mse_loss(z, y)
88 |         return loss
   |                ^^^^ RET504
89 | 
90 |     def configure_optimizers(self):
   |
   = help: Remove unnecessary assignment

src\dev_scripts\train_encoder.py:90:9: D102 Missing docstring in public method
   |
88 |         return loss
89 | 
90 |     def configure_optimizers(self):
   |         ^^^^^^^^^^^^^^^^^^^^ D102
91 |         optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)
92 |         return optimizer
   |

src\dev_scripts\train_encoder.py:92:16: RET504 Unnecessary assignment to `optimizer` before `return` statement
   |
90 |     def configure_optimizers(self):
91 |         optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)
92 |         return optimizer
   |                ^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\dev_scripts\train_encoder.py:95:5: D103 Missing docstring in public function
   |
95 | def generate_repr(slatm_name_precursor, slatm_rpr_precursor, df_total, slatm_rpr):
   |     ^^^^^^^^^^^^^ D103
96 |     slatm_rpr_precursor = slatm_rpr_precursor[
97 |         :, ~(slatm_rpr_precursor == slatm_rpr_precursor[0, :]).all(0)
   |

src\dev_scripts\train_encoder.py:100:9: PLW2901 `for` loop variable `x` overwritten by assignment target
    |
 98 |     ]
 99 |     for i, x in enumerate(slatm_name_precursor):
100 |         x = x.split("/")[1].replace(".xyz", "")
    |         ^ PLW2901
101 |         slatm_name_precursor[i] = x
    |

src\dev_scripts\train_encoder.py:122:5: D103 Missing docstring in public function
    |
122 | def generate_data_loader(init_slatm_rpr, slatm_rpr_new, batch_size=100):
    |     ^^^^^^^^^^^^^^^^^^^^ D103
123 |     X = torch.tensor(init_slatm_rpr, dtype=torch.float32)
124 |     y = torch.tensor(slatm_rpr_new, dtype=torch.float32)
    |

src\dev_scripts\train_encoder.py:123:5: N806 Variable `X` in function should be lowercase
    |
122 | def generate_data_loader(init_slatm_rpr, slatm_rpr_new, batch_size=100):
123 |     X = torch.tensor(init_slatm_rpr, dtype=torch.float32)
    |     ^ N806
124 |     y = torch.tensor(slatm_rpr_new, dtype=torch.float32)
125 |     # create DataLoader, then take one batch
    |

src\dev_scripts\train_encoder.py:135:5: D103 Missing docstring in public function
    |
133 |     return train_loader, validation_loader
134 | 
135 | def train_model():
    |     ^^^^^^^^^^^ D103
136 |     wandb.login()
137 |     df_total, df_precursors, slatm_rpr_precursor, slatm_name_precursor, slatm_rpr, slatm_name = load_data()
    |

src\dev_scripts\update_learned_embedding_dataset.py:1:1: INP001 File `src\dev_scripts\update_learned_embedding_dataset.py` is part of an implicit namespace package. Add an `__init__.py`.
src\dev_scripts\update_learned_embedding_dataset.py:1:1: D100 Missing docstring in public module
src\dev_scripts\update_learned_embedding_dataset.py:10:5: D200 One-line docstring should fit on one line
   |
 9 |   def main(config_dir, dataset_all_frag_path=None, df_total_path=None):
10 |       """Check the input dataset for the learned embedding model and add missing molecules to the dataset
   |  _____^
11 | |     """
   | |_______^ D200
12 |       device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
13 |       config = read_config(config_dir)
   |
   = help: Reformat to one line

src\dev_scripts\update_learned_embedding_dataset.py:10:5: D400 First line should end with a period
   |
 9 |   def main(config_dir, dataset_all_frag_path=None, df_total_path=None):
10 |       """Check the input dataset for the learned embedding model and add missing molecules to the dataset
   |  _____^
11 | |     """
   | |_______^ D400
12 |       device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
13 |       config = read_config(config_dir)
   |
   = help: Add period

src\dev_scripts\update_learned_embedding_dataset.py:10:5: D415 First line should end with a period, question mark, or exclamation point
   |
 9 |   def main(config_dir, dataset_all_frag_path=None, df_total_path=None):
10 |       """Check the input dataset for the learned embedding model and add missing molecules to the dataset
   |  _____^
11 | |     """
   | |_______^ D415
12 |       device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
13 |       config = read_config(config_dir)
   |
   = help: Add closing punctuation

src\dev_scripts\update_learned_embedding_dataset.py:25:5: T201 `print` found
   |
23 |         )
24 |     )
25 |     print(
   |     ^^^^^ T201
26 |         "length of new dataset learned embedding",
27 |         len(dataset_learned_embedding_update),
   |
   = help: Remove `print`

src\stk_search\Calculators\STDA_calculator.py:1:1: INP001 File `src\stk_search\Calculators\STDA_calculator.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Calculators\STDA_calculator.py:1:1: D100 Missing docstring in public module
src\stk_search\Calculators\STDA_calculator.py:7:1: ERA001 Found commented-out code
  |
5 | import uuid
6 | 
7 | #from stko.calculators import Calculator
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
  |
  = help: Remove commented-out code

src\stk_search\Calculators\STDA_calculator.py:10:7: N801 Class name `sTDA_XTB` should use CapWords convention
   |
10 | class sTDA_XTB:
   |       ^^^^^^^^ N801
11 |     """A class to calculate the excited state properties using sTDA method
12 |     from xtb output.
   |

src\stk_search\Calculators\STDA_calculator.py:11:5: D205 1 blank line required between summary line and description
   |
10 |   class sTDA_XTB:
11 |       """A class to calculate the excited state properties using sTDA method
   |  _____^
12 | |     from xtb output.
13 | | 
14 | |     Attributes
15 | |     ----------
16 | |     STDA_bin_path : str
17 | |         The path to the STDA binary file.
18 | |     Num_threads : int
19 | |         The number of threads to use.
20 | |     output_dir : str
21 | |         The path to the output directory.
22 | |     maxeV_ExcitedEnergy : float
23 | |         The maximum energy of the excited state.
24 | | 
25 | |     Methods
26 | |     -------
27 | |     calculate(mol)
28 | |         Calculate the excited state properties.
29 | |     get_results(mol)
30 | |         Get the results of the calculation.
31 | | 
32 | |     """
   | |_______^ D205
33 |   
34 |       def __init__(
   |
   = help: Insert single blank line

src\stk_search\Calculators\STDA_calculator.py:34:9: ANN204 Missing return type annotation for special method `__init__`
   |
32 |     """
33 | 
34 |     def __init__(
   |         ^^^^^^^^ ANN204
35 |         self,
36 |         STDA_bin_path,
   |
   = help: Add return type annotation: `None`

src\stk_search\Calculators\STDA_calculator.py:34:9: D107 Missing docstring in `__init__`
   |
32 |     """
33 | 
34 |     def __init__(
   |         ^^^^^^^^ D107
35 |         self,
36 |         STDA_bin_path,
   |

src\stk_search\Calculators\STDA_calculator.py:36:9: N803 Argument name `STDA_bin_path` should be lowercase
   |
34 |     def __init__(
35 |         self,
36 |         STDA_bin_path,
   |         ^^^^^^^^^^^^^ N803
37 |         Num_threads=1,
38 |         output_dir=None,
   |

src\stk_search\Calculators\STDA_calculator.py:37:9: N803 Argument name `Num_threads` should be lowercase
   |
35 |         self,
36 |         STDA_bin_path,
37 |         Num_threads=1,
   |         ^^^^^^^^^^^ N803
38 |         output_dir=None,
39 |         maxeV_ExcitedEnergy=10,
   |

src\stk_search\Calculators\STDA_calculator.py:39:9: N803 Argument name `maxeV_ExcitedEnergy` should be lowercase
   |
37 |         Num_threads=1,
38 |         output_dir=None,
39 |         maxeV_ExcitedEnergy=10,
   |         ^^^^^^^^^^^^^^^^^^^ N803
40 |     ):
41 |         self.STDA_bin_path = STDA_bin_path
   |

src\stk_search\Calculators\STDA_calculator.py:46:9: D102 Missing docstring in public method
   |
44 |         self.maxeV_ExcitedEnergy = maxeV_ExcitedEnergy
45 | 
46 |     def calculate(self, mol):
   |         ^^^^^^^^^ D102
47 | 
48 |         if self._output_dir is None:
   |

src\stk_search\Calculators\STDA_calculator.py:52:22: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
50 |         else:
51 |             output_dir = self._output_dir
52 |         output_dir = os.path.abspath(output_dir)
   |                      ^^^^^^^^^^^^^^^ PTH100
53 | 
54 |         if os.path.exists(output_dir):
   |

src\stk_search\Calculators\STDA_calculator.py:54:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
52 |         output_dir = os.path.abspath(output_dir)
53 | 
54 |         if os.path.exists(output_dir):
   |            ^^^^^^^^^^^^^^ PTH110
55 |             shutil.rmtree(output_dir)
56 |         os.mkdir(output_dir)
   |

src\stk_search\Calculators\STDA_calculator.py:56:9: PTH102 `os.mkdir()` should be replaced by `Path.mkdir()`
   |
54 |         if os.path.exists(output_dir):
55 |             shutil.rmtree(output_dir)
56 |         os.mkdir(output_dir)
   |         ^^^^^^^^ PTH102
57 | 
58 |         init_dir = os.getcwd()
   |

src\stk_search\Calculators\STDA_calculator.py:58:20: PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
   |
56 |         os.mkdir(output_dir)
57 | 
58 |         init_dir = os.getcwd()
   |                    ^^^^^^^^^ PTH109
59 |         xyz = os.path.join(output_dir, "input_structure.xyz")
60 |         mol.write(xyz)
   |

src\stk_search\Calculators\STDA_calculator.py:59:15: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
58 |         init_dir = os.getcwd()
59 |         xyz = os.path.join(output_dir, "input_structure.xyz")
   |               ^^^^^^^^^^^^ PTH118
60 |         mol.write(xyz)
61 |         xyz = os.path.join("input_structure.xyz")
   |

src\stk_search\Calculators\STDA_calculator.py:61:15: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
59 |         xyz = os.path.join(output_dir, "input_structure.xyz")
60 |         mol.write(xyz)
61 |         xyz = os.path.join("input_structure.xyz")
   |               ^^^^^^^^^^^^ PTH118
62 |         os.chdir(output_dir)
63 |         sp.call(
   |

src\stk_search\Calculators\STDA_calculator.py:63:9: S602 `subprocess` call with `shell=True` identified, security issue
   |
61 |         xyz = os.path.join("input_structure.xyz")
62 |         os.chdir(output_dir)
63 |         sp.call(
   |         ^^^^^^^ S602
64 |             f"export XTB4STDAHOME={self.STDA_bin_path} \n"
65 |             + f"export OMP_NUM_THREADS={self.Num_threads} \n"
   |

src\stk_search\Calculators\STDA_calculator.py:64:13: ISC003 Explicitly concatenated string should be implicitly concatenated
   |
62 |           os.chdir(output_dir)
63 |           sp.call(
64 |               f"export XTB4STDAHOME={self.STDA_bin_path} \n"
   |  _____________^
65 | |             + f"export OMP_NUM_THREADS={self.Num_threads} \n"
   | |_____________________________________________________________^ ISC003
66 |               + f"export MKL_NUM_THREADS={self.Num_threads} \n"
67 |               + "export PATH=$PATH:$XTB4STDAHOME/exe \n"
   |

src\stk_search\Calculators\STDA_calculator.py:78:9: D102 Missing docstring in public method
   |
76 |         return output_dir
77 | 
78 |     def get_results(self, mol):
   |         ^^^^^^^^^^^ D102
79 |         output_dir = self.calculate(mol)
80 |         init_dir = os.getcwd()
   |

src\stk_search\Calculators\STDA_calculator.py:80:20: PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
   |
78 |     def get_results(self, mol):
79 |         output_dir = self.calculate(mol)
80 |         init_dir = os.getcwd()
   |                    ^^^^^^^^^ PTH109
81 |         os.chdir(output_dir)
82 |         outfile = open("out_stda.out", encoding="utf8")
   |

src\stk_search\Calculators\STDA_calculator.py:82:19: SIM115 Use context handler for opening files
   |
80 |         init_dir = os.getcwd()
81 |         os.chdir(output_dir)
82 |         outfile = open("out_stda.out", encoding="utf8")
   |                   ^^^^ SIM115
83 |         data = outfile.readlines()
84 |         outfile.close()
   |

src\stk_search\Calculators\STDA_calculator.py:82:19: PTH123 `open()` should be replaced by `Path.open()`
   |
80 |         init_dir = os.getcwd()
81 |         os.chdir(output_dir)
82 |         outfile = open("out_stda.out", encoding="utf8")
   |                   ^^^^ PTH123
83 |         data = outfile.readlines()
84 |         outfile.close()
   |

src\stk_search\Calculators\STDA_calculator.py:88:17: N806 Variable `Excited_state_properties` in function should be lowercase
   |
86 |             line = data[i]
87 |             if "state    eV " in line:
88 |                 Excited_state_properties = [
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ N806
89 |                     re.findall(r"[-+]?(?:\d*\.*\d+)", data[i + x + 1])
90 |                     for x in range(10)
   |

src\stk_search\Calculators\STDA_calculator.py:92:17: N806 Variable `Excited_state_energy` in function should be lowercase
   |
90 |                     for x in range(10)
91 |                 ]
92 |                 Excited_state_energy = [
   |                 ^^^^^^^^^^^^^^^^^^^^ N806
93 |                     float(x[1]) for x in Excited_state_properties
94 |                 ]  # float(words[3]) #
   |

src\stk_search\Calculators\STDA_calculator.py:95:17: N806 Variable `Excited_state_osc` in function should be lowercase
   |
93 |                     float(x[1]) for x in Excited_state_properties
94 |                 ]  # float(words[3]) #
95 |                 Excited_state_osc = [
   |                 ^^^^^^^^^^^^^^^^^ N806
96 |                     float(x[3]) for x in Excited_state_properties
97 |                 ]
   |

src\stk_search\Calculators\STDA_calculator.py:101:13: T201 `print` found
    |
 99 |         os.chdir(init_dir)
100 |         if Excited_state_energy == []:
101 |             print("Error: No Excited state properties found")
    |             ^^^^^ T201
102 |         return Excited_state_energy, Excited_state_osc
    |
    = help: Remove `print`

src\stk_search\Calculators\XTBcalculator.py:1:1: INP001 File `src\stk_search\Calculators\XTBcalculator.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Calculators\XTBcalculator.py:1:1: D100 Missing docstring in public module
src\stk_search\Calculators\XTBcalculator.py:9:7: D101 Missing docstring in public class
   |
 9 | class XTBEnergy2(stko.XTBEnergy):
   |       ^^^^^^^^^^ D101
10 |     def _run_xtb(self, xyz, out_file, init_dir, output_dir):
11 |         """Runs GFN-xTB.
   |

src\stk_search\Calculators\XTBcalculator.py:10:9: ANN202 Missing return type annotation for private function `_run_xtb`
   |
 9 | class XTBEnergy2(stko.XTBEnergy):
10 |     def _run_xtb(self, xyz, out_file, init_dir, output_dir):
   |         ^^^^^^^^ ANN202
11 |         """Runs GFN-xTB.
   |
   = help: Add return type annotation: `None`

src\stk_search\Calculators\XTBcalculator.py:11:9: D401 First line of docstring should be in imperative mood: "Runs GFN-xTB."
   |
 9 |   class XTBEnergy2(stko.XTBEnergy):
10 |       def _run_xtb(self, xyz, out_file, init_dir, output_dir):
11 |           """Runs GFN-xTB.
   |  _________^
12 | | 
13 | |         Parameters
14 | |         ----------
15 | |         xyz : :class:`str`
16 | |             The name of the input structure ``.xyz`` file.
17 | | 
18 | |         out_file : :class:`str`
19 | |             The name of output file with xTB results.
20 | | 
21 | |         init_dir : :class:`str`
22 | |             The name of the current working directory.
23 | | 
24 | |         output_dir : :class:`str`
25 | |             The name of the directory into which files generated during
26 | |             the calculation are written.
27 | | 
28 | |         Returns
29 | |         -------
30 | |         None : :class:`NoneType`
31 | | 
32 | |         """
   | |___________^ D401
33 |           # Modify the memory limit.
34 |           if self._unlimited_memory:
   |

src\stk_search\Calculators\XTBcalculator.py:34:9: SIM108 Use ternary operator `memory = "ulimit -s unlimited ;" if self._unlimited_memory else ""` instead of `if`-`else`-block
   |
32 |           """
33 |           # Modify the memory limit.
34 |           if self._unlimited_memory:
   |  _________^
35 | |             memory = "ulimit -s unlimited ;"
36 | |         else:
37 | |             memory = ""
   | |_______________________^ SIM108
38 |   
39 |           if self._solvent is not None:
   |
   = help: Replace `if`-`else`-block with `memory = "ulimit -s unlimited ;" if self._unlimited_memory else ""`

src\stk_search\Calculators\XTBcalculator.py:44:9: SIM108 Use ternary operator `hess = "--hess" if self._calculate_free_energy else ""` instead of `if`-`else`-block
   |
42 |               solvent = ""
43 |   
44 |           if self._calculate_free_energy:
   |  _________^
45 | |             hess = "--hess"
46 | |         else:
47 | |             hess = ""
   | |_____________________^ SIM108
48 |   
49 |           if self._calculate_ip_and_ea:
   |
   = help: Replace `if`-`else`-block with `hess = "--hess" if self._calculate_free_energy else ""`

src\stk_search\Calculators\XTBcalculator.py:49:9: SIM108 Use ternary operator `vipea = "--vipea" if self._calculate_ip_and_ea else ""` instead of `if`-`else`-block
   |
47 |               hess = ""
48 |   
49 |           if self._calculate_ip_and_ea:
   |  _________^
50 | |             vipea = "--vipea"
51 | |         else:
52 | |             vipea = ""
   | |______________________^ SIM108
53 |   
54 |           cmd = (
   |
   = help: Replace `if`-`else`-block with `vipea = "--vipea" if self._calculate_ip_and_ea else ""`

src\stk_search\Calculators\XTBcalculator.py:62:9: ERA001 Found commented-out code
   |
60 |             f"--uhf {self._num_unpaired_electrons} -I det_control.in"
61 |         )
62 |         # print(cmd)
   |         ^^^^^^^^^^^^ ERA001
63 |         try:
64 |             os.chdir(output_dir)
   |
   = help: Remove commented-out code

src\stk_search\Calculators\XTBcalculator.py:66:18: PTH123 `open()` should be replaced by `Path.open()`
   |
64 |             os.chdir(output_dir)
65 |             self._write_detailed_control()
66 |             with open(out_file, "w") as f:
   |                  ^^^^ PTH123
67 |                 # Note that sp.call will hold the program until
68 |                 # completion of the calculation.
   |

src\stk_search\Calculators\XTBcalculator.py:69:17: S602 `subprocess` call with `shell=True` identified, security issue
   |
67 |                 # Note that sp.call will hold the program until
68 |                 # completion of the calculation.
69 |                 sp.call(
   |                 ^^^^^^^ S602
70 |                     cmd,
71 |                     stdin=sp.PIPE,
   |

src\stk_search\Calculators\XTBcalculator.py:80:9: D102 Missing docstring in public method
   |
78 |             os.chdir(init_dir)
79 | 
80 |     def calculate(self, mol):
   |         ^^^^^^^^^ D102
81 |         if self._output_dir is None:
82 |             output_dir = str(uuid.uuid4().int)
   |

src\stk_search\Calculators\XTBcalculator.py:85:9: ERA001 Found commented-out code
   |
83 |         else:
84 |             output_dir = self._output_dir
85 |         # output_dir = os.path.abspath(output_dir)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
86 | 
87 |         if os.path.exists(output_dir):
   |
   = help: Remove commented-out code

src\stk_search\Calculators\XTBcalculator.py:87:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
85 |         # output_dir = os.path.abspath(output_dir)
86 | 
87 |         if os.path.exists(output_dir):
   |            ^^^^^^^^^^^^^^ PTH110
88 |             shutil.rmtree(output_dir)
89 |         os.mkdir(output_dir)
   |

src\stk_search\Calculators\XTBcalculator.py:89:9: PTH102 `os.mkdir()` should be replaced by `Path.mkdir()`
   |
87 |         if os.path.exists(output_dir):
88 |             shutil.rmtree(output_dir)
89 |         os.mkdir(output_dir)
   |         ^^^^^^^^ PTH102
90 | 
91 |         init_dir = os.getcwd()
   |

src\stk_search\Calculators\XTBcalculator.py:91:20: PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
   |
89 |         os.mkdir(output_dir)
90 | 
91 |         init_dir = os.getcwd()
   |                    ^^^^^^^^^ PTH109
92 |         xyz = os.path.join(output_dir, "input_structure.xyz")
93 |         out_file = os.path.join("energy.output")
   |

src\stk_search\Calculators\XTBcalculator.py:92:15: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
91 |         init_dir = os.getcwd()
92 |         xyz = os.path.join(output_dir, "input_structure.xyz")
   |               ^^^^^^^^^^^^ PTH118
93 |         out_file = os.path.join("energy.output")
94 |         mol.write(xyz)
   |

src\stk_search\Calculators\XTBcalculator.py:93:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
91 |         init_dir = os.getcwd()
92 |         xyz = os.path.join(output_dir, "input_structure.xyz")
93 |         out_file = os.path.join("energy.output")
   |                    ^^^^^^^^^^^^ PTH118
94 |         mol.write(xyz)
95 |         xyz = os.path.join("input_structure.xyz")
   |

src\stk_search\Calculators\XTBcalculator.py:95:15: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
93 |         out_file = os.path.join("energy.output")
94 |         mol.write(xyz)
95 |         xyz = os.path.join("input_structure.xyz")
   |               ^^^^^^^^^^^^ PTH118
96 | 
97 |         yield self._run_xtb(
   |

src\stk_search\Calculators\XTBcalculator.py:122:22: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
120 |         else:
121 |             output_dir = self._output_dir
122 |         output_dir = os.path.abspath(output_dir)
    |                      ^^^^^^^^^^^^^^^ PTH100
123 | 
124 |         out_file = os.path.join(output_dir, "energy.output")
    |

src\stk_search\Calculators\XTBcalculator.py:124:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
122 |         output_dir = os.path.abspath(output_dir)
123 | 
124 |         out_file = os.path.join(output_dir, "energy.output")
    |                    ^^^^^^^^^^^^ PTH118
125 | 
126 |         return stko.XTBResults(
    |

src\stk_search\Objective_function.py:1:1: N999 Invalid module name: 'Objective_function'
src\stk_search\Objective_function.py:1:1: D100 Missing docstring in public module
src\stk_search\Objective_function.py:14:5: D103 Missing docstring in public function
   |
14 | def get_inchi_key(molecule):
   |     ^^^^^^^^^^^^^ D103
15 |     return stk.InchiKey().get_key(molecule)
   |

src\stk_search\Objective_function.py:18:7: N801 Class name `Objective_Function` should use CapWords convention
   |
18 | class Objective_Function:
   |       ^^^^^^^^^^^^^^^^^^ N801
19 |     """Base class for objective functions
20 |     The objective function is the function that will be used to evaluate the fitness of the molecules in the search
   |

src\stk_search\Objective_function.py:19:5: D205 1 blank line required between summary line and description
   |
18 |   class Objective_Function:
19 |       """Base class for objective functions
   |  _____^
20 | |     The objective function is the function that will be used to evaluate the fitness of the molecules in the search
21 | | 
22 | |     Functions
23 | |     ---------
24 | |     evaluate_element(element, multiFidelity=False)
25 | |         Evaluates the fitness of the element
26 | |         takes as an input a list of building blocks and returns the fitness of the element
27 | | 
28 | |     """
   | |_______^ D205
29 |   
30 |       def __init__(self):
   |
   = help: Insert single blank line

src\stk_search\Objective_function.py:19:5: D400 First line should end with a period
   |
18 |   class Objective_Function:
19 |       """Base class for objective functions
   |  _____^
20 | |     The objective function is the function that will be used to evaluate the fitness of the molecules in the search
21 | | 
22 | |     Functions
23 | |     ---------
24 | |     evaluate_element(element, multiFidelity=False)
25 | |         Evaluates the fitness of the element
26 | |         takes as an input a list of building blocks and returns the fitness of the element
27 | | 
28 | |     """
   | |_______^ D400
29 |   
30 |       def __init__(self):
   |
   = help: Add period

src\stk_search\Objective_function.py:19:5: D415 First line should end with a period, question mark, or exclamation point
   |
18 |   class Objective_Function:
19 |       """Base class for objective functions
   |  _____^
20 | |     The objective function is the function that will be used to evaluate the fitness of the molecules in the search
21 | | 
22 | |     Functions
23 | |     ---------
24 | |     evaluate_element(element, multiFidelity=False)
25 | |         Evaluates the fitness of the element
26 | |         takes as an input a list of building blocks and returns the fitness of the element
27 | | 
28 | |     """
   | |_______^ D415
29 |   
30 |       def __init__(self):
   |
   = help: Add closing punctuation

src\stk_search\Objective_function.py:30:9: ANN204 Missing return type annotation for special method `__init__`
   |
28 |     """
29 | 
30 |     def __init__(self):
   |         ^^^^^^^^ ANN204
31 |         """Initialises the objective function
32 |         """
   |
   = help: Add return type annotation: `None`

src\stk_search\Objective_function.py:31:9: D200 One-line docstring should fit on one line
   |
30 |       def __init__(self):
31 |           """Initialises the objective function
   |  _________^
32 | |         """
   | |___________^ D200
33 |   
34 |       def evaluate_element(self, element, multiFidelity=False):
   |
   = help: Reformat to one line

src\stk_search\Objective_function.py:31:9: D400 First line should end with a period
   |
30 |       def __init__(self):
31 |           """Initialises the objective function
   |  _________^
32 | |         """
   | |___________^ D400
33 |   
34 |       def evaluate_element(self, element, multiFidelity=False):
   |
   = help: Add period

src\stk_search\Objective_function.py:31:9: D401 First line of docstring should be in imperative mood: "Initialises the objective function"
   |
30 |       def __init__(self):
31 |           """Initialises the objective function
   |  _________^
32 | |         """
   | |___________^ D401
33 |   
34 |       def evaluate_element(self, element, multiFidelity=False):
   |

src\stk_search\Objective_function.py:31:9: D415 First line should end with a period, question mark, or exclamation point
   |
30 |       def __init__(self):
31 |           """Initialises the objective function
   |  _________^
32 | |         """
   | |___________^ D415
33 |   
34 |       def evaluate_element(self, element, multiFidelity=False):
   |
   = help: Add closing punctuation

src\stk_search\Objective_function.py:34:9: D417 Missing argument descriptions in the docstring for `evaluate_element`: `element`, `multiFidelity`
   |
32 |         """
33 | 
34 |     def evaluate_element(self, element, multiFidelity=False):
   |         ^^^^^^^^^^^^^^^^ D417
35 |         """Evaluates the fitness of the element
36 |         takes as an input a list of building blocks and returns the fitness of the element
   |

src\stk_search\Objective_function.py:34:41: FBT002 Boolean default positional argument in function definition
   |
32 |         """
33 | 
34 |     def evaluate_element(self, element, multiFidelity=False):
   |                                         ^^^^^^^^^^^^^ FBT002
35 |         """Evaluates the fitness of the element
36 |         takes as an input a list of building blocks and returns the fitness of the element
   |

src\stk_search\Objective_function.py:34:41: N803 Argument name `multiFidelity` should be lowercase
   |
32 |         """
33 | 
34 |     def evaluate_element(self, element, multiFidelity=False):
   |                                         ^^^^^^^^^^^^^ N803
35 |         """Evaluates the fitness of the element
36 |         takes as an input a list of building blocks and returns the fitness of the element
   |

src\stk_search\Objective_function.py:34:41: ARG002 Unused method argument: `multiFidelity`
   |
32 |         """
33 | 
34 |     def evaluate_element(self, element, multiFidelity=False):
   |                                         ^^^^^^^^^^^^^ ARG002
35 |         """Evaluates the fitness of the element
36 |         takes as an input a list of building blocks and returns the fitness of the element
   |

src\stk_search\Objective_function.py:35:9: D205 1 blank line required between summary line and description
   |
34 |       def evaluate_element(self, element, multiFidelity=False):
35 |           """Evaluates the fitness of the element
   |  _________^
36 | |         takes as an input a list of building blocks and returns the fitness of the element
37 | | 
38 | |         Parameters
39 | |         ----------
40 | |             element: list
41 | |             list of building blocks
42 | |             multiFidelity: bool
43 | |             if True, the function will return the fitness and the fidelity of the element
44 | | 
45 | |         Returns
46 | |         -------
47 | |             float
48 | |             the fitness of the element
49 | |             str
50 | |             the identifier of the element
51 | | 
52 | |         """
   | |___________^ D205
53 |           for x in element:
54 |               if type(x) == int or type(x) == np.float64:
   |
   = help: Insert single blank line

src\stk_search\Objective_function.py:35:9: D400 First line should end with a period
   |
34 |       def evaluate_element(self, element, multiFidelity=False):
35 |           """Evaluates the fitness of the element
   |  _________^
36 | |         takes as an input a list of building blocks and returns the fitness of the element
37 | | 
38 | |         Parameters
39 | |         ----------
40 | |             element: list
41 | |             list of building blocks
42 | |             multiFidelity: bool
43 | |             if True, the function will return the fitness and the fidelity of the element
44 | | 
45 | |         Returns
46 | |         -------
47 | |             float
48 | |             the fitness of the element
49 | |             str
50 | |             the identifier of the element
51 | | 
52 | |         """
   | |___________^ D400
53 |           for x in element:
54 |               if type(x) == int or type(x) == np.float64:
   |
   = help: Add period

src\stk_search\Objective_function.py:35:9: D401 First line of docstring should be in imperative mood: "Evaluates the fitness of the element"
   |
34 |       def evaluate_element(self, element, multiFidelity=False):
35 |           """Evaluates the fitness of the element
   |  _________^
36 | |         takes as an input a list of building blocks and returns the fitness of the element
37 | | 
38 | |         Parameters
39 | |         ----------
40 | |             element: list
41 | |             list of building blocks
42 | |             multiFidelity: bool
43 | |             if True, the function will return the fitness and the fidelity of the element
44 | | 
45 | |         Returns
46 | |         -------
47 | |             float
48 | |             the fitness of the element
49 | |             str
50 | |             the identifier of the element
51 | | 
52 | |         """
   | |___________^ D401
53 |           for x in element:
54 |               if type(x) == int or type(x) == np.float64:
   |

src\stk_search\Objective_function.py:35:9: D415 First line should end with a period, question mark, or exclamation point
   |
34 |       def evaluate_element(self, element, multiFidelity=False):
35 |           """Evaluates the fitness of the element
   |  _________^
36 | |         takes as an input a list of building blocks and returns the fitness of the element
37 | | 
38 | |         Parameters
39 | |         ----------
40 | |             element: list
41 | |             list of building blocks
42 | |             multiFidelity: bool
43 | |             if True, the function will return the fitness and the fidelity of the element
44 | | 
45 | |         Returns
46 | |         -------
47 | |             float
48 | |             the fitness of the element
49 | |             str
50 | |             the identifier of the element
51 | | 
52 | |         """
   | |___________^ D415
53 |           for x in element:
54 |               if type(x) == int or type(x) == np.float64:
   |
   = help: Add closing punctuation

src\stk_search\Objective_function.py:53:9: RET503 Missing explicit `return` at the end of function able to return non-`None` value
   |
52 |           """
53 |           for x in element:
   |  _________^
54 | |             if type(x) == int or type(x) == np.float64:
55 | |                 return float(x), "test"
   | |_______________________________________^ RET503
   |
   = help: Add explicit `return` statement

src\stk_search\Objective_function.py:54:16: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   |
52 |         """
53 |         for x in element:
54 |             if type(x) == int or type(x) == np.float64:
   |                ^^^^^^^^^^^^^^ E721
55 |                 return float(x), "test"
   |

src\stk_search\Objective_function.py:54:34: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   |
52 |         """
53 |         for x in element:
54 |             if type(x) == int or type(x) == np.float64:
   |                                  ^^^^^^^^^^^^^^^^^^^^^ E721
55 |                 return float(x), "test"
   |

src\stk_search\Objective_function.py:58:7: N801 Class name `Look_up_table` should use CapWords convention
   |
58 | class Look_up_table:
   |       ^^^^^^^^^^^^^ N801
59 |     """Class for look up table objective functions
60 |     The look up table objective function is used to evaluate the fitness of the elements by looking up the fitness in a database
   |

src\stk_search\Objective_function.py:59:5: D205 1 blank line required between summary line and description
   |
58 |   class Look_up_table:
59 |       """Class for look up table objective functions
   |  _____^
60 | |     The look up table objective function is used to evaluate the fitness of the elements by looking up the fitness in a database
61 | | 
62 | |     """
   | |_______^ D205
63 |   
64 |       def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
   |
   = help: Insert single blank line

src\stk_search\Objective_function.py:59:5: D400 First line should end with a period
   |
58 |   class Look_up_table:
59 |       """Class for look up table objective functions
   |  _____^
60 | |     The look up table objective function is used to evaluate the fitness of the elements by looking up the fitness in a database
61 | | 
62 | |     """
   | |_______^ D400
63 |   
64 |       def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
   |
   = help: Add period

src\stk_search\Objective_function.py:59:5: D415 First line should end with a period, question mark, or exclamation point
   |
58 |   class Look_up_table:
59 |       """Class for look up table objective functions
   |  _____^
60 | |     The look up table objective function is used to evaluate the fitness of the elements by looking up the fitness in a database
61 | | 
62 | |     """
   | |_______^ D415
63 |   
64 |       def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
   |
   = help: Add closing punctuation

src\stk_search\Objective_function.py:64:9: ANN204 Missing return type annotation for special method `__init__`
   |
62 |     """
63 | 
64 |     def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
   |         ^^^^^^^^ ANN204
65 |         """Initialises the look up table objective function
   |
   = help: Add return type annotation: `None`

src\stk_search\Objective_function.py:64:9: D417 Missing argument descriptions in the docstring for `__init__`: `aim`, `df_look_up`, `fragment_size`, `target_name`
   |
62 |     """
63 | 
64 |     def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
   |         ^^^^^^^^ D417
65 |         """Initialises the look up table objective function
   |

src\stk_search\Objective_function.py:65:9: D400 First line should end with a period
   |
64 |       def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
65 |           """Initialises the look up table objective function
   |  _________^
66 | | 
67 | |         Parameters
68 | |         ----------
69 | |             df_look_up: pd.DataFrame
70 | |             the dataframe containing the look up table
71 | |             the dataframe should contain the InChIKeys of the fragments in the form of 'InChIKey_0', 'InChIKey_1', etc.
72 | |             and the target column
73 | |             and the InChIKeys of the molecule
74 | | 
75 | |             fragment_size: int
76 | |             the size of the fragments
77 | | 
78 | |             target_name: str
79 | |             the name of the target column
80 | | 
81 | |             aim: int or float
82 | |             the aim of the fitness function
83 | |             if the aim is an int, the fitness function will be the negative absolute difference between the target and the aim
84 | | 
85 | |         """
   | |___________^ D400
86 |           self.df_look_up = df_look_up
87 |           self.fragment_size = fragment_size
   |
   = help: Add period

src\stk_search\Objective_function.py:65:9: D401 First line of docstring should be in imperative mood: "Initialises the look up table objective function"
   |
64 |       def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
65 |           """Initialises the look up table objective function
   |  _________^
66 | | 
67 | |         Parameters
68 | |         ----------
69 | |             df_look_up: pd.DataFrame
70 | |             the dataframe containing the look up table
71 | |             the dataframe should contain the InChIKeys of the fragments in the form of 'InChIKey_0', 'InChIKey_1', etc.
72 | |             and the target column
73 | |             and the InChIKeys of the molecule
74 | | 
75 | |             fragment_size: int
76 | |             the size of the fragments
77 | | 
78 | |             target_name: str
79 | |             the name of the target column
80 | | 
81 | |             aim: int or float
82 | |             the aim of the fitness function
83 | |             if the aim is an int, the fitness function will be the negative absolute difference between the target and the aim
84 | | 
85 | |         """
   | |___________^ D401
86 |           self.df_look_up = df_look_up
87 |           self.fragment_size = fragment_size
   |

src\stk_search\Objective_function.py:65:9: D415 First line should end with a period, question mark, or exclamation point
   |
64 |       def __init__(self, df_look_up, fragment_size, target_name="target", aim=0):
65 |           """Initialises the look up table objective function
   |  _________^
66 | | 
67 | |         Parameters
68 | |         ----------
69 | |             df_look_up: pd.DataFrame
70 | |             the dataframe containing the look up table
71 | |             the dataframe should contain the InChIKeys of the fragments in the form of 'InChIKey_0', 'InChIKey_1', etc.
72 | |             and the target column
73 | |             and the InChIKeys of the molecule
74 | | 
75 | |             fragment_size: int
76 | |             the size of the fragments
77 | | 
78 | |             target_name: str
79 | |             the name of the target column
80 | | 
81 | |             aim: int or float
82 | |             the aim of the fitness function
83 | |             if the aim is an int, the fitness function will be the negative absolute difference between the target and the aim
84 | | 
85 | |         """
   | |___________^ D415
86 |           self.df_look_up = df_look_up
87 |           self.fragment_size = fragment_size
   |
   = help: Add closing punctuation

src\stk_search\Objective_function.py:93:9: D200 One-line docstring should fit on one line
   |
92 |       def check_database(self):
93 |           """Checks the database
   |  _________^
94 | |         """
   | |___________^ D200
95 |           if self.df_look_up is None:
96 |               raise ValueError("No database found")
   |
   = help: Reformat to one line

src\stk_search\Objective_function.py:93:9: D400 First line should end with a period
   |
92 |       def check_database(self):
93 |           """Checks the database
   |  _________^
94 | |         """
   | |___________^ D400
95 |           if self.df_look_up is None:
96 |               raise ValueError("No database found")
   |
   = help: Add period

src\stk_search\Objective_function.py:93:9: D401 First line of docstring should be in imperative mood: "Checks the database"
   |
92 |       def check_database(self):
93 |           """Checks the database
   |  _________^
94 | |         """
   | |___________^ D401
95 |           if self.df_look_up is None:
96 |               raise ValueError("No database found")
   |

src\stk_search\Objective_function.py:93:9: D415 First line should end with a period, question mark, or exclamation point
   |
92 |       def check_database(self):
93 |           """Checks the database
   |  _________^
94 | |         """
   | |___________^ D415
95 |           if self.df_look_up is None:
96 |               raise ValueError("No database found")
   |
   = help: Add closing punctuation

src\stk_search\Objective_function.py:96:19: TRY003 Avoid specifying long messages outside the exception class
   |
94 |         """
95 |         if self.df_look_up is None:
96 |             raise ValueError("No database found")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
97 |         if "InChIKey" not in self.df_look_up.columns:
98 |             raise ValueError("No InChIKey column found")
   |

src\stk_search\Objective_function.py:96:30: EM101 Exception must not use a string literal, assign to variable first
   |
94 |         """
95 |         if self.df_look_up is None:
96 |             raise ValueError("No database found")
   |                              ^^^^^^^^^^^^^^^^^^^ EM101
97 |         if "InChIKey" not in self.df_look_up.columns:
98 |             raise ValueError("No InChIKey column found")
   |
   = help: Assign to variable; remove string literal

src\stk_search\Objective_function.py:98:19: TRY003 Avoid specifying long messages outside the exception class
    |
 96 |             raise ValueError("No database found")
 97 |         if "InChIKey" not in self.df_look_up.columns:
 98 |             raise ValueError("No InChIKey column found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
 99 |         if self.target_name not in self.df_look_up.columns:
100 |             raise ValueError("No target column found")
    |

src\stk_search\Objective_function.py:98:30: EM101 Exception must not use a string literal, assign to variable first
    |
 96 |             raise ValueError("No database found")
 97 |         if "InChIKey" not in self.df_look_up.columns:
 98 |             raise ValueError("No InChIKey column found")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
 99 |         if self.target_name not in self.df_look_up.columns:
100 |             raise ValueError("No target column found")
    |
    = help: Assign to variable; remove string literal

src\stk_search\Objective_function.py:100:19: TRY003 Avoid specifying long messages outside the exception class
    |
 98 |             raise ValueError("No InChIKey column found")
 99 |         if self.target_name not in self.df_look_up.columns:
100 |             raise ValueError("No target column found")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
101 |         if any([
102 |             f"InChIKey_{i}" not in self.df_look_up.columns for i in range(self.fragment_size)
    |

src\stk_search\Objective_function.py:100:30: EM101 Exception must not use a string literal, assign to variable first
    |
 98 |             raise ValueError("No InChIKey column found")
 99 |         if self.target_name not in self.df_look_up.columns:
100 |             raise ValueError("No target column found")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ EM101
101 |         if any([
102 |             f"InChIKey_{i}" not in self.df_look_up.columns for i in range(self.fragment_size)
    |
    = help: Assign to variable; remove string literal

src\stk_search\Objective_function.py:101:16: C419 Unnecessary list comprehension
    |
 99 |           if self.target_name not in self.df_look_up.columns:
100 |               raise ValueError("No target column found")
101 |           if any([
    |  ________________^
102 | |             f"InChIKey_{i}" not in self.df_look_up.columns for i in range(self.fragment_size)
103 | |         ]):
    | |_________^ C419
104 |               raise ValueError(
105 |                   "No fragment columns found or not enough fragment columns"
    |
    = help: Remove unnecessary list comprehension

src\stk_search\Objective_function.py:104:19: TRY003 Avoid specifying long messages outside the exception class
    |
102 |               f"InChIKey_{i}" not in self.df_look_up.columns for i in range(self.fragment_size)
103 |           ]):
104 |               raise ValueError(
    |  ___________________^
105 | |                 "No fragment columns found or not enough fragment columns"
106 | |             )
    | |_____________^ TRY003
107 |   
108 |       def evaluate_element(self, element, multiFidelity=False):
    |

src\stk_search\Objective_function.py:105:17: EM101 Exception must not use a string literal, assign to variable first
    |
103 |         ]):
104 |             raise ValueError(
105 |                 "No fragment columns found or not enough fragment columns"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
106 |             )
    |
    = help: Assign to variable; remove string literal

src\stk_search\Objective_function.py:108:9: D417 Missing argument descriptions in the docstring for `evaluate_element`: `element`, `multiFidelity`
    |
106 |             )
107 | 
108 |     def evaluate_element(self, element, multiFidelity=False):
    |         ^^^^^^^^^^^^^^^^ D417
109 |         """Evaluates the fitness of the element
110 |         takes as an input a list of building blocks and returns the fitness of the element
    |

src\stk_search\Objective_function.py:108:41: FBT002 Boolean default positional argument in function definition
    |
106 |             )
107 | 
108 |     def evaluate_element(self, element, multiFidelity=False):
    |                                         ^^^^^^^^^^^^^ FBT002
109 |         """Evaluates the fitness of the element
110 |         takes as an input a list of building blocks and returns the fitness of the element
    |

src\stk_search\Objective_function.py:108:41: N803 Argument name `multiFidelity` should be lowercase
    |
106 |             )
107 | 
108 |     def evaluate_element(self, element, multiFidelity=False):
    |                                         ^^^^^^^^^^^^^ N803
109 |         """Evaluates the fitness of the element
110 |         takes as an input a list of building blocks and returns the fitness of the element
    |

src\stk_search\Objective_function.py:109:9: D205 1 blank line required between summary line and description
    |
108 |       def evaluate_element(self, element, multiFidelity=False):
109 |           """Evaluates the fitness of the element
    |  _________^
110 | |         takes as an input a list of building blocks and returns the fitness of the element
111 | | 
112 | |         Parameters
113 | |         ----------
114 | |             element: list
115 | |             list of building blocks
116 | |             multiFidelity: bool
117 | |             if True, the function will return the fitness and the fidelity of the element
118 | | 
119 | |         Returns
120 | |         -------
121 | |             float
122 | |             the fitness of the element
123 | |             str
124 | |             the identifier of the element in the form of an InChIKey
125 | | 
126 | |         """
    | |___________^ D205
127 |           columns = [f"InChIKey_{i}" for i in range(self.fragment_size)]
128 |           if multiFidelity:
    |
    = help: Insert single blank line

src\stk_search\Objective_function.py:109:9: D400 First line should end with a period
    |
108 |       def evaluate_element(self, element, multiFidelity=False):
109 |           """Evaluates the fitness of the element
    |  _________^
110 | |         takes as an input a list of building blocks and returns the fitness of the element
111 | | 
112 | |         Parameters
113 | |         ----------
114 | |             element: list
115 | |             list of building blocks
116 | |             multiFidelity: bool
117 | |             if True, the function will return the fitness and the fidelity of the element
118 | | 
119 | |         Returns
120 | |         -------
121 | |             float
122 | |             the fitness of the element
123 | |             str
124 | |             the identifier of the element in the form of an InChIKey
125 | | 
126 | |         """
    | |___________^ D400
127 |           columns = [f"InChIKey_{i}" for i in range(self.fragment_size)]
128 |           if multiFidelity:
    |
    = help: Add period

src\stk_search\Objective_function.py:109:9: D401 First line of docstring should be in imperative mood: "Evaluates the fitness of the element"
    |
108 |       def evaluate_element(self, element, multiFidelity=False):
109 |           """Evaluates the fitness of the element
    |  _________^
110 | |         takes as an input a list of building blocks and returns the fitness of the element
111 | | 
112 | |         Parameters
113 | |         ----------
114 | |             element: list
115 | |             list of building blocks
116 | |             multiFidelity: bool
117 | |             if True, the function will return the fitness and the fidelity of the element
118 | | 
119 | |         Returns
120 | |         -------
121 | |             float
122 | |             the fitness of the element
123 | |             str
124 | |             the identifier of the element in the form of an InChIKey
125 | | 
126 | |         """
    | |___________^ D401
127 |           columns = [f"InChIKey_{i}" for i in range(self.fragment_size)]
128 |           if multiFidelity:
    |

src\stk_search\Objective_function.py:109:9: D415 First line should end with a period, question mark, or exclamation point
    |
108 |       def evaluate_element(self, element, multiFidelity=False):
109 |           """Evaluates the fitness of the element
    |  _________^
110 | |         takes as an input a list of building blocks and returns the fitness of the element
111 | | 
112 | |         Parameters
113 | |         ----------
114 | |             element: list
115 | |             list of building blocks
116 | |             multiFidelity: bool
117 | |             if True, the function will return the fitness and the fidelity of the element
118 | | 
119 | |         Returns
120 | |         -------
121 | |             float
122 | |             the fitness of the element
123 | |             str
124 | |             the identifier of the element in the form of an InChIKey
125 | | 
126 | |         """
    | |___________^ D415
127 |           columns = [f"InChIKey_{i}" for i in range(self.fragment_size)]
128 |           if multiFidelity:
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:138:13: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
136 |         results.drop_duplicates(
137 |             subset=[f"InChIKey_{i}" for i in range(self.fragment_size)],
138 |             inplace=True,
    |             ^^^^^^^^^^^^ PD002
139 |         )
140 |         if results[self.target_name].isna().any():
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Objective_function.py:141:13: T201 `print` found
    |
139 |         )
140 |         if results[self.target_name].isna().any():
141 |             print("missing data")
    |             ^^^^^ T201
142 |             raise ValueError("missing data")
143 |         if isinstance(self.aim, (int, float)):
    |
    = help: Remove `print`

src\stk_search\Objective_function.py:142:19: TRY003 Avoid specifying long messages outside the exception class
    |
140 |         if results[self.target_name].isna().any():
141 |             print("missing data")
142 |             raise ValueError("missing data")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
143 |         if isinstance(self.aim, (int, float)):
144 |             target = -np.abs(results[self.target_name][0] - self.aim)
    |

src\stk_search\Objective_function.py:142:30: EM101 Exception must not use a string literal, assign to variable first
    |
140 |         if results[self.target_name].isna().any():
141 |             print("missing data")
142 |             raise ValueError("missing data")
    |                              ^^^^^^^^^^^^^^ EM101
143 |         if isinstance(self.aim, (int, float)):
144 |             target = -np.abs(results[self.target_name][0] - self.aim)
    |
    = help: Assign to variable; remove string literal

src\stk_search\Objective_function.py:150:7: N801 Class name `IP_ES1_fosc` should use CapWords convention
    |
150 | class IP_ES1_fosc(Objective_Function):
    |       ^^^^^^^^^^^ N801
151 |     """Class for the IP_ES1_fosc objective function
152 |     The IP_ES1_fosc objective function is used to evaluate the fitness of the molecules by calculating the ionisation potential,
    |

src\stk_search\Objective_function.py:151:5: D205 1 blank line required between summary line and description
    |
150 |   class IP_ES1_fosc(Objective_Function):
151 |       """Class for the IP_ES1_fosc objective function
    |  _____^
152 | |     The IP_ES1_fosc objective function is used to evaluate the fitness of the molecules by calculating the ionisation potential,
153 | |     the first excited state energy and the first excited state oscillator strength.
154 | |     The fitness function is defined as:
155 | |     -np.abs(IP - 5.5) - 0.5 * np.abs(Es1 - 3) + np.log10
156 | |     where IP is the ionisation potential, Es1 is the first excited state energy and fosc_1 is the first excited state oscillator strength
157 | |     Here the quantum chemical calculation are done using xtb and stda
158 | | 
159 | |     Functions
160 | |     ---------
161 | |     evaluate_element(element, multiFidelity=False)
162 | |         Evaluates the fitness of the element
163 | |         takes as an input a list of building blocks and returns the fitness of the element
164 | | 
165 | |     Build_polymer(element, db)
166 | |         Builds the polymer from the building blocks
167 | |         takes as an input a list of building blocks and a database containing the building blocks
168 | |         returns the polymer
169 | |     run_xtb_opt(polymer, xtb_path, xtb_opt_output_dir, database, collection, client)
170 | |         Runs the xtb optimisation of the polymer
171 | |         takes as an input the polymer, the path to xtb, the output directory, the database and collection name and the client
172 | |         returns the optimised polymer
173 | |     run_xtb_ipea(polymer, xtb_path, xtb_opt_output_dir, database, collection, target, client)
174 | |         Runs the xtb calculation of the ionisation potential
175 | |         takes as an input the polymer, the path to xtb, the output directory, the database and collection name, the target and the client
176 | |         returns the ionisation potential
177 | |     run_stda(polymer, STDA_bin_path, output_dir, property, state, database, collection, client)
178 | |         Runs the stda calculation of the excited state energy and oscillator strength
179 | |         takes as an input the polymer, the path to stda, the output directory, the property, the state, the database and collection name and the client
180 | |         returns the excited state energy or oscillator strength
181 | | 
182 | | 
183 | | 
184 | |     """
    | |_______^ D205
185 |   
186 |       def __init__(
    |
    = help: Insert single blank line

src\stk_search\Objective_function.py:151:5: D400 First line should end with a period
    |
150 |   class IP_ES1_fosc(Objective_Function):
151 |       """Class for the IP_ES1_fosc objective function
    |  _____^
152 | |     The IP_ES1_fosc objective function is used to evaluate the fitness of the molecules by calculating the ionisation potential,
153 | |     the first excited state energy and the first excited state oscillator strength.
154 | |     The fitness function is defined as:
155 | |     -np.abs(IP - 5.5) - 0.5 * np.abs(Es1 - 3) + np.log10
156 | |     where IP is the ionisation potential, Es1 is the first excited state energy and fosc_1 is the first excited state oscillator strength
157 | |     Here the quantum chemical calculation are done using xtb and stda
158 | | 
159 | |     Functions
160 | |     ---------
161 | |     evaluate_element(element, multiFidelity=False)
162 | |         Evaluates the fitness of the element
163 | |         takes as an input a list of building blocks and returns the fitness of the element
164 | | 
165 | |     Build_polymer(element, db)
166 | |         Builds the polymer from the building blocks
167 | |         takes as an input a list of building blocks and a database containing the building blocks
168 | |         returns the polymer
169 | |     run_xtb_opt(polymer, xtb_path, xtb_opt_output_dir, database, collection, client)
170 | |         Runs the xtb optimisation of the polymer
171 | |         takes as an input the polymer, the path to xtb, the output directory, the database and collection name and the client
172 | |         returns the optimised polymer
173 | |     run_xtb_ipea(polymer, xtb_path, xtb_opt_output_dir, database, collection, target, client)
174 | |         Runs the xtb calculation of the ionisation potential
175 | |         takes as an input the polymer, the path to xtb, the output directory, the database and collection name, the target and the client
176 | |         returns the ionisation potential
177 | |     run_stda(polymer, STDA_bin_path, output_dir, property, state, database, collection, client)
178 | |         Runs the stda calculation of the excited state energy and oscillator strength
179 | |         takes as an input the polymer, the path to stda, the output directory, the property, the state, the database and collection name and the client
180 | |         returns the excited state energy or oscillator strength
181 | | 
182 | | 
183 | | 
184 | |     """
    | |_______^ D400
185 |   
186 |       def __init__(
    |
    = help: Add period

src\stk_search\Objective_function.py:151:5: D415 First line should end with a period, question mark, or exclamation point
    |
150 |   class IP_ES1_fosc(Objective_Function):
151 |       """Class for the IP_ES1_fosc objective function
    |  _____^
152 | |     The IP_ES1_fosc objective function is used to evaluate the fitness of the molecules by calculating the ionisation potential,
153 | |     the first excited state energy and the first excited state oscillator strength.
154 | |     The fitness function is defined as:
155 | |     -np.abs(IP - 5.5) - 0.5 * np.abs(Es1 - 3) + np.log10
156 | |     where IP is the ionisation potential, Es1 is the first excited state energy and fosc_1 is the first excited state oscillator strength
157 | |     Here the quantum chemical calculation are done using xtb and stda
158 | | 
159 | |     Functions
160 | |     ---------
161 | |     evaluate_element(element, multiFidelity=False)
162 | |         Evaluates the fitness of the element
163 | |         takes as an input a list of building blocks and returns the fitness of the element
164 | | 
165 | |     Build_polymer(element, db)
166 | |         Builds the polymer from the building blocks
167 | |         takes as an input a list of building blocks and a database containing the building blocks
168 | |         returns the polymer
169 | |     run_xtb_opt(polymer, xtb_path, xtb_opt_output_dir, database, collection, client)
170 | |         Runs the xtb optimisation of the polymer
171 | |         takes as an input the polymer, the path to xtb, the output directory, the database and collection name and the client
172 | |         returns the optimised polymer
173 | |     run_xtb_ipea(polymer, xtb_path, xtb_opt_output_dir, database, collection, target, client)
174 | |         Runs the xtb calculation of the ionisation potential
175 | |         takes as an input the polymer, the path to xtb, the output directory, the database and collection name, the target and the client
176 | |         returns the ionisation potential
177 | |     run_stda(polymer, STDA_bin_path, output_dir, property, state, database, collection, client)
178 | |         Runs the stda calculation of the excited state energy and oscillator strength
179 | |         takes as an input the polymer, the path to stda, the output directory, the property, the state, the database and collection name and the client
180 | |         returns the excited state energy or oscillator strength
181 | | 
182 | | 
183 | | 
184 | |     """
    | |_______^ D415
185 |   
186 |       def __init__(
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:186:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
184 |     """
185 | 
186 |     def __init__(
    |         ^^^^^^^^ PLR0913
187 |         self,
188 |         oligomer_size,
    |

src\stk_search\Objective_function.py:186:9: ANN204 Missing return type annotation for special method `__init__`
    |
184 |     """
185 | 
186 |     def __init__(
    |         ^^^^^^^^ ANN204
187 |         self,
188 |         oligomer_size,
    |
    = help: Add return type annotation: `None`

src\stk_search\Objective_function.py:186:9: D417 Missing argument descriptions in the docstring for `__init__`: `Db_folder`, `STDA_bin_path`, `client`, `collection_name`, `database_new_calc`, `db_mol`, `host_IP`, `oligomer_size`, `xtb_path`
    |
184 |     """
185 | 
186 |     def __init__(
    |         ^^^^^^^^ D417
187 |         self,
188 |         oligomer_size,
    |

src\stk_search\Objective_function.py:192:9: N803 Argument name `STDA_bin_path` should be lowercase
    |
190 |         db_mol="stk_mohammed",
191 |         xtb_path="/rds/general/user/ma11115/home/anaconda3/envs/ML/bin/xtb",
192 |         STDA_bin_path="/rds/general/user/ma11115/home/bin/stda_files/xtb4stda/",
    |         ^^^^^^^^^^^^^ N803
193 |         Db_folder="/rds/general/ephemeral/user/ma11115/ephemeral/BO_polymers",
194 |         database_new_calc="stk_mohammed_BO",
    |

src\stk_search\Objective_function.py:193:9: N803 Argument name `Db_folder` should be lowercase
    |
191 |         xtb_path="/rds/general/user/ma11115/home/anaconda3/envs/ML/bin/xtb",
192 |         STDA_bin_path="/rds/general/user/ma11115/home/bin/stda_files/xtb4stda/",
193 |         Db_folder="/rds/general/ephemeral/user/ma11115/ephemeral/BO_polymers",
    |         ^^^^^^^^^ N803
194 |         database_new_calc="stk_mohammed_BO",
195 |         collection_name=None,
    |

src\stk_search\Objective_function.py:196:9: N803 Argument name `host_IP` should be lowercase
    |
194 |         database_new_calc="stk_mohammed_BO",
195 |         collection_name=None,
196 |         host_IP="cx1",
    |         ^^^^^^^ N803
197 |     ):
198 |         """Initialises the IP_ES1_fosc objective function
    |

src\stk_search\Objective_function.py:198:9: D400 First line should end with a period
    |
196 |           host_IP="cx1",
197 |       ):
198 |           """Initialises the IP_ES1_fosc objective function
    |  _________^
199 | | 
200 | |         Parameters
201 | |         ----------
202 | |             oligomer_size: int
203 | |             the size of the oligomer
204 | |             client: str
205 | |             the path to the mongodb client
206 | |             db_mol: str
207 | |             the name of the database containing the building blocks
208 | |             the database should contain the building blocks position matrix and the InChIKey
209 | |             It is normally generated using stk and the stk.MoleculeMongoDb class
210 | |             xtb_path: str
211 | |             the path to the xtb executable
212 | |             STDA_bin_path: str
213 | |             the path to the stda executable
214 | |             Db_folder: str
215 | |             the path to the output directory
216 | |             database_new_calc: str
217 | |             the name of the database containing the new calculations
218 | |             collection_name: str
219 | |             the name of the collection
220 | |             host_IP: str
221 | |             the host IP
222 | | 
223 | |         """
    | |___________^ D400
224 |           self.client = client
225 |           self.db_mol = db_mol
    |
    = help: Add period

src\stk_search\Objective_function.py:198:9: D401 First line of docstring should be in imperative mood: "Initialises the IP_ES1_fosc objective function"
    |
196 |           host_IP="cx1",
197 |       ):
198 |           """Initialises the IP_ES1_fosc objective function
    |  _________^
199 | | 
200 | |         Parameters
201 | |         ----------
202 | |             oligomer_size: int
203 | |             the size of the oligomer
204 | |             client: str
205 | |             the path to the mongodb client
206 | |             db_mol: str
207 | |             the name of the database containing the building blocks
208 | |             the database should contain the building blocks position matrix and the InChIKey
209 | |             It is normally generated using stk and the stk.MoleculeMongoDb class
210 | |             xtb_path: str
211 | |             the path to the xtb executable
212 | |             STDA_bin_path: str
213 | |             the path to the stda executable
214 | |             Db_folder: str
215 | |             the path to the output directory
216 | |             database_new_calc: str
217 | |             the name of the database containing the new calculations
218 | |             collection_name: str
219 | |             the name of the collection
220 | |             host_IP: str
221 | |             the host IP
222 | | 
223 | |         """
    | |___________^ D401
224 |           self.client = client
225 |           self.db_mol = db_mol
    |

src\stk_search\Objective_function.py:198:9: D415 First line should end with a period, question mark, or exclamation point
    |
196 |           host_IP="cx1",
197 |       ):
198 |           """Initialises the IP_ES1_fosc objective function
    |  _________^
199 | | 
200 | |         Parameters
201 | |         ----------
202 | |             oligomer_size: int
203 | |             the size of the oligomer
204 | |             client: str
205 | |             the path to the mongodb client
206 | |             db_mol: str
207 | |             the name of the database containing the building blocks
208 | |             the database should contain the building blocks position matrix and the InChIKey
209 | |             It is normally generated using stk and the stk.MoleculeMongoDb class
210 | |             xtb_path: str
211 | |             the path to the xtb executable
212 | |             STDA_bin_path: str
213 | |             the path to the stda executable
214 | |             Db_folder: str
215 | |             the path to the output directory
216 | |             database_new_calc: str
217 | |             the name of the database containing the new calculations
218 | |             collection_name: str
219 | |             the name of the collection
220 | |             host_IP: str
221 | |             the host IP
222 | | 
223 | |         """
    | |___________^ D415
224 |           self.client = client
225 |           self.db_mol = db_mol
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:229:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
227 |         self.STDA_bin_path = STDA_bin_path
228 |         self.Db_folder = Db_folder
229 |         os.makedirs(self.Db_folder, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
230 |         self.database_new_calc = database_new_calc
231 |         self.collection_name = collection_name
    |

src\stk_search\Objective_function.py:240:9: D200 One-line docstring should fit on one line
    |
239 |       def test_mongo_db_connection(self):
240 |           """Tests the connection to the database
    |  _________^
241 | |         """
    | |___________^ D200
242 |           try:
243 |               client = pymongo.MongoClient(self.client)
    |
    = help: Reformat to one line

src\stk_search\Objective_function.py:240:9: D400 First line should end with a period
    |
239 |       def test_mongo_db_connection(self):
240 |           """Tests the connection to the database
    |  _________^
241 | |         """
    | |___________^ D400
242 |           try:
243 |               client = pymongo.MongoClient(self.client)
    |
    = help: Add period

src\stk_search\Objective_function.py:240:9: D415 First line should end with a period, question mark, or exclamation point
    |
239 |       def test_mongo_db_connection(self):
240 |           """Tests the connection to the database
    |  _________^
241 | |         """
    | |___________^ D415
242 |           try:
243 |               client = pymongo.MongoClient(self.client)
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:244:13: F841 Local variable `db_mol` is assigned to but never used
    |
242 |         try:
243 |             client = pymongo.MongoClient(self.client)
244 |             db_mol = stk.MoleculeMongoDb(
    |             ^^^^^^ F841
245 |                 client,
246 |                 database=self.db_mol,
    |
    = help: Remove assignment to unused variable `db_mol`

src\stk_search\Objective_function.py:248:13: T201 `print` found
    |
246 |                 database=self.db_mol,
247 |             )
248 |             print("Connection to the database successful")
    |             ^^^^^ T201
249 |         except Exception as e:
250 |             print("Connection to the database failed")
    |
    = help: Remove `print`

src\stk_search\Objective_function.py:249:16: BLE001 Do not catch blind exception: `Exception`
    |
247 |             )
248 |             print("Connection to the database successful")
249 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
250 |             print("Connection to the database failed")
251 |             print(e)
    |

src\stk_search\Objective_function.py:250:13: T201 `print` found
    |
248 |             print("Connection to the database successful")
249 |         except Exception as e:
250 |             print("Connection to the database failed")
    |             ^^^^^ T201
251 |             print(e)
    |
    = help: Remove `print`

src\stk_search\Objective_function.py:251:13: T201 `print` found
    |
249 |         except Exception as e:
250 |             print("Connection to the database failed")
251 |             print(e)
    |             ^^^^^ T201
252 | 
253 |     def test_xtb_stda_connection(self):
    |
    = help: Remove `print`

src\stk_search\Objective_function.py:254:9: D200 One-line docstring should fit on one line
    |
253 |       def test_xtb_stda_connection(self):
254 |           """Tests the connection to xtb and stda
    |  _________^
255 | |         """
    | |___________^ D200
256 |           try:
257 |               os.system(self.xtb_path + " --version")
    |
    = help: Reformat to one line

src\stk_search\Objective_function.py:254:9: D400 First line should end with a period
    |
253 |       def test_xtb_stda_connection(self):
254 |           """Tests the connection to xtb and stda
    |  _________^
255 | |         """
    | |___________^ D400
256 |           try:
257 |               os.system(self.xtb_path + " --version")
    |
    = help: Add period

src\stk_search\Objective_function.py:254:9: D415 First line should end with a period, question mark, or exclamation point
    |
253 |       def test_xtb_stda_connection(self):
254 |           """Tests the connection to xtb and stda
    |  _________^
255 | |         """
    | |___________^ D415
256 |           try:
257 |               os.system(self.xtb_path + " --version")
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:257:13: S605 Starting a process with a shell, possible injection detected
    |
255 |         """
256 |         try:
257 |             os.system(self.xtb_path + " --version")
    |             ^^^^^^^^^ S605
258 |             os.system(self.STDA_bin_path + " --version")
259 |             print("Connection to xtb and stda successful")
    |

src\stk_search\Objective_function.py:258:13: S605 Starting a process with a shell, possible injection detected
    |
256 |         try:
257 |             os.system(self.xtb_path + " --version")
258 |             os.system(self.STDA_bin_path + " --version")
    |             ^^^^^^^^^ S605
259 |             print("Connection to xtb and stda successful")
260 |         except Exception as e:
    |

src\stk_search\Objective_function.py:259:13: T201 `print` found
    |
257 |             os.system(self.xtb_path + " --version")
258 |             os.system(self.STDA_bin_path + " --version")
259 |             print("Connection to xtb and stda successful")
    |             ^^^^^ T201
260 |         except Exception as e:
261 |             print("Connection to xtb and stda failed")
    |
    = help: Remove `print`

src\stk_search\Objective_function.py:260:16: BLE001 Do not catch blind exception: `Exception`
    |
258 |             os.system(self.STDA_bin_path + " --version")
259 |             print("Connection to xtb and stda successful")
260 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
261 |             print("Connection to xtb and stda failed")
262 |             print(e)
    |

src\stk_search\Objective_function.py:261:13: T201 `print` found
    |
259 |             print("Connection to xtb and stda successful")
260 |         except Exception as e:
261 |             print("Connection to xtb and stda failed")
    |             ^^^^^ T201
262 |             print(e)
    |
    = help: Remove `print`

src\stk_search\Objective_function.py:262:13: T201 `print` found
    |
260 |         except Exception as e:
261 |             print("Connection to xtb and stda failed")
262 |             print(e)
    |             ^^^^^ T201
263 | 
264 |     def evaluate_element(self, element, multiFidelity=False):
    |
    = help: Remove `print`

src\stk_search\Objective_function.py:264:9: D417 Missing argument descriptions in the docstring for `evaluate_element`: `element`, `multiFidelity`
    |
262 |             print(e)
263 | 
264 |     def evaluate_element(self, element, multiFidelity=False):
    |         ^^^^^^^^^^^^^^^^ D417
265 |         """Evaluates the fitness of the element
266 |         takes as an input a list of building blocks and returns the fitness of the element
    |

src\stk_search\Objective_function.py:264:41: FBT002 Boolean default positional argument in function definition
    |
262 |             print(e)
263 | 
264 |     def evaluate_element(self, element, multiFidelity=False):
    |                                         ^^^^^^^^^^^^^ FBT002
265 |         """Evaluates the fitness of the element
266 |         takes as an input a list of building blocks and returns the fitness of the element
    |

src\stk_search\Objective_function.py:264:41: N803 Argument name `multiFidelity` should be lowercase
    |
262 |             print(e)
263 | 
264 |     def evaluate_element(self, element, multiFidelity=False):
    |                                         ^^^^^^^^^^^^^ N803
265 |         """Evaluates the fitness of the element
266 |         takes as an input a list of building blocks and returns the fitness of the element
    |

src\stk_search\Objective_function.py:264:41: ARG002 Unused method argument: `multiFidelity`
    |
262 |             print(e)
263 | 
264 |     def evaluate_element(self, element, multiFidelity=False):
    |                                         ^^^^^^^^^^^^^ ARG002
265 |         """Evaluates the fitness of the element
266 |         takes as an input a list of building blocks and returns the fitness of the element
    |

src\stk_search\Objective_function.py:265:9: D205 1 blank line required between summary line and description
    |
264 |       def evaluate_element(self, element, multiFidelity=False):
265 |           """Evaluates the fitness of the element
    |  _________^
266 | |         takes as an input a list of building blocks and returns the fitness of the element
267 | |         The evaluation here is done by first building the polymer from the building blocks
268 | |         then running the xtb optimisation, the xtb calculation of the ionisation potential and the stda calculation of the excited state energy and oscillator strength
269 | |         The fitness function is defined as:
270 | |         -np.abs(IP - 5.5) - 0.5 * np.abs(Es1 - 3) + np.log10(fosc_1 + 1e-10)
271 | |         where IP is the ionisation potential, Es1 is the first excited state energy and fosc_1 is the first excited state oscillator strength
272 | | 
273 | |         Parameters
274 | |         ----------
275 | |             element: list
276 | |             list of building blocks
277 | |             multiFidelity: bool
278 | |             if True, the function will return the fitness and the fidelity of the element
279 | | 
280 | |         Returns
281 | |         -------
282 | |             float
283 | |             the fitness of the element
284 | |             str
285 | |             the identifier of the element in the form of an InChIKey
286 | | 
287 | |         """
    | |___________^ D205
288 |           # initialise the database
289 |           client = pymongo.MongoClient(self.client)
    |
    = help: Insert single blank line

src\stk_search\Objective_function.py:265:9: D400 First line should end with a period
    |
264 |       def evaluate_element(self, element, multiFidelity=False):
265 |           """Evaluates the fitness of the element
    |  _________^
266 | |         takes as an input a list of building blocks and returns the fitness of the element
267 | |         The evaluation here is done by first building the polymer from the building blocks
268 | |         then running the xtb optimisation, the xtb calculation of the ionisation potential and the stda calculation of the excited state energy and oscillator strength
269 | |         The fitness function is defined as:
270 | |         -np.abs(IP - 5.5) - 0.5 * np.abs(Es1 - 3) + np.log10(fosc_1 + 1e-10)
271 | |         where IP is the ionisation potential, Es1 is the first excited state energy and fosc_1 is the first excited state oscillator strength
272 | | 
273 | |         Parameters
274 | |         ----------
275 | |             element: list
276 | |             list of building blocks
277 | |             multiFidelity: bool
278 | |             if True, the function will return the fitness and the fidelity of the element
279 | | 
280 | |         Returns
281 | |         -------
282 | |             float
283 | |             the fitness of the element
284 | |             str
285 | |             the identifier of the element in the form of an InChIKey
286 | | 
287 | |         """
    | |___________^ D400
288 |           # initialise the database
289 |           client = pymongo.MongoClient(self.client)
    |
    = help: Add period

src\stk_search\Objective_function.py:265:9: D401 First line of docstring should be in imperative mood: "Evaluates the fitness of the element"
    |
264 |       def evaluate_element(self, element, multiFidelity=False):
265 |           """Evaluates the fitness of the element
    |  _________^
266 | |         takes as an input a list of building blocks and returns the fitness of the element
267 | |         The evaluation here is done by first building the polymer from the building blocks
268 | |         then running the xtb optimisation, the xtb calculation of the ionisation potential and the stda calculation of the excited state energy and oscillator strength
269 | |         The fitness function is defined as:
270 | |         -np.abs(IP - 5.5) - 0.5 * np.abs(Es1 - 3) + np.log10(fosc_1 + 1e-10)
271 | |         where IP is the ionisation potential, Es1 is the first excited state energy and fosc_1 is the first excited state oscillator strength
272 | | 
273 | |         Parameters
274 | |         ----------
275 | |             element: list
276 | |             list of building blocks
277 | |             multiFidelity: bool
278 | |             if True, the function will return the fitness and the fidelity of the element
279 | | 
280 | |         Returns
281 | |         -------
282 | |             float
283 | |             the fitness of the element
284 | |             str
285 | |             the identifier of the element in the form of an InChIKey
286 | | 
287 | |         """
    | |___________^ D401
288 |           # initialise the database
289 |           client = pymongo.MongoClient(self.client)
    |

src\stk_search\Objective_function.py:265:9: D415 First line should end with a period, question mark, or exclamation point
    |
264 |       def evaluate_element(self, element, multiFidelity=False):
265 |           """Evaluates the fitness of the element
    |  _________^
266 | |         takes as an input a list of building blocks and returns the fitness of the element
267 | |         The evaluation here is done by first building the polymer from the building blocks
268 | |         then running the xtb optimisation, the xtb calculation of the ionisation potential and the stda calculation of the excited state energy and oscillator strength
269 | |         The fitness function is defined as:
270 | |         -np.abs(IP - 5.5) - 0.5 * np.abs(Es1 - 3) + np.log10(fosc_1 + 1e-10)
271 | |         where IP is the ionisation potential, Es1 is the first excited state energy and fosc_1 is the first excited state oscillator strength
272 | | 
273 | |         Parameters
274 | |         ----------
275 | |             element: list
276 | |             list of building blocks
277 | |             multiFidelity: bool
278 | |             if True, the function will return the fitness and the fidelity of the element
279 | | 
280 | |         Returns
281 | |         -------
282 | |             float
283 | |             the fitness of the element
284 | |             str
285 | |             the identifier of the element in the form of an InChIKey
286 | | 
287 | |         """
    | |___________^ D415
288 |           # initialise the database
289 |           client = pymongo.MongoClient(self.client)
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:296:9: N806 Variable `STDA_bin_path` in function should be lowercase
    |
294 |         # define the path to xtb and stda
295 |         xtb_path = self.xtb_path
296 |         STDA_bin_path = self.STDA_bin_path
    |         ^^^^^^^^^^^^^ N806
297 |         # define the output directories
298 |         Db_folder = self.Db_folder
    |

src\stk_search\Objective_function.py:298:9: N806 Variable `Db_folder` in function should be lowercase
    |
296 |         STDA_bin_path = self.STDA_bin_path
297 |         # define the output directories
298 |         Db_folder = self.Db_folder
    |         ^^^^^^^^^ N806
299 |         output_dir_ipea = os.path.join(
300 |             Db_folder, "Database", "xtb_calculations"
    |

src\stk_search\Objective_function.py:299:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
297 |         # define the output directories
298 |         Db_folder = self.Db_folder
299 |         output_dir_ipea = os.path.join(
    |                           ^^^^^^^^^^^^ PTH118
300 |             Db_folder, "Database", "xtb_calculations"
301 |         )
    |

src\stk_search\Objective_function.py:302:30: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
300 |             Db_folder, "Database", "xtb_calculations"
301 |         )
302 |         xtb_opt_output_dir = os.path.join(
    |                              ^^^^^^^^^^^^ PTH118
303 |             Db_folder, "Database", "xtb_opt_output_dir"
304 |         )
    |

src\stk_search\Objective_function.py:305:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
303 |             Db_folder, "Database", "xtb_opt_output_dir"
304 |         )
305 |         output_dir_stda = os.path.join(
    |                           ^^^^^^^^^^^^ PTH118
306 |             Db_folder, "Database", "stda_output_dir"
307 |         )
    |

src\stk_search\Objective_function.py:308:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
306 |             Db_folder, "Database", "stda_output_dir"
307 |         )
308 |         os.makedirs(output_dir_ipea, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
309 |         os.makedirs(xtb_opt_output_dir, exist_ok=True)
310 |         os.makedirs(output_dir_stda, exist_ok=True)
    |

src\stk_search\Objective_function.py:309:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
307 |         )
308 |         os.makedirs(output_dir_ipea, exist_ok=True)
309 |         os.makedirs(xtb_opt_output_dir, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
310 |         os.makedirs(output_dir_stda, exist_ok=True)
311 |         # define the database and collection name
    |

src\stk_search\Objective_function.py:310:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
308 |         os.makedirs(output_dir_ipea, exist_ok=True)
309 |         os.makedirs(xtb_opt_output_dir, exist_ok=True)
310 |         os.makedirs(output_dir_stda, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
311 |         # define the database and collection name
312 |         database_new_calc = self.database_new_calc
    |

src\stk_search\Objective_function.py:314:9: ERA001 Found commented-out code
    |
312 |         database_new_calc = self.database_new_calc
313 |         collection_name = self.collection_name
314 |         # print(collection_name)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
315 |         # build the polymer
316 |         polymer = self.Build_polymer(element, db=db_mol)
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:325:9: N806 Variable `Inchikey` in function should be lowercase
    |
323 |             client=client,
324 |         )
325 |         Inchikey = stk.InchiKey().get_key(polymer)
    |         ^^^^^^^^ N806
326 | 
327 |         IP = self.run_xtb_ipea(
    |

src\stk_search\Objective_function.py:327:9: N806 Variable `IP` in function should be lowercase
    |
325 |         Inchikey = stk.InchiKey().get_key(polymer)
326 | 
327 |         IP = self.run_xtb_ipea(
    |         ^^ N806
328 |             polymer,
329 |             xtb_path,
    |

src\stk_search\Objective_function.py:336:9: N806 Variable `Es1` in function should be lowercase
    |
334 |             client=client,
335 |         )
336 |         Es1 = self.run_stda(
    |         ^^^ N806
337 |             polymer,
338 |             STDA_bin_path,
    |

src\stk_search\Objective_function.py:363:9: N802 Function name `Build_polymer` should be lowercase
    |
361 |         return fitness_function, Inchikey
362 | 
363 |     def Build_polymer(
    |         ^^^^^^^^^^^^^ N802
364 |         self, element: pd.DataFrame, db: stk.MoleculeMongoDb = None
365 |     ):
    |

src\stk_search\Objective_function.py:363:9: D417 Missing argument descriptions in the docstring for `Build_polymer`: `db`, `element`
    |
361 |         return fitness_function, Inchikey
362 | 
363 |     def Build_polymer(
    |         ^^^^^^^^^^^^^ D417
364 |         self, element: pd.DataFrame, db: stk.MoleculeMongoDb = None
365 |     ):
    |

src\stk_search\Objective_function.py:366:9: D205 1 blank line required between summary line and description
    |
364 |           self, element: pd.DataFrame, db: stk.MoleculeMongoDb = None
365 |       ):
366 |           """Builds the polymer from the building blocks
    |  _________^
367 | |         takes as an input a list of building blocks and a database containing the building blocks
368 | |         returns the polymer
369 | | 
370 | |         Parameters
371 | |         ----------
372 | |             element: pd.DataFrame
373 | |             the dataframe containing the building blocks
374 | |             db: stk.MoleculeMongoDb
375 | |             the database containing the building blocks
376 | | 
377 | |         Returns
378 | |         -------
379 | |             stk.ConstructedMolecule
380 | |             the polymer
381 | | 
382 | |         """
    | |___________^ D205
383 |           precursors = []
384 |           genes = "ABCDEFGH"
    |
    = help: Insert single blank line

src\stk_search\Objective_function.py:366:9: D400 First line should end with a period
    |
364 |           self, element: pd.DataFrame, db: stk.MoleculeMongoDb = None
365 |       ):
366 |           """Builds the polymer from the building blocks
    |  _________^
367 | |         takes as an input a list of building blocks and a database containing the building blocks
368 | |         returns the polymer
369 | | 
370 | |         Parameters
371 | |         ----------
372 | |             element: pd.DataFrame
373 | |             the dataframe containing the building blocks
374 | |             db: stk.MoleculeMongoDb
375 | |             the database containing the building blocks
376 | | 
377 | |         Returns
378 | |         -------
379 | |             stk.ConstructedMolecule
380 | |             the polymer
381 | | 
382 | |         """
    | |___________^ D400
383 |           precursors = []
384 |           genes = "ABCDEFGH"
    |
    = help: Add period

src\stk_search\Objective_function.py:366:9: D401 First line of docstring should be in imperative mood: "Builds the polymer from the building blocks"
    |
364 |           self, element: pd.DataFrame, db: stk.MoleculeMongoDb = None
365 |       ):
366 |           """Builds the polymer from the building blocks
    |  _________^
367 | |         takes as an input a list of building blocks and a database containing the building blocks
368 | |         returns the polymer
369 | | 
370 | |         Parameters
371 | |         ----------
372 | |             element: pd.DataFrame
373 | |             the dataframe containing the building blocks
374 | |             db: stk.MoleculeMongoDb
375 | |             the database containing the building blocks
376 | | 
377 | |         Returns
378 | |         -------
379 | |             stk.ConstructedMolecule
380 | |             the polymer
381 | | 
382 | |         """
    | |___________^ D401
383 |           precursors = []
384 |           genes = "ABCDEFGH"
    |

src\stk_search\Objective_function.py:366:9: D415 First line should end with a period, question mark, or exclamation point
    |
364 |           self, element: pd.DataFrame, db: stk.MoleculeMongoDb = None
365 |       ):
366 |           """Builds the polymer from the building blocks
    |  _________^
367 | |         takes as an input a list of building blocks and a database containing the building blocks
368 | |         returns the polymer
369 | | 
370 | |         Parameters
371 | |         ----------
372 | |             element: pd.DataFrame
373 | |             the dataframe containing the building blocks
374 | |             db: stk.MoleculeMongoDb
375 | |             the database containing the building blocks
376 | | 
377 | |         Returns
378 | |         -------
379 | |             stk.ConstructedMolecule
380 | |             the polymer
381 | | 
382 | |         """
    | |___________^ D415
383 |           precursors = []
384 |           genes = "ABCDEFGH"
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:386:9: ERA001 Found commented-out code
    |
384 |         genes = "ABCDEFGH"
385 |         genes = genes[: self.oligomer_size]
386 |         # print(genes)
    |         ^^^^^^^^^^^^^^ ERA001
387 |         repeating_unit = ""
388 |         # joins the Genes to make a repeating unit string
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:390:9: N806 Variable `InchiKey_cols` in function should be lowercase
    |
388 |         # joins the Genes to make a repeating unit string
389 |         repeating_unit = repeating_unit.join(genes)
390 |         InchiKey_cols = [col for col in element.columns if "InChIKey_" in col]
    |         ^^^^^^^^^^^^^ N806
391 |         # print(element[InchiKey_cols].values.flatten())
392 |         for fragment in element[InchiKey_cols].values.flatten():
    |

src\stk_search\Objective_function.py:391:9: ERA001 Found commented-out code
    |
389 |         repeating_unit = repeating_unit.join(genes)
390 |         InchiKey_cols = [col for col in element.columns if "InChIKey_" in col]
391 |         # print(element[InchiKey_cols].values.flatten())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
392 |         for fragment in element[InchiKey_cols].values.flatten():
393 |             mol = db.get({"InChIKey": fragment})
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:392:25: PD011 Use `.to_numpy()` instead of `.values`
    |
390 |         InchiKey_cols = [col for col in element.columns if "InChIKey_" in col]
391 |         # print(element[InchiKey_cols].values.flatten())
392 |         for fragment in element[InchiKey_cols].values.flatten():
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
393 |             mol = db.get({"InChIKey": fragment})
394 |             bb = stk.BuildingBlock.init_from_molecule(
    |

src\stk_search\Objective_function.py:403:17: ERA001 Found commented-out code
    |
401 |                 repeating_unit=repeating_unit,
402 |                 num_repeating_units=1,
403 |                 # optimizer=stk.MCHammer()
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
404 |             )
405 |         )
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:406:16: RET504 Unnecessary assignment to `polymer` before `return` statement
    |
404 |             )
405 |         )
406 |         return polymer
    |                ^^^^^^^ RET504
407 | 
408 |     def run_xtb_opt(
    |
    = help: Remove unnecessary assignment

src\stk_search\Objective_function.py:408:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
406 |         return polymer
407 | 
408 |     def run_xtb_opt(
    |         ^^^^^^^^^^^ PLR0913
409 |         self,
410 |         polymer,
    |

src\stk_search\Objective_function.py:408:9: D417 Missing argument descriptions in the docstring for `run_xtb_opt`: `client`, `collection`, `database`, `polymer`, `xtb_opt_output_dir`, `xtb_path`
    |
406 |         return polymer
407 | 
408 |     def run_xtb_opt(
    |         ^^^^^^^^^^^ D417
409 |         self,
410 |         polymer,
    |

src\stk_search\Objective_function.py:417:9: D400 First line should end with a period
    |
415 |           client=None,
416 |       ):
417 |           """Runs the xtb optimisation of the polymer
    |  _________^
418 | | 
419 | |         Parameters
420 | |         ----------
421 | |             polymer: stk.ConstructedMolecule
422 | |             the polymer
423 | |             xtb_path: str
424 | |             the path to the xtb executable
425 | |             xtb_opt_output_dir: str
426 | |             the output directory
427 | |             database: str
428 | |             the name of the database
429 | |             collection: str
430 | |             the name of the collection
431 | |             client: pymongo.MongoClient
432 | |             the client
433 | | 
434 | |         Returns
435 | |         -------
436 | |             stk.ConstructedMolecule
437 | |             the optimised polymer
438 | | 
439 | |         """
    | |___________^ D400
440 |   
441 |           def save_xtb_opt_calculation(
    |
    = help: Add period

src\stk_search\Objective_function.py:417:9: D401 First line of docstring should be in imperative mood: "Runs the xtb optimisation of the polymer"
    |
415 |           client=None,
416 |       ):
417 |           """Runs the xtb optimisation of the polymer
    |  _________^
418 | | 
419 | |         Parameters
420 | |         ----------
421 | |             polymer: stk.ConstructedMolecule
422 | |             the polymer
423 | |             xtb_path: str
424 | |             the path to the xtb executable
425 | |             xtb_opt_output_dir: str
426 | |             the output directory
427 | |             database: str
428 | |             the name of the database
429 | |             collection: str
430 | |             the name of the collection
431 | |             client: pymongo.MongoClient
432 | |             the client
433 | | 
434 | |         Returns
435 | |         -------
436 | |             stk.ConstructedMolecule
437 | |             the optimised polymer
438 | | 
439 | |         """
    | |___________^ D401
440 |   
441 |           def save_xtb_opt_calculation(
    |

src\stk_search\Objective_function.py:417:9: D415 First line should end with a period, question mark, or exclamation point
    |
415 |           client=None,
416 |       ):
417 |           """Runs the xtb optimisation of the polymer
    |  _________^
418 | | 
419 | |         Parameters
420 | |         ----------
421 | |             polymer: stk.ConstructedMolecule
422 | |             the polymer
423 | |             xtb_path: str
424 | |             the path to the xtb executable
425 | |             xtb_opt_output_dir: str
426 | |             the output directory
427 | |             database: str
428 | |             the name of the database
429 | |             collection: str
430 | |             the name of the collection
431 | |             client: pymongo.MongoClient
432 | |             the client
433 | | 
434 | |         Returns
435 | |         -------
436 | |             stk.ConstructedMolecule
437 | |             the optimised polymer
438 | | 
439 | |         """
    | |___________^ D415
440 |   
441 |           def save_xtb_opt_calculation(
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:441:13: ANN202 Missing return type annotation for private function `save_xtb_opt_calculation`
    |
439 |         """
440 | 
441 |         def save_xtb_opt_calculation(
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
442 |             polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
443 |         ):
    |
    = help: Add return type annotation: `None`

src\stk_search\Objective_function.py:441:13: D417 Missing argument descriptions in the docstring for `save_xtb_opt_calculation`: `InchiKey_initial`, `collection`, `polymer`, `xtb_opt_output_dir`
    |
439 |         """
440 | 
441 |         def save_xtb_opt_calculation(
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ D417
442 |             polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
443 |         ):
    |

src\stk_search\Objective_function.py:442:59: N803 Argument name `InchiKey_initial` should be lowercase
    |
441 |         def save_xtb_opt_calculation(
442 |             polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
    |                                                           ^^^^^^^^^^^^^^^^ N803
443 |         ):
444 |             """Saves the xtb optimisation calculation
    |

src\stk_search\Objective_function.py:444:13: D400 First line should end with a period
    |
442 |               polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
443 |           ):
444 |               """Saves the xtb optimisation calculation
    |  _____________^
445 | |             
446 | |             Parameters
447 | |             ----------
448 | |                 polymer: stk.ConstructedMolecule
449 | |                 the polymer
450 | |                 xtb_opt_output_dir: str
451 | |                 the output directory
452 | |                 collection: pymongo.collection
453 | |                 the collection
454 | |                 InchiKey_initial: str
455 | |                 the initial InChIKey
456 | |                 
457 | |             
458 | |             Returns
459 | |             -------
460 | |             None
461 | | 
462 | |             """
    | |_______________^ D400
463 |               def get_property_value(data, property_name):
464 |                   for line in data:
    |
    = help: Add period

src\stk_search\Objective_function.py:444:13: D401 First line of docstring should be in imperative mood: "Saves the xtb optimisation calculation"
    |
442 |               polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
443 |           ):
444 |               """Saves the xtb optimisation calculation
    |  _____________^
445 | |             
446 | |             Parameters
447 | |             ----------
448 | |                 polymer: stk.ConstructedMolecule
449 | |                 the polymer
450 | |                 xtb_opt_output_dir: str
451 | |                 the output directory
452 | |                 collection: pymongo.collection
453 | |                 the collection
454 | |                 InchiKey_initial: str
455 | |                 the initial InChIKey
456 | |                 
457 | |             
458 | |             Returns
459 | |             -------
460 | |             None
461 | | 
462 | |             """
    | |_______________^ D401
463 |               def get_property_value(data, property_name):
464 |                   for line in data:
    |

src\stk_search\Objective_function.py:444:13: D415 First line should end with a period, question mark, or exclamation point
    |
442 |               polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
443 |           ):
444 |               """Saves the xtb optimisation calculation
    |  _____________^
445 | |             
446 | |             Parameters
447 | |             ----------
448 | |                 polymer: stk.ConstructedMolecule
449 | |                 the polymer
450 | |                 xtb_opt_output_dir: str
451 | |                 the output directory
452 | |                 collection: pymongo.collection
453 | |                 the collection
454 | |                 InchiKey_initial: str
455 | |                 the initial InChIKey
456 | |                 
457 | |             
458 | |             Returns
459 | |             -------
460 | |             None
461 | | 
462 | |             """
    | |_______________^ D415
463 |               def get_property_value(data, property_name):
464 |                   for line in data:
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:445:1: W293 Blank line contains whitespace
    |
443 |         ):
444 |             """Saves the xtb optimisation calculation
445 |             
    | ^^^^^^^^^^^^ W293
446 |             Parameters
447 |             ----------
    |
    = help: Remove whitespace from blank line

src\stk_search\Objective_function.py:456:1: W293 Blank line contains whitespace
    |
454 |                 InchiKey_initial: str
455 |                 the initial InChIKey
456 |                 
    | ^^^^^^^^^^^^^^^^ W293
457 |             
458 |             Returns
    |
    = help: Remove whitespace from blank line

src\stk_search\Objective_function.py:457:1: W293 Blank line contains whitespace
    |
455 |                 the initial InChIKey
456 |                 
457 |             
    | ^^^^^^^^^^^^ W293
458 |             Returns
459 |             -------
    |
    = help: Remove whitespace from blank line

src\stk_search\Objective_function.py:463:17: ANN202 Missing return type annotation for private function `get_property_value`
    |
462 |             """
463 |             def get_property_value(data, property_name):
    |                 ^^^^^^^^^^^^^^^^^^ ANN202
464 |                 for line in data:
465 |                     if property_name in line:
    |
    = help: Add return type annotation

src\stk_search\Objective_function.py:464:17: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
462 |               """
463 |               def get_property_value(data, property_name):
464 |                   for line in data:
    |  _________________^
465 | |                     if property_name in line:
466 | |                         if property_name == "cpu-time":
467 | |                             property_value = (
468 | |                                 re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-3]
469 | |                                 + " h "
470 | |                                 + re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-2]
471 | |                                 + " min "
472 | |                                 + re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
473 | |                                 + " s "
474 | |                             )
475 | |                             return property_value
476 | |                         property_value = float(
477 | |                             re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
478 | |                         )  # float(words[3]) #
479 | |                         return property_value
    | |_____________________________________________^ RET503
480 |   
481 |               polymer_xtb_opt_calc = {
    |
    = help: Add explicit `return` statement

src\stk_search\Objective_function.py:475:36: RET504 Unnecessary assignment to `property_value` before `return` statement
    |
473 |                                 + " s "
474 |                             )
475 |                             return property_value
    |                                    ^^^^^^^^^^^^^^ RET504
476 |                         property_value = float(
477 |                             re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
    |
    = help: Remove unnecessary assignment

src\stk_search\Objective_function.py:479:32: RET504 Unnecessary assignment to `property_value` before `return` statement
    |
477 |                             re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
478 |                         )  # float(words[3]) #
479 |                         return property_value
    |                                ^^^^^^^^^^^^^^ RET504
480 | 
481 |             polymer_xtb_opt_calc = {
    |
    = help: Remove unnecessary assignment

src\stk_search\Objective_function.py:483:31: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
481 |             polymer_xtb_opt_calc = {
482 |                 "InChIKey": stk.InchiKey().get_key(polymer),
483 |                 "cal_folder": os.path.join(
    |                               ^^^^^^^^^^^^ PTH118
484 |                     xtb_opt_output_dir, stk.InchiKey().get_key(polymer)
485 |                 ),
    |

src\stk_search\Objective_function.py:489:23: SIM115 Use context handler for opening files
    |
487 |                 "InChIKey_initial": InchiKey_initial,
488 |             }
489 |             outfile = open(
    |                       ^^^^ SIM115
490 |                 os.path.join(
491 |                     polymer_xtb_opt_calc["cal_folder"], "optimization_1.output"
    |

src\stk_search\Objective_function.py:489:23: PTH123 `open()` should be replaced by `Path.open()`
    |
487 |                 "InChIKey_initial": InchiKey_initial,
488 |             }
489 |             outfile = open(
    |                       ^^^^ PTH123
490 |                 os.path.join(
491 |                     polymer_xtb_opt_calc["cal_folder"], "optimization_1.output"
    |

src\stk_search\Objective_function.py:490:17: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
488 |             }
489 |             outfile = open(
490 |                 os.path.join(
    |                 ^^^^^^^^^^^^ PTH118
491 |                     polymer_xtb_opt_calc["cal_folder"], "optimization_1.output"
492 |                 ),
    |

src\stk_search\Objective_function.py:517:13: ERA001 Found commented-out code
    |
515 |             is not None
516 |         ):
517 |             # print("already calculated", end="\r")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
518 | 
519 |             db_polymer = stk.ConstructedMoleculeMongoDb(
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:524:13: ERA001 Found commented-out code
    |
522 |             )
523 |             polymer = db_polymer.get({"InChIKey": get_inchi_key(polymer)})
524 |             # print(get_inchi_key(polymer), ' opt geom already calculated')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
525 |             return polymer
526 |         if (
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:525:20: RET504 Unnecessary assignment to `polymer` before `return` statement
    |
523 |             polymer = db_polymer.get({"InChIKey": get_inchi_key(polymer)})
524 |             # print(get_inchi_key(polymer), ' opt geom already calculated')
525 |             return polymer
    |                    ^^^^^^^ RET504
526 |         if (
527 |             collection.find_one({"InChIKey_initial": get_inchi_key(polymer)})
    |
    = help: Remove unnecessary assignment

src\stk_search\Objective_function.py:530:13: ERA001 Found commented-out code
    |
528 |             is not None
529 |         ):
530 |             # print("already calculated", end="\r")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
531 |             db_polymer = stk.ConstructedMoleculeMongoDb(
532 |                 client,
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:538:13: ERA001 Found commented-out code
    |
536 |                 {"InChIKey_initial": get_inchi_key(polymer)}
537 |             )
538 |             # print(get_inchi_key(polymer), ' opt geom already calculated with old geom')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
539 | 
540 |             polymer = db_polymer.get({"InChIKey": data["InChIKey"]})
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:541:20: RET504 Unnecessary assignment to `polymer` before `return` statement
    |
540 |             polymer = db_polymer.get({"InChIKey": data["InChIKey"]})
541 |             return polymer
    |                    ^^^^^^^ RET504
542 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
543 |         InchiKey_initial = get_inchi_key(polymer)
    |
    = help: Remove unnecessary assignment

src\stk_search\Objective_function.py:542:22: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
540 |             polymer = db_polymer.get({"InChIKey": data["InChIKey"]})
541 |             return polymer
542 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
    |                      ^^^^^^^^^^^^ PTH118
543 |         InchiKey_initial = get_inchi_key(polymer)
544 |         xtb = stko.OptimizerSequence(
    |

src\stk_search\Objective_function.py:543:9: N806 Variable `InchiKey_initial` in function should be lowercase
    |
541 |             return polymer
542 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
543 |         InchiKey_initial = get_inchi_key(polymer)
    |         ^^^^^^^^^^^^^^^^ N806
544 |         xtb = stko.OptimizerSequence(
545 |             stko.ETKDG(),
    |

src\stk_search\Objective_function.py:554:26: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
552 |         )
553 |         polymer = xtb.optimize(polymer)
554 |         new_output_dir = os.path.join(
    |                          ^^^^^^^^^^^^ PTH118
555 |             xtb_opt_output_dir, get_inchi_key(polymer)
556 |         )
    |

src\stk_search\Objective_function.py:557:9: PTH104 `os.rename()` should be replaced by `Path.rename()`
    |
555 |             xtb_opt_output_dir, get_inchi_key(polymer)
556 |         )
557 |         os.rename(output_dir, new_output_dir)
    |         ^^^^^^^^^ PTH104
558 |         save_xtb_opt_calculation(
559 |             polymer,
    |

src\stk_search\Objective_function.py:571:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
569 |         return polymer
570 | 
571 |     def run_xtb_ipea(
    |         ^^^^^^^^^^^^ PLR0913
572 |         self,
573 |         polymer,
    |

src\stk_search\Objective_function.py:571:9: D417 Missing argument descriptions in the docstring for `run_xtb_ipea`: `client`, `collection`, `database`, `polymer`, `target`, `xtb_opt_output_dir`, `xtb_path`
    |
569 |         return polymer
570 | 
571 |     def run_xtb_ipea(
    |         ^^^^^^^^^^^^ D417
572 |         self,
573 |         polymer,
    |

src\stk_search\Objective_function.py:581:9: D400 First line should end with a period
    |
579 |           client=None,
580 |       ):
581 |           """Runs the xtb calculation of the ionisation potential
    |  _________^
582 | | 
583 | |         Parameters
584 | |         ----------
585 | |             polymer: stk.ConstructedMolecule
586 | |             the polymer
587 | |             xtb_path: str
588 | |             the path to the xtb executable
589 | |             xtb_opt_output_dir: str
590 | |             the output directory
591 | |             database: str
592 | |             the name of the database
593 | |             collection: str
594 | |             the name of the collection
595 | |             target: str
596 | |             the target
597 | |             client: pymongo.MongoClient
598 | |             the client
599 | | 
600 | |         Returns
601 | |         -------
602 | |             float
603 | |             the ionisation potential
604 | | 
605 | |         """
    | |___________^ D400
606 |           collection = client[database][collection]
607 |           XTB_results = collection.find_one({"InChIKey": get_inchi_key(polymer)})
    |
    = help: Add period

src\stk_search\Objective_function.py:581:9: D401 First line of docstring should be in imperative mood: "Runs the xtb calculation of the ionisation potential"
    |
579 |           client=None,
580 |       ):
581 |           """Runs the xtb calculation of the ionisation potential
    |  _________^
582 | | 
583 | |         Parameters
584 | |         ----------
585 | |             polymer: stk.ConstructedMolecule
586 | |             the polymer
587 | |             xtb_path: str
588 | |             the path to the xtb executable
589 | |             xtb_opt_output_dir: str
590 | |             the output directory
591 | |             database: str
592 | |             the name of the database
593 | |             collection: str
594 | |             the name of the collection
595 | |             target: str
596 | |             the target
597 | |             client: pymongo.MongoClient
598 | |             the client
599 | | 
600 | |         Returns
601 | |         -------
602 | |             float
603 | |             the ionisation potential
604 | | 
605 | |         """
    | |___________^ D401
606 |           collection = client[database][collection]
607 |           XTB_results = collection.find_one({"InChIKey": get_inchi_key(polymer)})
    |

src\stk_search\Objective_function.py:581:9: D415 First line should end with a period, question mark, or exclamation point
    |
579 |           client=None,
580 |       ):
581 |           """Runs the xtb calculation of the ionisation potential
    |  _________^
582 | | 
583 | |         Parameters
584 | |         ----------
585 | |             polymer: stk.ConstructedMolecule
586 | |             the polymer
587 | |             xtb_path: str
588 | |             the path to the xtb executable
589 | |             xtb_opt_output_dir: str
590 | |             the output directory
591 | |             database: str
592 | |             the name of the database
593 | |             collection: str
594 | |             the name of the collection
595 | |             target: str
596 | |             the target
597 | |             client: pymongo.MongoClient
598 | |             the client
599 | | 
600 | |         Returns
601 | |         -------
602 | |             float
603 | |             the ionisation potential
604 | | 
605 | |         """
    | |___________^ D415
606 |           collection = client[database][collection]
607 |           XTB_results = collection.find_one({"InChIKey": get_inchi_key(polymer)})
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:607:9: N806 Variable `XTB_results` in function should be lowercase
    |
605 |         """
606 |         collection = client[database][collection]
607 |         XTB_results = collection.find_one({"InChIKey": get_inchi_key(polymer)})
    |         ^^^^^^^^^^^ N806
608 |         if XTB_results is not None:
609 |             # print("already calculated", end="\r")
    |

src\stk_search\Objective_function.py:609:13: ERA001 Found commented-out code
    |
607 |         XTB_results = collection.find_one({"InChIKey": get_inchi_key(polymer)})
608 |         if XTB_results is not None:
609 |             # print("already calculated", end="\r")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
610 |             # print(get_inchi_key(polymer), ' ipea geom already calculated')
611 |             return XTB_results[target]
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:610:13: ERA001 Found commented-out code
    |
608 |         if XTB_results is not None:
609 |             # print("already calculated", end="\r")
610 |             # print(get_inchi_key(polymer), ' ipea geom already calculated')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
611 |             return XTB_results[target]
612 |         xtb = XTBEnergy2(
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:614:24: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
612 |         xtb = XTBEnergy2(
613 |             xtb_path=xtb_path,
614 |             output_dir=os.path.join(
    |                        ^^^^^^^^^^^^ PTH118
615 |                 xtb_opt_output_dir, get_inchi_key(polymer)
616 |             ),
    |

src\stk_search\Objective_function.py:622:9: N806 Variable `XTB_results` in function should be lowercase
    |
620 |         )
621 |         xtb_results = xtb.get_results(polymer)
622 |         XTB_results = {
    |         ^^^^^^^^^^^ N806
623 |             "total energy (au)": xtb_results.get_total_energy()[0],
624 |             "homo lumo_gap (eV)": xtb_results.get_homo_lumo_gap()[0],
    |

src\stk_search\Objective_function.py:630:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
628 |             ],
629 |             "InChIKey": get_inchi_key(polymer),
630 |             "cal_folder": os.path.join(
    |                           ^^^^^^^^^^^^ PTH118
631 |                 xtb_opt_output_dir, get_inchi_key(polymer)
632 |             ),
    |

src\stk_search\Objective_function.py:642:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
640 |         return XTB_results[target]
641 | 
642 |     def run_stda(
    |         ^^^^^^^^ PLR0913
643 |         self,
644 |         polymer,
    |

src\stk_search\Objective_function.py:642:9: D417 Missing argument descriptions in the docstring for `run_stda`: `STDA_bin_path`, `client`, `collection`, `database`, `output_dir`, `polymer`, `property`, `state`
    |
640 |         return XTB_results[target]
641 | 
642 |     def run_stda(
    |         ^^^^^^^^ D417
643 |         self,
644 |         polymer,
    |

src\stk_search\Objective_function.py:645:9: N803 Argument name `STDA_bin_path` should be lowercase
    |
643 |         self,
644 |         polymer,
645 |         STDA_bin_path,
    |         ^^^^^^^^^^^^^ N803
646 |         output_dir,
647 |         property="Excited state energy (eV)",
    |

src\stk_search\Objective_function.py:647:9: A002 Argument `property` is shadowing a Python builtin
    |
645 |         STDA_bin_path,
646 |         output_dir,
647 |         property="Excited state energy (eV)",
    |         ^^^^^^^^ A002
648 |         state=1,
649 |         database="stk_mohammed",
    |

src\stk_search\Objective_function.py:653:9: D400 First line should end with a period
    |
651 |           client=None,
652 |       ):
653 |           """Run XTB-stda
    |  _________^
654 | | 
655 | |         Parameters
656 | |         ----------
657 | |             polymer: stk.ConstructedMolecule
658 | |             the polymer
659 | |             STDA_bin_path: str
660 | |             the path to the STDA xtb executable
661 | |             output_dir: str
662 | |             the output directory
663 | |             Properte: str   
664 | |             the property to output 
665 | |             state: int
666 | |             the excited state for which we output the property
667 | |             database: str
668 | |             the name of the database
669 | |             collection: str
670 | |             the name of the collection
671 | |             target: str
672 | |             the target
673 | |             client: pymongo.MongoClient
674 | |             the client
675 | | 
676 | |         Returns
677 | |         -------
678 | |             float
679 | |             The property of interrest
680 | | 
681 | |         """
    | |___________^ D400
682 |           collection = client[database][collection]
683 |           STDA_results = collection.find_one(
    |
    = help: Add period

src\stk_search\Objective_function.py:653:9: D415 First line should end with a period, question mark, or exclamation point
    |
651 |           client=None,
652 |       ):
653 |           """Run XTB-stda
    |  _________^
654 | | 
655 | |         Parameters
656 | |         ----------
657 | |             polymer: stk.ConstructedMolecule
658 | |             the polymer
659 | |             STDA_bin_path: str
660 | |             the path to the STDA xtb executable
661 | |             output_dir: str
662 | |             the output directory
663 | |             Properte: str   
664 | |             the property to output 
665 | |             state: int
666 | |             the excited state for which we output the property
667 | |             database: str
668 | |             the name of the database
669 | |             collection: str
670 | |             the name of the collection
671 | |             target: str
672 | |             the target
673 | |             client: pymongo.MongoClient
674 | |             the client
675 | | 
676 | |         Returns
677 | |         -------
678 | |             float
679 | |             The property of interrest
680 | | 
681 | |         """
    | |___________^ D415
682 |           collection = client[database][collection]
683 |           STDA_results = collection.find_one(
    |
    = help: Add closing punctuation

src\stk_search\Objective_function.py:663:26: W291 Trailing whitespace
    |
661 |             output_dir: str
662 |             the output directory
663 |             Properte: str   
    |                          ^^^ W291
664 |             the property to output 
665 |             state: int
    |
    = help: Remove trailing whitespace

src\stk_search\Objective_function.py:664:35: W291 Trailing whitespace
    |
662 |             the output directory
663 |             Properte: str   
664 |             the property to output 
    |                                   ^ W291
665 |             state: int
666 |             the excited state for which we output the property
    |
    = help: Remove trailing whitespace

src\stk_search\Objective_function.py:683:9: N806 Variable `STDA_results` in function should be lowercase
    |
681 |         """
682 |         collection = client[database][collection]
683 |         STDA_results = collection.find_one(
    |         ^^^^^^^^^^^^ N806
684 |             {"InChIKey": get_inchi_key(polymer)}
685 |         )
    |

src\stk_search\Objective_function.py:687:13: ERA001 Found commented-out code
    |
685 |         )
686 |         if STDA_results is not None:
687 |             # print(get_inchi_key(polymer), ' stda geom already calculated')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
688 |             # print(STDA_results[property][state])
689 |             return STDA_results[property][state]
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:688:13: ERA001 Found commented-out code
    |
686 |         if STDA_results is not None:
687 |             # print(get_inchi_key(polymer), ' stda geom already calculated')
688 |             # print(STDA_results[property][state])
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
689 |             return STDA_results[property][state]
690 |         stda = sTDA_XTB(
    |
    = help: Remove commented-out code

src\stk_search\Objective_function.py:693:24: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
691 |             STDA_bin_path=STDA_bin_path,
692 |             Num_threads=25,
693 |             output_dir=os.path.join(output_dir, get_inchi_key(polymer)),
    |                        ^^^^^^^^^^^^ PTH118
694 |         )
695 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
    |

src\stk_search\Objective_function.py:695:9: N806 Variable `Excited_state_energy` in function should be lowercase
    |
693 |             output_dir=os.path.join(output_dir, get_inchi_key(polymer)),
694 |         )
695 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
    |         ^^^^^^^^^^^^^^^^^^^^ N806
696 |         STDA_results = {
697 |             "Excited state energy (eV)": Excited_state_energy,
    |

src\stk_search\Objective_function.py:695:31: N806 Variable `Excited_state_osc` in function should be lowercase
    |
693 |             output_dir=os.path.join(output_dir, get_inchi_key(polymer)),
694 |         )
695 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
    |                               ^^^^^^^^^^^^^^^^^ N806
696 |         STDA_results = {
697 |             "Excited state energy (eV)": Excited_state_energy,
    |

src\stk_search\Objective_function.py:696:9: N806 Variable `STDA_results` in function should be lowercase
    |
694 |         )
695 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
696 |         STDA_results = {
    |         ^^^^^^^^^^^^ N806
697 |             "Excited state energy (eV)": Excited_state_energy,
698 |             "Excited state oscillator strength": Excited_state_osc,
    |

src\stk_search\Objective_function.py:700:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
698 |             "Excited state oscillator strength": Excited_state_osc,
699 |             "InChIKey": get_inchi_key(polymer),
700 |             "cal_folder": os.path.join(output_dir, get_inchi_key(polymer)),
    |                           ^^^^^^^^^^^^ PTH118
701 |             "Host IP": self.host_IP,
702 |         }
    |

src\stk_search\Representation\Representation_3d_from_fragment.py:1:1: INP001 File `src\stk_search\Representation\Representation_3d_from_fragment.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Representation\Representation_3d_from_fragment.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D200
3 |   
4 |   import numpy as np
  |
  = help: Reformat to one line

src\stk_search\Representation\Representation_3d_from_fragment.py:1:1: D400 First line should end with a period
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D400
3 |   
4 |   import numpy as np
  |
  = help: Add period

src\stk_search\Representation\Representation_3d_from_fragment.py:1:1: D404 First word of the docstring should not be "This"
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D404
3 |   
4 |   import numpy as np
  |

src\stk_search\Representation\Representation_3d_from_fragment.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D415
3 |   
4 |   import numpy as np
  |
  = help: Add closing punctuation

src\stk_search\Representation\Representation_3d_from_fragment.py:11:7: N801 Class name `Representation_3d_from_fragment` should use CapWords convention
   |
11 | class Representation_3d_from_fragment:
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N801
12 |     def __init__(
13 |         self,
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:11:7: D101 Missing docstring in public class
   |
11 | class Representation_3d_from_fragment:
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
12 |     def __init__(
13 |         self,
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:12:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
11 | class Representation_3d_from_fragment:
12 |     def __init__(
   |         ^^^^^^^^ PLR0913
13 |         self,
14 |         model_encoding,
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:12:9: ANN204 Missing return type annotation for special method `__init__`
   |
11 | class Representation_3d_from_fragment:
12 |     def __init__(
   |         ^^^^^^^^ ANN204
13 |         self,
14 |         model_encoding,
   |
   = help: Add return type annotation: `None`

src\stk_search\Representation\Representation_3d_from_fragment.py:54:19: TRY003 Avoid specifying long messages outside the exception class
   |
52 |             self.db_poly = db_poly
53 |         else:
54 |             raise ValueError("Please provide either data or db_poly")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
55 |         self.db_frag = db_frag
56 |         self.name = "Representation_3d_from_fragment"
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:54:30: EM101 Exception must not use a string literal, assign to variable first
   |
52 |             self.db_poly = db_poly
53 |         else:
54 |             raise ValueError("Please provide either data or db_poly")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
55 |         self.db_frag = db_frag
56 |         self.name = "Representation_3d_from_fragment"
   |
   = help: Assign to variable; remove string literal

src\stk_search\Representation\Representation_3d_from_fragment.py:75:13: N806 Variable `InChIKeys` in function should be lowercase
   |
73 |             # Create a dictionary that maps InChIKeys to data
74 |             dataset_dict = {x.InChIKey: x for x in self.dataset}
75 |             InChIKeys = self._find_elem_InchiKey(elements_copy)
   |             ^^^^^^^^^ N806
76 |             for id, InChIKey in enumerate(InChIKeys):
77 |                 data = dataset_dict.get(InChIKey)  # self.find_data(InChIKey)
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:76:17: A001 Variable `id` is shadowing a Python builtin
   |
74 |             dataset_dict = {x.InChIKey: x for x in self.dataset}
75 |             InChIKeys = self._find_elem_InchiKey(elements_copy)
76 |             for id, InChIKey in enumerate(InChIKeys):
   |                 ^^ A001
77 |                 data = dataset_dict.get(InChIKey)  # self.find_data(InChIKey)
78 |                 if data is not None:
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:76:21: N806 Variable `InChIKey` in function should be lowercase
   |
74 |             dataset_dict = {x.InChIKey: x for x in self.dataset}
75 |             InChIKeys = self._find_elem_InchiKey(elements_copy)
76 |             for id, InChIKey in enumerate(InChIKeys):
   |                     ^^^^^^^^ N806
77 |                 data = dataset_dict.get(InChIKey)  # self.find_data(InChIKey)
78 |                 if data is not None:
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:81:54: PD011 Use `.to_numpy()` instead of `.values`
   |
79 |                     opt_geom_encoding.append(data.learned_rpr)
80 |                 else:
81 |                     molecule, key = self._getinfo_db(elements_copy.values[id])
   |                                                      ^^^^^^^^^^^^^^^^^^^^ PD011
82 |                     with torch.no_grad():
83 |                         encoding = self.model_encoding(molecule)
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:94:13: ERA001 Found commented-out code
   |
92 |                         )
93 |         else:
94 |             #self.add_representation_to_local_dataset(elements_copy)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
95 |             dataset_local_new = {}
96 |             for x in elements_copy.values:
   |
   = help: Remove commented-out code

src\stk_search\Representation\Representation_3d_from_fragment.py:96:22: PD011 Use `.to_numpy()` instead of `.values`
   |
94 |             #self.add_representation_to_local_dataset(elements_copy)
95 |             dataset_local_new = {}
96 |             for x in elements_copy.values:
   |                      ^^^^^^^^^^^^^^^^^^^^ PD011
97 |                 key = ""
98 |                 for elm in x:
   |

src\stk_search\Representation\Representation_3d_from_fragment.py:113:13: ERA001 Found commented-out code
    |
111 |                             encoding[0][0].type(torch.float16).detach()
112 |                         )
113 |             #self.save_representation_to_database(dataset_local_new)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
114 |             #self.save_dataset_local()
115 |         return torch.stack(opt_geom_encoding)
    |
    = help: Remove commented-out code

src\stk_search\Representation\Representation_3d_from_fragment.py:114:13: ERA001 Found commented-out code
    |
112 |                         )
113 |             #self.save_representation_to_database(dataset_local_new)
114 |             #self.save_dataset_local()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
115 |         return torch.stack(opt_geom_encoding)
    |
    = help: Remove commented-out code

src\stk_search\Representation\Representation_3d_from_fragment.py:117:9: ANN202 Missing return type annotation for private function `_getinfo_db`
    |
115 |         return torch.stack(opt_geom_encoding)
116 | 
117 |     def _getinfo_db(self, elements):
    |         ^^^^^^^^^^^ ANN202
118 |         """Get the information from the database.
    |
    = help: Add return type annotation

src\stk_search\Representation\Representation_3d_from_fragment.py:141:26: C411 Unnecessary `list` call (remove the outer call to `list()`)
    |
139 |                   positions, dtype=torch.float, device=self.device
140 |               )
141 |               atom_types = list(
    |  __________________________^
142 | |                 [atom.get_atomic_number() for atom in molecule_bb.get_atoms()]
143 | |             )
    | |_____________^ C411
144 |               atom_types = torch.tensor(
145 |                   atom_types, dtype=torch.long, device=self.device
    |
    = help: Remove outer `list` call

src\stk_search\Representation\Representation_3d_from_fragment.py:158:9: N802 Function name `_find_elem_InchiKey` should be lowercase
    |
156 |         return frags, key
157 | 
158 |     def _find_elem_InchiKey(self, elements):
    |         ^^^^^^^^^^^^^^^^^^^ N802
159 |         """Find the InChIKey of the elements.
    |

src\stk_search\Representation\Representation_3d_from_fragment.py:158:9: ANN202 Missing return type annotation for private function `_find_elem_InchiKey`
    |
156 |         return frags, key
157 | 
158 |     def _find_elem_InchiKey(self, elements):
    |         ^^^^^^^^^^^^^^^^^^^ ANN202
159 |         """Find the InChIKey of the elements.
    |
    = help: Add return type annotation

src\stk_search\Representation\Representation_3d_from_fragment.py:175:68: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
173 |         )
174 |         results.drop_duplicates(
175 |             subset=[f"InChIKey_{i}" for i in range(num_fragment)], inplace=True
    |                                                                    ^^^^^^^^^^^^ PD002
176 |         )
177 |         if results.shape[0] != elements.shape[0]:
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Representation\Representation_3d_from_fragment.py:178:13: T201 `print` found
    |
176 |         )
177 |         if results.shape[0] != elements.shape[0]:
178 |             print(results.shape[0], elements.shape[0])
    |             ^^^^^ T201
179 |             raise ValueError("InChIKey not found in database")
    |
    = help: Remove `print`

src\stk_search\Representation\Representation_3d_from_fragment.py:179:19: TRY003 Avoid specifying long messages outside the exception class
    |
177 |         if results.shape[0] != elements.shape[0]:
178 |             print(results.shape[0], elements.shape[0])
179 |             raise ValueError("InChIKey not found in database")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
180 | 
181 |         return results["InChIKey"].values
    |

src\stk_search\Representation\Representation_3d_from_fragment.py:179:30: EM101 Exception must not use a string literal, assign to variable first
    |
177 |         if results.shape[0] != elements.shape[0]:
178 |             print(results.shape[0], elements.shape[0])
179 |             raise ValueError("InChIKey not found in database")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
180 | 
181 |         return results["InChIKey"].values
    |
    = help: Assign to variable; remove string literal

src\stk_search\Representation\Representation_3d_from_fragment.py:181:16: PD011 Use `.to_numpy()` instead of `.values`
    |
179 |             raise ValueError("InChIKey not found in database")
180 | 
181 |         return results["InChIKey"].values
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
182 | 
183 |     def save_dataset_local(self):
    |

src\stk_search\Representation\Representation_3d_from_fragment.py:186:13: T201 `print` found
    |
184 |         """Save the dataset_local."""
185 |         if self.save_dataset_path == "":
186 |             print("Please provide a path to save the dataset")
    |             ^^^^^ T201
187 |         else:
188 |             torch.save(self.dataset_local, self.save_dataset_path)
    |
    = help: Remove `print`

src\stk_search\Representation\Representation_3d_from_fragment.py:206:36: SIM118 Use `key not in dict` instead of `key not in dict.keys()`
    |
204 |         df_element["key"] = df_element.apply(lambda x: "".join(x), axis=1)
205 |         keys = df_element["key"].to_list()
206 |         keys = [x for x in keys if x not in self.dataset_local.keys()]
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
207 |         for document in collection.find({"key": {"$in": keys}}):
208 |             self.dataset_local[document["key"]] = torch.tensor(
    |
    = help: Remove `.keys()`

src\stk_search\Representation\Representation_3d_from_fragment.py:213:9: D102 Missing docstring in public method
    |
211 |         return self.dataset_local
212 | 
213 |     def save_representation_to_database(self, local_dataset_new):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
214 |         client = pymongo.MongoClient("mongodb://ch-atarzia.ch.ic.ac.uk/")
215 |         db = client["learned_representations"]
    |

src\stk_search\Representation\Representation_3d_from_fragment.py:230:21: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
228 |                     upsert=True,
229 |                 )
230 |                 for key in local_dataset_new.keys()
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
231 |             ]
232 |         )
    |
    = help: Remove `.keys()`

src\stk_search\Representation\Representation_from_fragment.py:1:1: INP001 File `src\stk_search\Representation\Representation_from_fragment.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Representation\Representation_from_fragment.py:1:1: D100 Missing docstring in public module
src\stk_search\Representation\Representation_from_fragment.py:6:7: N801 Class name `Representation_from_fragment` should use CapWords convention
  |
6 | class Representation_from_fragment:
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N801
7 |     """This class is used to generate the representation of the elements"""
  |

src\stk_search\Representation\Representation_from_fragment.py:7:5: D400 First line should end with a period
  |
6 | class Representation_from_fragment:
7 |     """This class is used to generate the representation of the elements"""
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
8 | 
9 |     def __init__(self, df_precursors, frag_properties):
  |
  = help: Add period

src\stk_search\Representation\Representation_from_fragment.py:7:5: D404 First word of the docstring should not be "This"
  |
6 | class Representation_from_fragment:
7 |     """This class is used to generate the representation of the elements"""
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D404
8 | 
9 |     def __init__(self, df_precursors, frag_properties):
  |

src\stk_search\Representation\Representation_from_fragment.py:7:5: D415 First line should end with a period, question mark, or exclamation point
  |
6 | class Representation_from_fragment:
7 |     """This class is used to generate the representation of the elements"""
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
8 | 
9 |     def __init__(self, df_precursors, frag_properties):
  |
  = help: Add closing punctuation

src\stk_search\Representation\Representation_from_fragment.py:9:9: ANN204 Missing return type annotation for special method `__init__`
   |
 7 |     """This class is used to generate the representation of the elements"""
 8 | 
 9 |     def __init__(self, df_precursors, frag_properties):
   |         ^^^^^^^^ ANN204
10 |         """Initialise the class.
   |
   = help: Add return type annotation: `None`

src\stk_search\Representation\Representation_from_fragment.py:39:23: PD015 Use `.merge` method instead of `pd.merge` function. They have equivalent functionality.
   |
37 |         for i in range(num_frag):
38 |             elements_curr["InChIKey"]=elements_curr[f"InChIKey_{i}"].astype(str)
39 |             df_eval = pd.merge(elements_curr,self.df_precursors[frag_properties], on="InChIKey", how="left", suffixes=("", f"_{i}"))
   |                       ^^^^^^^^ PD015
40 |             if len(init_rpr)==0:
41 |                 init_rpr = df_eval[df_eval.columns[num_frag+1:]].values
   |

src\stk_search\Representation\Representation_from_fragment.py:41:28: PD011 Use `.to_numpy()` instead of `.values`
   |
39 |             df_eval = pd.merge(elements_curr,self.df_precursors[frag_properties], on="InChIKey", how="left", suffixes=("", f"_{i}"))
40 |             if len(init_rpr)==0:
41 |                 init_rpr = df_eval[df_eval.columns[num_frag+1:]].values
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
42 |             else:
43 |                 init_rpr = np.concatenate([init_rpr,df_eval[df_eval.columns[num_frag+1:]].values],axis=1)
   |

src\stk_search\Representation\Representation_from_fragment.py:43:53: PD011 Use `.to_numpy()` instead of `.values`
   |
41 |                 init_rpr = df_eval[df_eval.columns[num_frag+1:]].values
42 |             else:
43 |                 init_rpr = np.concatenate([init_rpr,df_eval[df_eval.columns[num_frag+1:]].values],axis=1)
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
44 | 
45 |         X_explored_BO = torch.tensor(np.array(init_rpr.astype(float)), dtype=torch.float32)
   |

src\stk_search\Representation\Representation_from_fragment.py:45:9: N806 Variable `X_explored_BO` in function should be lowercase
   |
43 |                 init_rpr = np.concatenate([init_rpr,df_eval[df_eval.columns[num_frag+1:]].values],axis=1)
44 | 
45 |         X_explored_BO = torch.tensor(np.array(init_rpr.astype(float)), dtype=torch.float32)
   |         ^^^^^^^^^^^^^ N806
46 |         return X_explored_BO
   |

src\stk_search\Representation\Representation_from_fragment.py:46:16: RET504 Unnecessary assignment to `X_explored_BO` before `return` statement
   |
45 |         X_explored_BO = torch.tensor(np.array(init_rpr.astype(float)), dtype=torch.float32)
46 |         return X_explored_BO
   |                ^^^^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\Representation\Representation_poly_3d.py:1:1: INP001 File `src\stk_search\Representation\Representation_poly_3d.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Representation\Representation_poly_3d.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D200
3 |   
4 |   import numpy as np
  |
  = help: Reformat to one line

src\stk_search\Representation\Representation_poly_3d.py:1:1: D400 First line should end with a period
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D400
3 |   
4 |   import numpy as np
  |
  = help: Add period

src\stk_search\Representation\Representation_poly_3d.py:1:1: D404 First word of the docstring should not be "This"
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D404
3 |   
4 |   import numpy as np
  |

src\stk_search\Representation\Representation_poly_3d.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D415
3 |   
4 |   import numpy as np
  |
  = help: Add closing punctuation

src\stk_search\Representation\Representation_poly_3d.py:13:7: N801 Class name `Representation_poly_3d` should use CapWords convention
   |
13 | class Representation_poly_3d:
   |       ^^^^^^^^^^^^^^^^^^^^^^ N801
14 |     def __init__(
15 |         self,
   |

src\stk_search\Representation\Representation_poly_3d.py:13:7: D101 Missing docstring in public class
   |
13 | class Representation_poly_3d:
   |       ^^^^^^^^^^^^^^^^^^^^^^ D101
14 |     def __init__(
15 |         self,
   |

src\stk_search\Representation\Representation_poly_3d.py:14:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
13 | class Representation_poly_3d:
14 |     def __init__(
   |         ^^^^^^^^ PLR0913
15 |         self,
16 |         model_encoding,
   |

src\stk_search\Representation\Representation_poly_3d.py:14:9: ANN204 Missing return type annotation for special method `__init__`
   |
13 | class Representation_poly_3d:
14 |     def __init__(
   |         ^^^^^^^^ ANN204
15 |         self,
16 |         model_encoding,
   |
   = help: Add return type annotation: `None`

src\stk_search\Representation\Representation_poly_3d.py:14:9: D417 Missing argument descriptions in the docstring for `__init__`: `database`, `mongo_client`, `oligomer_size`
   |
13 | class Representation_poly_3d:
14 |     def __init__(
   |         ^^^^^^^^ D417
15 |         self,
16 |         model_encoding,
   |

src\stk_search\Representation\Representation_poly_3d.py:17:9: ARG002 Unused method argument: `df_results`
   |
15 |         self,
16 |         model_encoding,
17 |         df_results=None,
   |         ^^^^^^^^^^ ARG002
18 |         data=None,
19 |         db_poly=None,
   |

src\stk_search\Representation\Representation_poly_3d.py:18:9: ARG002 Unused method argument: `data`
   |
16 |         model_encoding,
17 |         df_results=None,
18 |         data=None,
   |         ^^^^ ARG002
19 |         db_poly=None,
20 |         db_frag=None,
   |

src\stk_search\Representation\Representation_poly_3d.py:19:9: ARG002 Unused method argument: `db_poly`
   |
17 |         df_results=None,
18 |         data=None,
19 |         db_poly=None,
   |         ^^^^^^^ ARG002
20 |         db_frag=None,
21 |         device=None,
   |

src\stk_search\Representation\Representation_poly_3d.py:20:9: ARG002 Unused method argument: `db_frag`
   |
18 |         data=None,
19 |         db_poly=None,
20 |         db_frag=None,
   |         ^^^^^^^ ARG002
21 |         device=None,
22 |         oligomer_size=6,
   |

src\stk_search\Representation\Representation_poly_3d.py:44:9: ERA001 Found commented-out code
   |
42 |         else:
43 |             self.device = device
44 |         # self.model_encoding = model_encoding
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
45 |         # self.model_encoding.eval()
46 |         # self.model_encoding.to(self.device)
   |
   = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:45:9: ERA001 Found commented-out code
   |
43 |             self.device = device
44 |         # self.model_encoding = model_encoding
45 |         # self.model_encoding.eval()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
46 |         # self.model_encoding.to(self.device)
47 |         self.get_bbs_dict(
   |
   = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:46:9: ERA001 Found commented-out code
   |
44 |         # self.model_encoding = model_encoding
45 |         # self.model_encoding.eval()
46 |         # self.model_encoding.to(self.device)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
47 |         self.get_bbs_dict(
48 |             mongo_client, database
   |
   = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:71:16: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
69 |         keys_to_compute = []
70 |         for key in df_elements["bb_key"]:
71 |             if key in self.dataset_local.keys():
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
72 |                 opt_geom_encoding.append(self.dataset_local[key])
73 |             else:
   |
   = help: Remove `.keys()`

src\stk_search\Representation\Representation_poly_3d.py:88:41: C416 Unnecessary `list` comprehension (rewrite using `list()`)
   |
87 |         """
88 |         elements_copy = df_elements.loc[[x for x in keys_to_compute]].copy()
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C416
89 |         elements_copy.drop_duplicates(subset="bb_key", inplace=True)
90 |         opt_geom_encoding_add = []
   |
   = help: Rewrite using `list()`

src\stk_search\Representation\Representation_poly_3d.py:89:56: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
87 |         """
88 |         elements_copy = df_elements.loc[[x for x in keys_to_compute]].copy()
89 |         elements_copy.drop_duplicates(subset="bb_key", inplace=True)
   |                                                        ^^^^^^^^^^^^ PD002
90 |         opt_geom_encoding_add = []
91 |         dataset_poly = self.Build_polymers(elements_copy)
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\Representation\Representation_poly_3d.py:94:13: PERF401 Use a list comprehension to create a transformed list
   |
92 |         data_loader = self.get_data_loader(dataset_poly)
93 |         for data in data_loader:
94 |             opt_geom_encoding_add.append(self.model_encoding(data))
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
95 |         opt_geom_encoding_add = torch.vstack(opt_geom_encoding_add)
96 |         for ii, bb_key in enumerate(elements_copy["bb_key"]):
   |

src\stk_search\Representation\Representation_poly_3d.py:123:19: TRY003 Avoid specifying long messages outside the exception class
    |
121 |             )
122 |         if len(keys_to_compute) > 0:
123 |             raise ValueError("Some representations are missing")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
124 |         return opt_geom_encoding
    |

src\stk_search\Representation\Representation_poly_3d.py:123:30: EM101 Exception must not use a string literal, assign to variable first
    |
121 |             )
122 |         if len(keys_to_compute) > 0:
123 |             raise ValueError("Some representations are missing")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
124 |         return opt_geom_encoding
    |
    = help: Assign to variable; remove string literal

src\stk_search\Representation\Representation_poly_3d.py:147:9: D205 1 blank line required between summary line and description
    |
146 |       def get_data_loader(self, dataset):
147 |           """Get the dataloader
    |  _________^
148 | |         Args:
149 | |             dataset: list
150 | |                 list of the dataset
151 | |             config: dict
152 | |                 configuration file
153 | | 
154 | |         Returns
155 | |         -------
156 | |             loader: torch_geometric.loader.DataLoader
157 | |                 dataloader for the dataset
158 | | 
159 | |         """
    | |___________^ D205
160 |           # Set dataloaders
161 |           loader = DataLoader(
    |
    = help: Insert single blank line

src\stk_search\Representation\Representation_poly_3d.py:147:9: D400 First line should end with a period
    |
146 |       def get_data_loader(self, dataset):
147 |           """Get the dataloader
    |  _________^
148 | |         Args:
149 | |             dataset: list
150 | |                 list of the dataset
151 | |             config: dict
152 | |                 configuration file
153 | | 
154 | |         Returns
155 | |         -------
156 | |             loader: torch_geometric.loader.DataLoader
157 | |                 dataloader for the dataset
158 | | 
159 | |         """
    | |___________^ D400
160 |           # Set dataloaders
161 |           loader = DataLoader(
    |
    = help: Add period

src\stk_search\Representation\Representation_poly_3d.py:147:9: D415 First line should end with a period, question mark, or exclamation point
    |
146 |       def get_data_loader(self, dataset):
147 |           """Get the dataloader
    |  _________^
148 | |         Args:
149 | |             dataset: list
150 | |                 list of the dataset
151 | |             config: dict
152 | |                 configuration file
153 | | 
154 | |         Returns
155 | |         -------
156 | |             loader: torch_geometric.loader.DataLoader
157 | |                 dataloader for the dataset
158 | | 
159 | |         """
    | |___________^ D415
160 |           # Set dataloaders
161 |           loader = DataLoader(
    |
    = help: Add closing punctuation

src\stk_search\Representation\Representation_poly_3d.py:165:13: ERA001 Found commented-out code
    |
163 |             batch_size=self.batch_size,
164 |             shuffle=False,
165 |             # drop_last=True,
    |             ^^^^^^^^^^^^^^^^^ ERA001
166 |         )
    |
    = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:168:16: RET504 Unnecessary assignment to `loader` before `return` statement
    |
166 |         )
167 | 
168 |         return loader
    |                ^^^^^^ RET504
169 | 
170 |     def join_keys(self, polymer):
    |
    = help: Remove unnecessary assignment

src\stk_search\Representation\Representation_poly_3d.py:170:9: D102 Missing docstring in public method
    |
168 |         return loader
169 | 
170 |     def join_keys(self, polymer):
    |         ^^^^^^^^^ D102
171 |         keys = [
172 |             stk.InchiKey().get_key(bb) for bb in polymer.get_building_blocks()
    |

src\stk_search\Representation\Representation_poly_3d.py:176:9: D102 Missing docstring in public method
    |
174 |         return "_".join(keys)
175 | 
176 |     def join_keys_elem(self, element):
    |         ^^^^^^^^^^^^^^ D102
177 |         keys = [
178 |             bb
    |

src\stk_search\Representation\Representation_poly_3d.py:177:16: C416 Unnecessary `list` comprehension (rewrite using `list()`)
    |
176 |       def join_keys_elem(self, element):
177 |           keys = [
    |  ________________^
178 | |             bb
179 | |             for bb in element[
180 | |                 [f"InChIKey_{x}" for x in range(self.oligomer_size)]
181 | |             ].values
182 | |         ]
    | |_________^ C416
183 |           # print(keys)
184 |           return "_".join(keys)
    |
    = help: Rewrite using `list()`

src\stk_search\Representation\Representation_poly_3d.py:179:23: PD011 Use `.to_numpy()` instead of `.values`
    |
177 |           keys = [
178 |               bb
179 |               for bb in element[
    |  _______________________^
180 | |                 [f"InChIKey_{x}" for x in range(self.oligomer_size)]
181 | |             ].values
    | |____________________^ PD011
182 |           ]
183 |           # print(keys)
    |

src\stk_search\Representation\Representation_poly_3d.py:183:9: ERA001 Found commented-out code
    |
181 |             ].values
182 |         ]
183 |         # print(keys)
    |         ^^^^^^^^^^^^^ ERA001
184 |         return "_".join(keys)
    |
    = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:186:9: D102 Missing docstring in public method
    |
184 |         return "_".join(keys)
185 | 
186 |     def get_bbs_dict(self, client, database):
    |         ^^^^^^^^^^^^ D102
187 |         client = pymongo.MongoClient(client)
188 |         db_mol = stk.MoleculeMongoDb(
    |

src\stk_search\Representation\Representation_poly_3d.py:203:9: N802 Function name `Build_polymers` should be lowercase
    |
201 |         return bbs_dict
202 | 
203 |     def Build_polymers(self, element: pd.DataFrame):
    |         ^^^^^^^^^^^^^^ N802
204 |         bbs_dict = self.bbs_dict
    |

src\stk_search\Representation\Representation_poly_3d.py:203:9: D102 Missing docstring in public method
    |
201 |         return bbs_dict
202 | 
203 |     def Build_polymers(self, element: pd.DataFrame):
    |         ^^^^^^^^^^^^^^ D102
204 |         bbs_dict = self.bbs_dict
    |

src\stk_search\Representation\Representation_poly_3d.py:208:9: ERA001 Found commented-out code
    |
206 |         genes = "ABCDEFGH"
207 |         genes = genes[: self.oligomer_size]
208 |         # print(genes)
    |         ^^^^^^^^^^^^^^ ERA001
209 |         repeating_unit = ""
210 |         # joins the Genes to make a repeating unit string
    |
    = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:212:9: N806 Variable `InchiKey_cols` in function should be lowercase
    |
210 |         # joins the Genes to make a repeating unit string
211 |         repeating_unit = repeating_unit.join(genes)
212 |         InchiKey_cols = [col for col in element.columns if "InChIKey_" in col]
    |         ^^^^^^^^^^^^^ N806
213 | 
214 |         # print(element[InchiKey_cols].values.flatten())
    |

src\stk_search\Representation\Representation_poly_3d.py:214:9: ERA001 Found commented-out code
    |
212 |         InchiKey_cols = [col for col in element.columns if "InChIKey_" in col]
213 | 
214 |         # print(element[InchiKey_cols].values.flatten())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
215 |         def gen_mol(elem):
216 |             precursors = []
    |
    = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:215:13: ANN202 Missing return type annotation for private function `gen_mol`
    |
214 |         # print(element[InchiKey_cols].values.flatten())
215 |         def gen_mol(elem):
    |             ^^^^^^^ ANN202
216 |             precursors = []
217 |             for fragment in elem[InchiKey_cols].values.flatten():
    |
    = help: Add return type annotation

src\stk_search\Representation\Representation_poly_3d.py:217:29: PD011 Use `.to_numpy()` instead of `.values`
    |
215 |         def gen_mol(elem):
216 |             precursors = []
217 |             for fragment in elem[InchiKey_cols].values.flatten():
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
218 |                 bb = bbs_dict[fragment]
219 |                 precursors.append(bb)
    |

src\stk_search\Representation\Representation_poly_3d.py:231:26: C411 Unnecessary `list` call (remove the outer call to `list()`)
    |
229 |               positions = np.vstack(dat_list)
230 |               positions = torch.tensor(positions, dtype=torch.float)
231 |               atom_types = list(
    |  __________________________^
232 | |                 [
233 | |                     atom.get_atom().get_atomic_number()
234 | |                     for atom in polymer.get_atom_infos()
235 | |                 ]
236 | |             )
    | |_____________^ C411
237 |               atom_types = torch.tensor(atom_types, dtype=torch.long)
    |
    = help: Remove outer `list` call

src\stk_search\Representation\Representation_poly_3d.py:245:17: ERA001 Found commented-out code
    |
243 |                 InChIKey=stk.InchiKey().get_key(polymer),
244 |                 bb_key=bb_key,
245 |                 # y=elem['target']
    |                 ^^^^^^^^^^^^^^^^^^ ERA001
246 |             )
247 |             return molecule
    |
    = help: Remove commented-out code

src\stk_search\Representation\Representation_poly_3d.py:247:20: RET504 Unnecessary assignment to `molecule` before `return` statement
    |
245 |                 # y=elem['target']
246 |             )
247 |             return molecule
    |                    ^^^^^^^^ RET504
248 | 
249 |         element["polymer"] = element.swifter.apply(
    |
    = help: Remove unnecessary assignment

src\stk_search\Representation\representation.py:1:1: INP001 File `src\stk_search\Representation\representation.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Representation\representation.py:1:1: D404 First word of the docstring should not be "This"
  |
1 | """This module contains the molecular representation class for the bayesian optimisation."""
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D404
2 | import numpy as np
3 | import torch
  |

src\stk_search\Representation\representation.py:6:7: D101 Missing docstring in public class
  |
6 | class Representation:
  |       ^^^^^^^^^^^^^^ D101
7 |     def __init__(self):
8 |         self.name = "default"
  |

src\stk_search\Representation\representation.py:7:9: ANN204 Missing return type annotation for special method `__init__`
  |
6 | class Representation:
7 |     def __init__(self):
  |         ^^^^^^^^ ANN204
8 |         self.name = "default"
  |
  = help: Add return type annotation: `None`

src\stk_search\Representation\representation.py:7:9: D107 Missing docstring in `__init__`
  |
6 | class Representation:
7 |     def __init__(self):
  |         ^^^^^^^^ D107
8 |         self.name = "default"
  |

src\stk_search\Representation\representation.py:29:9: N806 Variable `X_explored_BO` in function should be lowercase
   |
27 |             else:
28 |                 init_rpr = np.concatenate([init_rpr,np.zeros_like(building_blocks[f"InChIKey_{i}"].values)],axis=1)
29 |         X_explored_BO = torch.tensor(np.array(init_rpr.astype(float)), dtype=torch.float32)
   |         ^^^^^^^^^^^^^ N806
30 |         return X_explored_BO
   |

src\stk_search\Representation\representation.py:30:16: RET504 Unnecessary assignment to `X_explored_BO` before `return` statement
   |
28 |                 init_rpr = np.concatenate([init_rpr,np.zeros_like(building_blocks[f"InChIKey_{i}"].values)],axis=1)
29 |         X_explored_BO = torch.tensor(np.array(init_rpr.astype(float)), dtype=torch.float32)
30 |         return X_explored_BO
   |                ^^^^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\SearchExp.py:1:1: N999 Invalid module name: 'SearchExp'
src\stk_search\SearchExp.py:1:1: D100 Missing docstring in public module
src\stk_search\SearchExp.py:7:1: ERA001 Found commented-out code
  |
5 | from datetime import datetime
6 | 
7 | # from Scripts.Search_algorithm import Search_Algorithm
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
8 | from stk_search.Objective_function import Objective_Function
9 | from stk_search.SearchSpace import SearchSpace
  |
  = help: Remove commented-out code

src\stk_search\SearchExp.py:13:5: D400 First line should end with a period
   |
12 |   class SearchExp:
13 |       """Class to setup and run a search experiment
   |  _____^
14 | | 
15 | |     Parameters
16 | |     ----------
17 | |     searchspace : SearchSpace
18 | |         The search space to be used in the search experiment
19 | |     search_algorithm : Search_Algorithm
20 | |         The search algorithm to be used in the search experiment
21 | |     objective_function : Objective_Function
22 | |         The objective function to be used in the search experiment
23 | |     number_of_iterations : int
24 | |         The number of iterations to run the search experiment
25 | |     verbose : bool
26 | |         Whether to print the progress of the search experiment
27 | | 
28 | |     Attributes
29 | |     ----------
30 | |     search_space : SearchSpace
31 | |         The search space to be used in the search experiment. this is defined as a class
32 | |         of stk_search.SearchSpace.SearchSpace
33 | |     search_algorithm : Search_Algorithm
34 | |         The search algorithm to be used in the search experiment.
35 | |         this is defined as a class of stk_search.Search_algorithm.Search_Algorithm
36 | |     objective_function : Objective_Function 
37 | |         The objective function to be used in the search experiment
38 | |         this is defined as a class of stk_search.Objective_function.Objective_Function
39 | |     number_of_iterations : int
40 | |         The number of iterations to run the search experiment
41 | |     output_folder : str
42 | |         The folder to save the search experiment
43 | |     search_space_folder : str
44 | |         The folder to save the search space
45 | |     num_elem_initialisation : int
46 | |         The number of elements to initialise the search space
47 | |     df_search_space : pd.DataFrame  
48 | |         The search space as a pandas dataframe
49 | |         the dataframe will host the data corresponding to the molecules considered in the search algorithm, \
50 | |         the columns will be the "InchiKey_{i}" of the molecules with i the number of building blocks in the molecule
51 | |     ids_acquired : list
52 | |         The ids of the elements acquired during the search experiment
53 | |         the ids in the df_search_space
54 | |     fitness_acquired : list
55 | |         The fitness of the elements acquired during the search experiment
56 | |     InchiKey_acquired : list
57 | |         The InchiKey of the elements acquired during the search experiment
58 | |     bad_ids : list
59 | |         The ids of the elements that failed during the evaluation using the objective function
60 | |     time_calc : list
61 | |         The time it took to calculate the fitness of each element
62 | |     overall_time : list
63 | |         The time at the end of each iteration
64 | |     verbose : bool
65 | |         Whether to print the progress of the search experiment
66 | |     benchmark : bool
67 | |         Whether the search experiment is a benchmark
68 | |     df_total : pd.DataFrame
69 | |         The total dataframe of the search space
70 | |         The dataframe with all the data used for the benchmark
71 | |         not needed for the normal search experiment
72 | |     date : str
73 | |         The date of the search experiment
74 | |     search_exp_name : str
75 | |         The name of the search experiment
76 | | 
77 | |     Methods
78 | |     -------
79 | |     run_seach()
80 | |         Run the search experiment
81 | |         the search experiment will initialise the search space, get the initial elements, evaluate the elements, \
82 | |         run the search algorithm and suggest the next element to evaluate
83 | | 
84 | |     evaluate_element()
85 | |         Evaluate the element
86 | |         Evaluate the element using the objective function
87 | | 
88 | |     save_search_experiment()
89 | |         Save the search experiment
90 | | 
91 | |     save_results()
92 | |         Save the results
93 | | 
94 | | 
95 | |     """
   | |_______^ D400
96 |   
97 |       def __init__(
   |
   = help: Add period

src\stk_search\SearchExp.py:13:5: D415 First line should end with a period, question mark, or exclamation point
   |
12 |   class SearchExp:
13 |       """Class to setup and run a search experiment
   |  _____^
14 | | 
15 | |     Parameters
16 | |     ----------
17 | |     searchspace : SearchSpace
18 | |         The search space to be used in the search experiment
19 | |     search_algorithm : Search_Algorithm
20 | |         The search algorithm to be used in the search experiment
21 | |     objective_function : Objective_Function
22 | |         The objective function to be used in the search experiment
23 | |     number_of_iterations : int
24 | |         The number of iterations to run the search experiment
25 | |     verbose : bool
26 | |         Whether to print the progress of the search experiment
27 | | 
28 | |     Attributes
29 | |     ----------
30 | |     search_space : SearchSpace
31 | |         The search space to be used in the search experiment. this is defined as a class
32 | |         of stk_search.SearchSpace.SearchSpace
33 | |     search_algorithm : Search_Algorithm
34 | |         The search algorithm to be used in the search experiment.
35 | |         this is defined as a class of stk_search.Search_algorithm.Search_Algorithm
36 | |     objective_function : Objective_Function 
37 | |         The objective function to be used in the search experiment
38 | |         this is defined as a class of stk_search.Objective_function.Objective_Function
39 | |     number_of_iterations : int
40 | |         The number of iterations to run the search experiment
41 | |     output_folder : str
42 | |         The folder to save the search experiment
43 | |     search_space_folder : str
44 | |         The folder to save the search space
45 | |     num_elem_initialisation : int
46 | |         The number of elements to initialise the search space
47 | |     df_search_space : pd.DataFrame  
48 | |         The search space as a pandas dataframe
49 | |         the dataframe will host the data corresponding to the molecules considered in the search algorithm, \
50 | |         the columns will be the "InchiKey_{i}" of the molecules with i the number of building blocks in the molecule
51 | |     ids_acquired : list
52 | |         The ids of the elements acquired during the search experiment
53 | |         the ids in the df_search_space
54 | |     fitness_acquired : list
55 | |         The fitness of the elements acquired during the search experiment
56 | |     InchiKey_acquired : list
57 | |         The InchiKey of the elements acquired during the search experiment
58 | |     bad_ids : list
59 | |         The ids of the elements that failed during the evaluation using the objective function
60 | |     time_calc : list
61 | |         The time it took to calculate the fitness of each element
62 | |     overall_time : list
63 | |         The time at the end of each iteration
64 | |     verbose : bool
65 | |         Whether to print the progress of the search experiment
66 | |     benchmark : bool
67 | |         Whether the search experiment is a benchmark
68 | |     df_total : pd.DataFrame
69 | |         The total dataframe of the search space
70 | |         The dataframe with all the data used for the benchmark
71 | |         not needed for the normal search experiment
72 | |     date : str
73 | |         The date of the search experiment
74 | |     search_exp_name : str
75 | |         The name of the search experiment
76 | | 
77 | |     Methods
78 | |     -------
79 | |     run_seach()
80 | |         Run the search experiment
81 | |         the search experiment will initialise the search space, get the initial elements, evaluate the elements, \
82 | |         run the search algorithm and suggest the next element to evaluate
83 | | 
84 | |     evaluate_element()
85 | |         Evaluate the element
86 | |         Evaluate the element using the objective function
87 | | 
88 | |     save_search_experiment()
89 | |         Save the search experiment
90 | | 
91 | |     save_results()
92 | |         Save the results
93 | | 
94 | | 
95 | |     """
   | |_______^ D415
96 |   
97 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\SearchExp.py:36:44: W291 Trailing whitespace
   |
34 |         The search algorithm to be used in the search experiment.
35 |         this is defined as a class of stk_search.Search_algorithm.Search_Algorithm
36 |     objective_function : Objective_Function 
   |                                            ^ W291
37 |         The objective function to be used in the search experiment
38 |         this is defined as a class of stk_search.Objective_function.Objective_Function
   |
   = help: Remove trailing whitespace

src\stk_search\SearchExp.py:47:35: W291 Trailing whitespace
   |
45 |     num_elem_initialisation : int
46 |         The number of elements to initialise the search space
47 |     df_search_space : pd.DataFrame  
   |                                   ^^ W291
48 |         The search space as a pandas dataframe
49 |         the dataframe will host the data corresponding to the molecules considered in the search algorithm, \
   |
   = help: Remove trailing whitespace

src\stk_search\SearchExp.py:97:9: ANN204 Missing return type annotation for special method `__init__`
   |
95 |     """
96 | 
97 |     def __init__(
   |         ^^^^^^^^ ANN204
98 |         self,
99 |         searchspace: SearchSpace,
   |
   = help: Add return type annotation: `None`

src\stk_search\SearchExp.py:97:9: D107 Missing docstring in `__init__`
   |
95 |     """
96 | 
97 |     def __init__(
   |         ^^^^^^^^ D107
98 |         self,
99 |         searchspace: SearchSpace,
   |

src\stk_search\SearchExp.py:103:9: FBT002 Boolean default positional argument in function definition
    |
101 |         objective_function,
102 |         number_of_iterations,
103 |         verbose=False,
    |         ^^^^^^^ FBT002
104 |     ):
105 |         self.search_space = searchspace
    |

src\stk_search\SearchExp.py:124:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
122 |         self.benchmark = False
123 |         self.df_total = None
124 |         self.date = datetime.now().strftime("%Y%m%d")
    |                     ^^^^^^^^^^^^^^ DTZ005
125 |         self.search_exp_name = uuid.uuid4().hex
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\SearchExp.py:129:9: D205 1 blank line required between summary line and description
    |
128 |       def run_seach(self):
129 |           """Run the search experiment
    |  _________^
130 | |         the search experiment will initialise the search space, get the initial elements, evaluate the elements, \
131 | |             run the search algorithm and suggest the next element to evaluate
132 | |             for the moment we cannot rerun a same search experiment
133 | |             
134 | |         Returns
135 | |         -------
136 | |             results_dict : dict
137 | |                 The results of the search experiment    
138 | | 
139 | |         """
    | |___________^ D205
140 |           # get initial elements
141 |           if self.ids_acquired ==[]:
    |
    = help: Insert single blank line

src\stk_search\SearchExp.py:129:9: D400 First line should end with a period
    |
128 |       def run_seach(self):
129 |           """Run the search experiment
    |  _________^
130 | |         the search experiment will initialise the search space, get the initial elements, evaluate the elements, \
131 | |             run the search algorithm and suggest the next element to evaluate
132 | |             for the moment we cannot rerun a same search experiment
133 | |             
134 | |         Returns
135 | |         -------
136 | |             results_dict : dict
137 | |                 The results of the search experiment    
138 | | 
139 | |         """
    | |___________^ D400
140 |           # get initial elements
141 |           if self.ids_acquired ==[]:
    |
    = help: Add period

src\stk_search\SearchExp.py:129:9: D415 First line should end with a period, question mark, or exclamation point
    |
128 |       def run_seach(self):
129 |           """Run the search experiment
    |  _________^
130 | |         the search experiment will initialise the search space, get the initial elements, evaluate the elements, \
131 | |             run the search algorithm and suggest the next element to evaluate
132 | |             for the moment we cannot rerun a same search experiment
133 | |             
134 | |         Returns
135 | |         -------
136 | |             results_dict : dict
137 | |                 The results of the search experiment    
138 | | 
139 | |         """
    | |___________^ D415
140 |           # get initial elements
141 |           if self.ids_acquired ==[]:
    |
    = help: Add closing punctuation

src\stk_search\SearchExp.py:133:1: W293 Blank line contains whitespace
    |
131 |             run the search algorithm and suggest the next element to evaluate
132 |             for the moment we cannot rerun a same search experiment
133 |             
    | ^^^^^^^^^^^^ W293
134 |         Returns
135 |         -------
    |
    = help: Remove whitespace from blank line

src\stk_search\SearchExp.py:137:53: W291 Trailing whitespace
    |
135 |         -------
136 |             results_dict : dict
137 |                 The results of the search experiment    
    |                                                     ^^^^ W291
138 | 
139 |         """
    |
    = help: Remove trailing whitespace

src\stk_search\SearchExp.py:154:23: TRY002 Create your own exception
    |
152 |                 self.search_algorithm.budget < 0
153 |             ):
154 |                 raise Exception("Budget exhausted by Initial Sample")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY002
155 | 
156 |             self.df_search_space = df_search_space
    |

src\stk_search\SearchExp.py:154:23: TRY003 Avoid specifying long messages outside the exception class
    |
152 |                 self.search_algorithm.budget < 0
153 |             ):
154 |                 raise Exception("Budget exhausted by Initial Sample")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
155 | 
156 |             self.df_search_space = df_search_space
    |

src\stk_search\SearchExp.py:154:33: EM101 Exception must not use a string literal, assign to variable first
    |
152 |                 self.search_algorithm.budget < 0
153 |             ):
154 |                 raise Exception("Budget exhausted by Initial Sample")
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
155 | 
156 |             self.df_search_space = df_search_space
    |
    = help: Assign to variable; remove string literal

src\stk_search\SearchExp.py:157:17: A001 Variable `id` is shadowing a Python builtin
    |
156 |             self.df_search_space = df_search_space
157 |             for id in range(len(ids_acquired)):
    |                 ^^ A001
158 |                 # evaluate the element
159 |                 self.evaluate_element(
    |

src\stk_search\SearchExp.py:164:17: T201 `print` found
    |
162 |                 )
163 |             if self.verbose:
164 |                 print(f"max fitness acquired: {max(self.fitness_acquired)}")
    |                 ^^^^^ T201
165 |                 print(f"min fitness acquired: {min(self.fitness_acquired)}")
166 |         # run the search
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:165:17: T201 `print` found
    |
163 |             if self.verbose:
164 |                 print(f"max fitness acquired: {max(self.fitness_acquired)}")
165 |                 print(f"min fitness acquired: {min(self.fitness_acquired)}")
    |                 ^^^^^ T201
166 |         # run the search
167 |         number_of_iterations_run = len(self.ids_acquired)-self.num_elem_initialisation
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:169:13: T201 `print` found
    |
167 |         number_of_iterations_run = len(self.ids_acquired)-self.num_elem_initialisation
168 |         if number_of_iterations_run > self.number_of_iterations:
169 |             print( " number of iteration max already run")
    |             ^^^^^ T201
170 |             return None
171 |         for id in range(number_of_iterations_run, self.number_of_iterations):
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:171:13: A001 Variable `id` is shadowing a Python builtin
    |
169 |             print( " number of iteration max already run")
170 |             return None
171 |         for id in range(number_of_iterations_run, self.number_of_iterations):
    |             ^^ A001
172 |             # suggest the next element
173 |             ids_acquired, df_search_space = (
    |

src\stk_search\SearchExp.py:190:13: ERA001 Found commented-out code
    |
188 |             # evaluate the element
189 |             # if self.verbose:
190 |             # print(f"element id suggested: {ids_acquired}, inchikey suggested: {self.df_search_space.loc[ids_acquired]}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
191 |             self.evaluate_element(
192 |                 element_id=ids_acquired,
    |
    = help: Remove commented-out code

src\stk_search\SearchExp.py:195:13: ERA001 Found commented-out code
    |
193 |                 objective_function=self.objective_function,
194 |             )
195 |             # self.fitness_acquired.append(Eval)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
196 |             # self.InchiKey_acquired.append(InchiKey)
197 |             # save the results
    |
    = help: Remove commented-out code

src\stk_search\SearchExp.py:196:13: ERA001 Found commented-out code
    |
194 |             )
195 |             # self.fitness_acquired.append(Eval)
196 |             # self.InchiKey_acquired.append(InchiKey)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
197 |             # save the results
198 |             self.save_results()
    |
    = help: Remove commented-out code

src\stk_search\SearchExp.py:200:17: T201 `print` found
    |
198 |             self.save_results()
199 |             if self.verbose:
200 |                 print(f"iteration {id} completed")
    |                 ^^^^^ T201
201 |                 print(f"max fitness acquired: {max(self.fitness_acquired)}")
202 |                 print(f"min fitness acquired: {min(self.fitness_acquired)}")
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:201:17: T201 `print` found
    |
199 |             if self.verbose:
200 |                 print(f"iteration {id} completed")
201 |                 print(f"max fitness acquired: {max(self.fitness_acquired)}")
    |                 ^^^^^ T201
202 |                 print(f"min fitness acquired: {min(self.fitness_acquired)}")
203 |                 # print(f"ids acquired: {self.ids_acquired}")
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:202:17: T201 `print` found
    |
200 |                 print(f"iteration {id} completed")
201 |                 print(f"max fitness acquired: {max(self.fitness_acquired)}")
202 |                 print(f"min fitness acquired: {min(self.fitness_acquired)}")
    |                 ^^^^^ T201
203 |                 # print(f"ids acquired: {self.ids_acquired}")
204 |                 print(f"new fitness acquired: {self.fitness_acquired[-1]}")
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:203:17: ERA001 Found commented-out code
    |
201 |                 print(f"max fitness acquired: {max(self.fitness_acquired)}")
202 |                 print(f"min fitness acquired: {min(self.fitness_acquired)}")
203 |                 # print(f"ids acquired: {self.ids_acquired}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
204 |                 print(f"new fitness acquired: {self.fitness_acquired[-1]}")
205 |         # save the results
    |
    = help: Remove commented-out code

src\stk_search\SearchExp.py:204:17: T201 `print` found
    |
202 |                 print(f"min fitness acquired: {min(self.fitness_acquired)}")
203 |                 # print(f"ids acquired: {self.ids_acquired}")
204 |                 print(f"new fitness acquired: {self.fitness_acquired[-1]}")
    |                 ^^^^^ T201
205 |         # save the results
206 |         results_dict = self.save_results()
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:207:16: RET504 Unnecessary assignment to `results_dict` before `return` statement
    |
205 |         # save the results
206 |         results_dict = self.save_results()
207 |         return results_dict
    |                ^^^^^^^^^^^^ RET504
208 | 
209 |     def evaluate_element(
    |
    = help: Remove unnecessary assignment

src\stk_search\SearchExp.py:209:9: D102 Missing docstring in public method
    |
207 |         return results_dict
208 | 
209 |     def evaluate_element(
    |         ^^^^^^^^^^^^^^^^ D102
210 |         self,
211 |         element_id: int,
    |

src\stk_search\SearchExp.py:216:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
214 |         # get the element
215 |         element = self.df_search_space.loc[[element_id], :]
216 |         time_calc = datetime.now()
    |                     ^^^^^^^^^^^^^^ DTZ005
217 |         # evaluate the element
218 |         try:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\SearchExp.py:219:13: N806 Variable `Eval` in function should be lowercase
    |
217 |         # evaluate the element
218 |         try:
219 |             Eval, InchiKey = objective_function.evaluate_element(
    |             ^^^^ N806
220 |                 element=element,
221 |                 multiFidelity=self.search_algorithm.multiFidelity,
    |

src\stk_search\SearchExp.py:219:19: N806 Variable `InchiKey` in function should be lowercase
    |
217 |         # evaluate the element
218 |         try:
219 |             Eval, InchiKey = objective_function.evaluate_element(
    |                   ^^^^^^^^ N806
220 |                 element=element,
221 |                 multiFidelity=self.search_algorithm.multiFidelity,
    |

src\stk_search\SearchExp.py:224:17: T201 `print` found
    |
222 |             )
223 |             if self.verbose:
224 |                 print(f"element Inchikey suggested: {InchiKey}, Eval: {Eval}")
    |                 ^^^^^ T201
225 |             if self.search_algorithm.multiFidelity:
226 |                 print(f"fitness suggested: {element['fidelity']}")
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:226:17: T201 `print` found
    |
224 |                 print(f"element Inchikey suggested: {InchiKey}, Eval: {Eval}")
225 |             if self.search_algorithm.multiFidelity:
226 |                 print(f"fitness suggested: {element['fidelity']}")
    |                 ^^^^^ T201
227 |             if Eval is None:
228 |                 self.bad_ids.append(element_id)
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:229:17: T201 `print` found
    |
227 |             if Eval is None:
228 |                 self.bad_ids.append(element_id)
229 |                 print(f"element {element_id} failed")
    |                 ^^^^^ T201
230 | 
231 |                 return None, None
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:235:35: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
233 |             self.InchiKey_acquired.append(InchiKey)
234 |             self.ids_acquired.append(element_id)
235 |             self.time_calc.append(datetime.now() - time_calc)
    |                                   ^^^^^^^^^^^^^^ DTZ005
236 |             self.overall_time.append(datetime.now())
237 |             return Eval, InchiKey
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\SearchExp.py:236:38: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
234 |             self.ids_acquired.append(element_id)
235 |             self.time_calc.append(datetime.now() - time_calc)
236 |             self.overall_time.append(datetime.now())
    |                                      ^^^^^^^^^^^^^^ DTZ005
237 |             return Eval, InchiKey
238 |         except Exception as e:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\SearchExp.py:237:13: TRY300 Consider moving this statement to an `else` block
    |
235 |             self.time_calc.append(datetime.now() - time_calc)
236 |             self.overall_time.append(datetime.now())
237 |             return Eval, InchiKey
    |             ^^^^^^^^^^^^^^^^^^^^^ TRY300
238 |         except Exception as e:
239 |             self.bad_ids.append(element_id)
    |

src\stk_search\SearchExp.py:238:16: BLE001 Do not catch blind exception: `Exception`
    |
236 |             self.overall_time.append(datetime.now())
237 |             return Eval, InchiKey
238 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
239 |             self.bad_ids.append(element_id)
240 |             print(f"element {element_id} failed")
    |

src\stk_search\SearchExp.py:240:13: T201 `print` found
    |
238 |         except Exception as e:
239 |             self.bad_ids.append(element_id)
240 |             print(f"element {element_id} failed")
    |             ^^^^^ T201
241 |             print(e)
242 |             return None, None
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:241:13: T201 `print` found
    |
239 |             self.bad_ids.append(element_id)
240 |             print(f"element {element_id} failed")
241 |             print(e)
    |             ^^^^^ T201
242 |             return None, None
    |
    = help: Remove `print`

src\stk_search\SearchExp.py:244:9: D102 Missing docstring in public method
    |
242 |             return None, None
243 | 
244 |     def save_search_experiment(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^ D102
245 |         # save the search experiment
246 |         time_now = datetime.now().strftime("%Y%m%d_%H%M%S")
    |

src\stk_search\SearchExp.py:246:9: F841 Local variable `time_now` is assigned to but never used
    |
244 |     def save_search_experiment(self):
245 |         # save the search experiment
246 |         time_now = datetime.now().strftime("%Y%m%d_%H%M%S")
    |         ^^^^^^^^ F841
247 |         date_now = datetime.now().strftime("%Y%m%d")
248 |         os.makedirs(self.output_folder + f"/{date_now}", exist_ok=True)
    |
    = help: Remove assignment to unused variable `time_now`

src\stk_search\SearchExp.py:246:20: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
244 |     def save_search_experiment(self):
245 |         # save the search experiment
246 |         time_now = datetime.now().strftime("%Y%m%d_%H%M%S")
    |                    ^^^^^^^^^^^^^^ DTZ005
247 |         date_now = datetime.now().strftime("%Y%m%d")
248 |         os.makedirs(self.output_folder + f"/{date_now}", exist_ok=True)
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\SearchExp.py:247:20: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
245 |         # save the search experiment
246 |         time_now = datetime.now().strftime("%Y%m%d_%H%M%S")
247 |         date_now = datetime.now().strftime("%Y%m%d")
    |                    ^^^^^^^^^^^^^^ DTZ005
248 |         os.makedirs(self.output_folder + f"/{date_now}", exist_ok=True)
249 |         with open(
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\SearchExp.py:248:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
246 |         time_now = datetime.now().strftime("%Y%m%d_%H%M%S")
247 |         date_now = datetime.now().strftime("%Y%m%d")
248 |         os.makedirs(self.output_folder + f"/{date_now}", exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
249 |         with open(
250 |             self.output_folder
    |

src\stk_search\SearchExp.py:249:14: PTH123 `open()` should be replaced by `Path.open()`
    |
247 |         date_now = datetime.now().strftime("%Y%m%d")
248 |         os.makedirs(self.output_folder + f"/{date_now}", exist_ok=True)
249 |         with open(
    |              ^^^^ PTH123
250 |             self.output_folder
251 |             + f"/{date_now}"
    |

src\stk_search\SearchExp.py:257:9: D102 Missing docstring in public method
    |
255 |             pickle.dump(self, f)
256 | 
257 |     def save_results(self):
    |         ^^^^^^^^^^^^ D102
258 |         # save the results
259 |         # time_now = datetime.now().strftime("%Y%m%d_%H")
    |

src\stk_search\SearchExp.py:259:9: ERA001 Found commented-out code
    |
257 |     def save_results(self):
258 |         # save the results
259 |         # time_now = datetime.now().strftime("%Y%m%d_%H")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
260 | 
261 |         resutls_dict = {
    |
    = help: Remove commented-out code

src\stk_search\SearchExp.py:271:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
270 |         path = self.output_folder + f"/{self.date}"
271 |         os.makedirs(path, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
272 |         with open(path + f"/results_{self.search_exp_name}.pkl", "wb") as f:
    |

src\stk_search\SearchExp.py:272:14: PTH123 `open()` should be replaced by `Path.open()`
    |
270 |         path = self.output_folder + f"/{self.date}"
271 |         os.makedirs(path, exist_ok=True)
272 |         with open(path + f"/results_{self.search_exp_name}.pkl", "wb") as f:
    |              ^^^^ PTH123
273 | 
274 |             pickle.dump(resutls_dict, f)
    |

src\stk_search\SearchSpace.py:1:1: N999 Invalid module name: 'SearchSpace'
src\stk_search\SearchSpace.py:1:1: D100 Missing docstring in public module
src\stk_search\SearchSpace.py:8:5: D205 1 blank line required between summary line and description
   |
 7 |   class SearchSpace:
 8 |       """class that contains the chemical space to search over
   |  _____^
 9 | |     it is defined by the number of fragments and the syntax of the fragment forming the oligomer
10 | |     it also contains the conditions that need to be respected by the building blocks
11 | | 
12 | |     Attributes
13 | |     ----------
14 | |     number_of_fragments : int
15 | |         number of fragments in the oligomer
16 | |     df_precursors : pd.DataFrame
17 | |         dataframe containing the building blocks inchikeys and features
18 | |     generation_type : str
19 | |         type of generation of the search space
20 | |     syntax : list
21 | |         list of the syntax of the oligomer
22 | |     conditions_list : list
23 | |         list of the conditions that need to be respected by the building blocks
24 | | 
25 | | 
26 | |     """
   | |_______^ D205
27 |   
28 |       def __init__(
   |
   = help: Insert single blank line

src\stk_search\SearchSpace.py:8:5: D400 First line should end with a period
   |
 7 |   class SearchSpace:
 8 |       """class that contains the chemical space to search over
   |  _____^
 9 | |     it is defined by the number of fragments and the syntax of the fragment forming the oligomer
10 | |     it also contains the conditions that need to be respected by the building blocks
11 | | 
12 | |     Attributes
13 | |     ----------
14 | |     number_of_fragments : int
15 | |         number of fragments in the oligomer
16 | |     df_precursors : pd.DataFrame
17 | |         dataframe containing the building blocks inchikeys and features
18 | |     generation_type : str
19 | |         type of generation of the search space
20 | |     syntax : list
21 | |         list of the syntax of the oligomer
22 | |     conditions_list : list
23 | |         list of the conditions that need to be respected by the building blocks
24 | | 
25 | | 
26 | |     """
   | |_______^ D400
27 |   
28 |       def __init__(
   |
   = help: Add period

src\stk_search\SearchSpace.py:8:5: D415 First line should end with a period, question mark, or exclamation point
   |
 7 |   class SearchSpace:
 8 |       """class that contains the chemical space to search over
   |  _____^
 9 | |     it is defined by the number of fragments and the syntax of the fragment forming the oligomer
10 | |     it also contains the conditions that need to be respected by the building blocks
11 | | 
12 | |     Attributes
13 | |     ----------
14 | |     number_of_fragments : int
15 | |         number of fragments in the oligomer
16 | |     df_precursors : pd.DataFrame
17 | |         dataframe containing the building blocks inchikeys and features
18 | |     generation_type : str
19 | |         type of generation of the search space
20 | |     syntax : list
21 | |         list of the syntax of the oligomer
22 | |     conditions_list : list
23 | |         list of the conditions that need to be respected by the building blocks
24 | | 
25 | | 
26 | |     """
   | |_______^ D415
27 |   
28 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\SearchSpace.py:28:9: ANN204 Missing return type annotation for special method `__init__`
   |
26 |     """
27 | 
28 |     def __init__(
   |         ^^^^^^^^ ANN204
29 |         self,
30 |         number_of_fragments: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\SearchSpace.py:35:9: D205 1 blank line required between summary line and description
   |
33 |           generation_type: str = "conditional",
34 |       ):
35 |           """Parameters
   |  _________^
36 | |         ----------
37 | |         number_of_fragments : int
38 | |             number of fragments in the oligomer
39 | |         df : pd.DataFrame
40 | |             dataframe containing the building blocks inchikeys and features
41 | |         features_frag : list
42 | |             list of the features of the building blocks
43 | |         generation_type : str
44 | |             type of generation of the search space
45 | | 
46 | |         """
   | |___________^ D205
47 |           self.number_of_fragments = number_of_fragments
48 |           self.df_precursors = df
   |
   = help: Insert single blank line

src\stk_search\SearchSpace.py:49:9: ERA001 Found commented-out code
   |
47 |         self.number_of_fragments = number_of_fragments
48 |         self.df_precursors = df
49 |         # self.features_frag = features_frag
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
50 |         self.syntax = [0, 1, 2, 3, 4, 5]
51 |         self.conditions_list = [[] for i in range(self.number_of_fragments)]
   |
   = help: Remove commented-out code

src\stk_search\SearchSpace.py:56:9: D205 1 blank line required between summary line and description
   |
55 |       def add_condition(self, condition: str, fragment: int):
56 |           """Add a condition to the condition list
   |  _________^
57 | |         # condition syntax should follow the following condition:
58 | |         # "'column'#operation#value" e.g. "'IP (eV)'#>=#6.5"
59 | | 
60 | |         Parameters
61 | |         ----------
62 | |         condition : str
63 | |             condition to add
64 | |         fragment : int
65 | |             fragment position to which the condition is added
66 | | 
67 | |         """
   | |___________^ D205
68 |           # condition syntax should follow the following condition:
69 |           # "'column'#operation#value" e.g. "'IP (eV)'#>=#6.5"
   |
   = help: Insert single blank line

src\stk_search\SearchSpace.py:56:9: D400 First line should end with a period
   |
55 |       def add_condition(self, condition: str, fragment: int):
56 |           """Add a condition to the condition list
   |  _________^
57 | |         # condition syntax should follow the following condition:
58 | |         # "'column'#operation#value" e.g. "'IP (eV)'#>=#6.5"
59 | | 
60 | |         Parameters
61 | |         ----------
62 | |         condition : str
63 | |             condition to add
64 | |         fragment : int
65 | |             fragment position to which the condition is added
66 | | 
67 | |         """
   | |___________^ D400
68 |           # condition syntax should follow the following condition:
69 |           # "'column'#operation#value" e.g. "'IP (eV)'#>=#6.5"
   |
   = help: Add period

src\stk_search\SearchSpace.py:56:9: D415 First line should end with a period, question mark, or exclamation point
   |
55 |       def add_condition(self, condition: str, fragment: int):
56 |           """Add a condition to the condition list
   |  _________^
57 | |         # condition syntax should follow the following condition:
58 | |         # "'column'#operation#value" e.g. "'IP (eV)'#>=#6.5"
59 | | 
60 | |         Parameters
61 | |         ----------
62 | |         condition : str
63 | |             condition to add
64 | |         fragment : int
65 | |             fragment position to which the condition is added
66 | | 
67 | |         """
   | |___________^ D415
68 |           # condition syntax should follow the following condition:
69 |           # "'column'#operation#value" e.g. "'IP (eV)'#>=#6.5"
   |
   = help: Add closing punctuation

src\stk_search\SearchSpace.py:72:9: D102 Missing docstring in public method
   |
70 |         self.conditions_list[fragment].append(condition)
71 | 
72 |     def remove_condition(self, condition: str, fragment: int):
   |         ^^^^^^^^^^^^^^^^ D102
73 |         # condition syntax should follow the following condition:
74 |         # "'column'#operation#value" e.g. "'IP (eV)'#>=#6.5"
   |

src\stk_search\SearchSpace.py:77:9: N802 Function name `check_df_for_element_from_sp` should be lowercase
   |
75 |         self.conditions_list[fragment].remove(condition)
76 | 
77 |     def check_df_for_element_from_sp(self, df_to_check: pd.DataFrame):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
78 |         # check if the condition is respected by the search space
79 |         # show that each fragment respect the condition
   |

src\stk_search\SearchSpace.py:77:9: D102 Missing docstring in public method
   |
75 |         self.conditions_list[fragment].remove(condition)
76 | 
77 |     def check_df_for_element_from_sp(self, df_to_check: pd.DataFrame):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
78 |         # check if the condition is respected by the search space
79 |         # show that each fragment respect the condition
   |

src\stk_search\SearchSpace.py:93:59: S307 Use of possibly insecure function; consider using `ast.literal_eval`
   |
91 |                     + condition_exp[2]
92 |                 )
93 |                 df_precursor_filter = df_precursor_filter[eval(expression)]
   |                                                           ^^^^^^^^^^^^^^^^ S307
94 | 
95 |             df_mult_filtered = df_mult_filtered[
   |

src\stk_search\SearchSpace.py:101:18: A001 Variable `id` is shadowing a Python builtin
    |
 99 |             ]
100 |         # check if the fragment in the dataframe respect the syntax in the syntax list
101 |         for pos, id in enumerate(self.syntax):
    |                  ^^ A001
102 |             if id == pos:
103 |                 pass
    |

src\stk_search\SearchSpace.py:112:9: D205 1 blank line required between summary line and description
    |
111 |       def update(self):
112 |           """Update the search space based on the conditions
    |  _________^
113 | |         changes the list of fragment and recomputes the space size
114 | |         """
    | |___________^ D205
115 |           self.list_fragment = (
116 |               self.generate_list_fragment()
    |
    = help: Insert single blank line

src\stk_search\SearchSpace.py:112:9: D400 First line should end with a period
    |
111 |       def update(self):
112 |           """Update the search space based on the conditions
    |  _________^
113 | |         changes the list of fragment and recomputes the space size
114 | |         """
    | |___________^ D400
115 |           self.list_fragment = (
116 |               self.generate_list_fragment()
    |
    = help: Add period

src\stk_search\SearchSpace.py:112:9: D415 First line should end with a period, question mark, or exclamation point
    |
111 |       def update(self):
112 |           """Update the search space based on the conditions
    |  _________^
113 | |         changes the list of fragment and recomputes the space size
114 | |         """
    | |___________^ D415
115 |           self.list_fragment = (
116 |               self.generate_list_fragment()
    |
    = help: Add closing punctuation

src\stk_search\SearchSpace.py:120:9: D102 Missing docstring in public method
    |
118 |         self.get_space_size()
119 | 
120 |     def generate_list_fragment(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^ D102
121 |         # generate the list of list of index of the fragment ( need to be the same length as the number of fragments)
122 |         # generation type can either be random or most_diverse or manual or conditional
    |

src\stk_search\SearchSpace.py:137:47: S307 Use of possibly insecure function; consider using `ast.literal_eval`
    |
135 |                         + condition_exp[2]
136 |                     )
137 |                     df_filtered = df_filtered[eval(expression)]
    |                                               ^^^^^^^^^^^^^^^^ S307
138 |                 list_fragment.append(df_filtered.index.to_list())
139 |         elif self.generation_type == "manual":
    |

src\stk_search\SearchSpace.py:150:9: D102 Missing docstring in public method
    |
148 |         return list_fragment
149 | 
150 |     def get_space_size(self):
    |         ^^^^^^^^^^^^^^ D102
151 |         x = 1
    |

src\stk_search\SearchSpace.py:163:9: D102 Missing docstring in public method
    |
161 |         return x
162 | 
163 |     def generate_syntax(self):
    |         ^^^^^^^^^^^^^^^ D102
164 |         # generate the syntax of the oligomer
165 |         syntax = []
    |

src\stk_search\SearchSpace.py:167:13: PERF401 Use a list comprehension to create a transformed list
    |
165 |         syntax = []
166 |         for i in range(self.number_of_fragments):
167 |             syntax.append([f"frag_{i}_{x}" for x in self.features_frag])
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
168 |         return syntax
    |

src\stk_search\SearchSpace.py:170:9: D102 Missing docstring in public method
    |
168 |         return syntax
169 | 
170 |     def generate_dataframe_with_search_space(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
171 |         id_list_not_to_merge = []
172 |         for i in set(self.syntax):
    |

src\stk_search\SearchSpace.py:194:18: A001 Variable `id` is shadowing a Python builtin
    |
192 |         )
193 | 
194 |         for pos, id in enumerate(self.syntax):
    |                  ^^ A001
195 |             if pos in id_list_not_to_merge:
196 |                 continue
    |

src\stk_search\SearchSpace.py:197:13: RET507 Unnecessary `else` after `continue` statement
    |
195 |             if pos in id_list_not_to_merge:
196 |                 continue
197 |             else:
    |             ^^^^ RET507
198 |                 df_multi = df_multi.merge(
199 |                     self.df_precursors.loc[list(self.list_fragment[id])][
    |
    = help: Remove unnecessary `else`

src\stk_search\SearchSpace.py:214:9: ERA001 Found commented-out code
    |
212 |                 )
213 | 
214 |         # print(f"shape of the dataframe {df_multi.shape}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
215 |         return df_multi
    |
    = help: Remove commented-out code

src\stk_search\SearchSpace.py:217:9: D102 Missing docstring in public method
    |
215 |         return df_multi
216 | 
217 |     def plot_histogram_precursor(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
218 |         def plot_histogram(column_name):
219 |             plt.figure(figsize=(6, 4))
    |

src\stk_search\SearchSpace.py:218:13: ANN202 Missing return type annotation for private function `plot_histogram`
    |
217 |     def plot_histogram_precursor(self):
218 |         def plot_histogram(column_name):
    |             ^^^^^^^^^^^^^^ ANN202
219 |             plt.figure(figsize=(6, 4))
220 |             plt.hist(df[column_name], bins=20, edgecolor="black")
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchSpace.py:226:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
224 |             plt.show()
225 | 
226 |         df = self.df_precursors
    |         ^^ PD901
227 |         # Interactive widget for column selection
228 |         columns_dropdown = widgets.Dropdown(
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:1:1: INP001 File `src\stk_search\Search_algorithm\BayesianOptimisation.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Search_algorithm\BayesianOptimisation.py:1:1: D100 Missing docstring in public module
src\stk_search\Search_algorithm\BayesianOptimisation.py:11:5: F811 Redefinition of unused `ExpectedImprovement` from line 9
   |
 9 | from botorch.acquisition import ExpectedImprovement, qKnowledgeGradient
10 | from botorch.acquisition.analytic import (
11 |     ExpectedImprovement,
   |     ^^^^^^^^^^^^^^^^^^^ F811
12 |     LogExpectedImprovement,
13 | )
   |
   = help: Remove definition: `ExpectedImprovement`

src\stk_search\Search_algorithm\BayesianOptimisation.py:26:5: D205 1 blank line required between summary line and description
   |
25 |   class BayesianOptimisation(Search_Algorithm):
26 |       """This class is to define the Bayesian Optimisation search algorithm.
   |  _____^
27 | |     Here the Bayesian Optimisation search algorithm is defined and is a subclass of Search_Algorithm.
28 | |     The Bayesian Optimisation search algorithm is used to optimise the acquisition function and suggest the next element to evaluate.
29 | |     the different step of the algorithm are:
30 | |     1. Prepare input for the BO
31 | |     2. Train the model
32 | |     3. Optimise the acquisition function
33 | |     4. Generate elements to evaluate
34 | |     5. Suggest a new element to evaluate
35 | |     
36 | |     """
   | |_______^ D205
37 |   
38 |       def __init__(
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\BayesianOptimisation.py:26:5: D400 First line should end with a period
   |
25 |   class BayesianOptimisation(Search_Algorithm):
26 |       """This class is to define the Bayesian Optimisation search algorithm.
   |  _____^
27 | |     Here the Bayesian Optimisation search algorithm is defined and is a subclass of Search_Algorithm.
28 | |     The Bayesian Optimisation search algorithm is used to optimise the acquisition function and suggest the next element to evaluate.
29 | |     the different step of the algorithm are:
30 | |     1. Prepare input for the BO
31 | |     2. Train the model
32 | |     3. Optimise the acquisition function
33 | |     4. Generate elements to evaluate
34 | |     5. Suggest a new element to evaluate
35 | |     
36 | |     """
   | |_______^ D400
37 |   
38 |       def __init__(
   |
   = help: Add period

src\stk_search\Search_algorithm\BayesianOptimisation.py:26:5: D404 First word of the docstring should not be "This"
   |
25 |   class BayesianOptimisation(Search_Algorithm):
26 |       """This class is to define the Bayesian Optimisation search algorithm.
   |  _____^
27 | |     Here the Bayesian Optimisation search algorithm is defined and is a subclass of Search_Algorithm.
28 | |     The Bayesian Optimisation search algorithm is used to optimise the acquisition function and suggest the next element to evaluate.
29 | |     the different step of the algorithm are:
30 | |     1. Prepare input for the BO
31 | |     2. Train the model
32 | |     3. Optimise the acquisition function
33 | |     4. Generate elements to evaluate
34 | |     5. Suggest a new element to evaluate
35 | |     
36 | |     """
   | |_______^ D404
37 |   
38 |       def __init__(
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:26:5: D415 First line should end with a period, question mark, or exclamation point
   |
25 |   class BayesianOptimisation(Search_Algorithm):
26 |       """This class is to define the Bayesian Optimisation search algorithm.
   |  _____^
27 | |     Here the Bayesian Optimisation search algorithm is defined and is a subclass of Search_Algorithm.
28 | |     The Bayesian Optimisation search algorithm is used to optimise the acquisition function and suggest the next element to evaluate.
29 | |     the different step of the algorithm are:
30 | |     1. Prepare input for the BO
31 | |     2. Train the model
32 | |     3. Optimise the acquisition function
33 | |     4. Generate elements to evaluate
34 | |     5. Suggest a new element to evaluate
35 | |     
36 | |     """
   | |_______^ D415
37 |   
38 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\Search_algorithm\BayesianOptimisation.py:35:1: W293 Blank line contains whitespace
   |
33 |     4. Generate elements to evaluate
34 |     5. Suggest a new element to evaluate
35 |     
   | ^^^^ W293
36 |     """
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\BayesianOptimisation.py:38:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
36 |     """
37 | 
38 |     def __init__(
   |         ^^^^^^^^ PLR0913
39 |         self,
40 |         verbose=False,
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:38:9: ANN204 Missing return type annotation for special method `__init__`
   |
36 |     """
37 | 
38 |     def __init__(
   |         ^^^^^^^^ ANN204
39 |         self,
40 |         verbose=False,
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\BayesianOptimisation.py:40:9: FBT002 Boolean default positional argument in function definition
   |
38 |     def __init__(
39 |         self,
40 |         verbose=False,
   |         ^^^^^^^ FBT002
41 |         which_acquisition="EI",
42 |         kernel=RBFKernel,
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:46:9: N803 Argument name `Representation` should be lowercase
   |
44 |         model=None,
45 |         lim_counter=2,
46 |         Representation=None,
   |         ^^^^^^^^^^^^^^ N803
47 |     ):
48 |         """Initialise the class.
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:64:9: ERA001 Found commented-out code
   |
62 |         """
63 |         self.verbose = verbose
64 |         # self.normalise_input = normalise_input
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
65 |         self.which_acquisition = which_acquisition
66 |         self.kernel = kernel
   |
   = help: Remove commented-out code

src\stk_search\Search_algorithm\BayesianOptimisation.py:75:9: D102 Missing docstring in public method
   |
73 |         self.pred_model = None
74 | 
75 |     def update_representation(self, Representation):
   |         ^^^^^^^^^^^^^^^^^^^^^ D102
76 |         self.Representation = Representation
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:75:37: N803 Argument name `Representation` should be lowercase
   |
73 |         self.pred_model = None
74 | 
75 |     def update_representation(self, Representation):
   |                                     ^^^^^^^^^^^^^^ N803
76 |         self.Representation = Representation
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:78:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
76 |         self.Representation = Representation
77 | 
78 |     def suggest_element(
   |         ^^^^^^^^^^^^^^^ PLR0913
79 |         self,
80 |         search_space_df,
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:78:9: D417 Missing argument descriptions in the docstring for `suggest_element`: `SP`, `benchmark`, `df_total`, `fitness_acquired`, `ids_acquired`
   |
76 |         self.Representation = Representation
77 | 
78 |     def suggest_element(
   |         ^^^^^^^^^^^^^^^ D417
79 |         self,
80 |         search_space_df,
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:83:9: N803 Argument name `SP` should be lowercase
   |
81 |         fitness_acquired,
82 |         ids_acquired,
83 |         SP: SearchSpace,
   |         ^^^^^^^^^^^^^^^ N803
84 |         benchmark=True,
85 |         df_total: pd.DataFrame = None,
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:84:9: FBT002 Boolean default positional argument in function definition
   |
82 |         ids_acquired,
83 |         SP: SearchSpace,
84 |         benchmark=True,
   |         ^^^^^^^^^ FBT002
85 |         df_total: pd.DataFrame = None,
86 |     ):
   |

src\stk_search\Search_algorithm\BayesianOptimisation.py:105:9: N806 Variable `X_rpr` in function should be lowercase
    |
103 |         fitness_acquired = np.array(fitness_acquired)
104 |         # prepare input for the BO
105 |         X_rpr = self.Representation.generate_repr(
    |         ^^^^^ N806
106 |             df_search.loc[ids_acquired, :]
107 |         )
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:108:9: N806 Variable `X_rpr` in function should be lowercase
    |
106 |             df_search.loc[ids_acquired, :]
107 |         )
108 |         X_rpr = X_rpr.double()
    |         ^^^^^ N806
109 |         X_rpr = self.normalise_input(X_rpr)
110 |         y_explored_BO_norm = torch.tensor(
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:109:9: N806 Variable `X_rpr` in function should be lowercase
    |
107 |         )
108 |         X_rpr = X_rpr.double()
109 |         X_rpr = self.normalise_input(X_rpr)
    |         ^^^^^ N806
110 |         y_explored_BO_norm = torch.tensor(
111 |             fitness_acquired, dtype=torch.float64
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:110:9: N806 Variable `y_explored_BO_norm` in function should be lowercase
    |
108 |         X_rpr = X_rpr.double()
109 |         X_rpr = self.normalise_input(X_rpr)
110 |         y_explored_BO_norm = torch.tensor(
    |         ^^^^^^^^^^^^^^^^^^ N806
111 |             fitness_acquired, dtype=torch.float64
112 |         )
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:113:9: N806 Variable `y_explored_BO_norm` in function should be lowercase
    |
111 |             fitness_acquired, dtype=torch.float64
112 |         )
113 |         y_explored_BO_norm = (
    |         ^^^^^^^^^^^^^^^^^^ N806
114 |             y_explored_BO_norm - y_explored_BO_norm.mean(axis=0)
115 |         ) / (y_explored_BO_norm.std(axis=0))
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:116:9: N806 Variable `y_explored_BO_norm` in function should be lowercase
    |
114 |             y_explored_BO_norm - y_explored_BO_norm.mean(axis=0)
115 |         ) / (y_explored_BO_norm.std(axis=0))
116 |         y_explored_BO_norm = y_explored_BO_norm.reshape(-1, 1)
    |         ^^^^^^^^^^^^^^^^^^ N806
117 |         # train model
118 |         self.train_model(X_rpr, y_explored_BO_norm)
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:132:13: ANN202 Missing return type annotation for private function `add_element`
    |
131 |         # add the new element to the search space
132 |         def add_element(df, element):
    |             ^^^^^^^^^^^ ANN202
133 |             if ~(df == element).all(1).any():
134 |                 df.loc[len(df)] = element
    |
    = help: Add return type annotation: `bool`

src\stk_search\Search_algorithm\BayesianOptimisation.py:139:39: PD011 Use `.to_numpy()` instead of `.values`
    |
138 |         for element_id in ids_sorted_by_aquisition:
139 |             if add_element(df_search, df_elements.values[element_id.item()]):
    |                                       ^^^^^^^^^^^^^^^^^^ PD011
140 |                 break
141 |         return len(df_search) - 1, df_search
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:143:9: D102 Missing docstring in public method
    |
141 |         return len(df_search) - 1, df_search
142 | 
143 |     def normalise_input(self, X_rpr):
    |         ^^^^^^^^^^^^^^^ D102
144 |         X_rpr = X_rpr.double()
145 |         # min max scaling the input
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:143:31: N803 Argument name `X_rpr` should be lowercase
    |
141 |         return len(df_search) - 1, df_search
142 | 
143 |     def normalise_input(self, X_rpr):
    |                               ^^^^^ N803
144 |         X_rpr = X_rpr.double()
145 |         # min max scaling the input
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:144:9: N806 Variable `X_rpr` in function should be lowercase
    |
143 |     def normalise_input(self, X_rpr):
144 |         X_rpr = X_rpr.double()
    |         ^^^^^ N806
145 |         # min max scaling the input
146 |         X_rpr = (X_rpr - X_rpr.min(dim=0)[0]) / (
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:146:9: N806 Variable `X_rpr` in function should be lowercase
    |
144 |         X_rpr = X_rpr.double()
145 |         # min max scaling the input
146 |         X_rpr = (X_rpr - X_rpr.min(dim=0)[0]) / (
    |         ^^^^^ N806
147 |             X_rpr.max(dim=0)[0] - X_rpr.min(dim=0)[0]
148 |         )
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:149:16: RET504 Unnecessary assignment to `X_rpr` before `return` statement
    |
147 |             X_rpr.max(dim=0)[0] - X_rpr.min(dim=0)[0]
148 |         )
149 |         return X_rpr
    |                ^^^^^ RET504
150 | 
151 |     def optimise_acquisition_function(
    |
    = help: Remove unnecessary assignment

src\stk_search\Search_algorithm\BayesianOptimisation.py:151:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
149 |         return X_rpr
150 | 
151 |     def optimise_acquisition_function(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
152 |         self,
153 |         best_f,
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:151:9: D417 Missing argument descriptions in the docstring for `optimise_acquisition_function`: `SP`, `benchmark`, `df_search`, `df_total`, `fitness_acquired`
    |
149 |         return X_rpr
150 | 
151 |     def optimise_acquisition_function(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
152 |         self,
153 |         best_f,
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:156:9: N803 Argument name `SP` should be lowercase
    |
154 |         fitness_acquired,
155 |         df_search,
156 |         SP,
    |         ^^ N803
157 |         benchmark=False,
158 |         df_total=None,
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:157:9: FBT002 Boolean default positional argument in function definition
    |
155 |         df_search,
156 |         SP,
157 |         benchmark=False,
    |         ^^^^^^^^^ FBT002
158 |         df_total=None,
159 |     ):
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:180:9: N806 Variable `Xrpr` in function should be lowercase
    |
178 |             fitness_acquired, df_search, SP, benchmark, df_total
179 |         )
180 |         Xrpr = self.Representation.generate_repr(df_elements)
    |         ^^^^ N806
181 |         Xrpr = self.normalise_input(Xrpr)
182 |         acquisition_values = self.get_acquisition_values(
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:181:9: N806 Variable `Xrpr` in function should be lowercase
    |
179 |         )
180 |         Xrpr = self.Representation.generate_repr(df_elements)
181 |         Xrpr = self.normalise_input(Xrpr)
    |         ^^^^ N806
182 |         acquisition_values = self.get_acquisition_values(
183 |             self.model,
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:189:13: T201 `print` found
    |
188 |         if "dataset_local" in self.Representation.__dict__:
189 |             print(
    |             ^^^^^ T201
190 |                 "size of representation dataset ",
191 |                 len(self.Representation.dataset_local),
    |
    = help: Remove `print`

src\stk_search\Search_algorithm\BayesianOptimisation.py:207:13: N806 Variable `Xrpr` in function should be lowercase
    |
205 |                 df_total,
206 |             )
207 |             Xrpr = self.Representation.generate_repr(df_elements)
    |             ^^^^ N806
208 |             Xrpr = self.normalise_input(Xrpr)
209 |             # if benchmark:
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:208:13: N806 Variable `Xrpr` in function should be lowercase
    |
206 |             )
207 |             Xrpr = self.Representation.generate_repr(df_elements)
208 |             Xrpr = self.normalise_input(Xrpr)
    |             ^^^^ N806
209 |             # if benchmark:
210 |             acquisition_values = self.get_acquisition_values(
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:216:17: T201 `print` found
    |
214 |             )
215 |             if "dataset_local" in self.Representation.__dict__:
216 |                 print(
    |                 ^^^^^ T201
217 |                     "size of representation dataset ",
218 |                     len(self.Representation.dataset_local),
    |
    = help: Remove `print`

src\stk_search\Search_algorithm\BayesianOptimisation.py:235:9: N802 Function name `Generate_element_to_evaluate` should be lowercase
    |
233 |         return ids_sorted_by_aquisition, df_elements
234 | 
235 |     def Generate_element_to_evaluate(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
236 |         self,
237 |         fitness_acquired,
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:235:9: C901 `Generate_element_to_evaluate` is too complex (12 > 10)
    |
233 |         return ids_sorted_by_aquisition, df_elements
234 | 
235 |     def Generate_element_to_evaluate(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
236 |         self,
237 |         fitness_acquired,
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:239:9: N803 Argument name `SP` should be lowercase
    |
237 |         fitness_acquired,
238 |         df_search,
239 |         SP: SearchSpace,
    |         ^^^^^^^^^^^^^^^ N803
240 |         benchmark=False,
241 |         df_total=None,
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:240:9: FBT002 Boolean default positional argument in function definition
    |
238 |         df_search,
239 |         SP: SearchSpace,
240 |         benchmark=False,
    |         ^^^^^^^^^ FBT002
241 |         df_total=None,
242 |     ):
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:257:13: ANN202 Missing return type annotation for private function `mutate_element`
    |
255 |         """
256 | 
257 |         def mutate_element(element):
    |             ^^^^^^^^^^^^^^ ANN202
258 |             elements_val = []
259 |             for i in range(element.shape[0]):
    |
    = help: Add return type annotation

src\stk_search\Search_algorithm\BayesianOptimisation.py:266:13: ANN202 Missing return type annotation for private function `cross_element`
    |
264 |             return elements_val
265 | 
266 |         def cross_element(element1, element2):
    |             ^^^^^^^^^^^^^ ANN202
267 |             elements_val = []
268 |             for i in range(element.shape[0]):
    |
    = help: Add return type annotation

src\stk_search\Search_algorithm\BayesianOptimisation.py:276:24: PD011 Use `.to_numpy()` instead of `.values`
    |
274 |         # select the 3 best one and add two random element from the search space
275 |         best_element_arg = fitness_acquired.argsort()[-3:][::-1]
276 |         list_parents = df_search.loc[best_element_arg, :].values
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
277 |         list_parents = np.append(
278 |             list_parents, df_search.sample(2).values, axis=0
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:312:49: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
310 |                 how="left",
311 |             )
312 |             df_elements.dropna(subset="target", inplace=True)
    |                                                 ^^^^^^^^^^^^ PD002
313 |             df_elements = df_elements[
314 |                 [f"InChIKey_{i}" for i in range(elements.shape[1])]
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\BayesianOptimisation.py:316:41: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
314 |                 [f"InChIKey_{i}" for i in range(elements.shape[1])]
315 |             ]  # check this for generalization
316 |             df_elements.drop_duplicates(inplace=True)
    |                                         ^^^^^^^^^^^^ PD002
317 |         if (
318 |             df_elements.shape[0] > 1000
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\BayesianOptimisation.py:318:36: PLR2004 Magic value used in comparison, consider replacing `1000` with a constant variable
    |
316 |             df_elements.drop_duplicates(inplace=True)
317 |         if (
318 |             df_elements.shape[0] > 1000
    |                                    ^^^^ PLR2004
319 |         ):  # limit the number of elements to evaluate each time
320 |             df_elements = df_elements.sample(1000)
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:321:44: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
319 |         ):  # limit the number of elements to evaluate each time
320 |             df_elements = df_elements.sample(1000)
321 |         df_elements.reset_index(drop=True, inplace=True)
    |                                            ^^^^^^^^^^^^ PD002
322 |         return df_elements
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\BayesianOptimisation.py:324:27: N803 Argument name `X_train` should be lowercase
    |
322 |         return df_elements
323 | 
324 |     def train_model(self, X_train, y_train):
    |                           ^^^^^^^ N803
325 |         """Train the model.
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:340:9: D417 Missing argument descriptions in the docstring for `get_acquisition_values`: `Xrpr`, `best_f`
    |
338 |         fit_gpytorch_mll(mll)
339 | 
340 |     def get_acquisition_values(self, model, best_f, Xrpr):
    |         ^^^^^^^^^^^^^^^^^^^^^^ D417
341 |         """Get the acquisition values.
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:340:53: N803 Argument name `Xrpr` should be lowercase
    |
338 |         fit_gpytorch_mll(mll)
339 | 
340 |     def get_acquisition_values(self, model, best_f, Xrpr):
    |                                                     ^^^^ N803
341 |         """Get the acquisition values.
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:352:9: N806 Variable `X_unsqueezed` in function should be lowercase
    |
351 |         """
352 |         X_unsqueezed = Xrpr.double()
    |         ^^^^^^^^^^^^ N806
353 |         X_unsqueezed = X_unsqueezed.reshape(-1, 1, X_unsqueezed.shape[1])
354 |         # set up acquisition function
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:353:9: N806 Variable `X_unsqueezed` in function should be lowercase
    |
351 |         """
352 |         X_unsqueezed = Xrpr.double()
353 |         X_unsqueezed = X_unsqueezed.reshape(-1, 1, X_unsqueezed.shape[1])
    |         ^^^^^^^^^^^^ N806
354 |         # set up acquisition function
355 |         if self.which_acquisition == "EI":
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:379:23: TRY003 Avoid specifying long messages outside the exception class
    |
377 |           elif self.which_acquisition == "UCB_GNN":
378 |               if self.pred_model is None:
379 |                   raise ValueError(
    |  _______________________^
380 | |                     "pred_model is None, but it's required for UCB_GNN acquisition"
381 | |                 )
    | |_________________^ TRY003
382 |               with torch.no_grad():
383 |                   acquisition_values = self.pred_model(
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:380:21: EM101 Exception must not use a string literal, assign to variable first
    |
378 |             if self.pred_model is None:
379 |                 raise ValueError(
380 |                     "pred_model is None, but it's required for UCB_GNN acquisition"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
381 |                 )
382 |             with torch.no_grad():
    |
    = help: Assign to variable; remove string literal

src\stk_search\Search_algorithm\BayesianOptimisation.py:392:17: PLW0127 Self-assignment of variable `acquisition_values`
    |
390 |         elif self.which_acquisition == "UCB":
391 |             with torch.no_grad():
392 |                 acquisition_values = acquisition_values = (
    |                 ^^^^^^^^^^^^^^^^^^ PLW0127
393 |                     model.posterior(X_unsqueezed).mean.squeeze()
394 |                     + self.model.posterior(X_unsqueezed).variance.squeeze()
    |

src\stk_search\Search_algorithm\BayesianOptimisation.py:392:38: PLW0128 Redeclared variable `acquisition_values` in assignment
    |
390 |         elif self.which_acquisition == "UCB":
391 |             with torch.no_grad():
392 |                 acquisition_values = acquisition_values = (
    |                                      ^^^^^^^^^^^^^^^^^^ PLW0128
393 |                     model.posterior(X_unsqueezed).mean.squeeze()
394 |                     + self.model.posterior(X_unsqueezed).variance.squeeze()
    |

src\stk_search\Search_algorithm\Botorch_kernels.py:1:1: INP001 File `src\stk_search\Search_algorithm\Botorch_kernels.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Search_algorithm\Botorch_kernels.py:1:1: D100 Missing docstring in public module
src\stk_search\Search_algorithm\Botorch_kernels.py:11:5: D205 1 blank line required between summary line and description
   |
 9 |   # We define our custom GP surrogate model using the Tanimoto kernel
10 |   class TanimotoGP(SingleTaskGP):
11 |       """This class is to define the surrogate model using the Tanimoto kernel.
   |  _____^
12 | |     Here the Surrogate model is defined using the Tanimoto kernel and is a subclass of SingleTaskGP.
13 | | 
14 | |     Args:
15 | |     ----
16 | |         train_X (torch.tensor): training input
17 | |         train_Y (torch.tensor): training output
18 | | 
19 | |     """
   | |_______^ D205
20 |   
21 |       def __init__(self, train_X, train_Y):
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\Botorch_kernels.py:11:5: D404 First word of the docstring should not be "This"
   |
 9 |   # We define our custom GP surrogate model using the Tanimoto kernel
10 |   class TanimotoGP(SingleTaskGP):
11 |       """This class is to define the surrogate model using the Tanimoto kernel.
   |  _____^
12 | |     Here the Surrogate model is defined using the Tanimoto kernel and is a subclass of SingleTaskGP.
13 | | 
14 | |     Args:
15 | |     ----
16 | |         train_X (torch.tensor): training input
17 | |         train_Y (torch.tensor): training output
18 | | 
19 | |     """
   | |_______^ D404
20 |   
21 |       def __init__(self, train_X, train_Y):
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:21:9: ANN204 Missing return type annotation for special method `__init__`
   |
19 |     """
20 | 
21 |     def __init__(self, train_X, train_Y):
   |         ^^^^^^^^ ANN204
22 |         super().__init__(train_X, train_Y)
23 |         self.mean_module = ConstantMean()
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\Botorch_kernels.py:21:9: D107 Missing docstring in `__init__`
   |
19 |     """
20 | 
21 |     def __init__(self, train_X, train_Y):
   |         ^^^^^^^^ D107
22 |         super().__init__(train_X, train_Y)
23 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:21:24: N803 Argument name `train_X` should be lowercase
   |
19 |     """
20 | 
21 |     def __init__(self, train_X, train_Y):
   |                        ^^^^^^^ N803
22 |         super().__init__(train_X, train_Y)
23 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:21:33: N803 Argument name `train_Y` should be lowercase
   |
19 |     """
20 | 
21 |     def __init__(self, train_X, train_Y):
   |                                 ^^^^^^^ N803
22 |         super().__init__(train_X, train_Y)
23 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:27:9: D102 Missing docstring in public method
   |
25 |         self.to(train_X)
26 | 
27 |     def forward(self, x):
   |         ^^^^^^^ D102
28 |         mean_x = self.mean_module(x)
29 |         covar_x = self.covar_module(x)
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:34:5: D205 1 blank line required between summary line and description
   |
33 |   class MaternKernel(SingleTaskGP):
34 |       """This class is to define the surrogate model using the Matern kernel.
   |  _____^
35 | |     Here the Surrogate model is defined using the Matern kernel from GPYtorch and is a subclass of SingleTaskGP.
36 | | 
37 | |     Args:
38 | |     ----
39 | |         train_X (torch.tensor): training input
40 | |         train_Y (torch.tensor): training output
41 | | 
42 | |     """
   | |_______^ D205
43 |   
44 |       def __init__(self, train_X, train_Y):
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\Botorch_kernels.py:34:5: D404 First word of the docstring should not be "This"
   |
33 |   class MaternKernel(SingleTaskGP):
34 |       """This class is to define the surrogate model using the Matern kernel.
   |  _____^
35 | |     Here the Surrogate model is defined using the Matern kernel from GPYtorch and is a subclass of SingleTaskGP.
36 | | 
37 | |     Args:
38 | |     ----
39 | |         train_X (torch.tensor): training input
40 | |         train_Y (torch.tensor): training output
41 | | 
42 | |     """
   | |_______^ D404
43 |   
44 |       def __init__(self, train_X, train_Y):
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:44:9: ANN204 Missing return type annotation for special method `__init__`
   |
42 |     """
43 | 
44 |     def __init__(self, train_X, train_Y):
   |         ^^^^^^^^ ANN204
45 |         super().__init__(train_X, train_Y)
46 |         self.mean_module = ConstantMean()
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\Botorch_kernels.py:44:9: D107 Missing docstring in `__init__`
   |
42 |     """
43 | 
44 |     def __init__(self, train_X, train_Y):
   |         ^^^^^^^^ D107
45 |         super().__init__(train_X, train_Y)
46 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:44:24: N803 Argument name `train_X` should be lowercase
   |
42 |     """
43 | 
44 |     def __init__(self, train_X, train_Y):
   |                        ^^^^^^^ N803
45 |         super().__init__(train_X, train_Y)
46 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:44:33: N803 Argument name `train_Y` should be lowercase
   |
42 |     """
43 | 
44 |     def __init__(self, train_X, train_Y):
   |                                 ^^^^^^^ N803
45 |         super().__init__(train_X, train_Y)
46 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:52:9: D102 Missing docstring in public method
   |
50 |         self.to(train_X)
51 | 
52 |     def change_kernel(self, kernel):
   |         ^^^^^^^^^^^^^ D102
53 |         self.covar_module = ScaleKernel(base_kernel=kernel)
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:55:9: D102 Missing docstring in public method
   |
53 |         self.covar_module = ScaleKernel(base_kernel=kernel)
54 | 
55 |     def forward(self, x):
   |         ^^^^^^^ D102
56 |         mean_x = self.mean_module(x)
57 |         covar_x = self.covar_module(x)
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:62:5: D404 First word of the docstring should not be "This"
   |
61 |   class RBFKernel(SingleTaskGP):
62 |       """This class is to define the surrogate model using the RBF kernel.
   |  _____^
63 | |     
64 | |     Here the Surrogate model is defined using the RBF kernel from GPYtorch and is a subclass of SingleTaskGP.
65 | | 
66 | |     Args:
67 | |     ----
68 | |         train_X (torch.tensor): training input
69 | |         train_Y (torch.tensor): training output
70 | | 
71 | |     """
   | |_______^ D404
72 |   
73 |       def __init__(self, train_X, train_Y):
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:63:1: W293 Blank line contains whitespace
   |
61 | class RBFKernel(SingleTaskGP):
62 |     """This class is to define the surrogate model using the RBF kernel.
63 |     
   | ^^^^ W293
64 |     Here the Surrogate model is defined using the RBF kernel from GPYtorch and is a subclass of SingleTaskGP.
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Botorch_kernels.py:73:9: ANN204 Missing return type annotation for special method `__init__`
   |
71 |     """
72 | 
73 |     def __init__(self, train_X, train_Y):
   |         ^^^^^^^^ ANN204
74 |         super().__init__(train_X, train_Y)
75 |         self.mean_module = ConstantMean()
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\Botorch_kernels.py:73:9: D107 Missing docstring in `__init__`
   |
71 |     """
72 | 
73 |     def __init__(self, train_X, train_Y):
   |         ^^^^^^^^ D107
74 |         super().__init__(train_X, train_Y)
75 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:73:24: N803 Argument name `train_X` should be lowercase
   |
71 |     """
72 | 
73 |     def __init__(self, train_X, train_Y):
   |                        ^^^^^^^ N803
74 |         super().__init__(train_X, train_Y)
75 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:73:33: N803 Argument name `train_Y` should be lowercase
   |
71 |     """
72 | 
73 |     def __init__(self, train_X, train_Y):
   |                                 ^^^^^^^ N803
74 |         super().__init__(train_X, train_Y)
75 |         self.mean_module = ConstantMean()
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:81:9: D102 Missing docstring in public method
   |
79 |         self.to(train_X)
80 | 
81 |     def change_kernel(self, kernel):
   |         ^^^^^^^^^^^^^ D102
82 |         self.covar_module = ScaleKernel(base_kernel=kernel)
   |

src\stk_search\Search_algorithm\Botorch_kernels.py:84:9: D102 Missing docstring in public method
   |
82 |         self.covar_module = ScaleKernel(base_kernel=kernel)
83 | 
84 |     def forward(self, x):
   |         ^^^^^^^ D102
85 |         mean_x = self.mean_module(x)
86 |         covar_x = self.covar_module(x)
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:1:1: INP001 File `src\stk_search\Search_algorithm\Ea_surrogate.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Search_algorithm\Ea_surrogate.py:1:1: D100 Missing docstring in public module
src\stk_search\Search_algorithm\Ea_surrogate.py:12:7: N801 Class name `Ea_surrogate` should use CapWords convention
   |
12 | class Ea_surrogate(evolution_algorithm):
   |       ^^^^^^^^^^^^ N801
13 |     """Class to run the surrogate EA algorithm
14 |     Compared to the EA, here we need a surrogate model and a molecule representation to run the search
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:13:5: D205 1 blank line required between summary line and description
   |
12 |   class Ea_surrogate(evolution_algorithm):
13 |       """Class to run the surrogate EA algorithm
   |  _____^
14 | |     Compared to the EA, here we need a surrogate model and a molecule representation to run the search
15 | |     the surrogate model applied on the molecule representation is used to select a new molecule to evaluate. 
16 | |     
17 | |     the generation of offspring is the same as in the EA
18 | |     
19 | |     Args:
20 | |     ----
21 | |     
22 | |     """
   | |_______^ D205
23 |   
24 |       def __init__(self):
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\Ea_surrogate.py:15:109: W291 Trailing whitespace
   |
13 |     """Class to run the surrogate EA algorithm
14 |     Compared to the EA, here we need a surrogate model and a molecule representation to run the search
15 |     the surrogate model applied on the molecule representation is used to select a new molecule to evaluate. 
   |                                                                                                             ^ W291
16 |     
17 |     the generation of offspring is the same as in the EA
   |
   = help: Remove trailing whitespace

src\stk_search\Search_algorithm\Ea_surrogate.py:16:1: W293 Blank line contains whitespace
   |
14 |     Compared to the EA, here we need a surrogate model and a molecule representation to run the search
15 |     the surrogate model applied on the molecule representation is used to select a new molecule to evaluate. 
16 |     
   | ^^^^ W293
17 |     the generation of offspring is the same as in the EA
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Ea_surrogate.py:18:1: W293 Blank line contains whitespace
   |
17 |     the generation of offspring is the same as in the EA
18 |     
   | ^^^^ W293
19 |     Args:
20 |     ----
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Ea_surrogate.py:19:5: D414 Section has no content ("Args")
   |
17 |     the generation of offspring is the same as in the EA
18 |     
19 |     Args:
   |     ^^^^ D414
20 |     ----
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:21:1: W293 Blank line contains whitespace
   |
19 |     Args:
20 |     ----
21 |     
   | ^^^^ W293
22 |     """
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Ea_surrogate.py:24:9: ANN204 Missing return type annotation for special method `__init__`
   |
22 |     """
23 | 
24 |     def __init__(self):
   |         ^^^^^^^^ ANN204
25 |         self.device = "cuda:0" if torch.cuda.is_available() else "cpu"
26 |         self.model = None
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\Ea_surrogate.py:24:9: D107 Missing docstring in `__init__`
   |
22 |     """
23 | 
24 |     def __init__(self):
   |         ^^^^^^^^ D107
25 |         self.device = "cuda:0" if torch.cuda.is_available() else "cpu"
26 |         self.model = None
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:37:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
35 |         self.budget = None
36 | 
37 |     def suggest_element(
   |         ^^^^^^^^^^^^^^^ PLR0913
38 |         self,
39 |         search_space_df,
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:37:9: D102 Missing docstring in public method
   |
35 |         self.budget = None
36 | 
37 |     def suggest_element(
   |         ^^^^^^^^^^^^^^^ D102
38 |         self,
39 |         search_space_df,
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:41:9: ARG002 Unused method argument: `ids_acquired`
   |
39 |         search_space_df,
40 |         fitness_acquired,
41 |         ids_acquired,
   |         ^^^^^^^^^^^^ ARG002
42 |         SP: SearchSpace,
43 |         benchmark=True,
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:42:9: N803 Argument name `SP` should be lowercase
   |
40 |         fitness_acquired,
41 |         ids_acquired,
42 |         SP: SearchSpace,
   |         ^^^^^^^^^^^^^^^ N803
43 |         benchmark=True,
44 |         df_total: pd.DataFrame = None,
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:43:9: FBT002 Boolean default positional argument in function definition
   |
41 |         ids_acquired,
42 |         SP: SearchSpace,
43 |         benchmark=True,
   |         ^^^^^^^^^ FBT002
44 |         df_total: pd.DataFrame = None,
45 |     ):
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:54:9: N806 Variable `X_unsqueezed` in function should be lowercase
   |
52 |         )
53 |         # get the best using the surrogate model
54 |         X_unsqueezed = self.Representation.generate_repr(df_elements)
   |         ^^^^^^^^^^^^ N806
55 |         if self.verbose:
56 |             print("X_unsqueezed shape is ", X_unsqueezed.shape)
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:56:13: T201 `print` found
   |
54 |         X_unsqueezed = self.Representation.generate_repr(df_elements)
55 |         if self.verbose:
56 |             print("X_unsqueezed shape is ", X_unsqueezed.shape)
   |             ^^^^^ T201
57 |         # get model prediction
58 |         # make sure that the model and the data have the same dtype
   |
   = help: Remove `print`

src\stk_search\Search_algorithm\Ea_surrogate.py:59:9: N806 Variable `X_unsqueezed` in function should be lowercase
   |
57 |         # get model prediction
58 |         # make sure that the model and the data have the same dtype
59 |         X_unsqueezed = X_unsqueezed.to(self.device)
   |         ^^^^^^^^^^^^ N806
60 |         model_dtype = next(self.pred_model.parameters()).dtype
61 |         if X_unsqueezed.dtype != model_dtype:
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:62:13: N806 Variable `X_unsqueezed` in function should be lowercase
   |
60 |         model_dtype = next(self.pred_model.parameters()).dtype
61 |         if X_unsqueezed.dtype != model_dtype:
62 |             X_unsqueezed = X_unsqueezed.type(model_dtype)
   |             ^^^^^^^^^^^^ N806
63 |         acquisition_values = (
64 |             self.pred_model(X_unsqueezed).squeeze().cpu().detach().numpy()
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:69:13: T201 `print` found
   |
67 |         ids_sorted_by_aquisition = (-acquisition_values).argsort()
68 |         if self.verbose:
69 |             print(
   |             ^^^^^ T201
70 |                 "max acquisition value is ",
71 |                 acquisition_values[ids_sorted_by_aquisition[0]],
   |
   = help: Remove `print`

src\stk_search\Search_algorithm\Ea_surrogate.py:74:13: ANN202 Missing return type annotation for private function `add_element`
   |
72 |             )
73 | 
74 |         def add_element(df, element):
   |             ^^^^^^^^^^^ ANN202
75 |             if ~(df == element).all(1).any():
76 |                 df.loc[len(df)] = element
   |
   = help: Add return type annotation: `bool`

src\stk_search\Search_algorithm\Ea_surrogate.py:80:9: T201 `print` found
   |
78 |             return False
79 | 
80 |         print("new_element_df shape is ", df_elements.shape)
   |         ^^^^^ T201
81 |         for elem_id in ids_sorted_by_aquisition:
82 |             element = df_elements.values[elem_id.item()]
   |
   = help: Remove `print`

src\stk_search\Search_algorithm\Ea_surrogate.py:82:23: PD011 Use `.to_numpy()` instead of `.values`
   |
80 |         print("new_element_df shape is ", df_elements.shape)
81 |         for elem_id in ids_sorted_by_aquisition:
82 |             element = df_elements.values[elem_id.item()]
   |                       ^^^^^^^^^^^^^^^^^^ PD011
83 |             if add_element(df_search, element):
84 |                 print(elem_id.item())
   |

src\stk_search\Search_algorithm\Ea_surrogate.py:84:17: T201 `print` found
   |
82 |             element = df_elements.values[elem_id.item()]
83 |             if add_element(df_search, element):
84 |                 print(elem_id.item())
   |                 ^^^^^ T201
85 |                 break
86 |                 # index = id.item()
   |
   = help: Remove `print`

src\stk_search\Search_algorithm\Ea_surrogate.py:86:17: ERA001 Found commented-out code
   |
84 |                 print(elem_id.item())
85 |                 break
86 |                 # index = id.item()
   |                 ^^^^^^^^^^^^^^^^^^^ ERA001
87 |                 # return df_search_space_frag
88 |         return len(df_search) - 1, df_search
   |
   = help: Remove commented-out code

src\stk_search\Search_algorithm\Ea_surrogate.py:87:17: ERA001 Found commented-out code
   |
85 |                 break
86 |                 # index = id.item()
87 |                 # return df_search_space_frag
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
88 |         return len(df_search) - 1, df_search
   |
   = help: Remove commented-out code

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:1:1: INP001 File `src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:1:1: D100 Missing docstring in public module
src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:31:7: D101 Missing docstring in public class
   |
31 | class MultifidelityBayesianOptimisation(Search_Algorithm):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
32 |     def __init__(
33 |         self,
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:32:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
31 | class MultifidelityBayesianOptimisation(Search_Algorithm):
32 |     def __init__(
   |         ^^^^^^^^ PLR0913
33 |         self,
34 |         verbose=False,
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:32:9: ANN204 Missing return type annotation for special method `__init__`
   |
31 | class MultifidelityBayesianOptimisation(Search_Algorithm):
32 |     def __init__(
   |         ^^^^^^^^ ANN204
33 |         self,
34 |         verbose=False,
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:32:9: D417 Missing argument descriptions in the docstring for `__init__`: `budget`, `fidelity_col`
   |
31 | class MultifidelityBayesianOptimisation(Search_Algorithm):
32 |     def __init__(
   |         ^^^^^^^^ D417
33 |         self,
34 |         verbose=False,
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:34:9: FBT002 Boolean default positional argument in function definition
   |
32 |     def __init__(
33 |         self,
34 |         verbose=False,
   |         ^^^^^^^ FBT002
35 |         which_acquisition="KG",
36 |         kernel=SingleTaskMultiFidelityGP,
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:40:9: N803 Argument name `Representation` should be lowercase
   |
38 |         model=None,
39 |         lim_counter=2,
40 |         Representation=None,
   |         ^^^^^^^^^^^^^^ N803
41 |         fidelity_col=72,
42 |         budget=None
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:61:9: ERA001 Found commented-out code
   |
59 |         self.verbose = verbose
60 |         self.which_acquisition=which_acquisition
61 |         #self.normalise_input = normalise_input
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
62 |         self.kernel = kernel
63 |         self.device = "cuda:0" if torch.cuda.is_available() else "cpu"
   |
   = help: Remove commented-out code

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:74:9: D102 Missing docstring in public method
   |
72 |         self.budget = budget
73 | 
74 |     def initial_suggestion(
   |         ^^^^^^^^^^^^^^^^^^ D102
75 |         self,
76 |         SP: SearchSpace = [],
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:76:9: N803 Argument name `SP` should be lowercase
   |
74 |     def initial_suggestion(
75 |         self,
76 |         SP: SearchSpace = [],
   |         ^^^^^^^^^^^^^^^ N803
77 |         num_elem_initialisation: int = 10,
78 |         benchmark=False,
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:76:27: B006 Do not use mutable data structures for argument defaults
   |
74 |     def initial_suggestion(
75 |         self,
76 |         SP: SearchSpace = [],
   |                           ^^ B006
77 |         num_elem_initialisation: int = 10,
78 |         benchmark=False,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:78:9: FBT002 Boolean default positional argument in function definition
   |
76 |         SP: SearchSpace = [],
77 |         num_elem_initialisation: int = 10,
78 |         benchmark=False,
   |         ^^^^^^^^^ FBT002
79 |         df_total: pd.DataFrame = None,
80 |     ):
   |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:126:9: D102 Missing docstring in public method
    |
124 |         return searched_space_df.index.tolist(), searched_space_df
125 | 
126 |     def update_representation(self, Representation):
    |         ^^^^^^^^^^^^^^^^^^^^^ D102
127 |         self.Representation = Representation
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:126:37: N803 Argument name `Representation` should be lowercase
    |
124 |         return searched_space_df.index.tolist(), searched_space_df
125 | 
126 |     def update_representation(self, Representation):
    |                                     ^^^^^^^^^^^^^^ N803
127 |         self.Representation = Representation
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:129:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
127 |         self.Representation = Representation
128 | 
129 |     def suggest_element(
    |         ^^^^^^^^^^^^^^^ PLR0913
130 |         self,
131 |         search_space_df,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:129:9: D417 Missing argument descriptions in the docstring for `suggest_element`: `SP`, `benchmark`, `df_total`, `fitness_acquired`, `ids_acquired`
    |
127 |         self.Representation = Representation
128 | 
129 |     def suggest_element(
    |         ^^^^^^^^^^^^^^^ D417
130 |         self,
131 |         search_space_df,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:134:9: N803 Argument name `SP` should be lowercase
    |
132 |         fitness_acquired,
133 |         ids_acquired,
134 |         SP: SearchSpace,
    |         ^^^^^^^^^^^^^^^ N803
135 |         benchmark=True,
136 |         df_total: pd.DataFrame = None,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:135:9: FBT002 Boolean default positional argument in function definition
    |
133 |         ids_acquired,
134 |         SP: SearchSpace,
135 |         benchmark=True,
    |         ^^^^^^^^^ FBT002
136 |         df_total: pd.DataFrame = None,
137 |     ):
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:155:9: A001 Variable `repr` is shadowing a Python builtin
    |
153 |         df_search = search_space_df.copy()
154 |         fitness_acquired = np.array(fitness_acquired)
155 |         repr = df_search.loc[ids_acquired, :]
    |         ^^^^ A001
156 | 
157 |         X_rpr = self.generate_rep_with_fidelity(repr)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:157:9: N806 Variable `X_rpr` in function should be lowercase
    |
155 |         repr = df_search.loc[ids_acquired, :]
156 | 
157 |         X_rpr = self.generate_rep_with_fidelity(repr)
    |         ^^^^^ N806
158 |         y_explored_BO_norm = torch.tensor(
159 |             fitness_acquired, dtype=torch.float64
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:158:9: N806 Variable `y_explored_BO_norm` in function should be lowercase
    |
157 |         X_rpr = self.generate_rep_with_fidelity(repr)
158 |         y_explored_BO_norm = torch.tensor(
    |         ^^^^^^^^^^^^^^^^^^ N806
159 |             fitness_acquired, dtype=torch.float64
160 |         )
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:161:9: N806 Variable `y_explored_BO_norm` in function should be lowercase
    |
159 |             fitness_acquired, dtype=torch.float64
160 |         )
161 |         y_explored_BO_norm = (
    |         ^^^^^^^^^^^^^^^^^^ N806
162 |             y_explored_BO_norm - y_explored_BO_norm.mean(axis=0)
163 |         ) / (y_explored_BO_norm.std(axis=0))
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:164:9: N806 Variable `y_explored_BO_norm` in function should be lowercase
    |
162 |             y_explored_BO_norm - y_explored_BO_norm.mean(axis=0)
163 |         ) / (y_explored_BO_norm.std(axis=0))
164 |         y_explored_BO_norm = y_explored_BO_norm.reshape(-1, 1)
    |         ^^^^^^^^^^^^^^^^^^ N806
165 | 
166 |         # train model
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:181:44: PD011 Use `.to_numpy()` instead of `.values`
    |
180 |         for element_id in ids_sorted_by_aquisition:
181 |             if self.add_element(df_search, df_elements.values[element_id.item()]):
    |                                            ^^^^^^^^^^^^^^^^^^ PD011
182 |                 break
183 |         return len(df_search) - 1, df_search
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:187:9: D102 Missing docstring in public method
    |
185 |     # Add the new element to the search space. It checks if the element is already in the
186 |     # df which is usually the df_search (i.e. those elts formally evaulated by the OF).
187 |     def add_element(self, df, element):
    |         ^^^^^^^^^^^ D102
188 |         if ~(df == element).all(1).any():
189 |             if self.budget is not None:
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:195:9: D102 Missing docstring in public method
    |
193 |         return False
194 | 
195 |     def normalise_input(self, X_rpr):
    |         ^^^^^^^^^^^^^^^ D102
196 |         X_rpr = X_rpr.double()
197 |         # min max scaling the input
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:195:31: N803 Argument name `X_rpr` should be lowercase
    |
193 |         return False
194 | 
195 |     def normalise_input(self, X_rpr):
    |                               ^^^^^ N803
196 |         X_rpr = X_rpr.double()
197 |         # min max scaling the input
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:196:9: N806 Variable `X_rpr` in function should be lowercase
    |
195 |     def normalise_input(self, X_rpr):
196 |         X_rpr = X_rpr.double()
    |         ^^^^^ N806
197 |         # min max scaling the input
198 |         X_rpr = (X_rpr - X_rpr.min(dim=0)[0]) / (X_rpr.max(dim=0)[0] - X_rpr.min(dim=0)[0])
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:198:9: N806 Variable `X_rpr` in function should be lowercase
    |
196 |         X_rpr = X_rpr.double()
197 |         # min max scaling the input
198 |         X_rpr = (X_rpr - X_rpr.min(dim=0)[0]) / (X_rpr.max(dim=0)[0] - X_rpr.min(dim=0)[0])
    |         ^^^^^ N806
199 |         return torch.tensor(pd.DataFrame(X_rpr).fillna(0.5).to_numpy())
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:202:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
201 | # This should be edited since how we evaluate the generated elements needs to change. -EJ
202 |     def optimise_acquisition_function(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
203 |         self,
204 |         best_f,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:202:9: D417 Missing argument descriptions in the docstring for `optimise_acquisition_function`: `SP`, `benchmark`, `df_search`, `df_total`, `fitness_acquired`
    |
201 | # This should be edited since how we evaluate the generated elements needs to change. -EJ
202 |     def optimise_acquisition_function(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
203 |         self,
204 |         best_f,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:207:9: N803 Argument name `SP` should be lowercase
    |
205 |         fitness_acquired,
206 |         df_search,
207 |         SP,
    |         ^^ N803
208 |         benchmark=False,
209 |         df_total=None,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:208:9: FBT002 Boolean default positional argument in function definition
    |
206 |         df_search,
207 |         SP,
208 |         benchmark=False,
    |         ^^^^^^^^^ FBT002
209 |         df_total=None,
210 |     ):
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:232:9: N806 Variable `Xrpr` in function should be lowercase
    |
230 |         )
231 | 
232 |         Xrpr = self.generate_rep_with_fidelity(df_elements)
    |         ^^^^ N806
233 | 
234 |         acquisition_values = self.get_acquisition_values(
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:241:13: T201 `print` found
    |
240 |         if "dataset_local" in self.Representation.__dict__:
241 |             print(
    |             ^^^^^ T201
242 |                 "size of representation dataset ",
243 |                 len(self.Representation.dataset_local),
    |
    = help: Remove `print`

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:257:13: N806 Variable `Xrpr` in function should be lowercase
    |
255 |             )
256 | 
257 |             Xrpr = self.generate_rep_with_fidelity(df_elements)
    |             ^^^^ N806
258 | 
259 |             acquisition_values = self.get_acquisition_values(
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:265:17: T201 `print` found
    |
263 |             )
264 |             if "dataset_local" in self.Representation.__dict__:
265 |                 print("size of representation dataset ", len(self.Representation.dataset_local))
    |                 ^^^^^ T201
266 |             # select element to acquire with maximal aquisition value, which is not in the acquired set already
267 |             ids_sorted_by_aquisition = acquisition_values.argsort(descending=True)
    |
    = help: Remove `print`

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:275:18: ERA001 Found commented-out code
    |
273 |                 max_acquisition_value = max_acquisition_value_current
274 |                 #print(
275 |                  #   f"counter is {max_counter}, max_acquisition_value is {max_acquisition_value}"
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
276 |                 #)
277 |                 counter = 0
    |
    = help: Remove commented-out code

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:276:17: ERA001 Found commented-out code
    |
274 |                 #print(
275 |                  #   f"counter is {max_counter}, max_acquisition_value is {max_acquisition_value}"
276 |                 #)
    |                 ^^ ERA001
277 |                 counter = 0
278 |             if max_counter > max_optimisation_iteration:
    |
    = help: Remove commented-out code

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:284:9: C901 `generate_element_to_evaluate` is too complex (12 > 10)
    |
282 | # Similar to the BO case, except when the elements are generated at the end we add the fidelity
283 | # data as well -EJ
284 |     def generate_element_to_evaluate(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
285 |         self,
286 |         fitness_acquired,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:288:9: N803 Argument name `SP` should be lowercase
    |
286 |         fitness_acquired,
287 |         df_search,
288 |         SP: SearchSpace,
    |         ^^^^^^^^^^^^^^^ N803
289 |         benchmark=False,
290 |         df_total=None,
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:289:9: FBT002 Boolean default positional argument in function definition
    |
287 |         df_search,
288 |         SP: SearchSpace,
289 |         benchmark=False,
    |         ^^^^^^^^^ FBT002
290 |         df_total=None,
291 |     ):
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:302:51: W291 Trailing whitespace
    |
300 |             df_total (pd.DataFrame): dataframe of the total dataset
301 |             Returns:
302 |                 pd.DataFrame: elements to evaluate 
    |                                                   ^ W291
303 | 
304 |         """
    |
    = help: Remove trailing whitespace

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:305:13: ANN202 Missing return type annotation for private function `mutate_element`
    |
304 |         """
305 |         def mutate_element(element):
    |             ^^^^^^^^^^^^^^ ANN202
306 |             elements_val = []
307 |             for i in range(element.shape[0]):
    |
    = help: Add return type annotation

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:314:13: ANN202 Missing return type annotation for private function `cross_element`
    |
312 |             return elements_val
313 | 
314 |         def cross_element(element1, element2):
    |             ^^^^^^^^^^^^^ ANN202
315 |             elements_val = []
316 |             for i in range(element.shape[0]):
    |
    = help: Add return type annotation

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:324:24: PD011 Use `.to_numpy()` instead of `.values`
    |
322 |         # select the 3 best one and add two random element from the search space
323 |         best_element_arg = fitness_acquired.argsort()[-3:][::-1]
324 |         list_parents = df_search.loc[best_element_arg, :].values
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
325 |         list_parents = np.append(
326 |             list_parents, df_search.sample(2).values, axis=0
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:360:49: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
358 |                 how="left",
359 |             )
360 |             df_elements.dropna(subset="target", inplace=True)
    |                                                 ^^^^^^^^^^^^ PD002
361 |             columns = [f"InChIKey_{i}" for i in range(elements.shape[1])]
362 |             columns.append("fidelity")
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:366:41: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
364 |                 columns
365 |             ]  # check this for generalization
366 |             df_elements.drop_duplicates(inplace=True)
    |                                         ^^^^^^^^^^^^ PD002
367 |         if (
368 |             df_elements.shape[0] > 10
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:368:36: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
366 |             df_elements.drop_duplicates(inplace=True)
367 |         if (
368 |             df_elements.shape[0] > 10
    |                                    ^^ PLR2004
369 |         ):  # limit the number of elements to evaluate each time
370 |             df_elements = df_elements.sample(10)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:371:44: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
369 |         ):  # limit the number of elements to evaluate each time
370 |             df_elements = df_elements.sample(10)
371 |         df_elements.reset_index(drop=True, inplace=True)
    |                                            ^^^^^^^^^^^^ PD002
372 |         return df_elements
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:375:27: N803 Argument name `X_train` should be lowercase
    |
374 | # Hardcoded values for the columns at the moment for the data-fidelities - EJ
375 |     def train_model(self, X_train, y_train):
    |                           ^^^^^^^ N803
376 |         """Train the model.
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:392:9: D417 Missing argument descriptions in the docstring for `get_acquisition_values`: `Xrpr`, `best_f`
    |
390 |         fit_gpytorch_mll(mll)
391 | 
392 |     def get_acquisition_values(self, model, best_f, Xrpr):
    |         ^^^^^^^^^^^^^^^^^^^^^^ D417
393 |         """Get the acquisition values.
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:392:53: N803 Argument name `Xrpr` should be lowercase
    |
390 |         fit_gpytorch_mll(mll)
391 | 
392 |     def get_acquisition_values(self, model, best_f, Xrpr):
    |                                                     ^^^^ N803
393 |         """Get the acquisition values.
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:404:9: N806 Variable `X_unsqueezed` in function should be lowercase
    |
403 |         """
404 |         X_unsqueezed = Xrpr.double()
    |         ^^^^^^^^^^^^ N806
405 |         X_unsqueezed = X_unsqueezed.reshape(-1, 1, X_unsqueezed.shape[1])
406 |         # set up acquisition function
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:405:9: N806 Variable `X_unsqueezed` in function should be lowercase
    |
403 |         """
404 |         X_unsqueezed = Xrpr.double()
405 |         X_unsqueezed = X_unsqueezed.reshape(-1, 1, X_unsqueezed.shape[1])
    |         ^^^^^^^^^^^^ N806
406 |         # set up acquisition function
407 |         if self.which_acquisition == "KG":
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:457:9: N802 Function name `TVR` should be lowercase
    |
455 |         return acquisition_values
456 | 
457 |     def TVR(self, model, Xrpr, best_f):
    |         ^^^ N802
458 |         Xrpr_hf = Xrpr[np.where(Xrpr[:,-1]==1)]
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:457:9: D102 Missing docstring in public method
    |
455 |         return acquisition_values
456 | 
457 |     def TVR(self, model, Xrpr, best_f):
    |         ^^^ D102
458 |         Xrpr_hf = Xrpr[np.where(Xrpr[:,-1]==1)]
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:457:26: N803 Argument name `Xrpr` should be lowercase
    |
455 |         return acquisition_values
456 | 
457 |     def TVR(self, model, Xrpr, best_f):
    |                          ^^^^ N803
458 |         Xrpr_hf = Xrpr[np.where(Xrpr[:,-1]==1)]
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:458:9: N806 Variable `Xrpr_hf` in function should be lowercase
    |
457 |     def TVR(self, model, Xrpr, best_f):
458 |         Xrpr_hf = Xrpr[np.where(Xrpr[:,-1]==1)]
    |         ^^^^^^^ N806
459 | 
460 |         acquisition = ExpectedImprovement( model=model, best_f= best_f)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:477:9: N802 Function name `MES` should be lowercase
    |
475 |         return hf_max_cov ** 2 / (p_var.reshape(-1) * hf_max_var * cost)
476 | 
477 |     def MES(self, model, Xrpr, X_unsqueezed):
    |         ^^^ N802
478 |         fidelities = np.unique(Xrpr[:, -1])
479 |         bounds = torch.tensor([[0.0] * (Xrpr.shape[1]-1), [1.0] * (Xrpr.shape[1]-1)], dtype=torch.float64)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:477:9: D102 Missing docstring in public method
    |
475 |         return hf_max_cov ** 2 / (p_var.reshape(-1) * hf_max_var * cost)
476 | 
477 |     def MES(self, model, Xrpr, X_unsqueezed):
    |         ^^^ D102
478 |         fidelities = np.unique(Xrpr[:, -1])
479 |         bounds = torch.tensor([[0.0] * (Xrpr.shape[1]-1), [1.0] * (Xrpr.shape[1]-1)], dtype=torch.float64)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:477:26: N803 Argument name `Xrpr` should be lowercase
    |
475 |         return hf_max_cov ** 2 / (p_var.reshape(-1) * hf_max_var * cost)
476 | 
477 |     def MES(self, model, Xrpr, X_unsqueezed):
    |                          ^^^^ N803
478 |         fidelities = np.unique(Xrpr[:, -1])
479 |         bounds = torch.tensor([[0.0] * (Xrpr.shape[1]-1), [1.0] * (Xrpr.shape[1]-1)], dtype=torch.float64)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:477:32: N803 Argument name `X_unsqueezed` should be lowercase
    |
475 |         return hf_max_cov ** 2 / (p_var.reshape(-1) * hf_max_var * cost)
476 | 
477 |     def MES(self, model, Xrpr, X_unsqueezed):
    |                                ^^^^^^^^^^^^ N803
478 |         fidelities = np.unique(Xrpr[:, -1])
479 |         bounds = torch.tensor([[0.0] * (Xrpr.shape[1]-1), [1.0] * (Xrpr.shape[1]-1)], dtype=torch.float64)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:481:86: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
479 |         bounds = torch.tensor([[0.0] * (Xrpr.shape[1]-1), [1.0] * (Xrpr.shape[1]-1)], dtype=torch.float64)
480 |         candidate_set_no_hf = bounds[0] + np.multiply(bounds[1] - bounds[0], torch.rand(10000,  Xrpr.shape[1] -1))
481 |         candidate_set = torch.tensor(np.concatenate((candidate_set_no_hf, np.array([[random.choice(fidelities) for x in range(10000)]]).T), axis=1))
    |                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ S311
482 |         target_fidelities = {self.fidelity_col:1}
483 |         cost_model = AffineFidelityCostModel(fidelity_weights=target_fidelities, fixed_cost=1.0)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:497:9: D102 Missing docstring in public method
    |
495 |                 ).detach()  # runs out of memory
496 | 
497 |     def generate_rep_with_fidelity(self, df_elements):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
498 |         repr = df_elements.drop(columns = df_elements.columns[-1])
499 |         Xrpr = self.Representation.generate_repr(repr)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:498:9: A001 Variable `repr` is shadowing a Python builtin
    |
497 |     def generate_rep_with_fidelity(self, df_elements):
498 |         repr = df_elements.drop(columns = df_elements.columns[-1])
    |         ^^^^ A001
499 |         Xrpr = self.Representation.generate_repr(repr)
500 |         Xrpr = self.normalise_input(Xrpr)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:499:9: N806 Variable `Xrpr` in function should be lowercase
    |
497 |     def generate_rep_with_fidelity(self, df_elements):
498 |         repr = df_elements.drop(columns = df_elements.columns[-1])
499 |         Xrpr = self.Representation.generate_repr(repr)
    |         ^^^^ N806
500 |         Xrpr = self.normalise_input(Xrpr)
501 |         fid = torch.tensor(df_elements[["fidelity"]].to_numpy(), dtype=torch.float64)
    |

src\stk_search\Search_algorithm\MultifidelityBayesianOptimisation.py:500:9: N806 Variable `Xrpr` in function should be lowercase
    |
498 |         repr = df_elements.drop(columns = df_elements.columns[-1])
499 |         Xrpr = self.Representation.generate_repr(repr)
500 |         Xrpr = self.normalise_input(Xrpr)
    |         ^^^^ N806
501 |         fid = torch.tensor(df_elements[["fidelity"]].to_numpy(), dtype=torch.float64)
502 |         return torch.concat([Xrpr, fid], dim=1)
    |

src\stk_search\Search_algorithm\Search_algorithm.py:1:1: INP001 File `src\stk_search\Search_algorithm\Search_algorithm.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Search_algorithm\Search_algorithm.py:1:1: D100 Missing docstring in public module
src\stk_search\Search_algorithm\Search_algorithm.py:12:7: N801 Class name `Search_Algorithm` should use CapWords convention
   |
12 | class Search_Algorithm:
   |       ^^^^^^^^^^^^^^^^ N801
13 |     """Search algorithm  base class
   |

src\stk_search\Search_algorithm\Search_algorithm.py:13:5: D400 First line should end with a period
   |
12 |   class Search_Algorithm:
13 |       """Search algorithm  base class
   |  _____^
14 | | 
15 | |     Class to define the search algorithm
16 | |     
17 | |     
18 | |     Attributes
19 | |     ----------
20 | |         name (str): name of the search algorithm
21 | |         multiFidelity (bool): if the search is multiFidelity
22 | |         budget (int): budget of the search
23 | |         
24 | |         
25 | |     
26 | |     Functions:
27 | | 
28 | |         suggest_element(search_space_df, fitness_acquired, ids_acquired, bad_ids, SP):
29 | |             Suggest an element to evaluate
30 | |         initial_suggestion(SP, num_elem_initialisation, benchmark, df_total):
31 | |             Initial suggestion of the search space
32 | | 
33 | |             
34 | |     
35 | |     
36 | |     """
   | |_______^ D400
37 |   
38 |       def __init__(self):
   |
   = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:13:5: D415 First line should end with a period, question mark, or exclamation point
   |
12 |   class Search_Algorithm:
13 |       """Search algorithm  base class
   |  _____^
14 | | 
15 | |     Class to define the search algorithm
16 | |     
17 | |     
18 | |     Attributes
19 | |     ----------
20 | |         name (str): name of the search algorithm
21 | |         multiFidelity (bool): if the search is multiFidelity
22 | |         budget (int): budget of the search
23 | |         
24 | |         
25 | |     
26 | |     Functions:
27 | | 
28 | |         suggest_element(search_space_df, fitness_acquired, ids_acquired, bad_ids, SP):
29 | |             Suggest an element to evaluate
30 | |         initial_suggestion(SP, num_elem_initialisation, benchmark, df_total):
31 | |             Initial suggestion of the search space
32 | | 
33 | |             
34 | |     
35 | |     
36 | |     """
   | |_______^ D415
37 |   
38 |       def __init__(self):
   |
   = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:16:1: W293 Blank line contains whitespace
   |
15 |     Class to define the search algorithm
16 |     
   | ^^^^ W293
17 |     
18 |     Attributes
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:17:1: W293 Blank line contains whitespace
   |
15 |     Class to define the search algorithm
16 |     
17 |     
   | ^^^^ W293
18 |     Attributes
19 |     ----------
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:23:1: W293 Blank line contains whitespace
   |
21 |         multiFidelity (bool): if the search is multiFidelity
22 |         budget (int): budget of the search
23 |         
   | ^^^^^^^^ W293
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:24:1: W293 Blank line contains whitespace
   |
22 |         budget (int): budget of the search
23 |         
24 |         
   | ^^^^^^^^ W293
25 |     
26 |     Functions:
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:25:1: W293 Blank line contains whitespace
   |
25 |     
   | ^^^^ W293
26 |     Functions:
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:33:1: W293 Blank line contains whitespace
   |
31 |             Initial suggestion of the search space
32 | 
33 |             
   | ^^^^^^^^^^^^ W293
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:34:1: W293 Blank line contains whitespace
   |
34 |     
   | ^^^^ W293
35 |     
36 |     """
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:35:1: W293 Blank line contains whitespace
   |
35 |     
   | ^^^^ W293
36 |     """
   |
   = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:38:9: ANN204 Missing return type annotation for special method `__init__`
   |
36 |     """
37 | 
38 |     def __init__(self):
   |         ^^^^^^^^ ANN204
39 |         self.name = "default"
40 |         self.multiFidelity = False
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\Search_algorithm.py:38:9: D107 Missing docstring in `__init__`
   |
36 |     """
37 | 
38 |     def __init__(self):
   |         ^^^^^^^^ D107
39 |         self.name = "default"
40 |         self.multiFidelity = False
   |

src\stk_search\Search_algorithm\Search_algorithm.py:45:9: N803 Argument name `SP` should be lowercase
   |
43 |     def suggest_element(
44 |         self,
45 |         SP: SearchSpace,
   |         ^^^^^^^^^^^^^^^ N803
46 |         search_space_df: pd.DataFrame = [],
47 |         fitness_acquired: list = [],
   |

src\stk_search\Search_algorithm\Search_algorithm.py:46:41: B006 Do not use mutable data structures for argument defaults
   |
44 |         self,
45 |         SP: SearchSpace,
46 |         search_space_df: pd.DataFrame = [],
   |                                         ^^ B006
47 |         fitness_acquired: list = [],
48 |         ids_acquired: list = [],
   |
   = help: Replace with `None`; initialize within function

src\stk_search\Search_algorithm\Search_algorithm.py:47:34: B006 Do not use mutable data structures for argument defaults
   |
45 |         SP: SearchSpace,
46 |         search_space_df: pd.DataFrame = [],
47 |         fitness_acquired: list = [],
   |                                  ^^ B006
48 |         ids_acquired: list = [],
49 |         bad_ids: list = [],
   |
   = help: Replace with `None`; initialize within function

src\stk_search\Search_algorithm\Search_algorithm.py:48:30: B006 Do not use mutable data structures for argument defaults
   |
46 |         search_space_df: pd.DataFrame = [],
47 |         fitness_acquired: list = [],
48 |         ids_acquired: list = [],
   |                              ^^ B006
49 |         bad_ids: list = [],
50 |     ) -> float:
   |
   = help: Replace with `None`; initialize within function

src\stk_search\Search_algorithm\Search_algorithm.py:49:25: B006 Do not use mutable data structures for argument defaults
   |
47 |         fitness_acquired: list = [],
48 |         ids_acquired: list = [],
49 |         bad_ids: list = [],
   |                         ^^ B006
50 |     ) -> float:
51 |         """Suggest an element to evaluate
   |
   = help: Replace with `None`; initialize within function

src\stk_search\Search_algorithm\Search_algorithm.py:51:9: D205 1 blank line required between summary line and description
   |
49 |           bad_ids: list = [],
50 |       ) -> float:
51 |           """Suggest an element to evaluate
   |  _________^
52 | |         Args:
53 | |             search_space_df (pd.DataFrame): dataframe containing the searched space
54 | | 
55 | |             fitness_acquired (list): list of the fitness of the elements
56 | |             ids_acquired (list): list of the ids of the elements
57 | |             bad_ids (list): list of the ids of the bad elements
58 | |             SP (Search_Space): search space
59 | | 
60 | |         Returns
61 | |         -------
62 | |             float: id of the element to evaluate
63 | | 
64 | |         """
   | |___________^ D205
65 |   
66 |       def initial_suggestion(
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\Search_algorithm.py:51:9: D400 First line should end with a period
   |
49 |           bad_ids: list = [],
50 |       ) -> float:
51 |           """Suggest an element to evaluate
   |  _________^
52 | |         Args:
53 | |             search_space_df (pd.DataFrame): dataframe containing the searched space
54 | | 
55 | |             fitness_acquired (list): list of the fitness of the elements
56 | |             ids_acquired (list): list of the ids of the elements
57 | |             bad_ids (list): list of the ids of the bad elements
58 | |             SP (Search_Space): search space
59 | | 
60 | |         Returns
61 | |         -------
62 | |             float: id of the element to evaluate
63 | | 
64 | |         """
   | |___________^ D400
65 |   
66 |       def initial_suggestion(
   |
   = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:51:9: D415 First line should end with a period, question mark, or exclamation point
   |
49 |           bad_ids: list = [],
50 |       ) -> float:
51 |           """Suggest an element to evaluate
   |  _________^
52 | |         Args:
53 | |             search_space_df (pd.DataFrame): dataframe containing the searched space
54 | | 
55 | |             fitness_acquired (list): list of the fitness of the elements
56 | |             ids_acquired (list): list of the ids of the elements
57 | |             bad_ids (list): list of the ids of the bad elements
58 | |             SP (Search_Space): search space
59 | | 
60 | |         Returns
61 | |         -------
62 | |             float: id of the element to evaluate
63 | | 
64 | |         """
   | |___________^ D415
65 |   
66 |       def initial_suggestion(
   |
   = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:68:9: N803 Argument name `SP` should be lowercase
   |
66 |     def initial_suggestion(
67 |         self,
68 |         SP: SearchSpace = [],
   |         ^^^^^^^^^^^^^^^ N803
69 |         num_elem_initialisation: int = 10,
70 |         benchmark=False,
   |

src\stk_search\Search_algorithm\Search_algorithm.py:68:27: B006 Do not use mutable data structures for argument defaults
   |
66 |     def initial_suggestion(
67 |         self,
68 |         SP: SearchSpace = [],
   |                           ^^ B006
69 |         num_elem_initialisation: int = 10,
70 |         benchmark=False,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\Search_algorithm\Search_algorithm.py:70:9: FBT002 Boolean default positional argument in function definition
   |
68 |         SP: SearchSpace = [],
69 |         num_elem_initialisation: int = 10,
70 |         benchmark=False,
   |         ^^^^^^^^^ FBT002
71 |         df_total: pd.DataFrame = None,
72 |     ):
   |

src\stk_search\Search_algorithm\Search_algorithm.py:73:9: D205 1 blank line required between summary line and description
   |
71 |           df_total: pd.DataFrame = None,
72 |       ):
73 |           """Initial suggestion of the search space
   |  _________^
74 | |         Args:
75 | |             SP (Search_Space): search space
76 | |             num_elem_initialisation (int): number of element to initialise
77 | |             benchmark (bool): if the search is a benchmark
78 | |             df_total (pd.DataFrame): dataframe containing the results
79 | |         Returns:
80 | |             list: list of index of the elements
81 | |         pd.DataFrame: dataframe containing the elements
82 | |         """
   | |___________^ D205
83 |           if benchmark:
84 |               searched_space_df = SP.check_df_for_element_from_sp(
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\Search_algorithm.py:73:9: D400 First line should end with a period
   |
71 |           df_total: pd.DataFrame = None,
72 |       ):
73 |           """Initial suggestion of the search space
   |  _________^
74 | |         Args:
75 | |             SP (Search_Space): search space
76 | |             num_elem_initialisation (int): number of element to initialise
77 | |             benchmark (bool): if the search is a benchmark
78 | |             df_total (pd.DataFrame): dataframe containing the results
79 | |         Returns:
80 | |             list: list of index of the elements
81 | |         pd.DataFrame: dataframe containing the elements
82 | |         """
   | |___________^ D400
83 |           if benchmark:
84 |               searched_space_df = SP.check_df_for_element_from_sp(
   |
   = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:73:9: D401 First line of docstring should be in imperative mood: "Initial suggestion of the search space"
   |
71 |           df_total: pd.DataFrame = None,
72 |       ):
73 |           """Initial suggestion of the search space
   |  _________^
74 | |         Args:
75 | |             SP (Search_Space): search space
76 | |             num_elem_initialisation (int): number of element to initialise
77 | |             benchmark (bool): if the search is a benchmark
78 | |             df_total (pd.DataFrame): dataframe containing the results
79 | |         Returns:
80 | |             list: list of index of the elements
81 | |         pd.DataFrame: dataframe containing the elements
82 | |         """
   | |___________^ D401
83 |           if benchmark:
84 |               searched_space_df = SP.check_df_for_element_from_sp(
   |

src\stk_search\Search_algorithm\Search_algorithm.py:73:9: D415 First line should end with a period, question mark, or exclamation point
   |
71 |           df_total: pd.DataFrame = None,
72 |       ):
73 |           """Initial suggestion of the search space
   |  _________^
74 | |         Args:
75 | |             SP (Search_Space): search space
76 | |             num_elem_initialisation (int): number of element to initialise
77 | |             benchmark (bool): if the search is a benchmark
78 | |             df_total (pd.DataFrame): dataframe containing the results
79 | |         Returns:
80 | |             list: list of index of the elements
81 | |         pd.DataFrame: dataframe containing the elements
82 | |         """
   | |___________^ D415
83 |           if benchmark:
84 |               searched_space_df = SP.check_df_for_element_from_sp(
   |
   = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:117:7: N801 Class name `random_search` should use CapWords convention
    |
117 | class random_search(Search_Algorithm):
    |       ^^^^^^^^^^^^^ N801
118 |     """Random search algorithm
    |

src\stk_search\Search_algorithm\Search_algorithm.py:118:5: D400 First line should end with a period
    |
117 |   class random_search(Search_Algorithm):
118 |       """Random search algorithm
    |  _____^
119 | |     
120 | |     Class to define the random search algorithm
121 | |     Suggest a random molecule to evalutate from the search space
122 | | 
123 | |     Attributes
124 | |     ----------
125 | |         seed (int): seed for the random search
126 | |         name (str): name of the search algorithm
127 | |         multiFidelity (bool): if the search is multiFidelity
128 | |         budget (int): budget of the search
129 | | 
130 | |     Functions:
131 | | 
132 | |         suggest_element(search_space_df, fitness_acquired, ids_acquired, bad_ids, SP):
133 | |              ramdomly Suggest an element to evaluate from the search space
134 | |         initial_suggestion(SP, num_elem_initialisation, benchmark, df_total):
135 | |             Initial suggestion of the search space
136 | | 
137 | | 
138 | |     """
    | |_______^ D400
139 |   
140 |       def __init__(self, seed=None):
    |
    = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:118:5: D415 First line should end with a period, question mark, or exclamation point
    |
117 |   class random_search(Search_Algorithm):
118 |       """Random search algorithm
    |  _____^
119 | |     
120 | |     Class to define the random search algorithm
121 | |     Suggest a random molecule to evalutate from the search space
122 | | 
123 | |     Attributes
124 | |     ----------
125 | |         seed (int): seed for the random search
126 | |         name (str): name of the search algorithm
127 | |         multiFidelity (bool): if the search is multiFidelity
128 | |         budget (int): budget of the search
129 | | 
130 | |     Functions:
131 | | 
132 | |         suggest_element(search_space_df, fitness_acquired, ids_acquired, bad_ids, SP):
133 | |              ramdomly Suggest an element to evaluate from the search space
134 | |         initial_suggestion(SP, num_elem_initialisation, benchmark, df_total):
135 | |             Initial suggestion of the search space
136 | | 
137 | | 
138 | |     """
    | |_______^ D415
139 |   
140 |       def __init__(self, seed=None):
    |
    = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:119:1: W293 Blank line contains whitespace
    |
117 | class random_search(Search_Algorithm):
118 |     """Random search algorithm
119 |     
    | ^^^^ W293
120 |     Class to define the random search algorithm
121 |     Suggest a random molecule to evalutate from the search space
    |
    = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:140:9: ANN204 Missing return type annotation for special method `__init__`
    |
138 |     """
139 | 
140 |     def __init__(self, seed=None):
    |         ^^^^^^^^ ANN204
141 |         self.name = "Random"
142 |         self.seed = seed
    |
    = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\Search_algorithm.py:140:9: D107 Missing docstring in `__init__`
    |
138 |     """
139 | 
140 |     def __init__(self, seed=None):
    |         ^^^^^^^^ D107
141 |         self.name = "Random"
142 |         self.seed = seed
    |

src\stk_search\Search_algorithm\Search_algorithm.py:146:13: NPY002 Replace legacy `np.random.seed` call with `np.random.Generator`
    |
144 |         self.budget = None
145 |         if seed is not None:
146 |             np.random.seed(seed)
    |             ^^^^^^^^^^^^^^ NPY002
147 | 
148 |     def suggest_element(
    |

src\stk_search\Search_algorithm\Search_algorithm.py:148:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
146 |             np.random.seed(seed)
147 | 
148 |     def suggest_element(
    |         ^^^^^^^^^^^^^^^ PLR0913
149 |         self,
150 |         search_space_df,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:148:9: D102 Missing docstring in public method
    |
146 |             np.random.seed(seed)
147 | 
148 |     def suggest_element(
    |         ^^^^^^^^^^^^^^^ D102
149 |         self,
150 |         search_space_df,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:151:9: ARG002 Unused method argument: `ids_acquired`
    |
149 |         self,
150 |         search_space_df,
151 |         ids_acquired,
    |         ^^^^^^^^^^^^ ARG002
152 |         fitness_acquired,
153 |         SP: SearchSpace,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:152:9: ARG002 Unused method argument: `fitness_acquired`
    |
150 |         search_space_df,
151 |         ids_acquired,
152 |         fitness_acquired,
    |         ^^^^^^^^^^^^^^^^ ARG002
153 |         SP: SearchSpace,
154 |         benchmark=True,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:153:9: N803 Argument name `SP` should be lowercase
    |
151 |         ids_acquired,
152 |         fitness_acquired,
153 |         SP: SearchSpace,
    |         ^^^^^^^^^^^^^^^ N803
154 |         benchmark=True,
155 |         df_total: pd.DataFrame = None,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:154:9: FBT002 Boolean default positional argument in function definition
    |
152 |         fitness_acquired,
153 |         SP: SearchSpace,
154 |         benchmark=True,
    |         ^^^^^^^^^ FBT002
155 |         df_total: pd.DataFrame = None,
156 |     ):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:159:13: ANN202 Missing return type annotation for private function `add_element`
    |
157 |         df_search = search_space_df.copy()
158 | 
159 |         def add_element(df, element):
    |             ^^^^^^^^^^^ ANN202
160 |             if ~(df == element).all(1).any():
161 |                 df.loc[len(df)] = element
    |
    = help: Add return type annotation: `bool`

src\stk_search\Search_algorithm\Search_algorithm.py:177:17: A001 Variable `id` is shadowing a Python builtin
    |
175 |                 ["InChIKey_" + str(i) for i in range(SP.number_of_fragments)]
176 |             ]
177 |             for id in df_elements.values:
    |                 ^^ A001
178 |                 if add_element(df_search, id):
179 |                     print(id)
    |

src\stk_search\Search_algorithm\Search_algorithm.py:177:23: PD011 Use `.to_numpy()` instead of `.values`
    |
175 |                 ["InChIKey_" + str(i) for i in range(SP.number_of_fragments)]
176 |             ]
177 |             for id in df_elements.values:
    |                       ^^^^^^^^^^^^^^^^^^ PD011
178 |                 if add_element(df_search, id):
179 |                     print(id)
    |

src\stk_search\Search_algorithm\Search_algorithm.py:179:21: T201 `print` found
    |
177 |             for id in df_elements.values:
178 |                 if add_element(df_search, id):
179 |                     print(id)
    |                     ^^^^^ T201
180 |                     leav_loop = True
181 |                     break
    |
    = help: Remove `print`

src\stk_search\Search_algorithm\Search_algorithm.py:185:9: T201 `print` found
    |
183 |                 break
184 | 
185 |         print(df_search.shape)
    |         ^^^^^ T201
186 |         return len(df_search) - 1, df_search
    |
    = help: Remove `print`

src\stk_search\Search_algorithm\Search_algorithm.py:189:7: N801 Class name `evolution_algorithm` should use CapWords convention
    |
189 | class evolution_algorithm(Search_Algorithm):
    |       ^^^^^^^^^^^^^^^^^^^ N801
190 |     """Evolution algorithm
    |

src\stk_search\Search_algorithm\Search_algorithm.py:190:5: D400 First line should end with a period
    |
189 |   class evolution_algorithm(Search_Algorithm):
190 |       """Evolution algorithm
    |  _____^
191 | |     
192 | |     Class to define the evolution algorithm
193 | |     Suggest a molecule to evaluate from the search space using an evolution algorithm
194 | |     
195 | |     Attributes
196 | |     ----------
197 | |         name (str): name of the search algorithm
198 | |         selection_method_mutation (str): selection method for the mutation
199 | |         selection_method_cross (str): selection method for the cross
200 | |         number_of_parents (int): number of parents
201 | |         multiFidelity (bool): if the search is multiFidelity
202 | |         budget (int): budget of the search
203 | |         
204 | |         
205 | |     Functions:
206 | |     
207 | |         suggest_element(search_space_df, fitness_acquired, ids_acquired, bad_ids, SP):
208 | |             Suggest an element to evaluate
209 | |         generate_df_elements_to_choose_from(search_space_df, fitness_acquired, SP, benchmark, df_total):
210 | |             Generate the dataframe of the elements to choose from
211 | |         mutate_element(element, SP):
212 | |             Mutate an element
213 | |         cross_element(element1, element2):
214 | |             Cross two elements
215 | |         roulette_wheel_selection(fitness_acquired, df_search, size):
216 | |             Roulette wheel selection
217 | |         tournament_selection(fitness_acquired, df_search, size):
218 | |             Tournament selection    
219 | |         rank_selection(fitness_acquired, df_search, size):
220 | |             Rank selection
221 | |         top_selection(fitness_acquired, df_search, size, number_of_random):
222 | |             Top selection
223 | |         run_selection_method(selection_method, fitness_acquired, df_search):
224 | |             Run the selection method
225 | |         Generate_element_to_evaluate(fitness_acquired, df_search, SP):
226 | |             Generate the elements to evaluate
227 | | 
228 | |             
229 | |     """
    | |_______^ D400
230 |   
231 |       def __init__(self):
    |
    = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:190:5: D415 First line should end with a period, question mark, or exclamation point
    |
189 |   class evolution_algorithm(Search_Algorithm):
190 |       """Evolution algorithm
    |  _____^
191 | |     
192 | |     Class to define the evolution algorithm
193 | |     Suggest a molecule to evaluate from the search space using an evolution algorithm
194 | |     
195 | |     Attributes
196 | |     ----------
197 | |         name (str): name of the search algorithm
198 | |         selection_method_mutation (str): selection method for the mutation
199 | |         selection_method_cross (str): selection method for the cross
200 | |         number_of_parents (int): number of parents
201 | |         multiFidelity (bool): if the search is multiFidelity
202 | |         budget (int): budget of the search
203 | |         
204 | |         
205 | |     Functions:
206 | |     
207 | |         suggest_element(search_space_df, fitness_acquired, ids_acquired, bad_ids, SP):
208 | |             Suggest an element to evaluate
209 | |         generate_df_elements_to_choose_from(search_space_df, fitness_acquired, SP, benchmark, df_total):
210 | |             Generate the dataframe of the elements to choose from
211 | |         mutate_element(element, SP):
212 | |             Mutate an element
213 | |         cross_element(element1, element2):
214 | |             Cross two elements
215 | |         roulette_wheel_selection(fitness_acquired, df_search, size):
216 | |             Roulette wheel selection
217 | |         tournament_selection(fitness_acquired, df_search, size):
218 | |             Tournament selection    
219 | |         rank_selection(fitness_acquired, df_search, size):
220 | |             Rank selection
221 | |         top_selection(fitness_acquired, df_search, size, number_of_random):
222 | |             Top selection
223 | |         run_selection_method(selection_method, fitness_acquired, df_search):
224 | |             Run the selection method
225 | |         Generate_element_to_evaluate(fitness_acquired, df_search, SP):
226 | |             Generate the elements to evaluate
227 | | 
228 | |             
229 | |     """
    | |_______^ D415
230 |   
231 |       def __init__(self):
    |
    = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:191:1: W293 Blank line contains whitespace
    |
189 | class evolution_algorithm(Search_Algorithm):
190 |     """Evolution algorithm
191 |     
    | ^^^^ W293
192 |     Class to define the evolution algorithm
193 |     Suggest a molecule to evaluate from the search space using an evolution algorithm
    |
    = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:194:1: W293 Blank line contains whitespace
    |
192 |     Class to define the evolution algorithm
193 |     Suggest a molecule to evaluate from the search space using an evolution algorithm
194 |     
    | ^^^^ W293
195 |     Attributes
196 |     ----------
    |
    = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:203:1: W293 Blank line contains whitespace
    |
201 |         multiFidelity (bool): if the search is multiFidelity
202 |         budget (int): budget of the search
203 |         
    | ^^^^^^^^ W293
204 |         
205 |     Functions:
    |
    = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:204:1: W293 Blank line contains whitespace
    |
202 |         budget (int): budget of the search
203 |         
204 |         
    | ^^^^^^^^ W293
205 |     Functions:
    |
    = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:206:1: W293 Blank line contains whitespace
    |
205 |     Functions:
206 |     
    | ^^^^ W293
207 |         suggest_element(search_space_df, fitness_acquired, ids_acquired, bad_ids, SP):
208 |             Suggest an element to evaluate
    |
    = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:218:33: W291 Trailing whitespace
    |
216 |             Roulette wheel selection
217 |         tournament_selection(fitness_acquired, df_search, size):
218 |             Tournament selection    
    |                                 ^^^^ W291
219 |         rank_selection(fitness_acquired, df_search, size):
220 |             Rank selection
    |
    = help: Remove trailing whitespace

src\stk_search\Search_algorithm\Search_algorithm.py:228:1: W293 Blank line contains whitespace
    |
226 |             Generate the elements to evaluate
227 | 
228 |             
    | ^^^^^^^^^^^^ W293
229 |     """
    |
    = help: Remove whitespace from blank line

src\stk_search\Search_algorithm\Search_algorithm.py:231:9: ANN204 Missing return type annotation for special method `__init__`
    |
229 |     """
230 | 
231 |     def __init__(self):
    |         ^^^^^^^^ ANN204
232 |         self.name = "Evolution_algorithm"
233 |         self.selection_method_mutation = "top"
    |
    = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\Search_algorithm.py:231:9: D107 Missing docstring in `__init__`
    |
229 |     """
230 | 
231 |     def __init__(self):
    |         ^^^^^^^^ D107
232 |         self.name = "Evolution_algorithm"
233 |         self.selection_method_mutation = "top"
    |

src\stk_search\Search_algorithm\Search_algorithm.py:239:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
237 |         self.budget = None
238 | 
239 |     def suggest_element(
    |         ^^^^^^^^^^^^^^^ PLR0913
240 |         self,
241 |         search_space_df,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:242:9: ARG002 Unused method argument: `ids_acquired`
    |
240 |         self,
241 |         search_space_df,
242 |         ids_acquired,
    |         ^^^^^^^^^^^^ ARG002
243 |         fitness_acquired,
244 |         SP: SearchSpace,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:244:9: N803 Argument name `SP` should be lowercase
    |
242 |         ids_acquired,
243 |         fitness_acquired,
244 |         SP: SearchSpace,
    |         ^^^^^^^^^^^^^^^ N803
245 |         benchmark=True,
246 |         df_total: pd.DataFrame = None,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:245:9: FBT002 Boolean default positional argument in function definition
    |
243 |         fitness_acquired,
244 |         SP: SearchSpace,
245 |         benchmark=True,
    |         ^^^^^^^^^ FBT002
246 |         df_total: pd.DataFrame = None,
247 |     ):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:248:9: D205 1 blank line required between summary line and description
    |
246 |           df_total: pd.DataFrame = None,
247 |       ):
248 |           """Suggest an element to evaluate
    |  _________^
249 | |         Start the algorithm by generating a list of offspring from the parents
250 | |         the list of offspring is generated by mutation and cross-over of the parents
251 | |         the selection of the parents is done using the selection method over the list of molecules in the searched space
252 | |         the selection method is defined by the user
253 | |         the selection method can be "roulette", "tournament", "rank" or "top"
254 | |         """
    | |___________^ D205
255 |           import time
256 |           random_seed = int(time.time()*1000) - int(time.time())*1000
    |
    = help: Insert single blank line

src\stk_search\Search_algorithm\Search_algorithm.py:248:9: D400 First line should end with a period
    |
246 |           df_total: pd.DataFrame = None,
247 |       ):
248 |           """Suggest an element to evaluate
    |  _________^
249 | |         Start the algorithm by generating a list of offspring from the parents
250 | |         the list of offspring is generated by mutation and cross-over of the parents
251 | |         the selection of the parents is done using the selection method over the list of molecules in the searched space
252 | |         the selection method is defined by the user
253 | |         the selection method can be "roulette", "tournament", "rank" or "top"
254 | |         """
    | |___________^ D400
255 |           import time
256 |           random_seed = int(time.time()*1000) - int(time.time())*1000
    |
    = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:248:9: D415 First line should end with a period, question mark, or exclamation point
    |
246 |           df_total: pd.DataFrame = None,
247 |       ):
248 |           """Suggest an element to evaluate
    |  _________^
249 | |         Start the algorithm by generating a list of offspring from the parents
250 | |         the list of offspring is generated by mutation and cross-over of the parents
251 | |         the selection of the parents is done using the selection method over the list of molecules in the searched space
252 | |         the selection method is defined by the user
253 | |         the selection method can be "roulette", "tournament", "rank" or "top"
254 | |         """
    | |___________^ D415
255 |           import time
256 |           random_seed = int(time.time()*1000) - int(time.time())*1000
    |
    = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:257:9: NPY002 Replace legacy `np.random.seed` call with `np.random.Generator`
    |
255 |         import time
256 |         random_seed = int(time.time()*1000) - int(time.time())*1000
257 |         np.random.seed(random_seed)
    |         ^^^^^^^^^^^^^^ NPY002
258 |         df_search = search_space_df
259 |         df_elements = search_space_df
    |

src\stk_search\Search_algorithm\Search_algorithm.py:270:30: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
268 |             )
269 |             error_counter =error_counter+1
270 |             if error_counter>10:
    |                              ^^ PLR2004
271 |                 df_elements.drop_duplicates(inplace=True)
272 |                 print(df_elements.shape)
    |

src\stk_search\Search_algorithm\Search_algorithm.py:271:45: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
269 |             error_counter =error_counter+1
270 |             if error_counter>10:
271 |                 df_elements.drop_duplicates(inplace=True)
    |                                             ^^^^^^^^^^^^ PD002
272 |                 print(df_elements.shape)
273 |                 raise ValueError("no new element found")
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\Search_algorithm.py:272:17: T201 `print` found
    |
270 |             if error_counter>10:
271 |                 df_elements.drop_duplicates(inplace=True)
272 |                 print(df_elements.shape)
    |                 ^^^^^ T201
273 |                 raise ValueError("no new element found")
    |
    = help: Remove `print`

src\stk_search\Search_algorithm\Search_algorithm.py:273:23: TRY003 Avoid specifying long messages outside the exception class
    |
271 |                 df_elements.drop_duplicates(inplace=True)
272 |                 print(df_elements.shape)
273 |                 raise ValueError("no new element found")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
274 | 
275 |         def add_element(df, element):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:273:34: EM101 Exception must not use a string literal, assign to variable first
    |
271 |                 df_elements.drop_duplicates(inplace=True)
272 |                 print(df_elements.shape)
273 |                 raise ValueError("no new element found")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^ EM101
274 | 
275 |         def add_element(df, element):
    |
    = help: Assign to variable; remove string literal

src\stk_search\Search_algorithm\Search_algorithm.py:275:13: ANN202 Missing return type annotation for private function `add_element`
    |
273 |                 raise ValueError("no new element found")
274 | 
275 |         def add_element(df, element):
    |             ^^^^^^^^^^^ ANN202
276 |             if ~(df == element).all(1).any():
277 |                 df.loc[len(df)] = element
    |
    = help: Add return type annotation: `bool`

src\stk_search\Search_algorithm\Search_algorithm.py:280:24: PD011 Use `.to_numpy()` instead of `.values`
    |
278 |                 return True
279 |             return False
280 |         for element in df_elements.sample(frac=1).values:
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
281 |             if add_element(df_search, element):
282 |                 break
    |

src\stk_search\Search_algorithm\Search_algorithm.py:287:9: ANN202 Missing return type annotation for private function `_check_new_element_in_search_space`
    |
287 |     def _check_new_element_in_search_space(self, df_search, df_elements):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
288 |         """Check if the element is already in the search space
289 |         """
    |
    = help: Add return type annotation

src\stk_search\Search_algorithm\Search_algorithm.py:288:9: D200 One-line docstring should fit on one line
    |
287 |       def _check_new_element_in_search_space(self, df_search, df_elements):
288 |           """Check if the element is already in the search space
    |  _________^
289 | |         """
    | |___________^ D200
290 |           df_search_copy = df_search.copy()
291 |           df_search_copy = df_search_copy[df_elements.columns]
    |
    = help: Reformat to one line

src\stk_search\Search_algorithm\Search_algorithm.py:288:9: D400 First line should end with a period
    |
287 |       def _check_new_element_in_search_space(self, df_search, df_elements):
288 |           """Check if the element is already in the search space
    |  _________^
289 | |         """
    | |___________^ D400
290 |           df_search_copy = df_search.copy()
291 |           df_search_copy = df_search_copy[df_elements.columns]
    |
    = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:288:9: D415 First line should end with a period, question mark, or exclamation point
    |
287 |       def _check_new_element_in_search_space(self, df_search, df_elements):
288 |           """Check if the element is already in the search space
    |  _________^
289 | |         """
    | |___________^ D415
290 |           df_search_copy = df_search.copy()
291 |           df_search_copy = df_search_copy[df_elements.columns]
    |
    = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:292:18: PD015 Use `.merge` method instead of `pd.merge` function. They have equivalent functionality.
    |
290 |         df_search_copy = df_search.copy()
291 |         df_search_copy = df_search_copy[df_elements.columns]
292 |         all_df = pd.merge(df_elements,df_search_copy, how="left",indicator="exists")
    |                  ^^^^^^^^ PD015
293 |         all_df["exists"] = np.where(all_df.exists == "both", True, False)
    |

src\stk_search\Search_algorithm\Search_algorithm.py:293:62: FBT003 Boolean positional value in function call
    |
291 |         df_search_copy = df_search_copy[df_elements.columns]
292 |         all_df = pd.merge(df_elements,df_search_copy, how="left",indicator="exists")
293 |         all_df["exists"] = np.where(all_df.exists == "both", True, False)
    |                                                              ^^^^ FBT003
294 | 
295 |         return all_df[all_df.exists == False].shape[0] > 0
    |

src\stk_search\Search_algorithm\Search_algorithm.py:293:68: FBT003 Boolean positional value in function call
    |
291 |         df_search_copy = df_search_copy[df_elements.columns]
292 |         all_df = pd.merge(df_elements,df_search_copy, how="left",indicator="exists")
293 |         all_df["exists"] = np.where(all_df.exists == "both", True, False)
    |                                                                    ^^^^^ FBT003
294 | 
295 |         return all_df[all_df.exists == False].shape[0] > 0
    |

src\stk_search\Search_algorithm\Search_algorithm.py:295:23: E712 Avoid equality comparisons to `False`; use `if not all_df.exists:` for false checks
    |
293 |         all_df["exists"] = np.where(all_df.exists == "both", True, False)
294 | 
295 |         return all_df[all_df.exists == False].shape[0] > 0
    |                       ^^^^^^^^^^^^^^^^^^^^^^ E712
296 | 
297 |     def generate_df_elements_to_choose_from(
    |
    = help: Replace with `not all_df.exists`

src\stk_search\Search_algorithm\Search_algorithm.py:301:9: N803 Argument name `SP` should be lowercase
    |
299 |         search_space_df,
300 |         fitness_acquired,
301 |         SP: SearchSpace,
    |         ^^^^^^^^^^^^^^^ N803
302 |         benchmark=True,
303 |         df_total: pd.DataFrame = None,
    |

src\stk_search\Search_algorithm\Search_algorithm.py:302:9: FBT002 Boolean default positional argument in function definition
    |
300 |         fitness_acquired,
301 |         SP: SearchSpace,
302 |         benchmark=True,
    |         ^^^^^^^^^ FBT002
303 |         df_total: pd.DataFrame = None,
304 |     ):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:305:9: D400 First line should end with a period
    |
303 |           df_total: pd.DataFrame = None,
304 |       ):
305 |           """Generate the dataframe of the elements to choose from
    |  _________^
306 | | 
307 | |         Args:
308 | |         ----
309 | |             search_space_df (pd.DataFrame): dataframe containing the searched space
310 | |             fitness_acquired (list): list of the fitness of the elements
311 | |             SP (Search_Space): search space
312 | |             benchmark (bool): if the search is a benchmark
313 | |             df_total (pd.DataFrame): dataframe containing the results
314 | | 
315 | |         Returns:
316 | |         -------
317 | |             pd.DataFrame: dataframe containing the elements to choose from
318 | |             pd.DataFrame: dataframe containing the searched space
319 | | 
320 | |         """
    | |___________^ D400
321 |           df_search = search_space_df.copy()
322 |           fitness_acquired = np.array(fitness_acquired)
    |
    = help: Add period

src\stk_search\Search_algorithm\Search_algorithm.py:305:9: D415 First line should end with a period, question mark, or exclamation point
    |
303 |           df_total: pd.DataFrame = None,
304 |       ):
305 |           """Generate the dataframe of the elements to choose from
    |  _________^
306 | | 
307 | |         Args:
308 | |         ----
309 | |             search_space_df (pd.DataFrame): dataframe containing the searched space
310 | |             fitness_acquired (list): list of the fitness of the elements
311 | |             SP (Search_Space): search space
312 | |             benchmark (bool): if the search is a benchmark
313 | |             df_total (pd.DataFrame): dataframe containing the results
314 | | 
315 | |         Returns:
316 | |         -------
317 | |             pd.DataFrame: dataframe containing the elements to choose from
318 | |             pd.DataFrame: dataframe containing the searched space
319 | | 
320 | |         """
    | |___________^ D415
321 |           df_search = search_space_df.copy()
322 |           fitness_acquired = np.array(fitness_acquired)
    |
    = help: Add closing punctuation

src\stk_search\Search_algorithm\Search_algorithm.py:342:49: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
340 |                 how="left",
341 |             )
342 |             df_elements.dropna(subset="target", inplace=True)
    |                                                 ^^^^^^^^^^^^ PD002
343 |             df_elements = df_elements[
344 |                 [f"InChIKey_{i}" for i in range(elements.shape[1])]
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\Search_algorithm\Search_algorithm.py:346:13: ERA001 Found commented-out code
    |
344 |                 [f"InChIKey_{i}" for i in range(elements.shape[1])]
345 |             ]  # check this for generalization
346 |             # print(df_elements.shape)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
347 |         return df_elements, df_search
    |
    = help: Remove commented-out code

src\stk_search\Search_algorithm\Search_algorithm.py:349:9: D102 Missing docstring in public method
    |
347 |         return df_elements, df_search
348 | 
349 |     def mutate_element(self, element, SP: SearchSpace):
    |         ^^^^^^^^^^^^^^ D102
350 |         elements = []
351 |         for i in range(element.shape[0]):  # check this for generalization
    |

src\stk_search\Search_algorithm\Search_algorithm.py:349:39: N803 Argument name `SP` should be lowercase
    |
347 |         return df_elements, df_search
348 | 
349 |     def mutate_element(self, element, SP: SearchSpace):
    |                                       ^^^^^^^^^^^^^^^ N803
350 |         elements = []
351 |         for i in range(element.shape[0]):  # check this for generalization
    |

src\stk_search\Search_algorithm\Search_algorithm.py:359:9: D102 Missing docstring in public method
    |
357 |         return elements
358 | 
359 |     def cross_element(self, element1, element2):
    |         ^^^^^^^^^^^^^ D102
360 |         elements = []
361 |         for i in range(element1.shape[0]):  # check this for generalization
    |

src\stk_search\Search_algorithm\Search_algorithm.py:367:9: D102 Missing docstring in public method
    |
365 |         return elements
366 | 
367 |     def roulette_wheel_selection(self, fitness_acquired, df_search, size=3):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
368 |         total_fitness = np.sum(fitness_acquired)
369 |         selection_probs = fitness_acquired / total_fitness
    |

src\stk_search\Search_algorithm\Search_algorithm.py:370:28: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
368 |         total_fitness = np.sum(fitness_acquired)
369 |         selection_probs = fitness_acquired / total_fitness
370 |         selected_indices = np.random.choice(
    |                            ^^^^^^^^^^^^^^^^ NPY002
371 |             df_search.index, size=size, p=selection_probs
372 |         )
    |

src\stk_search\Search_algorithm\Search_algorithm.py:373:16: PD011 Use `.to_numpy()` instead of `.values`
    |
371 |             df_search.index, size=size, p=selection_probs
372 |         )
373 |         return df_search.loc[selected_indices].values
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
374 | 
375 |     def tournament_selection(self, fitness_acquired, df_search, size=3):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:375:9: D102 Missing docstring in public method
    |
373 |         return df_search.loc[selected_indices].values
374 | 
375 |     def tournament_selection(self, fitness_acquired, df_search, size=3):
    |         ^^^^^^^^^^^^^^^^^^^^ D102
376 |         selected_indices = []
377 |         for _ in range(size):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:378:34: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
376 |         selected_indices = []
377 |         for _ in range(size):
378 |             tournament_indices = np.random.choice(df_search.index, size=2)
    |                                  ^^^^^^^^^^^^^^^^ NPY002
379 |             tournament_fitness = fitness_acquired[tournament_indices]
380 |             winner_index = tournament_indices[np.argmax(tournament_fitness)]
    |

src\stk_search\Search_algorithm\Search_algorithm.py:382:16: PD011 Use `.to_numpy()` instead of `.values`
    |
380 |             winner_index = tournament_indices[np.argmax(tournament_fitness)]
381 |             selected_indices.append(winner_index)
382 |         return df_search.loc[selected_indices].values
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
383 | 
384 |     def rank_selection(self, fitness_acquired, df_search, size=3):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:384:9: D102 Missing docstring in public method
    |
382 |         return df_search.loc[selected_indices].values
383 | 
384 |     def rank_selection(self, fitness_acquired, df_search, size=3):
    |         ^^^^^^^^^^^^^^ D102
385 |         ranks = np.argsort(np.argsort(fitness_acquired))
386 |         total_ranks = np.sum(ranks)
    |

src\stk_search\Search_algorithm\Search_algorithm.py:388:28: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
386 |         total_ranks = np.sum(ranks)
387 |         selection_probs = ranks / total_ranks
388 |         selected_indices = np.random.choice(
    |                            ^^^^^^^^^^^^^^^^ NPY002
389 |             df_search.index, size=size, p=selection_probs
390 |         )
    |

src\stk_search\Search_algorithm\Search_algorithm.py:391:16: PD011 Use `.to_numpy()` instead of `.values`
    |
389 |             df_search.index, size=size, p=selection_probs
390 |         )
391 |         return df_search.loc[selected_indices].values
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
392 | 
393 |     def top_selection(
    |

src\stk_search\Search_algorithm\Search_algorithm.py:393:9: D102 Missing docstring in public method
    |
391 |         return df_search.loc[selected_indices].values
392 | 
393 |     def top_selection(
    |         ^^^^^^^^^^^^^ D102
394 |         self, fitness_acquired, df_search, size=3, number_of_random=2
395 |     ):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:397:26: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
395 |     ):
396 |         top_indices = np.argsort(fitness_acquired)[-size + number_of_random :]
397 |         random_indices = np.random.choice(df_search.shape[0], size=number_of_random)
    |                          ^^^^^^^^^^^^^^^^ NPY002
398 |         indices_considered = np.append(top_indices, random_indices)
399 |         return df_search.loc[indices_considered].values
    |

src\stk_search\Search_algorithm\Search_algorithm.py:399:16: PD011 Use `.to_numpy()` instead of `.values`
    |
397 |         random_indices = np.random.choice(df_search.shape[0], size=number_of_random)
398 |         indices_considered = np.append(top_indices, random_indices)
399 |         return df_search.loc[indices_considered].values
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
400 | 
401 |     def run_selection_method(
    |

src\stk_search\Search_algorithm\Search_algorithm.py:401:9: D102 Missing docstring in public method
    |
399 |         return df_search.loc[indices_considered].values
400 | 
401 |     def run_selection_method(
    |         ^^^^^^^^^^^^^^^^^^^^ D102
402 |         self, selection_method, fitness_acquired, df_search
403 |     ):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:422:19: TRY003 Avoid specifying long messages outside the exception class
    |
420 |               )
421 |           else:
422 |               raise ValueError(
    |  ___________________^
423 | |                 f"Unknown selection method: {selection_method}"
424 | |             )
    | |_____________^ TRY003
425 |           return list_parents
    |

src\stk_search\Search_algorithm\Search_algorithm.py:423:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
421 |         else:
422 |             raise ValueError(
423 |                 f"Unknown selection method: {selection_method}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
424 |             )
425 |         return list_parents
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\Search_algorithm\Search_algorithm.py:427:9: N802 Function name `Generate_element_to_evaluate` should be lowercase
    |
425 |         return list_parents
426 | 
427 |     def Generate_element_to_evaluate(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
428 |         self, fitness_acquired, df_search, SP: SearchSpace
429 |     ):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:427:9: D102 Missing docstring in public method
    |
425 |         return list_parents
426 | 
427 |     def Generate_element_to_evaluate(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
428 |         self, fitness_acquired, df_search, SP: SearchSpace
429 |     ):
    |

src\stk_search\Search_algorithm\Search_algorithm.py:428:44: N803 Argument name `SP` should be lowercase
    |
427 |     def Generate_element_to_evaluate(
428 |         self, fitness_acquired, df_search, SP: SearchSpace
    |                                            ^^^^^^^^^^^^^^^ N803
429 |     ):
430 |         elements = []
    |

src\stk_search\Search_algorithm\tanimoto_kernel.py:1:1: INP001 File `src\stk_search\Search_algorithm\tanimoto_kernel.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\Search_algorithm\tanimoto_kernel.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """Tanimoto Kernel. Operates on representations including bit vectors e.g. Morgan/ECFP6 fingerprints count vectors e.g.
2 | | RDKit fragment features.
3 | | """
  | |___^ D205
4 |   
5 |   import torch
  |
  = help: Insert single blank line

src\stk_search\Search_algorithm\tanimoto_kernel.py:9:5: D417 Missing argument descriptions in the docstring for `batch_tanimoto_sim`: `eps`, `x2`
   |
 9 | def batch_tanimoto_sim(
   |     ^^^^^^^^^^^^^^^^^^ D417
10 |     x1: torch.Tensor, x2: torch.Tensor, eps: float = 1e-6
11 | ) -> torch.Tensor:
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:12:5: D205 1 blank line required between summary line and description
   |
10 |       x1: torch.Tensor, x2: torch.Tensor, eps: float = 1e-6
11 |   ) -> torch.Tensor:
12 |       r"""Tanimoto similarity between two batched tensors, across last 2 dimensions.
   |  _____^
13 | |     eps argument ensures numerical stability if all zero tensors are added. Tanimoto similarity is proportional to:
14 | | 
15 | |     (<x, y>) / (||x||^2 + ||y||^2 - <x, y>)
16 | | 
17 | |     where x and y may be bit or count vectors or in set notation:
18 | | 
19 | |     |A \cap B | / |A| + |B| - |A \cap B |
20 | | 
21 | |     Args:
22 | |     ----
23 | |         x1: `[b x n x d]` Tensor where b is the batch dimension
24 | |         x2: `[b x m x d]` Tensor
25 | |         eps: Float for numerical stability. Default value is 1e-6
26 | |     Returns:
27 | |         Tensor denoting the Tanimoto similarity.
28 | | 
29 | |     """
   | |_______^ D205
30 |       if x1.ndim < 2 or x2.ndim < 2:
31 |           raise ValueError("Tensors must have a batch dimension")
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\tanimoto_kernel.py:12:5: D400 First line should end with a period
   |
10 |       x1: torch.Tensor, x2: torch.Tensor, eps: float = 1e-6
11 |   ) -> torch.Tensor:
12 |       r"""Tanimoto similarity between two batched tensors, across last 2 dimensions.
   |  _____^
13 | |     eps argument ensures numerical stability if all zero tensors are added. Tanimoto similarity is proportional to:
14 | | 
15 | |     (<x, y>) / (||x||^2 + ||y||^2 - <x, y>)
16 | | 
17 | |     where x and y may be bit or count vectors or in set notation:
18 | | 
19 | |     |A \cap B | / |A| + |B| - |A \cap B |
20 | | 
21 | |     Args:
22 | |     ----
23 | |         x1: `[b x n x d]` Tensor where b is the batch dimension
24 | |         x2: `[b x m x d]` Tensor
25 | |         eps: Float for numerical stability. Default value is 1e-6
26 | |     Returns:
27 | |         Tensor denoting the Tanimoto similarity.
28 | | 
29 | |     """
   | |_______^ D400
30 |       if x1.ndim < 2 or x2.ndim < 2:
31 |           raise ValueError("Tensors must have a batch dimension")
   |
   = help: Add period

src\stk_search\Search_algorithm\tanimoto_kernel.py:12:5: D415 First line should end with a period, question mark, or exclamation point
   |
10 |       x1: torch.Tensor, x2: torch.Tensor, eps: float = 1e-6
11 |   ) -> torch.Tensor:
12 |       r"""Tanimoto similarity between two batched tensors, across last 2 dimensions.
   |  _____^
13 | |     eps argument ensures numerical stability if all zero tensors are added. Tanimoto similarity is proportional to:
14 | | 
15 | |     (<x, y>) / (||x||^2 + ||y||^2 - <x, y>)
16 | | 
17 | |     where x and y may be bit or count vectors or in set notation:
18 | | 
19 | |     |A \cap B | / |A| + |B| - |A \cap B |
20 | | 
21 | |     Args:
22 | |     ----
23 | |         x1: `[b x n x d]` Tensor where b is the batch dimension
24 | |         x2: `[b x m x d]` Tensor
25 | |         eps: Float for numerical stability. Default value is 1e-6
26 | |     Returns:
27 | |         Tensor denoting the Tanimoto similarity.
28 | | 
29 | |     """
   | |_______^ D415
30 |       if x1.ndim < 2 or x2.ndim < 2:
31 |           raise ValueError("Tensors must have a batch dimension")
   |
   = help: Add closing punctuation

src\stk_search\Search_algorithm\tanimoto_kernel.py:30:18: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
29 |     """
30 |     if x1.ndim < 2 or x2.ndim < 2:
   |                  ^ PLR2004
31 |         raise ValueError("Tensors must have a batch dimension")
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:30:33: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
29 |     """
30 |     if x1.ndim < 2 or x2.ndim < 2:
   |                                 ^ PLR2004
31 |         raise ValueError("Tensors must have a batch dimension")
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:31:15: TRY003 Avoid specifying long messages outside the exception class
   |
29 |     """
30 |     if x1.ndim < 2 or x2.ndim < 2:
31 |         raise ValueError("Tensors must have a batch dimension")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
32 | 
33 |     dot_prod = torch.matmul(x1, torch.transpose(x2, -1, -2))
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:31:26: EM101 Exception must not use a string literal, assign to variable first
   |
29 |     """
30 |     if x1.ndim < 2 or x2.ndim < 2:
31 |         raise ValueError("Tensors must have a batch dimension")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
32 | 
33 |     dot_prod = torch.matmul(x1, torch.transpose(x2, -1, -2))
   |
   = help: Assign to variable; remove string literal

src\stk_search\Search_algorithm\tanimoto_kernel.py:47:5: D205 1 blank line required between summary line and description
   |
46 |   class TanimotoKernel(Kernel):
47 |       r"""Computes a covariance matrix based on the Tanimoto kernel
   |  _____^
48 | |      between inputs :math:`\mathbf{x_1}` and :math:`\mathbf{x_2}`:
49 | | 
50 | |      .. math::
51 | | 
52 | |     \begin{equation*}
53 | |      k_{\text{Tanimoto}}(\mathbf{x}, \mathbf{x'}) = \frac{\langle\mathbf{x},
54 | |      \mathbf{x'}\rangle}{\left\lVert\mathbf{x}\right\rVert^2 + \left\lVert\mathbf{x'}\right\rVert^2 -
55 | |      \langle\mathbf{x}, \mathbf{x'}\rangle}
56 | |     \end{equation*}
57 | | 
58 | |     .. note::
59 | | 
60 | |      This kernel does not have an `outputscale` parameter. To add a scaling parameter,
61 | |      decorate this kernel with a :class:`gpytorch.test_kernels.ScaleKernel`.
62 | | 
63 | |     Example:
64 | |     -------
65 | |          >>> x = torch.randint(0, 2, (10, 5))
66 | |          >>> # Non-batch: Simple option
67 | |          >>> covar_module = gpytorch.kernels.ScaleKernel(TanimotoKernel())
68 | |          >>> covar = covar_module(x)  # Output: LazyTensor of size (10 x 10)
69 | |          >>>
70 | |          >>> batch_x = torch.randint(0, 2, (2, 10, 5))
71 | |          >>> # Batch: Simple option
72 | |          >>> covar_module = gpytorch.kernels.ScaleKernel(TanimotoKernel())
73 | |          >>> covar = covar_module(batch_x)  # Output: LazyTensor of size (2 x 10 x 10)
74 | | 
75 | |     """
   | |_______^ D205
76 |   
77 |       is_stationary = False
   |
   = help: Insert single blank line

src\stk_search\Search_algorithm\tanimoto_kernel.py:47:5: D400 First line should end with a period
   |
46 |   class TanimotoKernel(Kernel):
47 |       r"""Computes a covariance matrix based on the Tanimoto kernel
   |  _____^
48 | |      between inputs :math:`\mathbf{x_1}` and :math:`\mathbf{x_2}`:
49 | | 
50 | |      .. math::
51 | | 
52 | |     \begin{equation*}
53 | |      k_{\text{Tanimoto}}(\mathbf{x}, \mathbf{x'}) = \frac{\langle\mathbf{x},
54 | |      \mathbf{x'}\rangle}{\left\lVert\mathbf{x}\right\rVert^2 + \left\lVert\mathbf{x'}\right\rVert^2 -
55 | |      \langle\mathbf{x}, \mathbf{x'}\rangle}
56 | |     \end{equation*}
57 | | 
58 | |     .. note::
59 | | 
60 | |      This kernel does not have an `outputscale` parameter. To add a scaling parameter,
61 | |      decorate this kernel with a :class:`gpytorch.test_kernels.ScaleKernel`.
62 | | 
63 | |     Example:
64 | |     -------
65 | |          >>> x = torch.randint(0, 2, (10, 5))
66 | |          >>> # Non-batch: Simple option
67 | |          >>> covar_module = gpytorch.kernels.ScaleKernel(TanimotoKernel())
68 | |          >>> covar = covar_module(x)  # Output: LazyTensor of size (10 x 10)
69 | |          >>>
70 | |          >>> batch_x = torch.randint(0, 2, (2, 10, 5))
71 | |          >>> # Batch: Simple option
72 | |          >>> covar_module = gpytorch.kernels.ScaleKernel(TanimotoKernel())
73 | |          >>> covar = covar_module(batch_x)  # Output: LazyTensor of size (2 x 10 x 10)
74 | | 
75 | |     """
   | |_______^ D400
76 |   
77 |       is_stationary = False
   |
   = help: Add period

src\stk_search\Search_algorithm\tanimoto_kernel.py:47:5: D415 First line should end with a period, question mark, or exclamation point
   |
46 |   class TanimotoKernel(Kernel):
47 |       r"""Computes a covariance matrix based on the Tanimoto kernel
   |  _____^
48 | |      between inputs :math:`\mathbf{x_1}` and :math:`\mathbf{x_2}`:
49 | | 
50 | |      .. math::
51 | | 
52 | |     \begin{equation*}
53 | |      k_{\text{Tanimoto}}(\mathbf{x}, \mathbf{x'}) = \frac{\langle\mathbf{x},
54 | |      \mathbf{x'}\rangle}{\left\lVert\mathbf{x}\right\rVert^2 + \left\lVert\mathbf{x'}\right\rVert^2 -
55 | |      \langle\mathbf{x}, \mathbf{x'}\rangle}
56 | |     \end{equation*}
57 | | 
58 | |     .. note::
59 | | 
60 | |      This kernel does not have an `outputscale` parameter. To add a scaling parameter,
61 | |      decorate this kernel with a :class:`gpytorch.test_kernels.ScaleKernel`.
62 | | 
63 | |     Example:
64 | |     -------
65 | |          >>> x = torch.randint(0, 2, (10, 5))
66 | |          >>> # Non-batch: Simple option
67 | |          >>> covar_module = gpytorch.kernels.ScaleKernel(TanimotoKernel())
68 | |          >>> covar = covar_module(x)  # Output: LazyTensor of size (10 x 10)
69 | |          >>>
70 | |          >>> batch_x = torch.randint(0, 2, (2, 10, 5))
71 | |          >>> # Batch: Simple option
72 | |          >>> covar_module = gpytorch.kernels.ScaleKernel(TanimotoKernel())
73 | |          >>> covar = covar_module(batch_x)  # Output: LazyTensor of size (2 x 10 x 10)
74 | | 
75 | |     """
   | |_______^ D415
76 |   
77 |       is_stationary = False
   |
   = help: Add closing punctuation

src\stk_search\Search_algorithm\tanimoto_kernel.py:80:9: ANN204 Missing return type annotation for special method `__init__`
   |
78 |     has_lengthscale = False
79 | 
80 |     def __init__(self, **kwargs):
   |         ^^^^^^^^ ANN204
81 |         super(TanimotoKernel, self).__init__(**kwargs)
   |
   = help: Add return type annotation: `None`

src\stk_search\Search_algorithm\tanimoto_kernel.py:80:9: D107 Missing docstring in `__init__`
   |
78 |     has_lengthscale = False
79 | 
80 |     def __init__(self, **kwargs):
   |         ^^^^^^^^ D107
81 |         super(TanimotoKernel, self).__init__(**kwargs)
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:80:24: ANN003 Missing type annotation for `**kwargs`
   |
78 |     has_lengthscale = False
79 | 
80 |     def __init__(self, **kwargs):
   |                        ^^^^^^^^ ANN003
81 |         super(TanimotoKernel, self).__init__(**kwargs)
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:81:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
80 |     def __init__(self, **kwargs):
81 |         super(TanimotoKernel, self).__init__(**kwargs)
   |              ^^^^^^^^^^^^^^^^^^^^^^ UP008
82 | 
83 |     def forward(self, x1, x2, diag=False, **params):
   |
   = help: Remove `__super__` parameters

src\stk_search\Search_algorithm\tanimoto_kernel.py:83:9: D102 Missing docstring in public method
   |
81 |         super(TanimotoKernel, self).__init__(**kwargs)
82 | 
83 |     def forward(self, x1, x2, diag=False, **params):
   |         ^^^^^^^ D102
84 |         if diag:
85 |             assert x1.size() == x2.size() and torch.equal(x1, x2)
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:83:31: FBT002 Boolean default positional argument in function definition
   |
81 |         super(TanimotoKernel, self).__init__(**kwargs)
82 | 
83 |     def forward(self, x1, x2, diag=False, **params):
   |                               ^^^^ FBT002
84 |         if diag:
85 |             assert x1.size() == x2.size() and torch.equal(x1, x2)
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:83:43: ANN003 Missing type annotation for `**params`
   |
81 |         super(TanimotoKernel, self).__init__(**kwargs)
82 | 
83 |     def forward(self, x1, x2, diag=False, **params):
   |                                           ^^^^^^^^ ANN003
84 |         if diag:
85 |             assert x1.size() == x2.size() and torch.equal(x1, x2)
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:85:13: S101 Use of `assert` detected
   |
83 |     def forward(self, x1, x2, diag=False, **params):
84 |         if diag:
85 |             assert x1.size() == x2.size() and torch.equal(x1, x2)
   |             ^^^^^^ S101
86 |             return torch.ones(
87 |                 *x1.shape[:-2], x1.shape[-2], dtype=x1.dtype, device=x1.device
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:85:13: PT018 Assertion should be broken down into multiple parts
   |
83 |     def forward(self, x1, x2, diag=False, **params):
84 |         if diag:
85 |             assert x1.size() == x2.size() and torch.equal(x1, x2)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT018
86 |             return torch.ones(
87 |                 *x1.shape[:-2], x1.shape[-2], dtype=x1.dtype, device=x1.device
   |
   = help: Break down assertion into multiple parts

src\stk_search\Search_algorithm\tanimoto_kernel.py:89:9: RET505 Unnecessary `else` after `return` statement
   |
87 |                 *x1.shape[:-2], x1.shape[-2], dtype=x1.dtype, device=x1.device
88 |             )
89 |         else:
   |         ^^^^ RET505
90 |             return self.covar_dist(x1, x2, **params)
   |
   = help: Remove unnecessary `else`

src\stk_search\Search_algorithm\tanimoto_kernel.py:92:9: D417 Missing argument descriptions in the docstring for `covar_dist`: `**params`, `last_dim_is_batch`, `x1`, `x2`
   |
90 |             return self.covar_dist(x1, x2, **params)
91 | 
92 |     def covar_dist(
   |         ^^^^^^^^^^ D417
93 |         self,
94 |         x1,
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:96:9: FBT002 Boolean default positional argument in function definition
   |
94 |         x1,
95 |         x2,
96 |         last_dim_is_batch=False,
   |         ^^^^^^^^^^^^^^^^^ FBT002
97 |         **params,
98 |     ):
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:97:9: ANN003 Missing type annotation for `**params`
   |
95 |         x2,
96 |         last_dim_is_batch=False,
97 |         **params,
   |         ^^^^^^^^ ANN003
98 |     ):
99 |         r"""This is a helper method for computing the bit vector similarity between
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:97:11: ARG002 Unused method argument: `params`
   |
95 |         x2,
96 |         last_dim_is_batch=False,
97 |         **params,
   |           ^^^^^^ ARG002
98 |     ):
99 |         r"""This is a helper method for computing the bit vector similarity between
   |

src\stk_search\Search_algorithm\tanimoto_kernel.py:99:9: D205 1 blank line required between summary line and description
    |
 97 |           **params,
 98 |       ):
 99 |           r"""This is a helper method for computing the bit vector similarity between
    |  _________^
100 | |         all pairs of points in x1 and x2.
101 | | 
102 | |         Args:
103 | |         ----
104 | |             :attr:`x1` (Tensor `n x d` or `b1 x ... x bk x n x d`):
105 | |                 First set of data.
106 | |             :attr:`x2` (Tensor `m x d` or `b1 x ... x bk x m x d`):
107 | |                 Second set of data.
108 | |             :attr:`last_dim_is_batch` (tuple, optional):
109 | |                 Is the last dimension of the data a batch dimension or not?
110 | | 
111 | |         Returns:
112 | |         -------
113 | |             (:class:`Tensor`, :class:`Tensor) corresponding to the distance matrix between `x1` and `x2`.
114 | |             The shape depends on the kernel's mode
115 | |             * `diag=False`
116 | |             * `diag=False` and `last_dim_is_batch=True`: (`b x d x n x n`)
117 | |             * `diag=True`
118 | |             * `diag=True` and `last_dim_is_batch=True`: (`b x d x n`)
119 | | 
120 | |         """
    | |___________^ D205
121 |           if last_dim_is_batch:
122 |               x1 = x1.transpose(-1, -2).unsqueeze(-1)
    |
    = help: Insert single blank line

src\stk_search\Search_algorithm\tanimoto_kernel.py:99:9: D401 First line of docstring should be in imperative mood: "This is a helper method for computing the bit vector similarity between"
    |
 97 |           **params,
 98 |       ):
 99 |           r"""This is a helper method for computing the bit vector similarity between
    |  _________^
100 | |         all pairs of points in x1 and x2.
101 | | 
102 | |         Args:
103 | |         ----
104 | |             :attr:`x1` (Tensor `n x d` or `b1 x ... x bk x n x d`):
105 | |                 First set of data.
106 | |             :attr:`x2` (Tensor `m x d` or `b1 x ... x bk x m x d`):
107 | |                 Second set of data.
108 | |             :attr:`last_dim_is_batch` (tuple, optional):
109 | |                 Is the last dimension of the data a batch dimension or not?
110 | | 
111 | |         Returns:
112 | |         -------
113 | |             (:class:`Tensor`, :class:`Tensor) corresponding to the distance matrix between `x1` and `x2`.
114 | |             The shape depends on the kernel's mode
115 | |             * `diag=False`
116 | |             * `diag=False` and `last_dim_is_batch=True`: (`b x d x n x n`)
117 | |             * `diag=True`
118 | |             * `diag=True` and `last_dim_is_batch=True`: (`b x d x n`)
119 | | 
120 | |         """
    | |___________^ D401
121 |           if last_dim_is_batch:
122 |               x1 = x1.transpose(-1, -2).unsqueeze(-1)
    |

src\stk_search\Search_algorithm\tanimoto_kernel.py:99:9: D404 First word of the docstring should not be "This"
    |
 97 |           **params,
 98 |       ):
 99 |           r"""This is a helper method for computing the bit vector similarity between
    |  _________^
100 | |         all pairs of points in x1 and x2.
101 | | 
102 | |         Args:
103 | |         ----
104 | |             :attr:`x1` (Tensor `n x d` or `b1 x ... x bk x n x d`):
105 | |                 First set of data.
106 | |             :attr:`x2` (Tensor `m x d` or `b1 x ... x bk x m x d`):
107 | |                 Second set of data.
108 | |             :attr:`last_dim_is_batch` (tuple, optional):
109 | |                 Is the last dimension of the data a batch dimension or not?
110 | | 
111 | |         Returns:
112 | |         -------
113 | |             (:class:`Tensor`, :class:`Tensor) corresponding to the distance matrix between `x1` and `x2`.
114 | |             The shape depends on the kernel's mode
115 | |             * `diag=False`
116 | |             * `diag=False` and `last_dim_is_batch=True`: (`b x d x n x n`)
117 | |             * `diag=True`
118 | |             * `diag=True` and `last_dim_is_batch=True`: (`b x d x n`)
119 | | 
120 | |         """
    | |___________^ D404
121 |           if last_dim_is_batch:
122 |               x1 = x1.transpose(-1, -2).unsqueeze(-1)
    |

src\stk_search\SearchedSpace.py:1:1: N999 Invalid module name: 'SearchedSpace'
src\stk_search\SearchedSpace.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """define a class to store the searched space
2 | | this is a sub class of the search space class
3 | | """
  | |___^ D205
4 |   
5 |   from itertools import product
  |
  = help: Insert single blank line

src\stk_search\SearchedSpace.py:1:1: D400 First line should end with a period
  |
1 | / """define a class to store the searched space
2 | | this is a sub class of the search space class
3 | | """
  | |___^ D400
4 |   
5 |   from itertools import product
  |
  = help: Add period

src\stk_search\SearchedSpace.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """define a class to store the searched space
2 | | this is a sub class of the search space class
3 | | """
  | |___^ D415
4 |   
5 |   from itertools import product
  |
  = help: Add closing punctuation

src\stk_search\SearchedSpace.py:16:7: D101 Missing docstring in public class
   |
16 | class SearchedSpace(SearchSpace):
   |       ^^^^^^^^^^^^^ D101
17 |     def plot_hist_compare(self, df_all, df_list, label_list,properties_to_plot=[]):
18 |         fig, ax = plt.subplots(1, len(properties_to_plot), figsize=(15, 10))
   |

src\stk_search\SearchedSpace.py:17:9: D102 Missing docstring in public method
   |
16 | class SearchedSpace(SearchSpace):
17 |     def plot_hist_compare(self, df_all, df_list, label_list,properties_to_plot=[]):
   |         ^^^^^^^^^^^^^^^^^ D102
18 |         fig, ax = plt.subplots(1, len(properties_to_plot), figsize=(15, 10))
19 |         ax = ax.flatten()
   |

src\stk_search\SearchedSpace.py:17:80: B006 Do not use mutable data structures for argument defaults
   |
16 | class SearchedSpace(SearchSpace):
17 |     def plot_hist_compare(self, df_all, df_list, label_list,properties_to_plot=[]):
   |                                                                                ^^ B006
18 |         fig, ax = plt.subplots(1, len(properties_to_plot), figsize=(15, 10))
19 |         ax = ax.flatten()
   |
   = help: Replace with `None`; initialize within function

src\stk_search\SearchedSpace.py:20:13: ANN202 Missing return type annotation for private function `plot_hist`
   |
18 |         fig, ax = plt.subplots(1, len(properties_to_plot), figsize=(15, 10))
19 |         ax = ax.flatten()
20 |         def plot_hist(df, ax, color, label="all data"):
   |             ^^^^^^^^^ ANN202
21 |             for axis_num,property in enumerate(properties_to_plot):
22 |                 df[property].hist(
   |
   = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:21:26: A001 Variable `property` is shadowing a Python builtin
   |
19 |         ax = ax.flatten()
20 |         def plot_hist(df, ax, color, label="all data"):
21 |             for axis_num,property in enumerate(properties_to_plot):
   |                          ^^^^^^^^ A001
22 |                 df[property].hist(
23 |                     ax=ax[axis_num],
   |

src\stk_search\SearchedSpace.py:46:13: A001 Variable `id` is shadowing a Python builtin
   |
44 |             "#457b9d",
45 |         ]
46 |         for id, df in enumerate(df_list):
   |             ^^ A001
47 |             plot_hist(df, ax, color=color_list[id], label=label_list[id])
48 |         for _ax in ax.flatten():
   |

src\stk_search\SearchedSpace.py:49:13: ERA001 Found commented-out code
   |
47 |             plot_hist(df, ax, color=color_list[id], label=label_list[id])
48 |         for _ax in ax.flatten():
49 |             # ax.set_yscale('log')
   |             ^^^^^^^^^^^^^^^^^^^^^^ ERA001
50 |             _ax.grid(False)
51 |             _ax.set_ylabel("Density")
   |
   = help: Remove commented-out code

src\stk_search\SearchedSpace.py:50:22: FBT003 Boolean positional value in function call
   |
48 |         for _ax in ax.flatten():
49 |             # ax.set_yscale('log')
50 |             _ax.grid(False)
   |                      ^^^^^ FBT003
51 |             _ax.set_ylabel("Density")
52 |             _ax.set_yticks([])
   |

src\stk_search\SearchedSpace.py:57:9: D102 Missing docstring in public method
   |
55 |         return fig, ax
56 | 
57 |     def plot_histogram_fragment(
   |         ^^^^^^^^^^^^^^^^^^^^^^^ D102
58 |         self, column_name, df_list, df_total, number_of_fragments, label_list
59 |     ):
   |

src\stk_search\SearchedSpace.py:90:17: A001 Variable `id` is shadowing a Python builtin
   |
88 |                 range=(range_min, range_max),
89 |             )
90 |             for id, df in enumerate(df_list):
   |                 ^^ A001
91 |                 df[f"{column_name}_{i}"].hist(
92 |                     ax=axs[i // 2, i % 2],
   |

src\stk_search\SearchedSpace.py:107:13: ERA001 Found commented-out code
    |
106 |         for ax in axs.flatten():
107 |             # ax.set_yscale('log')
    |             ^^^^^^^^^^^^^^^^^^^^^^ ERA001
108 |             ax.grid(False)
109 |             ax.set_ylabel("Density")
    |
    = help: Remove commented-out code

src\stk_search\SearchedSpace.py:108:21: FBT003 Boolean positional value in function call
    |
106 |         for ax in axs.flatten():
107 |             # ax.set_yscale('log')
108 |             ax.grid(False)
    |                     ^^^^^ FBT003
109 |             ax.set_ylabel("Density")
110 |             ax.set_yticks([])
    |

src\stk_search\SearchedSpace.py:111:13: ERA001 Found commented-out code
    |
109 |             ax.set_ylabel("Density")
110 |             ax.set_yticks([])
111 |             # ax.legend()
    |             ^^^^^^^^^^^^^ ERA001
112 |         plt.tight_layout()
113 |         return fig, axs
    |
    = help: Remove commented-out code

src\stk_search\SearchedSpace.py:115:9: D102 Missing docstring in public method
    |
113 |         return fig, axs
114 | 
115 |     def get_all_possible_syntax(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^ D102
116 |         perm = product(
117 |             list(range(self.number_of_fragments)),
    |

src\stk_search\SearchedSpace.py:128:26: A001 Variable `id` is shadowing a Python builtin
    |
126 |             if i[0] == 0:
127 |                 # check that the element is not higher than its position
128 |                 for pos, id in enumerate(i):
    |                          ^^ A001
129 |                     if id > pos:
130 |                         append = False
    |

src\stk_search\SearchedSpace.py:133:25: ERA001 Found commented-out code
    |
131 |                         break
132 |                     if id != pos and i[id] == id:
133 |                         # print(id,i[id],pos,i[pos])
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
134 |                         append = True
135 |                     elif id == pos:
    |
    = help: Remove commented-out code

src\stk_search\SearchedSpace.py:144:9: N802 Function name `generate_interactive_condition_V2` should be lowercase
    |
142 |         return possible_syntax
143 | 
144 |     def generate_interactive_condition_V2(self, df_total: pd.DataFrame,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
145 |                                           properties_to_plot=[]):
146 |         # function to generate an interactive prompt to select the condition
    |

src\stk_search\SearchedSpace.py:144:9: C901 `generate_interactive_condition_V2` is too complex (20 > 10)
    |
142 |         return possible_syntax
143 | 
144 |     def generate_interactive_condition_V2(self, df_total: pd.DataFrame,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
145 |                                           properties_to_plot=[]):
146 |         # function to generate an interactive prompt to select the condition
    |

src\stk_search\SearchedSpace.py:144:9: PLR0915 Too many statements (118 > 50)
    |
142 |         return possible_syntax
143 | 
144 |     def generate_interactive_condition_V2(self, df_total: pd.DataFrame,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
145 |                                           properties_to_plot=[]):
146 |         # function to generate an interactive prompt to select the condition
    |

src\stk_search\SearchedSpace.py:144:9: D102 Missing docstring in public method
    |
142 |         return possible_syntax
143 | 
144 |     def generate_interactive_condition_V2(self, df_total: pd.DataFrame,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
145 |                                           properties_to_plot=[]):
146 |         # function to generate an interactive prompt to select the condition
    |

src\stk_search\SearchedSpace.py:145:62: B006 Do not use mutable data structures for argument defaults
    |
144 |     def generate_interactive_condition_V2(self, df_total: pd.DataFrame,
145 |                                           properties_to_plot=[]):
    |                                                              ^^ B006
146 |         # function to generate an interactive prompt to select the condition
147 |         # SP is the search space object
    |
    = help: Replace with `None`; initialize within function

src\stk_search\SearchedSpace.py:149:13: ANN202 Missing return type annotation for private function `add_condition`
    |
147 |         # SP is the search space object
148 |         # return the interactive widget
149 |         def add_condition(
    |             ^^^^^^^^^^^^^ ANN202
150 |             columns: str, operation: str, value: str, fragment: int
151 |         ):
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:157:13: ANN202 Missing return type annotation for private function `remove_condition`
    |
155 |             self.add_condition(condition, fragment)
156 | 
157 |         def remove_condition(
    |             ^^^^^^^^^^^^^^^^ ANN202
158 |             columns: str, operation: str, value: str, fragment: int
159 |         ):
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:166:13: ANN202 Missing return type annotation for private function `clear_condition`
    |
164 |             self.remove_condition(condition, fragment)
165 | 
166 |         def clear_condition(fragment: int):
    |             ^^^^^^^^^^^^^^^ ANN202
167 |             self.conditions_list[fragment] = []
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:178:21: C416 Unnecessary `list` comprehension (rewrite using `list()`)
    |
176 |         # Interactive widget for fragment selection
177 |         fragment_dropdown = widgets.Dropdown(
178 |             options=[(i) for i in range(self.number_of_fragments)],
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C416
179 |             description="Fragment:",
180 |         )
    |
    = help: Rewrite using `list()`

src\stk_search\SearchedSpace.py:212:13: ANN202 Missing return type annotation for private function `on_click_add`
    |
210 |         )
211 | 
212 |         def on_click_add(b):
    |             ^^^^^^^^^^^^ ANN202
213 |             add_condition(
214 |                 columns_dropdown.value,
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:212:26: ARG001 Unused function argument: `b`
    |
210 |         )
211 | 
212 |         def on_click_add(b):
    |                          ^ ARG001
213 |             add_condition(
214 |                 columns_dropdown.value,
    |

src\stk_search\SearchedSpace.py:225:13: ANN202 Missing return type annotation for private function `on_click_remove`
    |
223 |                 display_conditions[i].options = self.conditions_list[i]
224 | 
225 |         def on_click_remove(b):
    |             ^^^^^^^^^^^^^^^ ANN202
226 |             remove_condition(
227 |                 columns_dropdown.value,
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:225:29: ARG001 Unused function argument: `b`
    |
223 |                 display_conditions[i].options = self.conditions_list[i]
224 | 
225 |         def on_click_remove(b):
    |                             ^ ARG001
226 |             remove_condition(
227 |                 columns_dropdown.value,
    |

src\stk_search\SearchedSpace.py:232:13: ERA001 Found commented-out code
    |
230 |                 fragment_dropdown.value,
231 |             )
232 |             # self.redefine_search_space()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
233 |             self.get_space_size()
234 |             number_of_elements_text.value = f"{self.space_size:.2e}"
    |
    = help: Remove commented-out code

src\stk_search\SearchedSpace.py:239:13: ANN202 Missing return type annotation for private function `on_click_clear`
    |
237 |                 display_conditions[i].options = self.conditions_list[i]
238 | 
239 |         def on_click_clear(b):
    |             ^^^^^^^^^^^^^^ ANN202
240 |             clear_condition(
241 |                 fragment_dropdown.value,
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:239:28: ARG001 Unused function argument: `b`
    |
237 |                 display_conditions[i].options = self.conditions_list[i]
238 | 
239 |         def on_click_clear(b):
    |                            ^ ARG001
240 |             clear_condition(
241 |                 fragment_dropdown.value,
    |

src\stk_search\SearchedSpace.py:256:13: ANN202 Missing return type annotation for private function `on_click_add_to_all_fragment`
    |
254 |         )
255 | 
256 |         def on_click_add_to_all_fragment(b):
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
257 |             for i in range(self.number_of_fragments):
258 |                 add_condition(
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:256:42: ARG001 Unused function argument: `b`
    |
254 |         )
255 | 
256 |         def on_click_add_to_all_fragment(b):
    |                                          ^ ARG001
257 |             for i in range(self.number_of_fragments):
258 |                 add_condition(
    |

src\stk_search\SearchedSpace.py:267:21: PLW2901 Outer `for` loop variable `i` overwritten by inner `for` loop target
    |
265 |                 number_of_elements_text.value = f"{self.space_size:.2e}"
266 | 
267 |                 for i in range(self.number_of_fragments):
    |                     ^ PLW2901
268 |                     display_conditions[i].options = self.conditions_list[i]
    |

src\stk_search\SearchedSpace.py:275:9: N806 Variable `Vb` in function should be lowercase
    |
273 |             display="flex", flex_flow="row", align_items="flex-start"
274 |         )
275 |         Vb = VBox(
    |         ^^ N806
276 |             [
277 |                 columns_dropdown,
    |

src\stk_search\SearchedSpace.py:316:9: N806 Variable `top5_All_text` in function should be lowercase
    |
314 |             df_total["target"].nlargest(n=top5_percent_length).min()
315 |         )
316 |         top5_All_text = widgets.Text(
    |         ^^^^^^^^^^^^^ N806
317 |             value=str(min_target_5percent),
318 |             description="min target to be anong the 5% highest:",
    |

src\stk_search\SearchedSpace.py:329:13: ANN202 Missing return type annotation for private function `on_click_syntax`
    |
327 |         )
328 | 
329 |         def on_click_syntax(b):
    |             ^^^^^^^^^^^^^^^ ANN202
330 |             self.syntax = syntax_dropdown.value
331 |             self.get_space_size()
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:329:29: ARG001 Unused function argument: `b`
    |
327 |         )
328 | 
329 |         def on_click_syntax(b):
    |                             ^ ARG001
330 |             self.syntax = syntax_dropdown.value
331 |             self.get_space_size()
    |

src\stk_search\SearchedSpace.py:336:13: ERA001 Found commented-out code
    |
334 |             for i in range(self.number_of_fragments):
335 |                 display_conditions[i].options = self.conditions_list[i]
336 |             # number_of_elements_text.value = "{:.2e}".format(self.space_size)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
337 | 
338 |         syntax_button.on_click(on_click_syntax)
    |
    = help: Remove commented-out code

src\stk_search\SearchedSpace.py:339:9: N806 Variable `Vb` in function should be lowercase
    |
338 |         syntax_button.on_click(on_click_syntax)
339 |         Vb = VBox(
    |         ^^ N806
340 |             [
341 |                 syntax_dropdown,
    |

src\stk_search\SearchedSpace.py:361:9: N806 Variable `Vb` in function should be lowercase
    |
359 |             display_conditions[i].disabled = True
360 |         # change display of list in to a table
361 |         Vb = VBox(
    |         ^^ N806
362 |             display_conditions,
363 |             layout=vbox_layout,
    |

src\stk_search\SearchedSpace.py:381:13: ANN202 Missing return type annotation for private function `add_to_hist_compare`
    |
379 |         ]
380 | 
381 |         def add_to_hist_compare(b):
    |             ^^^^^^^^^^^^^^^^^^^ ANN202
382 |             # self.redefine_search_space()
383 |             self.list_fragment = self.generate_list_fragment(
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:381:33: ARG001 Unused function argument: `b`
    |
379 |         ]
380 | 
381 |         def add_to_hist_compare(b):
    |                                 ^ ARG001
382 |             # self.redefine_search_space()
383 |             self.list_fragment = self.generate_list_fragment(
    |

src\stk_search\SearchedSpace.py:382:13: ERA001 Found commented-out code
    |
381 |         def add_to_hist_compare(b):
382 |             # self.redefine_search_space()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
383 |             self.list_fragment = self.generate_list_fragment(
384 |                 self.generation_type
    |
    = help: Remove commented-out code

src\stk_search\SearchedSpace.py:387:13: T201 `print` found
    |
385 |             )
386 |             self.get_space_size()
387 |             print("space size ", self.space_size)
    |             ^^^^^ T201
388 |             number_of_elements_text.value = f"{self.space_size:.2e}"
389 |             df_list.append(
    |
    = help: Remove `print`

src\stk_search\SearchedSpace.py:405:13: T201 `print` found
    |
403 |                 top5_current_text.value = "no data"
404 |             number_of_element_evaluated.value = f"{df_list[-1].shape[0]:.2e}"
405 |             print(len(df_list))
    |             ^^^^^ T201
406 |             widge_plot.kwargs["df_list"] = df_list
407 |             widge_plot.kwargs["label_list"] = label_list
    |
    = help: Remove `print`

src\stk_search\SearchedSpace.py:414:13: T201 `print` found
    |
412 |             hist_widget_plot.update()
413 |             # save the search space properties in a table
414 |             print(self.conditions_list)
    |             ^^^^^ T201
415 |             conditions = [x.copy() for x in self.conditions_list]
416 |             search_space_properties.append(
    |
    = help: Remove `print`

src\stk_search\SearchedSpace.py:425:13: T201 `print` found
    |
423 |                 }
424 |             )
425 |             print(search_space_properties)
    |             ^^^^^ T201
426 | 
427 |         def save_data(b):
    |
    = help: Remove `print`

src\stk_search\SearchedSpace.py:427:13: ANN202 Missing return type annotation for private function `save_data`
    |
425 |             print(search_space_properties)
426 | 
427 |         def save_data(b):
    |             ^^^^^^^^^ ANN202
428 |             import os
    |
    = help: Add return type annotation: `None`

src\stk_search\SearchedSpace.py:427:23: ARG001 Unused function argument: `b`
    |
425 |             print(search_space_properties)
426 | 
427 |         def save_data(b):
    |                       ^ ARG001
428 |             import os
    |

src\stk_search\SearchedSpace.py:431:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
430 |             path_to_save = "data/search_space_properties.pkl"
431 |             if os.path.exists(path_to_save):
    |                ^^^^^^^^^^^^^^ PTH110
432 |                 df_search_space_properties = pd.read_pickle(path_to_save)
433 |                 df_search_space_properties_2 = pd.DataFrame.from_dict(
    |

src\stk_search\SearchedSpace.py:432:46: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
430 |             path_to_save = "data/search_space_properties.pkl"
431 |             if os.path.exists(path_to_save):
432 |                 df_search_space_properties = pd.read_pickle(path_to_save)
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
433 |                 df_search_space_properties_2 = pd.DataFrame.from_dict(
434 |                     search_space_properties
    |

src\stk_search\SearchedSpace.py:442:66: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
440 |                     ]
441 |                 )
442 |                 df_search_space_properties.reset_index(drop=True,inplace=True)
    |                                                                  ^^^^^^^^^^^^ PD002
443 |             else:
444 |                 df_search_space_properties = pd.DataFrame.from_dict(
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\__init__.py:4:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
  |
3 | if sys.version_info[:2] >= (3, 8):
4 |     # TODO: Import directly (no need for conditional) when `python_requires = >= 3.8`
  |       ^^^^ TD002
5 |     from importlib.metadata import (
6 |         PackageNotFoundError,
  |

src\stk_search\__init__.py:4:7: TD003 Missing issue link on the line following this TODO
  |
3 | if sys.version_info[:2] >= (3, 8):
4 |     # TODO: Import directly (no need for conditional) when `python_requires = >= 3.8`
  |       ^^^^ TD003
5 |     from importlib.metadata import (
6 |         PackageNotFoundError,
  |

src\stk_search\__init__.py:4:7: FIX002 Line contains TODO, consider resolving the issue
  |
3 | if sys.version_info[:2] >= (3, 8):
4 |     # TODO: Import directly (no need for conditional) when `python_requires = >= 3.8`
  |       ^^^^ FIX002
5 |     from importlib.metadata import (
6 |         PackageNotFoundError,
  |

src\stk_search\geom3d\dataloader.py:1:1: INP001 File `src\stk_search\geom3d\dataloader.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\dataloader.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """script with the data loading functions
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D205
5 |   
6 |   import os
  |
  = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:1:1: D400 First line should end with a period
  |
1 | / """script with the data loading functions
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D400
5 |   
6 |   import os
  |
  = help: Add period

src\stk_search\geom3d\dataloader.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """script with the data loading functions
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D415
5 |   
6 |   import os
  |
  = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:20:5: D205 1 blank line required between summary line and description
   |
19 |   def load_data_df(config, df_oligomer, dataset_name="train"):
20 |       """Load the data from the dataframe and the database
   |  _____^
21 | |     Args:
22 | |         config: dict
23 | |             configuration file
24 | |         df_oligomer: pd.DataFrame
25 | |             dataframe of the oligomer dataset
26 | |         dataset_name: name added to the dataset
27 | |             dataframe of the precursors
28 | |     Returns:
29 | |         dataset: list
30 | |             list of the dataset
31 | | 
32 | |     to do: add the option to load the dataset from a global dataset file
33 | |     """
   | |_______^ D205
34 |       if f"dataset_path_{dataset_name}" in config.keys():
35 |           if os.path.exists(config[f"dataset_path_{dataset_name}"]):
   |
   = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:20:5: D400 First line should end with a period
   |
19 |   def load_data_df(config, df_oligomer, dataset_name="train"):
20 |       """Load the data from the dataframe and the database
   |  _____^
21 | |     Args:
22 | |         config: dict
23 | |             configuration file
24 | |         df_oligomer: pd.DataFrame
25 | |             dataframe of the oligomer dataset
26 | |         dataset_name: name added to the dataset
27 | |             dataframe of the precursors
28 | |     Returns:
29 | |         dataset: list
30 | |             list of the dataset
31 | | 
32 | |     to do: add the option to load the dataset from a global dataset file
33 | |     """
   | |_______^ D400
34 |       if f"dataset_path_{dataset_name}" in config.keys():
35 |           if os.path.exists(config[f"dataset_path_{dataset_name}"]):
   |
   = help: Add period

src\stk_search\geom3d\dataloader.py:20:5: D415 First line should end with a period, question mark, or exclamation point
   |
19 |   def load_data_df(config, df_oligomer, dataset_name="train"):
20 |       """Load the data from the dataframe and the database
   |  _____^
21 | |     Args:
22 | |         config: dict
23 | |             configuration file
24 | |         df_oligomer: pd.DataFrame
25 | |             dataframe of the oligomer dataset
26 | |         dataset_name: name added to the dataset
27 | |             dataframe of the precursors
28 | |     Returns:
29 | |         dataset: list
30 | |             list of the dataset
31 | | 
32 | |     to do: add the option to load the dataset from a global dataset file
33 | |     """
   | |_______^ D415
34 |       if f"dataset_path_{dataset_name}" in config.keys():
35 |           if os.path.exists(config[f"dataset_path_{dataset_name}"]):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:34:8: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
32 |     to do: add the option to load the dataset from a global dataset file
33 |     """
34 |     if f"dataset_path_{dataset_name}" in config.keys():
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
35 |         if os.path.exists(config[f"dataset_path_{dataset_name}"]):
36 |             if "device" in config.keys():
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\dataloader.py:35:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
33 |     """
34 |     if f"dataset_path_{dataset_name}" in config.keys():
35 |         if os.path.exists(config[f"dataset_path_{dataset_name}"]):
   |            ^^^^^^^^^^^^^^ PTH110
36 |             if "device" in config.keys():
37 |                 dataset = torch.load(
   |

src\stk_search\geom3d\dataloader.py:36:16: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
34 |     if f"dataset_path_{dataset_name}" in config.keys():
35 |         if os.path.exists(config[f"dataset_path_{dataset_name}"]):
36 |             if "device" in config.keys():
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
37 |                 dataset = torch.load(
38 |                     config["dataset_path"], map_location=config["device"]
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\dataloader.py:43:9: RET505 Unnecessary `else` after `return` statement
   |
41 |                 dataset = torch.load(config["dataset_path"])
42 |             return dataset
43 |         else:
   |         ^^^^ RET505
44 |             print("dataset not found")
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\dataloader.py:44:13: T201 `print` found
   |
42 |             return dataset
43 |         else:
44 |             print("dataset not found")
   |             ^^^^^ T201
45 | 
46 |     client = pymongo.MongoClient(config["pymongo_client"])
   |
   = help: Remove `print`

src\stk_search\geom3d\dataloader.py:51:14: SIM401 Use `config["model"].get("cutoff", 0.1)` instead of an `if` block
   |
49 |         database=config["database_name"],
50 |     )
51 |     radius = config["model"]["cutoff"] if "cutoff" in config["model"] else 0.1
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM401
52 |     dataset = generate_dataset(
53 |         df_oligomer,
   |
   = help: Replace with `config["model"].get("cutoff", 0.1)`

src\stk_search\geom3d\dataloader.py:60:5: T201 `print` found
   |
58 |     )
59 | 
60 |     print(f"length of dataset: {len(dataset)}")
   |     ^^^^^ T201
61 | 
62 |     # where the new dataset daves
   |
   = help: Remove `print`

src\stk_search\geom3d\dataloader.py:65:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
63 |     if config["save_dataset"]:
64 |         name = config["name"]
65 |         os.makedirs(name, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
66 |         torch.save(dataset, "training/" + name + f"/{len(dataset)}dataset.pt")
67 |         print(f"dataset saved to {name}/{len(dataset)}dataset.pt")
   |

src\stk_search\geom3d\dataloader.py:67:9: T201 `print` found
   |
65 |         os.makedirs(name, exist_ok=True)
66 |         torch.save(dataset, "training/" + name + f"/{len(dataset)}dataset.pt")
67 |         print(f"dataset saved to {name}/{len(dataset)}dataset.pt")
   |         ^^^^^ T201
68 |     return dataset
   |
   = help: Remove `print`

src\stk_search\geom3d\dataloader.py:71:5: PLR0913 Too many arguments in function definition (6 > 5)
   |
71 | def generate_dataset(
   |     ^^^^^^^^^^^^^^^^ PLR0913
72 |     df_total,
73 |     db,
   |

src\stk_search\geom3d\dataloader.py:71:5: D417 Missing argument descriptions in the docstring for `generate_dataset`: `db`, `model_name`, `number_of_molecules`, `radius`, `target_name`
   |
71 | def generate_dataset(
   |     ^^^^^^^^^^^^^^^^ D417
72 |     df_total,
73 |     db,
   |

src\stk_search\geom3d\dataloader.py:79:5: D400 First line should end with a period
   |
77 |       target_name="target",
78 |   ):
79 |       """Generate the dataset from the dataframe and the database
   |  _____^
80 | | 
81 | |     Args:
82 | |     ----
83 | |         df_total: pd.DataFrame
84 | |             dataframe of the oligomer dataset
85 | |         db: stk.ConstructedMoleculeMongoDb
86 | |             database of the molecules
87 | |         number_of_molecules: int
88 | |             number of molecules to generate
89 | |     Returns:
90 | |         data_list: list
91 | |             list of the dataset
92 | | 
93 | |     """
   | |_______^ D400
94 |       if number_of_molecules > len(df_total):
95 |           number_of_molecules = len(df_total)
   |
   = help: Add period

src\stk_search\geom3d\dataloader.py:79:5: D415 First line should end with a period, question mark, or exclamation point
   |
77 |       target_name="target",
78 |   ):
79 |       """Generate the dataset from the dataframe and the database
   |  _____^
80 | | 
81 | |     Args:
82 | |     ----
83 | |         df_total: pd.DataFrame
84 | |             dataframe of the oligomer dataset
85 | |         db: stk.ConstructedMoleculeMongoDb
86 | |             database of the molecules
87 | |         number_of_molecules: int
88 | |             number of molecules to generate
89 | |     Returns:
90 | |         data_list: list
91 | |             list of the dataset
92 | | 
93 | |     """
   | |_______^ D415
94 |       if number_of_molecules > len(df_total):
95 |           number_of_molecules = len(df_total)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:96:9: T201 `print` found
   |
94 |     if number_of_molecules > len(df_total):
95 |         number_of_molecules = len(df_total)
96 |         print(
   |         ^^^^^ T201
97 |             "Number of molecules is greater than the number of molecules in the dataset",
98 |             number_of_molecules,
   |
   = help: Remove `print`

src\stk_search\geom3d\dataloader.py:101:22: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
 99 |             len(df_total),
100 |         )
101 |     molecule_index = np.random.choice(
    |                      ^^^^^^^^^^^^^^^^ NPY002
102 |         len(df_total), number_of_molecules, replace=False
103 |     )
    |

src\stk_search\geom3d\dataloader.py:106:9: ERA001 Found commented-out code
    |
104 |     data_list = []
105 |     for i in molecule_index:
106 |         # try:
    |         ^^^^^^ ERA001
107 |         #     molecule = load_molecule(
108 |         #         df_total["InChIKey"][i], df_total["target"][i], db
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:107:9: ERA001 Found commented-out code
    |
105 |     for i in molecule_index:
106 |         # try:
107 |         #     molecule = load_molecule(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
108 |         #         df_total["InChIKey"][i], df_total["target"][i], db
109 |         #     )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:108:9: ERA001 Found commented-out code
    |
106 |         # try:
107 |         #     molecule = load_molecule(
108 |         #         df_total["InChIKey"][i], df_total["target"][i], db
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
109 |         #     )
110 |         #     data_list.append(molecule)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:109:9: ERA001 Found commented-out code
    |
107 |         #     molecule = load_molecule(
108 |         #         df_total["InChIKey"][i], df_total["target"][i], db
109 |         #     )
    |         ^^^^^^^ ERA001
110 |         #     data_list.append(molecule)
111 |         # except KeyError:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:110:9: ERA001 Found commented-out code
    |
108 |         #         df_total["InChIKey"][i], df_total["target"][i], db
109 |         #     )
110 |         #     data_list.append(molecule)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
111 |         # except KeyError:
112 |         #     print(f"No key found in the database for molecule at index {i}")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:111:9: ERA001 Found commented-out code
    |
109 |         #     )
110 |         #     data_list.append(molecule)
111 |         # except KeyError:
    |         ^^^^^^^^^^^^^^^^^^ ERA001
112 |         #     print(f"No key found in the database for molecule at index {i}")
113 |         molecule = load_molecule(
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:112:9: ERA001 Found commented-out code
    |
110 |         #     data_list.append(molecule)
111 |         # except KeyError:
112 |         #     print(f"No key found in the database for molecule at index {i}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
113 |         molecule = load_molecule(
114 |             df_total["InChIKey"].iloc[i], df_total[target_name].iloc[i], db
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:128:5: D417 Missing argument descriptions in the docstring for `load_molecule`: `InChIKey`, `db`, `target`
    |
128 | def load_molecule(InChIKey, target, db):
    |     ^^^^^^^^^^^^^ D417
129 |     """Load a molecule from the database
    |

src\stk_search\geom3d\dataloader.py:128:19: N803 Argument name `InChIKey` should be lowercase
    |
128 | def load_molecule(InChIKey, target, db):
    |                   ^^^^^^^^ N803
129 |     """Load a molecule from the database
    |

src\stk_search\geom3d\dataloader.py:129:5: D400 First line should end with a period
    |
128 |   def load_molecule(InChIKey, target, db):
129 |       """Load a molecule from the database
    |  _____^
130 | | 
131 | |     Args:
132 | |     ----
133 | |     - InChIKey (str): the InChIKey of the molecule
134 | |     - target (float): the target value of the molecule
135 | |     - db (stk.ConstructedMoleculeMongoDb): the database
136 | | 
137 | |     Returns:
138 | |     -------
139 | |     - molecule (Data): the molecule as a Data object
140 | | 
141 | |     """
    | |_______^ D400
142 |       polymer = None
143 |       try:
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:129:5: D415 First line should end with a period, question mark, or exclamation point
    |
128 |   def load_molecule(InChIKey, target, db):
129 |       """Load a molecule from the database
    |  _____^
130 | | 
131 | |     Args:
132 | |     ----
133 | |     - InChIKey (str): the InChIKey of the molecule
134 | |     - target (float): the target value of the molecule
135 | |     - db (stk.ConstructedMoleculeMongoDb): the database
136 | | 
137 | |     Returns:
138 | |     -------
139 | |     - molecule (Data): the molecule as a Data object
140 | | 
141 | |     """
    | |_______^ D415
142 |       polymer = None
143 |       try:
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:146:9: ERA001 Found commented-out code
    |
144 |         polymer = db.get({"InChIKey": InChIKey})
145 |         # Print the complete dictionary returned from the database
146 |         # print("Database entry for InChIKey:", polymer)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
147 |     except KeyError:
148 |         print(f"No key found in the database with a key of: {InChIKey}")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:148:9: T201 `print` found
    |
146 |         # print("Database entry for InChIKey:", polymer)
147 |     except KeyError:
148 |         print(f"No key found in the database with a key of: {InChIKey}")
    |         ^^^^^ T201
149 |         # Handle the missing key case (e.g., return a default value or raise an exception)
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:155:22: C411 Unnecessary `list` call (remove the outer call to `list()`)
    |
153 |           positions = np.vstack(dat_list)
154 |           positions = torch.tensor(positions, dtype=torch.float)
155 |           atom_types = list(
    |  ______________________^
156 | |             [
157 | |                 atom.get_atom().get_atomic_number()
158 | |                 for atom in polymer.get_atom_infos()
159 | |             ]
160 | |         )
    | |_________^ C411
161 |           atom_types = torch.tensor(atom_types, dtype=torch.long)
162 |           y = torch.tensor(target, dtype=torch.float32)
    |
    = help: Remove outer `list` call

src\stk_search\geom3d\dataloader.py:167:16: RET504 Unnecessary assignment to `molecule` before `return` statement
    |
165 |             x=atom_types, positions=positions, y=y, InChIKey=InChIKey,
166 |         )
167 |         return molecule
    |                ^^^^^^^^ RET504
168 |     else:
169 |         return None
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\dataloader.py:168:5: RET505 Unnecessary `else` after `return` statement
    |
166 |         )
167 |         return molecule
168 |     else:
    |     ^^^^ RET505
169 |         return None
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\dataloader.py:173:5: D205 1 blank line required between summary line and description
    |
172 |   def load_frag_dataset_from_file(config, dataset_name="train"):
173 |       """Load the fragment dataset from the file
    |  _____^
174 | |     Args:
175 | |         config: dict
176 | |             configuration file
177 | |     Returns:
178 | |         dataset: list
179 | |             list of the dataset
180 | |     """
    | |_______^ D205
181 |       print(
182 |           f"loading dataset from {config[f'frag_dataset_path_{dataset_name}']}"
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:173:5: D400 First line should end with a period
    |
172 |   def load_frag_dataset_from_file(config, dataset_name="train"):
173 |       """Load the fragment dataset from the file
    |  _____^
174 | |     Args:
175 | |         config: dict
176 | |             configuration file
177 | |     Returns:
178 | |         dataset: list
179 | |             list of the dataset
180 | |     """
    | |_______^ D400
181 |       print(
182 |           f"loading dataset from {config[f'frag_dataset_path_{dataset_name}']}"
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:173:5: D415 First line should end with a period, question mark, or exclamation point
    |
172 |   def load_frag_dataset_from_file(config, dataset_name="train"):
173 |       """Load the fragment dataset from the file
    |  _____^
174 | |     Args:
175 | |         config: dict
176 | |             configuration file
177 | |     Returns:
178 | |         dataset: list
179 | |             list of the dataset
180 | |     """
    | |_______^ D415
181 |       print(
182 |           f"loading dataset from {config[f'frag_dataset_path_{dataset_name}']}"
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:181:5: T201 `print` found
    |
179 |             list of the dataset
180 |     """
181 |     print(
    |     ^^^^^ T201
182 |         f"loading dataset from {config[f'frag_dataset_path_{dataset_name}']}"
183 |     )
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:184:8: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
182 |         f"loading dataset from {config[f'frag_dataset_path_{dataset_name}']}"
183 |     )
184 |     if "device" in config.keys():
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
185 |         dataset = torch.load(
186 |             config[f"frag_dataset_path_{dataset_name}"],
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\dataloader.py:195:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
193 |         )
194 | 
195 |     if os.path.exists(config["model_embedding_chkpt"]):
    |        ^^^^^^^^^^^^^^ PTH110
196 |         chkpt_path = config["model_embedding_chkpt"]
197 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
    |

src\stk_search\geom3d\dataloader.py:199:9: T201 `print` found
    |
197 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
198 |         model, graph_pred_linear = model_setup(config)
199 |         print("Model loaded: ", config["model_name"])
    |         ^^^^^ T201
200 |         # Pass the model and graph_pred_linear to the Pymodel constructor
201 |         pymodel = Pymodel(model, graph_pred_linear, config)
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:208:5: RET505 Unnecessary `else` after `return` statement
    |
207 |         return dataset, pymodel
208 |     else:
    |     ^^^^ RET505
209 |         print("model not found and ")
210 |         return None, None
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\dataloader.py:209:9: T201 `print` found
    |
207 |         return dataset, pymodel
208 |     else:
209 |         print("model not found and ")
    |         ^^^^^ T201
210 |         return None, None
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:216:5: D205 1 blank line required between summary line and description
    |
214 |       config, df_total=None, dataset_opt=None, dataset_name="train"
215 |   ):
216 |       """Load the fragment dataset from the dataframe or the database
    |  _____^
217 | |     Args:
218 | |         config: dict
219 | |             configuration file
220 | |         df_total: pd.DataFrame
221 | |             dataframe of the oligomer dataset
222 | |         dataset_opt: list
223 | |             list of the dataset
224 | |     Returns:
225 | |         dataset: list
226 | |             list of the dataset
227 | |         pymodel: Pymodel
228 | |     the model
229 | |     """
    | |_______^ D205
230 |       if "frag_dataset_path_" + dataset_name in config.keys():
231 |           if os.path.exists(config["frag_dataset_path_" + dataset_name]):
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:216:5: D400 First line should end with a period
    |
214 |       config, df_total=None, dataset_opt=None, dataset_name="train"
215 |   ):
216 |       """Load the fragment dataset from the dataframe or the database
    |  _____^
217 | |     Args:
218 | |         config: dict
219 | |             configuration file
220 | |         df_total: pd.DataFrame
221 | |             dataframe of the oligomer dataset
222 | |         dataset_opt: list
223 | |             list of the dataset
224 | |     Returns:
225 | |         dataset: list
226 | |             list of the dataset
227 | |         pymodel: Pymodel
228 | |     the model
229 | |     """
    | |_______^ D400
230 |       if "frag_dataset_path_" + dataset_name in config.keys():
231 |           if os.path.exists(config["frag_dataset_path_" + dataset_name]):
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:216:5: D415 First line should end with a period, question mark, or exclamation point
    |
214 |       config, df_total=None, dataset_opt=None, dataset_name="train"
215 |   ):
216 |       """Load the fragment dataset from the dataframe or the database
    |  _____^
217 | |     Args:
218 | |         config: dict
219 | |             configuration file
220 | |         df_total: pd.DataFrame
221 | |             dataframe of the oligomer dataset
222 | |         dataset_opt: list
223 | |             list of the dataset
224 | |     Returns:
225 | |         dataset: list
226 | |             list of the dataset
227 | |         pymodel: Pymodel
228 | |     the model
229 | |     """
    | |_______^ D415
230 |       if "frag_dataset_path_" + dataset_name in config.keys():
231 |           if os.path.exists(config["frag_dataset_path_" + dataset_name]):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:230:8: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
228 |     the model
229 |     """
230 |     if "frag_dataset_path_" + dataset_name in config.keys():
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
231 |         if os.path.exists(config["frag_dataset_path_" + dataset_name]):
232 |             dataset, model = load_frag_dataset_from_file(config, dataset_name)
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\dataloader.py:231:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
229 |     """
230 |     if "frag_dataset_path_" + dataset_name in config.keys():
231 |         if os.path.exists(config["frag_dataset_path_" + dataset_name]):
    |            ^^^^^^^^^^^^^^ PTH110
232 |             dataset, model = load_frag_dataset_from_file(config, dataset_name)
233 |             return dataset, model
    |

src\stk_search\geom3d\dataloader.py:234:9: RET505 Unnecessary `else` after `return` statement
    |
232 |             dataset, model = load_frag_dataset_from_file(config, dataset_name)
233 |             return dataset, model
234 |         else:
    |         ^^^^ RET505
235 |             print("dataset frag not found")
236 |     if os.path.exists(config["dataset_path"]):
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\dataloader.py:235:13: T201 `print` found
    |
233 |             return dataset, model
234 |         else:
235 |             print("dataset frag not found")
    |             ^^^^^ T201
236 |     if os.path.exists(config["dataset_path"]):
237 |         if "device" in config.keys():
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:236:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
234 |         else:
235 |             print("dataset frag not found")
236 |     if os.path.exists(config["dataset_path"]):
    |        ^^^^^^^^^^^^^^ PTH110
237 |         if "device" in config.keys():
238 |             dataset_opt = torch.load(
    |

src\stk_search\geom3d\dataloader.py:237:12: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
235 |             print("dataset frag not found")
236 |     if os.path.exists(config["dataset_path"]):
237 |         if "device" in config.keys():
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
238 |             dataset_opt = torch.load(
239 |                 config["dataset_path"], map_location=config["device"]
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\dataloader.py:244:9: T201 `print` found
    |
242 |             dataset_opt = torch.load(config["dataset_path"])
243 |     else:
244 |         print("opt dataset not found")
    |         ^^^^^ T201
245 | 
246 |     if dataset_opt is None:
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:247:9: T201 `print` found
    |
246 |     if dataset_opt is None:
247 |         print("loading dataset from dataframe")
    |         ^^^^^ T201
248 |         generate_function = generate_dataset_frag_pd
249 |     else:
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:250:9: T201 `print` found
    |
248 |         generate_function = generate_dataset_frag_pd
249 |     else:
250 |         print("loading dataset from org dataset")
    |         ^^^^^ T201
251 |         generate_function = generate_dataset_frag_dataset
252 |         df_total = dataset_opt
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:259:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
257 |     )
258 |     # check if model is in the path
259 |     if os.path.exists(config["model_embedding_chkpt"]):
    |        ^^^^^^^^^^^^^^ PTH110
260 |         chkpt_path = config["model_embedding_chkpt"]
261 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
    |

src\stk_search\geom3d\dataloader.py:263:9: T201 `print` found
    |
261 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
262 |         model, graph_pred_linear = model_setup(config)
263 |         print("Model loaded: ", config["model_name"])
    |         ^^^^^ T201
264 |         # Pass the model and graph_pred_linear to the Pymodel constructor
265 |         pymodel = Pymodel(model, graph_pred_linear, config)
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:268:9: ERA001 Found commented-out code
    |
266 |         # Load the state dictionary
267 |         pymodel.load_state_dict(state_dict=checkpoint["state_dict"])
268 |         #pymodel.load_state_dict(state_dict=checkpoint["state_dict"])
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
269 |         pymodel.to(config["device"])
270 |         model = pymodel.molecule_3D_repr
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:272:9: T201 `print` found
    |
270 |         model = pymodel.molecule_3D_repr
271 |     else:
272 |         print("model not found")
    |         ^^^^^ T201
273 |         model, graph_pred_linear = model_setup(config)
274 |         # Pass the model and graph_pred_linear to the Pymodel constructor
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:288:5: ERA001 Found commented-out code
    |
286 |     )
287 |     # if config["save_dataset_frag"]:
288 |     #   name = config["name"] + "/transformer"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
289 |     #  os.makedirs(name, exist_ok=True)
290 |     # torch.save(dataset, name + "/dataset_frag.pt")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:289:5: ERA001 Found commented-out code
    |
287 |     # if config["save_dataset_frag"]:
288 |     #   name = config["name"] + "/transformer"
289 |     #  os.makedirs(name, exist_ok=True)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
290 |     # torch.save(dataset, name + "/dataset_frag.pt")
291 |     return dataset, pymodel
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:290:5: ERA001 Found commented-out code
    |
288 |     #   name = config["name"] + "/transformer"
289 |     #  os.makedirs(name, exist_ok=True)
290 |     # torch.save(dataset, name + "/dataset_frag.pt")
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
291 |     return dataset, pymodel
    |
    = help: Remove commented-out code

src\stk_search\geom3d\dataloader.py:294:5: PLR0913 Too many arguments in function definition (7 > 5)
    |
294 | def generate_dataset_frag_pd(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
295 |     df_total,
296 |     model,
    |

src\stk_search\geom3d\dataloader.py:303:5: D205 1 blank line required between summary line and description
    |
301 |       config=None,
302 |   ):
303 |       """Generate the fragment dataset from the dataframe
    |  _____^
304 | |     Args:
305 | |         df_total: pd.DataFrame
306 | |             dataframe of the oligomer dataset
307 | |         model: 3d rpr model
308 | |             torch model
309 | |         db: stk.ConstructedMoleculeMongoDb
310 | |             database of the molecules
311 | |         number_of_molecules: int
312 | |             number of molecules to generate
313 | |         number_of_fragement: int
314 | |             number of fragment
315 | |         device: str
316 | |             device to use
317 | |     Returns:
318 | |         data_list: list
319 | |             list of the dataset
320 | |     """
    | |_______^ D205
321 |       if number_of_molecules > len(df_total):
322 |           number_of_molecules = len(df_total)
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:303:5: D400 First line should end with a period
    |
301 |       config=None,
302 |   ):
303 |       """Generate the fragment dataset from the dataframe
    |  _____^
304 | |     Args:
305 | |         df_total: pd.DataFrame
306 | |             dataframe of the oligomer dataset
307 | |         model: 3d rpr model
308 | |             torch model
309 | |         db: stk.ConstructedMoleculeMongoDb
310 | |             database of the molecules
311 | |         number_of_molecules: int
312 | |             number of molecules to generate
313 | |         number_of_fragement: int
314 | |             number of fragment
315 | |         device: str
316 | |             device to use
317 | |     Returns:
318 | |         data_list: list
319 | |             list of the dataset
320 | |     """
    | |_______^ D400
321 |       if number_of_molecules > len(df_total):
322 |           number_of_molecules = len(df_total)
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:303:5: D415 First line should end with a period, question mark, or exclamation point
    |
301 |       config=None,
302 |   ):
303 |       """Generate the fragment dataset from the dataframe
    |  _____^
304 | |     Args:
305 | |         df_total: pd.DataFrame
306 | |             dataframe of the oligomer dataset
307 | |         model: 3d rpr model
308 | |             torch model
309 | |         db: stk.ConstructedMoleculeMongoDb
310 | |             database of the molecules
311 | |         number_of_molecules: int
312 | |             number of molecules to generate
313 | |         number_of_fragement: int
314 | |             number of fragment
315 | |         device: str
316 | |             device to use
317 | |     Returns:
318 | |         data_list: list
319 | |             list of the dataset
320 | |     """
    | |_______^ D415
321 |       if number_of_molecules > len(df_total):
322 |           number_of_molecules = len(df_total)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:323:9: T201 `print` found
    |
321 |     if number_of_molecules > len(df_total):
322 |         number_of_molecules = len(df_total)
323 |         print(
    |         ^^^^^ T201
324 |             "Number of molecules is greater than the number of molecules in the dataset",
325 |             number_of_molecules,
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:329:22: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
327 |         )
328 | 
329 |     molecule_index = np.random.choice(
    |                      ^^^^^^^^^^^^^^^^ NPY002
330 |         len(df_total), number_of_molecules, replace=False
331 |     )
    |

src\stk_search\geom3d\dataloader.py:333:14: SIM401 Use `config["model"].get("cutoff", 0.1)` instead of an `if` block
    |
331 |     )
332 |     data_list = []
333 |     radius = config["model"]["cutoff"] if "cutoff" in config["model"] else 0.1
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM401
334 |     for i in molecule_index:
335 |         moldata = fragment_based_encoding(
    |
    = help: Replace with `config["model"].get("cutoff", 0.1)`

src\stk_search\geom3d\dataloader.py:349:5: PLR0913 Too many arguments in function definition (7 > 5)
    |
349 | def generate_dataset_frag_dataset(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
350 |     dataset,
351 |     model,
    |

src\stk_search\geom3d\dataloader.py:358:5: D205 1 blank line required between summary line and description
    |
356 |       config=None,
357 |   ):
358 |       """Generate the fragment dataset from the dataset
    |  _____^
359 | |     Args:
360 | |         dataset: list
361 | |             list of the dataset
362 | |         model: 3d rpr model
363 | |             torch model
364 | |         db: stk.ConstructedMoleculeMongoDb
365 | |             database of the molecules
366 | |         number_of_molecules: int
367 | |             number of molecules to generate
368 | |         number_of_fragement: int
369 | |             number of fragment
370 | |         device: str
371 | |             device to use
372 | |     Returns:
373 | |         data_list: list
374 | |             list of the dataset
375 | |     """
    | |_______^ D205
376 |       data_list = []
377 |       if len(dataset) < number_of_molecules:
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:358:5: D400 First line should end with a period
    |
356 |       config=None,
357 |   ):
358 |       """Generate the fragment dataset from the dataset
    |  _____^
359 | |     Args:
360 | |         dataset: list
361 | |             list of the dataset
362 | |         model: 3d rpr model
363 | |             torch model
364 | |         db: stk.ConstructedMoleculeMongoDb
365 | |             database of the molecules
366 | |         number_of_molecules: int
367 | |             number of molecules to generate
368 | |         number_of_fragement: int
369 | |             number of fragment
370 | |         device: str
371 | |             device to use
372 | |     Returns:
373 | |         data_list: list
374 | |             list of the dataset
375 | |     """
    | |_______^ D400
376 |       data_list = []
377 |       if len(dataset) < number_of_molecules:
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:358:5: D415 First line should end with a period, question mark, or exclamation point
    |
356 |       config=None,
357 |   ):
358 |       """Generate the fragment dataset from the dataset
    |  _____^
359 | |     Args:
360 | |         dataset: list
361 | |             list of the dataset
362 | |         model: 3d rpr model
363 | |             torch model
364 | |         db: stk.ConstructedMoleculeMongoDb
365 | |             database of the molecules
366 | |         number_of_molecules: int
367 | |             number of molecules to generate
368 | |         number_of_fragement: int
369 | |             number of fragment
370 | |         device: str
371 | |             device to use
372 | |     Returns:
373 | |         data_list: list
374 | |             list of the dataset
375 | |     """
    | |_______^ D415
376 |       data_list = []
377 |       if len(dataset) < number_of_molecules:
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:379:22: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
377 |     if len(dataset) < number_of_molecules:
378 |         number_of_molecules = len(dataset)
379 |     molecule_index = np.random.choice(
    |                      ^^^^^^^^^^^^^^^^ NPY002
380 |         len(dataset), number_of_molecules, replace=False
381 |     )
    |

src\stk_search\geom3d\dataloader.py:382:14: SIM401 Use `config["model"].get("cutoff", 0.1)` instead of an `if` block
    |
380 |         len(dataset), number_of_molecules, replace=False
381 |     )
382 |     radius = config["model"]["cutoff"] if "cutoff" in config["model"] else 0.1
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM401
383 |     for i in molecule_index:
384 |         moldata = fragment_based_encoding(
    |
    = help: Replace with `config["model"].get("cutoff", 0.1)`

src\stk_search\geom3d\dataloader.py:398:5: PLR0913 Too many arguments in function definition (7 > 5)
    |
398 | def fragment_based_encoding(
    |     ^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
399 |     InChIKey,
400 |     db_poly,
    |

src\stk_search\geom3d\dataloader.py:399:5: N803 Argument name `InChIKey` should be lowercase
    |
398 | def fragment_based_encoding(
399 |     InChIKey,
    |     ^^^^^^^^ N803
400 |     db_poly,
401 |     model,
    |

src\stk_search\geom3d\dataloader.py:407:5: D205 1 blank line required between summary line and description
    |
405 |       radius=0.1,
406 |   ):
407 |       """Fragment based encoding
    |  _____^
408 | |     Args:
409 | |         InChIKey: str
410 | |             InChIKey of the molecule
411 | |         db_poly: stk.ConstructedMoleculeMongoDb
412 | |             database of the molecules
413 | |         model: 3d rpr model
414 | |             torch model
415 | |         number_of_fragement: int
416 | |             number of fragment
417 | |         device: str
418 | |             device to use
419 | |     Returns:
420 | |         frags: list
421 | |             list of the fragments
422 | |     """
    | |_______^ D205
423 |       if device is None:
424 |           device = "cuda" if torch.cuda.is_available() else torch.device("cpu")
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:407:5: D400 First line should end with a period
    |
405 |       radius=0.1,
406 |   ):
407 |       """Fragment based encoding
    |  _____^
408 | |     Args:
409 | |         InChIKey: str
410 | |             InChIKey of the molecule
411 | |         db_poly: stk.ConstructedMoleculeMongoDb
412 | |             database of the molecules
413 | |         model: 3d rpr model
414 | |             torch model
415 | |         number_of_fragement: int
416 | |             number of fragment
417 | |         device: str
418 | |             device to use
419 | |     Returns:
420 | |         frags: list
421 | |             list of the fragments
422 | |     """
    | |_______^ D400
423 |       if device is None:
424 |           device = "cuda" if torch.cuda.is_available() else torch.device("cpu")
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:407:5: D415 First line should end with a period, question mark, or exclamation point
    |
405 |       radius=0.1,
406 |   ):
407 |       """Fragment based encoding
    |  _____^
408 | |     Args:
409 | |         InChIKey: str
410 | |             InChIKey of the molecule
411 | |         db_poly: stk.ConstructedMoleculeMongoDb
412 | |             database of the molecules
413 | |         model: 3d rpr model
414 | |             torch model
415 | |         number_of_fragement: int
416 | |             number of fragment
417 | |         device: str
418 | |             device to use
419 | |     Returns:
420 | |         frags: list
421 | |             list of the fragments
422 | |     """
    | |_______^ D415
423 |       if device is None:
424 |           device = "cuda" if torch.cuda.is_available() else torch.device("cpu")
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:430:18: C411 Unnecessary `list` call (remove the outer call to `list()`)
    |
428 |       positions = np.vstack(dat_list)
429 |       positions = torch.tensor(positions, dtype=torch.float, device=device)
430 |       atom_types = list(
    |  __________________^
431 | |         [
432 | |             atom.get_atom().get_atomic_number()
433 | |             for atom in polymer.get_atom_infos()
434 | |         ]
435 | |     )
    | |_____^ C411
436 |       atom_types = torch.tensor(atom_types, dtype=torch.long, device=device)
437 |       molecule = Data(x=atom_types, positions=positions, device=device)
    |
    = help: Remove outer `list` call

src\stk_search\geom3d\dataloader.py:438:5: SIM102 Use a single `if` statement instead of nested `if` statements
    |
436 |       atom_types = torch.tensor(atom_types, dtype=torch.long, device=device)
437 |       molecule = Data(x=atom_types, positions=positions, device=device)
438 |       if model_name == "PaiNN":
    |  _____^
439 | |         if molecule is not None:
    | |________________________________^ SIM102
440 |               radius_edge_index = radius_graph(
441 |                   molecule.positions, r=radius, loop=False
    |
    = help: Combine `if` statements using `and`

src\stk_search\geom3d\dataloader.py:444:5: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
442 |               )
443 |               molecule.radius_edge_index = radius_edge_index
444 |       if len(list(polymer.get_building_blocks())) == number_of_fragement:
    |  _____^
445 | |         with torch.no_grad():
446 | |             if model_name == "PaiNN":
447 | |                 batch = torch.zeros_like(molecule.x)
448 | |                 opt_geom_encoding = model(
449 | |                     molecule.x,
450 | |                     molecule.positions,
451 | |                     molecule.radius_edge_index,
452 | |                     batch,
453 | |                 )
454 | |             else:
455 | |                 opt_geom_encoding = model(molecule.x, molecule.positions)
456 | | 
457 | |         for molecule_bb in polymer.get_building_blocks():
458 | |             dat_list = list(molecule_bb.get_atomic_positions())
459 | |             positions = np.vstack(dat_list)
460 | |             positions = torch.tensor(
461 | |                 positions, dtype=torch.float, device=device
462 | |             )
463 | |             atom_types = list(
464 | |                 [atom.get_atomic_number() for atom in molecule_bb.get_atoms()]
465 | |             )
466 | |             atom_types = torch.tensor(
467 | |                 atom_types, dtype=torch.long, device=device
468 | |             )
469 | |             molecule_frag = Data(
470 | |                 x=atom_types,
471 | |                 positions=positions,
472 | |                 device=device,
473 | |                 y=opt_geom_encoding,
474 | |                 InChIKey=InChIKey,
475 | |             )
476 | |             if model_name == "PaiNN":
477 | |                 if molecule_frag is not None:
478 | |                     radius_edge_index = radius_graph(
479 | |                         molecule_frag.positions, r=radius, loop=False
480 | |                     )
481 | |                     molecule_frag.radius_edge_index = radius_edge_index
482 | |             frags.append(molecule_frag)
483 | |         return frags
    | |____________________^ RET503
    |
    = help: Add explicit `return` statement

src\stk_search\geom3d\dataloader.py:463:26: C411 Unnecessary `list` call (remove the outer call to `list()`)
    |
461 |                   positions, dtype=torch.float, device=device
462 |               )
463 |               atom_types = list(
    |  __________________________^
464 | |                 [atom.get_atomic_number() for atom in molecule_bb.get_atoms()]
465 | |             )
    | |_____________^ C411
466 |               atom_types = torch.tensor(
467 |                   atom_types, dtype=torch.long, device=device
    |
    = help: Remove outer `list` call

src\stk_search\geom3d\dataloader.py:476:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
474 |                   InChIKey=InChIKey,
475 |               )
476 |               if model_name == "PaiNN":
    |  _____________^
477 | |                 if molecule_frag is not None:
    | |_____________________________________________^ SIM102
478 |                       radius_edge_index = radius_graph(
479 |                           molecule_frag.positions, r=radius, loop=False
    |
    = help: Combine `if` statements using `and`

src\stk_search\geom3d\dataloader.py:489:5: D205 1 blank line required between summary line and description
    |
487 |       frag_dataset, dataset, model, model_name
488 |   ):
489 |       """Update the fragment dataset
    |  _____^
490 | |     Args:
491 | |         frag_dataset: list
492 | |             list of the fragment dataset
493 | |         dataset: list
494 | |             list of the dataset
495 | |         model: torch model
496 | |             the model for the prediction
497 | |         model_name: str
498 | |             the name of the model
499 | |     Returns:
500 | |         frag_dataset: list
501 | |             list of the fragment dataset
502 | |     """
    | |_______^ D205
503 |       dataset_dict = {data.InChIKey: data for data in dataset}
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:489:5: D400 First line should end with a period
    |
487 |       frag_dataset, dataset, model, model_name
488 |   ):
489 |       """Update the fragment dataset
    |  _____^
490 | |     Args:
491 | |         frag_dataset: list
492 | |             list of the fragment dataset
493 | |         dataset: list
494 | |             list of the dataset
495 | |         model: torch model
496 | |             the model for the prediction
497 | |         model_name: str
498 | |             the name of the model
499 | |     Returns:
500 | |         frag_dataset: list
501 | |             list of the fragment dataset
502 | |     """
    | |_______^ D400
503 |       dataset_dict = {data.InChIKey: data for data in dataset}
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:489:5: D415 First line should end with a period, question mark, or exclamation point
    |
487 |       frag_dataset, dataset, model, model_name
488 |   ):
489 |       """Update the fragment dataset
    |  _____^
490 | |     Args:
491 | |         frag_dataset: list
492 | |             list of the fragment dataset
493 | |         dataset: list
494 | |             list of the dataset
495 | |         model: torch model
496 | |             the model for the prediction
497 | |         model_name: str
498 | |             the name of the model
499 | |     Returns:
500 | |         frag_dataset: list
501 | |             list of the fragment dataset
502 | |     """
    | |_______^ D415
503 |       dataset_dict = {data.InChIKey: data for data in dataset}
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:528:14: ARG001 Unused function argument: `df`
    |
527 | def updata_dataset(
528 |     dataset, df, target_name
    |              ^^ ARG001
529 | ):
530 |     """Update the oligomer dataset
    |

src\stk_search\geom3d\dataloader.py:528:18: ARG001 Unused function argument: `target_name`
    |
527 | def updata_dataset(
528 |     dataset, df, target_name
    |                  ^^^^^^^^^^^ ARG001
529 | ):
530 |     """Update the oligomer dataset
    |

src\stk_search\geom3d\dataloader.py:530:5: D205 1 blank line required between summary line and description
    |
528 |       dataset, df, target_name
529 |   ):
530 |       """Update the oligomer dataset
    |  _____^
531 | |     Args:
532 | |         dataset: list
533 | |             list of the dataset
534 | |         model: torch model
535 | |             the model for the prediction
536 | |         model_name: str
537 | |             the name of the model
538 | |     Returns:
539 | |         frag_dataset: list
540 | |             list of the fragment dataset
541 | |     """
    | |_______^ D205
542 |       for data in dataset:
543 |           data.y = None
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:530:5: D400 First line should end with a period
    |
528 |       dataset, df, target_name
529 |   ):
530 |       """Update the oligomer dataset
    |  _____^
531 | |     Args:
532 | |         dataset: list
533 | |             list of the dataset
534 | |         model: torch model
535 | |             the model for the prediction
536 | |         model_name: str
537 | |             the name of the model
538 | |     Returns:
539 | |         frag_dataset: list
540 | |             list of the fragment dataset
541 | |     """
    | |_______^ D400
542 |       for data in dataset:
543 |           data.y = None
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:530:5: D415 First line should end with a period, question mark, or exclamation point
    |
528 |       dataset, df, target_name
529 |   ):
530 |       """Update the oligomer dataset
    |  _____^
531 | |     Args:
532 | |         dataset: list
533 | |             list of the dataset
534 | |         model: torch model
535 | |             the model for the prediction
536 | |         model_name: str
537 | |             the name of the model
538 | |     Returns:
539 | |         frag_dataset: list
540 | |             list of the fragment dataset
541 | |     """
    | |_______^ D415
542 |       for data in dataset:
543 |           data.y = None
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:548:5: D205 1 blank line required between summary line and description
    |
547 |   def generate_dataset_and_dataloader(config):
548 |       """Generate the dataset and the dataloader
    |  _____^
549 | |     Args:
550 | |         config: dict
551 | |             configuration file
552 | |     Returns:
553 | |         train_loader: torch_geometric.loader.DataLoader
554 | |             dataloader for the training set
555 | |         val_loader: torch_geometric.loader.DataLoader
556 | |             dataloader for the validation set
557 | |         test_loader: torch_geometric.loader.DataLoader
558 | |             dataloader for the test set
559 | |         dataset_train: list
560 | |             list of the training dataset
561 | |         dataset_val: list
562 | |             list of the validation dataset
563 | |         dataset_test: list
564 | |             list of the test dataset
565 | |     """
    | |_______^ D205
566 |   
567 |       def get_dataset_dataloader(config, df_name="train"):
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:548:5: D400 First line should end with a period
    |
547 |   def generate_dataset_and_dataloader(config):
548 |       """Generate the dataset and the dataloader
    |  _____^
549 | |     Args:
550 | |         config: dict
551 | |             configuration file
552 | |     Returns:
553 | |         train_loader: torch_geometric.loader.DataLoader
554 | |             dataloader for the training set
555 | |         val_loader: torch_geometric.loader.DataLoader
556 | |             dataloader for the validation set
557 | |         test_loader: torch_geometric.loader.DataLoader
558 | |             dataloader for the test set
559 | |         dataset_train: list
560 | |             list of the training dataset
561 | |         dataset_val: list
562 | |             list of the validation dataset
563 | |         dataset_test: list
564 | |             list of the test dataset
565 | |     """
    | |_______^ D400
566 |   
567 |       def get_dataset_dataloader(config, df_name="train"):
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:548:5: D415 First line should end with a period, question mark, or exclamation point
    |
547 |   def generate_dataset_and_dataloader(config):
548 |       """Generate the dataset and the dataloader
    |  _____^
549 | |     Args:
550 | |         config: dict
551 | |             configuration file
552 | |     Returns:
553 | |         train_loader: torch_geometric.loader.DataLoader
554 | |             dataloader for the training set
555 | |         val_loader: torch_geometric.loader.DataLoader
556 | |             dataloader for the validation set
557 | |         test_loader: torch_geometric.loader.DataLoader
558 | |             dataloader for the test set
559 | |         dataset_train: list
560 | |             list of the training dataset
561 | |         dataset_val: list
562 | |             list of the validation dataset
563 | |         dataset_test: list
564 | |             list of the test dataset
565 | |     """
    | |_______^ D415
566 |   
567 |       def get_dataset_dataloader(config, df_name="train"):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:567:9: ANN202 Missing return type annotation for private function `get_dataset_dataloader`
    |
565 |     """
566 | 
567 |     def get_dataset_dataloader(config, df_name="train"):
    |         ^^^^^^^^^^^^^^^^^^^^^^ ANN202
568 |         df_precursors = pd.read_pickle(config["df_precursor"])
569 |         if f"dataset_path_{df_name}" in config.keys():
    |
    = help: Add return type annotation

src\stk_search\geom3d\dataloader.py:568:25: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
567 |     def get_dataset_dataloader(config, df_name="train"):
568 |         df_precursors = pd.read_pickle(config["df_precursor"])
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
569 |         if f"dataset_path_{df_name}" in config.keys():
570 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
    |

src\stk_search\geom3d\dataloader.py:569:12: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
567 |     def get_dataset_dataloader(config, df_name="train"):
568 |         df_precursors = pd.read_pickle(config["df_precursor"])
569 |         if f"dataset_path_{df_name}" in config.keys():
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
570 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
571 |                 if "device" in config.keys():
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\dataloader.py:570:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
568 |         df_precursors = pd.read_pickle(config["df_precursor"])
569 |         if f"dataset_path_{df_name}" in config.keys():
570 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
    |                ^^^^^^^^^^^^^^ PTH110
571 |                 if "device" in config.keys():
572 |                     dataset = torch.load(
    |

src\stk_search\geom3d\dataloader.py:571:20: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
569 |         if f"dataset_path_{df_name}" in config.keys():
570 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
571 |                 if "device" in config.keys():
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
572 |                     dataset = torch.load(
573 |                         config["dataset_path" + f"_{df_name}"],
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\dataloader.py:582:13: RET505 Unnecessary `else` after `return` statement
    |
580 |                 data_loader = get_data_loader(dataset, config)
581 |                 return dataset, data_loader
582 |             else:
    |             ^^^^ RET505
583 |                 print("dataset not found")
584 |         df = pd.read_csv(config["running_dir"] + f"/df_{df_name}.csv")
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\dataloader.py:583:17: T201 `print` found
    |
581 |                 return dataset, data_loader
582 |             else:
583 |                 print("dataset not found")
    |                 ^^^^^ T201
584 |         df = pd.read_csv(config["running_dir"] + f"/df_{df_name}.csv")
585 |         dataset = load_data_df(config, df, df_precursors)
    |
    = help: Remove `print`

src\stk_search\geom3d\dataloader.py:584:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
582 |             else:
583 |                 print("dataset not found")
584 |         df = pd.read_csv(config["running_dir"] + f"/df_{df_name}.csv")
    |         ^^ PD901
585 |         dataset = load_data_df(config, df, df_precursors)
586 |         data_loader = get_data_loader(dataset, config)
    |

src\stk_search\geom3d\dataloader.py:606:5: D205 1 blank line required between summary line and description
    |
605 |   def get_data_loader(dataset, config):
606 |       """Get the dataloader
    |  _____^
607 | |     Args:
608 | |         dataset: list
609 | |             list of the dataset
610 | |         config: dict
611 | |             configuration file
612 | | 
613 | |     Returns
614 | |     -------
615 | |         loader: torch_geometric.loader.DataLoader
616 | |             dataloader for the dataset
617 | | 
618 | |     """
    | |_______^ D205
619 |       # Set dataloaders
620 |       loader = DataLoader(
    |
    = help: Insert single blank line

src\stk_search\geom3d\dataloader.py:606:5: D400 First line should end with a period
    |
605 |   def get_data_loader(dataset, config):
606 |       """Get the dataloader
    |  _____^
607 | |     Args:
608 | |         dataset: list
609 | |             list of the dataset
610 | |         config: dict
611 | |             configuration file
612 | | 
613 | |     Returns
614 | |     -------
615 | |         loader: torch_geometric.loader.DataLoader
616 | |             dataloader for the dataset
617 | | 
618 | |     """
    | |_______^ D400
619 |       # Set dataloaders
620 |       loader = DataLoader(
    |
    = help: Add period

src\stk_search\geom3d\dataloader.py:606:5: D415 First line should end with a period, question mark, or exclamation point
    |
605 |   def get_data_loader(dataset, config):
606 |       """Get the dataloader
    |  _____^
607 | |     Args:
608 | |         dataset: list
609 | |             list of the dataset
610 | |         config: dict
611 | |             configuration file
612 | | 
613 | |     Returns
614 | |     -------
615 | |         loader: torch_geometric.loader.DataLoader
616 | |             dataloader for the dataset
617 | | 
618 | |     """
    | |_______^ D415
619 |       # Set dataloaders
620 |       loader = DataLoader(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\dataloader.py:628:12: RET504 Unnecessary assignment to `loader` before `return` statement
    |
626 |     )
627 | 
628 |     return loader
    |            ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\AWARE.py:1:1: N999 Invalid module name: 'AWARE'
src\stk_search\geom3d\models\AWARE.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\AWARE.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | from torch import nn
  |

src\stk_search\geom3d\models\AWARE.py:6:7: D101 Missing docstring in public class
  |
6 | class AWARE(nn.Module):
  |       ^^^^^ D101
7 |     def __init__(self, emb_dim, r_prime, max_walk_len, num_layers, out_dim, use_bond=False):
8 |         super(AWARE, self).__init__()
  |

src\stk_search\geom3d\models\AWARE.py:7:9: PLR0913 Too many arguments in function definition (6 > 5)
  |
6 | class AWARE(nn.Module):
7 |     def __init__(self, emb_dim, r_prime, max_walk_len, num_layers, out_dim, use_bond=False):
  |         ^^^^^^^^ PLR0913
8 |         super(AWARE, self).__init__()
9 |         self.r_prime = r_prime
  |

src\stk_search\geom3d\models\AWARE.py:7:9: ANN204 Missing return type annotation for special method `__init__`
  |
6 | class AWARE(nn.Module):
7 |     def __init__(self, emb_dim, r_prime, max_walk_len, num_layers, out_dim, use_bond=False):
  |         ^^^^^^^^ ANN204
8 |         super(AWARE, self).__init__()
9 |         self.r_prime = r_prime
  |
  = help: Add return type annotation: `None`

src\stk_search\geom3d\models\AWARE.py:7:9: D107 Missing docstring in `__init__`
  |
6 | class AWARE(nn.Module):
7 |     def __init__(self, emb_dim, r_prime, max_walk_len, num_layers, out_dim, use_bond=False):
  |         ^^^^^^^^ D107
8 |         super(AWARE, self).__init__()
9 |         self.r_prime = r_prime
  |

src\stk_search\geom3d\models\AWARE.py:7:77: FBT002 Boolean default positional argument in function definition
  |
6 | class AWARE(nn.Module):
7 |     def __init__(self, emb_dim, r_prime, max_walk_len, num_layers, out_dim, use_bond=False):
  |                                                                             ^^^^^^^^ FBT002
8 |         super(AWARE, self).__init__()
9 |         self.r_prime = r_prime
  |

src\stk_search\geom3d\models\AWARE.py:8:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
 6 | class AWARE(nn.Module):
 7 |     def __init__(self, emb_dim, r_prime, max_walk_len, num_layers, out_dim, use_bond=False):
 8 |         super(AWARE, self).__init__()
   |              ^^^^^^^^^^^^^ UP008
 9 |         self.r_prime = r_prime
10 |         self.emb_dim = emb_dim
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\AWARE.py:39:9: T201 `print` found
   |
37 |                 nn.Linear(self.r_prime, 1),
38 |             )
39 |         print("MODEL:\n", self)
   |         ^^^^^ T201
40 |         print()
   |
   = help: Remove `print`

src\stk_search\geom3d\models\AWARE.py:40:9: T201 `print` found
   |
38 |             )
39 |         print("MODEL:\n", self)
40 |         print()
   |         ^^^^^ T201
41 | 
42 |     def forward(self, node_attribute_matrix, adjacent_matrix, adj_attr_matrix):
   |
   = help: Remove `print`

src\stk_search\geom3d\models\AWARE.py:42:9: D102 Missing docstring in public method
   |
40 |         print()
41 | 
42 |     def forward(self, node_attribute_matrix, adjacent_matrix, adj_attr_matrix):
   |         ^^^^^^^ D102
43 |         F_1 = self.activation(self.Wv(node_attribute_matrix))  # (B, max_node, dim)
   |

src\stk_search\geom3d\models\AWARE.py:43:9: N806 Variable `F_1` in function should be lowercase
   |
42 |     def forward(self, node_attribute_matrix, adjacent_matrix, adj_attr_matrix):
43 |         F_1 = self.activation(self.Wv(node_attribute_matrix))  # (B, max_node, dim)
   |         ^^^ N806
44 | 
45 |         F_n = F_1
   |

src\stk_search\geom3d\models\AWARE.py:45:9: N806 Variable `F_n` in function should be lowercase
   |
43 |         F_1 = self.activation(self.Wv(node_attribute_matrix))  # (B, max_node, dim)
44 | 
45 |         F_n = F_1
   |         ^^^ N806
46 |         f_1 = torch.sum(self.activation(self.Wg(F_n)), dim=1)  # (B, dim)
47 |         f_T = [f_1]
   |

src\stk_search\geom3d\models\AWARE.py:47:9: N806 Variable `f_T` in function should be lowercase
   |
45 |         F_n = F_1
46 |         f_1 = torch.sum(self.activation(self.Wg(F_n)), dim=1)  # (B, dim)
47 |         f_T = [f_1]
   |         ^^^ N806
48 | 
49 |         for n in range(self.max_walk_len - 1):
   |

src\stk_search\geom3d\models\AWARE.py:49:13: B007 Loop control variable `n` not used within loop body
   |
47 |         f_T = [f_1]
48 | 
49 |         for n in range(self.max_walk_len - 1):
   |             ^ B007
50 |             S = torch.bmm(self.Ww(F_n), torch.transpose(F_n, 1, 2))  # (B, max_node, max_node)
51 |             masked_S = S.masked_fill(adjacent_matrix == 0, -1e8)
   |
   = help: Rename unused `n` to `_n`

src\stk_search\geom3d\models\AWARE.py:50:13: N806 Variable `S` in function should be lowercase
   |
49 |         for n in range(self.max_walk_len - 1):
50 |             S = torch.bmm(self.Ww(F_n), torch.transpose(F_n, 1, 2))  # (B, max_node, max_node)
   |             ^ N806
51 |             masked_S = S.masked_fill(adjacent_matrix == 0, -1e8)
52 |             A_S = self.softmax(masked_S)  # (B, max_node, max_node)
   |

src\stk_search\geom3d\models\AWARE.py:51:13: N806 Variable `masked_S` in function should be lowercase
   |
49 |         for n in range(self.max_walk_len - 1):
50 |             S = torch.bmm(self.Ww(F_n), torch.transpose(F_n, 1, 2))  # (B, max_node, max_node)
51 |             masked_S = S.masked_fill(adjacent_matrix == 0, -1e8)
   |             ^^^^^^^^ N806
52 |             A_S = self.softmax(masked_S)  # (B, max_node, max_node)
53 |             if self.use_bond:
   |

src\stk_search\geom3d\models\AWARE.py:52:13: N806 Variable `A_S` in function should be lowercase
   |
50 |             S = torch.bmm(self.Ww(F_n), torch.transpose(F_n, 1, 2))  # (B, max_node, max_node)
51 |             masked_S = S.masked_fill(adjacent_matrix == 0, -1e8)
52 |             A_S = self.softmax(masked_S)  # (B, max_node, max_node)
   |             ^^^ N806
53 |             if self.use_bond:
54 |                 bond_S = self.bond_mlp(adj_attr_matrix).squeeze(dim=3)  # (B, max_node, max_node)
   |

src\stk_search\geom3d\models\AWARE.py:54:17: N806 Variable `bond_S` in function should be lowercase
   |
52 |             A_S = self.softmax(masked_S)  # (B, max_node, max_node)
53 |             if self.use_bond:
54 |                 bond_S = self.bond_mlp(adj_attr_matrix).squeeze(dim=3)  # (B, max_node, max_node)
   |                 ^^^^^^ N806
55 |                 A_S = A_S + bond_S
56 |             # Add self-loop
   |

src\stk_search\geom3d\models\AWARE.py:55:17: N806 Variable `A_S` in function should be lowercase
   |
53 |             if self.use_bond:
54 |                 bond_S = self.bond_mlp(adj_attr_matrix).squeeze(dim=3)  # (B, max_node, max_node)
55 |                 A_S = A_S + bond_S
   |                 ^^^ N806
56 |             # Add self-loop
57 |             F_n = (F_n + torch.bmm(A_S, F_n)) * F_1  # (B, max_node, dim)
   |

src\stk_search\geom3d\models\AWARE.py:57:13: N806 Variable `F_n` in function should be lowercase
   |
55 |                 A_S = A_S + bond_S
56 |             # Add self-loop
57 |             F_n = (F_n + torch.bmm(A_S, F_n)) * F_1  # (B, max_node, dim)
   |             ^^^ N806
58 |             f_n = torch.sum(self.activation(self.Wg(F_n)), dim=1)  # (B, dim)
59 |             f_T.append(f_n)
   |

src\stk_search\geom3d\models\AWARE.py:60:9: N806 Variable `f_T` in function should be lowercase
   |
58 |             f_n = torch.sum(self.activation(self.Wg(F_n)), dim=1)  # (B, dim)
59 |             f_T.append(f_n)
60 |         f_T = F.normalize(torch.cat(f_T, dim=1))
   |         ^^^ N806
61 | 
62 |         return self.target_model(f_T)
   |

src\stk_search\geom3d\models\Allegro\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\Allegro\__init__.py:3:1: PLE0604 Invalid object in `__all__`, must contain only strings
  |
1 | from . import _keys
2 | 
3 | __all__ = [_keys]
  | ^^^^^^^ PLE0604
  |

src\stk_search\geom3d\models\Allegro\_keys.py:5:4: YTT203 `sys.version_info[1]` compared to integer (python4), compare `sys.version_info` to tuple
  |
3 | import sys
4 | 
5 | if sys.version_info[1] >= 8:
  |    ^^^^^^^^^^^^^^^^^^^ YTT203
6 |     from typing import Final
7 | else:
  |

src\stk_search\geom3d\models\Allegro\_keys.py:5:27: PLR2004 Magic value used in comparison, consider replacing `8` with a constant variable
  |
3 | import sys
4 | 
5 | if sys.version_info[1] >= 8:
  |                           ^ PLR2004
6 |     from typing import Final
7 | else:
  |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:1:1: N999 Invalid module name: 'Allegro'
src\stk_search\geom3d\models\Allegro\model\Allegro.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Allegro\model\Allegro.py:25:5: N802 Function name `Allegro` should be lowercase
   |
25 | def Allegro(config, initialize: bool, dataset: Optional[AtomicDataset] = None):
   |     ^^^^^^^ N802
26 |     logging.debug("Building Allegro model...")
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:25:5: D103 Missing docstring in public function
   |
25 | def Allegro(config, initialize: bool, dataset: Optional[AtomicDataset] = None):
   |     ^^^^^^^ D103
26 |     logging.debug("Building Allegro model...")
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:25:21: FBT001 Boolean-typed positional argument in function definition
   |
25 | def Allegro(config, initialize: bool, dataset: Optional[AtomicDataset] = None):
   |                     ^^^^^^^^^^ FBT001
26 |     logging.debug("Building Allegro model...")
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:25:21: ARG001 Unused function argument: `initialize`
   |
25 | def Allegro(config, initialize: bool, dataset: Optional[AtomicDataset] = None):
   |                     ^^^^^^^^^^ ARG001
26 |     logging.debug("Building Allegro model...")
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:25:39: ARG001 Unused function argument: `dataset`
   |
25 | def Allegro(config, initialize: bool, dataset: Optional[AtomicDataset] = None):
   |                                       ^^^^^^^ ARG001
26 |     logging.debug("Building Allegro model...")
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:25:48: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
25 | def Allegro(config, initialize: bool, dataset: Optional[AtomicDataset] = None):
   |                                                ^^^^^^^^ FA100
26 |     logging.debug("Building Allegro model...")
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:30:5: ERA001 Found commented-out code
   |
28 |     # # Handle avg num neighbors auto
29 |     # builder_utils.add_avg_num_neighbors(
30 |     #     config=config, initialize=initialize, dataset=dataset
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
31 |     # )
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Allegro\model\Allegro.py:31:5: ERA001 Found commented-out code
   |
29 |     # builder_utils.add_avg_num_neighbors(
30 |     #     config=config, initialize=initialize, dataset=dataset
31 |     # )
   |     ^^^ ERA001
32 | 
33 |     # Handle simple irreps
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Allegro\model\Allegro.py:37:9: S101 Use of `assert` detected
   |
35 |         l_max = int(config["l_max"])
36 |         parity_setting = config["parity"]
37 |         assert parity_setting in ("o3_full", "o3_restricted", "so3")
   |         ^^^^^^ S101
38 |         irreps_edge_sh = repr(
39 |             o3.Irreps.spherical_harmonics(
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:45:9: S101 Use of `assert` detected
   |
43 |         nonscalars_include_parity = parity_setting == "o3_full"
44 |         # check consistant
45 |         assert config.get("irreps_edge_sh", irreps_edge_sh) == irreps_edge_sh
   |         ^^^^^^ S101
46 |         assert (
47 |             config.get("nonscalars_include_parity", nonscalars_include_parity)
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:46:9: S101 Use of `assert` detected
   |
44 |         # check consistant
45 |         assert config.get("irreps_edge_sh", irreps_edge_sh) == irreps_edge_sh
46 |         assert (
   |         ^^^^^^ S101
47 |             config.get("nonscalars_include_parity", nonscalars_include_parity)
48 |             == nonscalars_include_parity
   |

src\stk_search\geom3d\models\Allegro\model\Allegro.py:59:13: C408 Unnecessary `dict` call (rewrite as a literal)
   |
57 |           "radial_basis": (
58 |               RadialBasisEdgeEncoding,
59 |               dict(
   |  _____________^
60 | |                 basis=(
61 | |                     NormalizedBasis
62 | |                     if config.get("normalize_basis", True)
63 | |                     else BesselBasis
64 | |                 ),
65 | |                 out_field=AtomicDataDict.EDGE_EMBEDDING_KEY,
66 | |             ),
   | |_____________^ C408
67 |           ),
68 |           # Get edge nonscalars
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\Allegro\model\Allegro.py:73:13: C408 Unnecessary `dict` call (rewrite as a literal)
   |
71 |           "Allegro": (
72 |               Allegro_Module,
73 |               dict(
   |  _____________^
74 | |                 field=AtomicDataDict.EDGE_ATTRS_KEY,  # initial input is the edge SH
75 | |                 edge_invariant_field=AtomicDataDict.EDGE_EMBEDDING_KEY,
76 | |                 node_invariant_field=AtomicDataDict.NODE_ATTRS_KEY,
77 | |             ),
   | |_____________^ C408
78 |           ),
79 |           "edge_eng": (
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\Allegro\model\Allegro.py:81:13: C408 Unnecessary `dict` call (rewrite as a literal)
   |
79 |         "edge_eng": (
80 |             ScalarMLP,
81 |             dict(field=EDGE_FEATURES, out_field=EDGE_ENERGY, mlp_output_dimension=1),
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C408
82 |         ),
83 |         # Sum edgewise energies -> per-atom energies:
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\Allegro\model\Allegro.py:88:13: C408 Unnecessary `dict` call (rewrite as a literal)
   |
86 |           "total_energy_sum": (
87 |               AtomwiseReduce,
88 |               dict(
   |  _____________^
89 | |                 reduce="sum",
90 | |                 field=AtomicDataDict.PER_ATOM_ENERGY_KEY,
91 | |                 out_field=AtomicDataDict.TOTAL_ENERGY_KEY,
92 | |             ),
   | |_____________^ C408
93 |           ),
94 |       }
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\Allegro\model\Allegro.py:98:12: RET504 Unnecessary assignment to `model` before `return` statement
   |
96 |     model = SequentialGraphNetwork.from_parameters(shared_params=config, layers=layers)
97 | 
98 |     return model
   |            ^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Allegro\model\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\Allegro\model\__init__.py:3:1: PLE0604 Invalid object in `__all__`, must contain only strings
  |
1 | from .Allegro import Allegro
2 | 
3 | __all__ = [Allegro]
  | ^^^^^^^ PLE0604
  |

src\stk_search\geom3d\models\Allegro\nn\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\Allegro\nn\__init__.py:6:1: PLE0604 Invalid object in `__all__`, must contain only strings
  |
4 | from ._norm_basis import NormalizedBasis
5 | 
6 | __all__ = [
  | ^^^^^^^ PLE0604
7 |     Allegro_Module,
8 |     EdgewiseEnergySum,
  |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:13:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
11 | from stk_search.geom3d.models.NequIP.utils.tp_utils import tp_path_exists
12 | 
13 | from .. import _keys
   | ^^^^^^^^^^^^^^^^^^^^ TID252
14 | from ._fc import ScalarMLPFunction
15 | from ._strided import Contracter, Linear, MakeWeightedChannels
   |
   = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:20:7: N801 Class name `Allegro_Module` should use CapWords convention
   |
19 | @compile_mode("script")
20 | class Allegro_Module(GraphModuleMixin, torch.nn.Module):
   |       ^^^^^^^^^^^^^^ N801
21 |     # saved params
22 |     num_layers: int
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:32:27: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
31 |     # internal values
32 |     _env_builder_w_index: List[int]
   |                           ^^^^ FA100
33 |     _env_builder_n_irreps: int
34 |     _input_pad: int
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:36:9: C901 `__init__` is too complex (23 > 10)
   |
34 |     _input_pad: int
35 | 
36 |     def __init__(
   |         ^^^^^^^^ C901
37 |         self,
38 |         # required params
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:36:9: PLR0913 Too many arguments in function definition (28 > 5)
   |
34 |     _input_pad: int
35 | 
36 |     def __init__(
   |         ^^^^^^^^ PLR0913
37 |         self,
38 |         # required params
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:36:9: PLR0912 Too many branches (28 > 12)
   |
34 |     _input_pad: int
35 | 
36 |     def __init__(
   |         ^^^^^^^^ PLR0912
37 |         self,
38 |         # required params
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:36:9: PLR0915 Too many statements (123 > 50)
   |
34 |     _input_pad: int
35 | 
36 |     def __init__(
   |         ^^^^^^^^ PLR0915
37 |         self,
38 |         # required params
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:36:9: ANN204 Missing return type annotation for special method `__init__`
   |
34 |     _input_pad: int
35 | 
36 |     def __init__(
   |         ^^^^^^^^ ANN204
37 |         self,
38 |         # required params
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:42:28: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
40 |         num_types: int,
41 |         r_max: float,
42 |         avg_num_neighbors: Optional[float] = None,
   |                            ^^^^^^^^ FA100
43 |         # cutoffs
44 |         r_start_cos_ratio: float = 0.8,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:45:9: N803 Argument name `PolynomialCutoff_p` should be lowercase
   |
43 |         # cutoffs
44 |         r_start_cos_ratio: float = 0.8,
45 |         PolynomialCutoff_p: float = 6,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ N803
46 |         per_layer_cutoffs: Optional[List[float]] = None,
47 |         cutoff_type: str = "polynomial",
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:46:28: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
44 |         r_start_cos_ratio: float = 0.8,
45 |         PolynomialCutoff_p: float = 6,
46 |         per_layer_cutoffs: Optional[List[float]] = None,
   |                            ^^^^^^^^ FA100
47 |         cutoff_type: str = "polynomial",
48 |         # general hyperparameters:
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:46:37: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
44 |         r_start_cos_ratio: float = 0.8,
45 |         PolynomialCutoff_p: float = 6,
46 |         per_layer_cutoffs: Optional[List[float]] = None,
   |                                     ^^^^ FA100
47 |         cutoff_type: str = "polynomial",
48 |         # general hyperparameters:
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:53:9: FBT001 Boolean-typed positional argument in function definition
   |
51 |         node_invariant_field: str = AtomicDataDict.NODE_ATTRS_KEY,
52 |         env_embed_multiplicity: int = 32,
53 |         embed_initial_edge: bool = True,
   |         ^^^^^^^^^^^^^^^^^^ FBT001
54 |         linear_after_env_embed: bool = False,
55 |         nonscalars_include_parity: bool = True,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:53:9: FBT002 Boolean default positional argument in function definition
   |
51 |         node_invariant_field: str = AtomicDataDict.NODE_ATTRS_KEY,
52 |         env_embed_multiplicity: int = 32,
53 |         embed_initial_edge: bool = True,
   |         ^^^^^^^^^^^^^^^^^^ FBT002
54 |         linear_after_env_embed: bool = False,
55 |         nonscalars_include_parity: bool = True,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:54:9: FBT001 Boolean-typed positional argument in function definition
   |
52 |         env_embed_multiplicity: int = 32,
53 |         embed_initial_edge: bool = True,
54 |         linear_after_env_embed: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^ FBT001
55 |         nonscalars_include_parity: bool = True,
56 |         # MLP parameters:
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:54:9: FBT002 Boolean default positional argument in function definition
   |
52 |         env_embed_multiplicity: int = 32,
53 |         embed_initial_edge: bool = True,
54 |         linear_after_env_embed: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^ FBT002
55 |         nonscalars_include_parity: bool = True,
56 |         # MLP parameters:
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:55:9: FBT001 Boolean-typed positional argument in function definition
   |
53 |         embed_initial_edge: bool = True,
54 |         linear_after_env_embed: bool = False,
55 |         nonscalars_include_parity: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ FBT001
56 |         # MLP parameters:
57 |         two_body_latent=ScalarMLPFunction,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:55:9: FBT002 Boolean default positional argument in function definition
   |
53 |         embed_initial_edge: bool = True,
54 |         linear_after_env_embed: bool = False,
55 |         nonscalars_include_parity: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ FBT002
56 |         # MLP parameters:
57 |         two_body_latent=ScalarMLPFunction,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:58:32: B006 Do not use mutable data structures for argument defaults
   |
56 |         # MLP parameters:
57 |         two_body_latent=ScalarMLPFunction,
58 |         two_body_latent_kwargs={},
   |                                ^^ B006
59 |         env_embed=ScalarMLPFunction,
60 |         env_embed_kwargs={},
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:60:26: B006 Do not use mutable data structures for argument defaults
   |
58 |         two_body_latent_kwargs={},
59 |         env_embed=ScalarMLPFunction,
60 |         env_embed_kwargs={},
   |                          ^^ B006
61 |         latent=ScalarMLPFunction,
62 |         latent_kwargs={},
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:62:23: B006 Do not use mutable data structures for argument defaults
   |
60 |         env_embed_kwargs={},
61 |         latent=ScalarMLPFunction,
62 |         latent_kwargs={},
   |                       ^^ B006
63 |         latent_resnet: bool = True,
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:63:9: FBT001 Boolean-typed positional argument in function definition
   |
61 |         latent=ScalarMLPFunction,
62 |         latent_kwargs={},
63 |         latent_resnet: bool = True,
   |         ^^^^^^^^^^^^^ FBT001
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
65 |         latent_resnet_update_ratios_learnable: bool = False,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:63:9: FBT002 Boolean default positional argument in function definition
   |
61 |         latent=ScalarMLPFunction,
62 |         latent_kwargs={},
63 |         latent_resnet: bool = True,
   |         ^^^^^^^^^^^^^ FBT002
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
65 |         latent_resnet_update_ratios_learnable: bool = False,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:64:38: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
62 |         latent_kwargs={},
63 |         latent_resnet: bool = True,
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
   |                                      ^^^^^^^^ FA100
65 |         latent_resnet_update_ratios_learnable: bool = False,
66 |         latent_out_field: Optional[str] = _keys.EDGE_FEATURES,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:64:47: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
62 |         latent_kwargs={},
63 |         latent_resnet: bool = True,
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
   |                                               ^^^^ FA100
65 |         latent_resnet_update_ratios_learnable: bool = False,
66 |         latent_out_field: Optional[str] = _keys.EDGE_FEATURES,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:65:9: FBT001 Boolean-typed positional argument in function definition
   |
63 |         latent_resnet: bool = True,
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
65 |         latent_resnet_update_ratios_learnable: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ FBT001
66 |         latent_out_field: Optional[str] = _keys.EDGE_FEATURES,
67 |         # Performance parameters:
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:65:9: FBT002 Boolean default positional argument in function definition
   |
63 |         latent_resnet: bool = True,
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
65 |         latent_resnet_update_ratios_learnable: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ FBT002
66 |         latent_out_field: Optional[str] = _keys.EDGE_FEATURES,
67 |         # Performance parameters:
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:66:27: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
64 |         latent_resnet_update_ratios: Optional[List[float]] = None,
65 |         latent_resnet_update_ratios_learnable: bool = False,
66 |         latent_out_field: Optional[str] = _keys.EDGE_FEATURES,
   |                           ^^^^^^^^ FA100
67 |         # Performance parameters:
68 |         pad_to_alignment: int = 1,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:69:22: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
67 |         # Performance parameters:
68 |         pad_to_alignment: int = 1,
69 |         sparse_mode: Optional[str] = None,
   |                      ^^^^^^^^ FA100
70 |         # Other:
71 |         irreps_in=None,
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:74:9: N806 Variable `SCALAR` in function should be lowercase
   |
72 |     ):
73 |         super().__init__()
74 |         SCALAR = o3.Irrep("0e")  # define for convinience
   |         ^^^^^^ N806
75 | 
76 |         # save parameters
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:77:9: S101 Use of `assert` detected
   |
76 |         # save parameters
77 |         assert (
   |         ^^^^^^ S101
78 |             num_layers >= 1
79 |         )  # zero layers is "two body", but we don't need to support that fallback case
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:91:9: S101 Use of `assert` detected
   |
89 |         self.polynomial_cutoff_p = float(PolynomialCutoff_p)
90 |         self.cutoff_type = cutoff_type
91 |         assert cutoff_type in ("cosine", "polynomial")
   |         ^^^^^^ S101
92 |         self.embed_initial_edge = embed_initial_edge
93 |         self.avg_num_neighbors = avg_num_neighbors
   |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:112:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
110 |             "env_sum_normalizations",
111 |             # dividing by sqrt(N)
112 |             # TODO: this is only for hacking
    |               ^^^^ TD002
113 |             torch.ones_like(torch.as_tensor([1] * num_layers)),
114 |             # torch.as_tensor([avg_num_neighbors] * num_layers).rsqrt(),
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:112:15: TD003 Missing issue link on the line following this TODO
    |
110 |             "env_sum_normalizations",
111 |             # dividing by sqrt(N)
112 |             # TODO: this is only for hacking
    |               ^^^^ TD003
113 |             torch.ones_like(torch.as_tensor([1] * num_layers)),
114 |             # torch.as_tensor([avg_num_neighbors] * num_layers).rsqrt(),
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:112:15: FIX002 Line contains TODO, consider resolving the issue
    |
110 |             "env_sum_normalizations",
111 |             # dividing by sqrt(N)
112 |             # TODO: this is only for hacking
    |               ^^^^ FIX002
113 |             torch.ones_like(torch.as_tensor([1] * num_layers)),
114 |             # torch.as_tensor([avg_num_neighbors] * num_layers).rsqrt(),
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:114:13: ERA001 Found commented-out code
    |
112 |             # TODO: this is only for hacking
113 |             torch.ones_like(torch.as_tensor([1] * num_layers)),
114 |             # torch.as_tensor([avg_num_neighbors] * num_layers).rsqrt(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
115 |         )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:129:9: S101 Use of `assert` detected
    |
127 |         input_irreps = self.irreps_in[self.field]
128 |         # this is not inherant, but no reason to fix right now:
129 |         assert all(mul == 1 for mul, ir in input_irreps)
    |         ^^^^^^ S101
130 |         env_embed_irreps = o3.Irreps([(1, ir) for _, ir in input_irreps])
131 |         assert (
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:131:9: S101 Use of `assert` detected
    |
129 |         assert all(mul == 1 for mul, ir in input_irreps)
130 |         env_embed_irreps = o3.Irreps([(1, ir) for _, ir in input_irreps])
131 |         assert (
    |         ^^^^^^ S101
132 |             env_embed_irreps[0].ir == SCALAR
133 |         ), "env_embed_irreps must start with scalars"
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:155:22: B007 Loop control variable `mul` not used within loop body
    |
153 |                 # Add parity irreps
154 |                 ir_out = []
155 |                 for (mul, ir) in env_embed_irreps:
    |                      ^^^ B007
156 |                     if self.nonscalars_include_parity:
157 |                         # add both parity options
    |
    = help: Rename unused `mul` to `_mul`

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:201:9: S101 Use of `assert` detected
    |
199 |             out_irreps = new_arg_irreps
200 | 
201 |         assert len(new_tps_irreps) == len(tps_irreps)
    |         ^^^^^^ S101
202 |         tps_irreps = list(reversed(new_tps_irreps))
203 |         del new_tps_irreps
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:205:9: S101 Use of `assert` detected
    |
203 |         del new_tps_irreps
204 | 
205 |         assert tps_irreps[-1].lmax == 0
    |         ^^^^^^ S101
206 | 
207 |         tps_irreps_in = tps_irreps[:-1]
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:241:17: B007 Loop control variable `i_out` not used within loop body
    |
239 |             n_scalar_outs: int = 0
240 |             full_out_irreps = []
241 |             for i_out, (_, ir_out) in enumerate(out_irreps):
    |                 ^^^^^ B007
242 |                 for i_1, (_, ir_1) in enumerate(arg_irreps):
243 |                     for i_2, (_, ir_2) in enumerate(env_embed_irreps):
    |
    = help: Rename unused `i_out` to `_i_out`

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:252:13: S101 Use of `assert` detected
    |
250 |             full_out_irreps = o3.Irreps(full_out_irreps)
251 |             self._n_scalar_outs.append(n_scalar_outs)
252 |             assert all(ir == SCALAR for _, ir in full_out_irreps[:n_scalar_outs])
    |             ^^^^^^ S101
253 |             tp = Contracter(
254 |                 irreps_in1=o3.Irreps(
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:290:13: S101 Use of `assert` detected
    |
288 |             self.tps.append(tp)
289 |             # we extract the scalars from the first irrep of the tp
290 |             assert out_irreps[0].ir == SCALAR
    |             ^^^^^^ S101
291 | 
292 |             # Make env embed mlp
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:374:13: S101 Use of `assert` detected
    |
372 |                 latent_resnet_update_ratios, dtype=torch.get_default_dtype()
373 |             )
374 |             assert latent_resnet_update_ratios.min() > 0.0
    |             ^^^^^^ S101
375 |             assert latent_resnet_update_ratios.min() < 1.0
376 |             latent_resnet_update_params = torch.special.logit(
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:375:13: S101 Use of `assert` detected
    |
373 |             )
374 |             assert latent_resnet_update_ratios.min() > 0.0
375 |             assert latent_resnet_update_ratios.min() < 1.0
    |             ^^^^^^ S101
376 |             latent_resnet_update_params = torch.special.logit(
377 |                 latent_resnet_update_ratios
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:381:9: S101 Use of `assert` detected
    |
379 |             # The sigmoid is mostly saturated at ±6, keep it in a reasonable range
380 |             latent_resnet_update_params.clamp_(-6.0, 6.0)
381 |         assert latent_resnet_update_params.shape == (
    |         ^^^^^^ S101
382 |             num_layers,
383 |         ), f"There must be {num_layers} layer resnet update ratios (layer0:layer1, layer1:layer2)"
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:397:9: S101 Use of `assert` detected
    |
395 |             per_layer_cutoffs = torch.full((num_layers + 1,), r_max)
396 |         self.register_buffer("per_layer_cutoffs", torch.as_tensor(per_layer_cutoffs))
397 |         assert torch.all(self.per_layer_cutoffs <= r_max)
    |         ^^^^^^ S101
398 |         assert self.per_layer_cutoffs.shape == (
399 |             num_layers + 1,
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:398:9: S101 Use of `assert` detected
    |
396 |         self.register_buffer("per_layer_cutoffs", torch.as_tensor(per_layer_cutoffs))
397 |         assert torch.all(self.per_layer_cutoffs <= r_max)
398 |         assert self.per_layer_cutoffs.shape == (
    |         ^^^^^^ S101
399 |             num_layers + 1,
400 |         ), "Must be one per-layer cutoff for layer 0 and every layer for a total of {num_layers} cutoffs (the first applies to the two body latent, which is 'layer 0')"
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:401:9: S101 Use of `assert` detected
    |
399 |             num_layers + 1,
400 |         ), "Must be one per-layer cutoff for layer 0 and every layer for a total of {num_layers} cutoffs (the first applies to the two body latent, which is 'layer 0')"
401 |         assert (
    |         ^^^^^^ S101
402 |             self.per_layer_cutoffs[1:] <= self.per_layer_cutoffs[:-1]
403 |         ).all(), "Per-layer cutoffs must be equal or decreasing"
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:404:9: S101 Use of `assert` detected
    |
402 |             self.per_layer_cutoffs[1:] <= self.per_layer_cutoffs[:-1]
403 |         ).all(), "Per-layer cutoffs must be equal or decreasing"
404 |         assert (
    |         ^^^^^^ S101
405 |             self.per_layer_cutoffs.min() > 0
406 |         ), "Per-layer cutoffs must be >0. To remove higher layers entirely, lower `num_layers`."
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:418:9: PLR0912 Too many branches (13 > 12)
    |
416 |         )
417 | 
418 |     def forward(self, data: AtomicDataDict.Type) -> AtomicDataDict.Type:
    |         ^^^^^^^ PLR0912
419 |         """Evaluate.
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:418:9: PLR0915 Too many statements (73 > 50)
    |
416 |         )
417 | 
418 |     def forward(self, data: AtomicDataDict.Type) -> AtomicDataDict.Type:
    |         ^^^^^^^ PLR0915
419 |         """Evaluate.
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:487:13: S101 Use of `assert` detected
    |
485 |             # impossible to make it past so it doesn't throw
486 |             # "cutoff_coeffs_all is not defined in the false branch"
487 |             assert False, "Invalid cutoff type"
    |             ^^^^^^ S101
488 | 
489 |         # !!!! REMEMBER !!!! update final layer if update the code in main loop!!!
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:487:13: PT015 Assertion always fails, replace with `pytest.fail()`
    |
485 |             # impossible to make it past so it doesn't throw
486 |             # "cutoff_coeffs_all is not defined in the false branch"
487 |             assert False, "Invalid cutoff type"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT015
488 | 
489 |         # !!!! REMEMBER !!!! update final layer if update the code in main loop!!!
    |

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:487:20: B011 Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
    |
485 |             # impossible to make it past so it doesn't throw
486 |             # "cutoff_coeffs_all is not defined in the false branch"
487 |             assert False, "Invalid cutoff type"
    |                    ^^^^^ B011
488 | 
489 |         # !!!! REMEMBER !!!! update final layer if update the code in main loop!!!
    |
    = help: Replace `assert False`

src\stk_search\geom3d\models\Allegro\nn\_allegro.py:563:51: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
561 |                 dim=0,
562 |             )
563 |             if self.env_sum_normalizations.ndim < 2:
    |                                                   ^ PLR2004
564 |                 # it's a scalar per layer
565 |                 norm_const = self.env_sum_normalizations[layer_index]
    |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
6 | from stk_search.geom3d.models.NequIP.utils import scatter
7 | 
8 | from .. import _keys
  | ^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:14:14: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
12 |     """Like ``NequIP.nn.AtomwiseReduce``, but accumulating per-edge data into per-atom data."""
13 | 
14 |     _factor: Optional[float]
   |              ^^^^^^^^ FA100
15 | 
16 |     def __init__(
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:16:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
14 |     _factor: Optional[float]
15 | 
16 |     def __init__(
   |         ^^^^^^^^ PLR0913
17 |         self,
18 |         field: str,
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:16:9: ANN204 Missing return type annotation for special method `__init__`
   |
14 |     _factor: Optional[float]
15 | 
16 |     def __init__(
   |         ^^^^^^^^ ANN204
17 |         self,
18 |         field: str,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:19:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
17 |         self,
18 |         field: str,
19 |         out_field: Optional[str] = None,
   |                    ^^^^^^^^ FA100
20 |         normalize_edge_reduce: bool = True,
21 |         avg_num_neighbors: Optional[float] = None,
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:20:9: FBT001 Boolean-typed positional argument in function definition
   |
18 |         field: str,
19 |         out_field: Optional[str] = None,
20 |         normalize_edge_reduce: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^ FBT001
21 |         avg_num_neighbors: Optional[float] = None,
22 |         reduce="sum",
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:20:9: FBT002 Boolean default positional argument in function definition
   |
18 |         field: str,
19 |         out_field: Optional[str] = None,
20 |         normalize_edge_reduce: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^ FBT002
21 |         avg_num_neighbors: Optional[float] = None,
22 |         reduce="sum",
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:20:9: ARG002 Unused method argument: `normalize_edge_reduce`
   |
18 |         field: str,
19 |         out_field: Optional[str] = None,
20 |         normalize_edge_reduce: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^ ARG002
21 |         avg_num_neighbors: Optional[float] = None,
22 |         reduce="sum",
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:21:9: ARG002 Unused method argument: `avg_num_neighbors`
   |
19 |         out_field: Optional[str] = None,
20 |         normalize_edge_reduce: bool = True,
21 |         avg_num_neighbors: Optional[float] = None,
   |         ^^^^^^^^^^^^^^^^^ ARG002
22 |         reduce="sum",
23 |         irreps_in={},
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:21:28: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
19 |         out_field: Optional[str] = None,
20 |         normalize_edge_reduce: bool = True,
21 |         avg_num_neighbors: Optional[float] = None,
   |                            ^^^^^^^^ FA100
22 |         reduce="sum",
23 |         irreps_in={},
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:23:19: B006 Do not use mutable data structures for argument defaults
   |
21 |         avg_num_neighbors: Optional[float] = None,
22 |         reduce="sum",
23 |         irreps_in={},
   |                   ^^ B006
24 |     ):
25 |         """Sum edges into nodes."""
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:27:9: S101 Use of `assert` detected
   |
25 |         """Sum edges into nodes."""
26 |         super().__init__()
27 |         assert reduce in ("sum", "mean", "min", "max")
   |         ^^^^^^ S101
28 |         self.reduce = reduce
29 |         self.field = field
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:38:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
36 |         )
37 |         self._factor = None
38 |         # TODO: will clean-up later
   |           ^^^^ TD002
39 |         # if normalize_edge_reduce and avg_num_neighbors is not None:
40 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:38:11: TD003 Missing issue link on the line following this TODO
   |
36 |         )
37 |         self._factor = None
38 |         # TODO: will clean-up later
   |           ^^^^ TD003
39 |         # if normalize_edge_reduce and avg_num_neighbors is not None:
40 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:38:11: FIX002 Line contains TODO, consider resolving the issue
   |
36 |         )
37 |         self._factor = None
38 |         # TODO: will clean-up later
   |           ^^^^ FIX002
39 |         # if normalize_edge_reduce and avg_num_neighbors is not None:
40 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:40:9: ERA001 Found commented-out code
   |
38 |         # TODO: will clean-up later
39 |         # if normalize_edge_reduce and avg_num_neighbors is not None:
40 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
41 |         self._factor = 1
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:55:17: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
53 |         )
54 | 
55 |         factor: Optional[float] = self._factor  # torchscript hack for typing
   |                 ^^^^^^^^ FA100
56 |         if factor is not None:
57 |             out = out * factor
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:70:14: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
68 |     """
69 | 
70 |     _factor: Optional[float]
   |              ^^^^^^^^ FA100
71 | 
72 |     def __init__(
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:72:9: ANN204 Missing return type annotation for special method `__init__`
   |
70 |     _factor: Optional[float]
71 | 
72 |     def __init__(
   |         ^^^^^^^^ ANN204
73 |         self,
74 |         num_types: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:75:9: ARG002 Unused method argument: `avg_num_neighbors`
   |
73 |         self,
74 |         num_types: int,
75 |         avg_num_neighbors: Optional[float] = None,
   |         ^^^^^^^^^^^^^^^^^ ARG002
76 |         normalize_edge_energy_sum: bool = True,
77 |         per_edge_species_scale: bool = False,
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:75:28: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
73 |         self,
74 |         num_types: int,
75 |         avg_num_neighbors: Optional[float] = None,
   |                            ^^^^^^^^ FA100
76 |         normalize_edge_energy_sum: bool = True,
77 |         per_edge_species_scale: bool = False,
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:76:9: FBT001 Boolean-typed positional argument in function definition
   |
74 |         num_types: int,
75 |         avg_num_neighbors: Optional[float] = None,
76 |         normalize_edge_energy_sum: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ FBT001
77 |         per_edge_species_scale: bool = False,
78 |         irreps_in={},
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:76:9: FBT002 Boolean default positional argument in function definition
   |
74 |         num_types: int,
75 |         avg_num_neighbors: Optional[float] = None,
76 |         normalize_edge_energy_sum: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ FBT002
77 |         per_edge_species_scale: bool = False,
78 |         irreps_in={},
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:76:9: ARG002 Unused method argument: `normalize_edge_energy_sum`
   |
74 |         num_types: int,
75 |         avg_num_neighbors: Optional[float] = None,
76 |         normalize_edge_energy_sum: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ARG002
77 |         per_edge_species_scale: bool = False,
78 |         irreps_in={},
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:77:9: FBT001 Boolean-typed positional argument in function definition
   |
75 |         avg_num_neighbors: Optional[float] = None,
76 |         normalize_edge_energy_sum: bool = True,
77 |         per_edge_species_scale: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^ FBT001
78 |         irreps_in={},
79 |     ):
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:77:9: FBT002 Boolean default positional argument in function definition
   |
75 |         avg_num_neighbors: Optional[float] = None,
76 |         normalize_edge_energy_sum: bool = True,
77 |         per_edge_species_scale: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^ FBT002
78 |         irreps_in={},
79 |     ):
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:78:19: B006 Do not use mutable data structures for argument defaults
   |
76 |         normalize_edge_energy_sum: bool = True,
77 |         per_edge_species_scale: bool = False,
78 |         irreps_in={},
   |                   ^^ B006
79 |     ):
80 |         """Sum edges into nodes."""
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:89:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
88 |         self._factor = None
89 |         # TODO: will clean-up later
   |           ^^^^ TD002
90 |         # if normalize_edge_energy_sum and avg_num_neighbors is not None:
91 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:89:11: TD003 Missing issue link on the line following this TODO
   |
88 |         self._factor = None
89 |         # TODO: will clean-up later
   |           ^^^^ TD003
90 |         # if normalize_edge_energy_sum and avg_num_neighbors is not None:
91 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:89:11: FIX002 Line contains TODO, consider resolving the issue
   |
88 |         self._factor = None
89 |         # TODO: will clean-up later
   |           ^^^^ FIX002
90 |         # if normalize_edge_energy_sum and avg_num_neighbors is not None:
91 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:91:9: ERA001 Found commented-out code
   |
89 |         # TODO: will clean-up later
90 |         # if normalize_edge_energy_sum and avg_num_neighbors is not None:
91 |         #     self._factor = 1.0 / math.sqrt(avg_num_neighbors)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
92 |         self._factor = 1
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Allegro\nn\_edgewise.py:115:17: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
114 |         atom_eng = scatter(edge_eng, edge_center, dim=0, dim_size=len(species))
115 |         factor: Optional[float] = self._factor  # torchscript hack for typing
    |                 ^^^^^^^^ FA100
116 |         if factor is not None:
117 |             atom_eng = atom_eng * factor
    |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:22:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
20 |     out_field: str
21 | 
22 |     def __init__(
   |         ^^^^^^^^ PLR0913
23 |         self,
24 |         mlp_latent_dimensions: List[int],
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:22:9: ANN204 Missing return type annotation for special method `__init__`
   |
20 |     out_field: str
21 | 
22 |     def __init__(
   |         ^^^^^^^^ ANN204
23 |         self,
24 |         mlp_latent_dimensions: List[int],
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_fc.py:24:32: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
22 |     def __init__(
23 |         self,
24 |         mlp_latent_dimensions: List[int],
   |                                ^^^^ FA100
25 |         mlp_output_dimension: Optional[int],
26 |         mlp_nonlinearity: Optional[str] = "silu",
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:25:31: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
23 |         self,
24 |         mlp_latent_dimensions: List[int],
25 |         mlp_output_dimension: Optional[int],
   |                               ^^^^^^^^ FA100
26 |         mlp_nonlinearity: Optional[str] = "silu",
27 |         mlp_initialization: str = "uniform",
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:26:27: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
24 |         mlp_latent_dimensions: List[int],
25 |         mlp_output_dimension: Optional[int],
26 |         mlp_nonlinearity: Optional[str] = "silu",
   |                           ^^^^^^^^ FA100
27 |         mlp_initialization: str = "uniform",
28 |         mlp_dropout_p: float = 0.0,
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:29:9: FBT001 Boolean-typed positional argument in function definition
   |
27 |         mlp_initialization: str = "uniform",
28 |         mlp_dropout_p: float = 0.0,
29 |         mlp_batchnorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT001
30 |         field: str = AtomicDataDict.NODE_FEATURES_KEY,
31 |         out_field: Optional[str] = None,
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:29:9: FBT002 Boolean default positional argument in function definition
   |
27 |         mlp_initialization: str = "uniform",
28 |         mlp_dropout_p: float = 0.0,
29 |         mlp_batchnorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT002
30 |         field: str = AtomicDataDict.NODE_FEATURES_KEY,
31 |         out_field: Optional[str] = None,
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:31:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
29 |         mlp_batchnorm: bool = False,
30 |         field: str = AtomicDataDict.NODE_FEATURES_KEY,
31 |         out_field: Optional[str] = None,
   |                    ^^^^^^^^ FA100
32 |         irreps_in=None,
33 |     ):
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:41:9: S101 Use of `assert` detected
   |
39 |             required_irreps_in=[self.field],
40 |         )
41 |         assert len(self.irreps_in[self.field]) == 1
   |         ^^^^^^ S101
42 |         assert self.irreps_in[self.field][0].ir == (0, 1)  # scalars
43 |         in_dim = self.irreps_in[self.field][0].mul
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:42:9: S101 Use of `assert` detected
   |
40 |         )
41 |         assert len(self.irreps_in[self.field]) == 1
42 |         assert self.irreps_in[self.field][0].ir == (0, 1)  # scalars
   |         ^^^^^^ S101
43 |         in_dim = self.irreps_in[self.field][0].mul
44 |         self._module = ScalarMLPFunction(
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:68:9: C901 `__init__` is too complex (12 > 10)
   |
66 |     out_features: int
67 | 
68 |     def __init__(
   |         ^^^^^^^^ C901
69 |         self,
70 |         mlp_input_dimension: Optional[int],
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:68:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
66 |     out_features: int
67 | 
68 |     def __init__(
   |         ^^^^^^^^ PLR0913
69 |         self,
70 |         mlp_input_dimension: Optional[int],
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:68:9: ANN204 Missing return type annotation for special method `__init__`
   |
66 |     out_features: int
67 | 
68 |     def __init__(
   |         ^^^^^^^^ ANN204
69 |         self,
70 |         mlp_input_dimension: Optional[int],
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_fc.py:70:30: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
68 |     def __init__(
69 |         self,
70 |         mlp_input_dimension: Optional[int],
   |                              ^^^^^^^^ FA100
71 |         mlp_latent_dimensions: List[int],
72 |         mlp_output_dimension: Optional[int],
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:71:32: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
69 |         self,
70 |         mlp_input_dimension: Optional[int],
71 |         mlp_latent_dimensions: List[int],
   |                                ^^^^ FA100
72 |         mlp_output_dimension: Optional[int],
73 |         mlp_nonlinearity: Optional[str] = "silu",
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:72:31: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
70 |         mlp_input_dimension: Optional[int],
71 |         mlp_latent_dimensions: List[int],
72 |         mlp_output_dimension: Optional[int],
   |                               ^^^^^^^^ FA100
73 |         mlp_nonlinearity: Optional[str] = "silu",
74 |         mlp_initialization: str = "normal",
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:73:27: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
71 |         mlp_latent_dimensions: List[int],
72 |         mlp_output_dimension: Optional[int],
73 |         mlp_nonlinearity: Optional[str] = "silu",
   |                           ^^^^^^^^ FA100
74 |         mlp_initialization: str = "normal",
75 |         mlp_dropout_p: float = 0.0,
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:76:9: FBT001 Boolean-typed positional argument in function definition
   |
74 |         mlp_initialization: str = "normal",
75 |         mlp_dropout_p: float = 0.0,
76 |         mlp_batchnorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT001
77 |     ):
78 |         super().__init__()
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:76:9: FBT002 Boolean default positional argument in function definition
   |
74 |         mlp_initialization: str = "normal",
75 |         mlp_dropout_p: float = 0.0,
76 |         mlp_batchnorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT002
77 |     ):
78 |         super().__init__()
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:94:9: S101 Use of `assert` detected
   |
92 |             + ([mlp_output_dimension] if mlp_output_dimension is not None else [])
93 |         )
94 |         assert len(dimensions) >= 2  # Must have input and output dim
   |         ^^^^^^ S101
95 |         num_layers = len(dimensions) - 1
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:94:35: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
92 |             + ([mlp_output_dimension] if mlp_output_dimension is not None else [])
93 |         )
94 |         assert len(dimensions) >= 2  # Must have input and output dim
   |                                   ^ PLR2004
95 |         num_layers = len(dimensions) - 1
   |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:105:13: N802 Function name `Proxy` should be lowercase
    |
103 |         tracer = fx.proxy.GraphAppendingTracer(graph)
104 | 
105 |         def Proxy(n):
    |             ^^^^^ N802
106 |             return fx.Proxy(n, tracer=tracer)
    |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:105:13: ANN202 Missing return type annotation for private function `Proxy`
    |
103 |         tracer = fx.proxy.GraphAppendingTracer(graph)
104 | 
105 |         def Proxy(n):
    |             ^^^^^ ANN202
106 |             return fx.Proxy(n, tracer=tracer)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_fc.py:133:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
131 |             else:
132 |                 raise NotImplementedError(
133 |                     f"Invalid mlp_initialization {mlp_initialization}"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
134 |                 )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Allegro\nn\_fc.py:162:13: SLF001 Private member accessed: `_dropout`
    |
160 |         if mlp_dropout_p > 0:
161 |             # with normal dropout everything blows up
162 |             base._dropout = torch.nn.AlphaDropout(p=mlp_dropout_p)
    |             ^^^^^^^^^^^^^ SLF001
163 | 
164 |         self._codegen_register({"_forward": fx.GraphModule(base, graph)})
    |

src\stk_search\geom3d\models\Allegro\nn\_fc.py:166:9: ANN202 Missing return type annotation for private function `forward`
    |
164 |         self._codegen_register({"_forward": fx.GraphModule(base, graph)})
165 | 
166 |     def forward(self, x):
    |         ^^^^^^^ ANN202
167 |         return self._forward(x)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:20:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
18 |     num_basis: int
19 | 
20 |     def __init__(
   |         ^^^^^^^^ PLR0913
21 |         self,
22 |         r_max: float,
   |

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:20:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 |     num_basis: int
19 | 
20 |     def __init__(
   |         ^^^^^^^^ ANN204
21 |         self,
22 |         r_max: float,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:25:39: B006 Do not use mutable data structures for argument defaults
   |
23 |         r_min: float = 0.0,
24 |         original_basis=BesselBasis,
25 |         original_basis_kwargs: dict = {},
   |                                       ^^ B006
26 |         n: int = 4000,
27 |         norm_basis_mean_shift: bool = True,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:27:9: FBT001 Boolean-typed positional argument in function definition
   |
25 |         original_basis_kwargs: dict = {},
26 |         n: int = 4000,
27 |         norm_basis_mean_shift: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^ FBT001
28 |     ):
29 |         super().__init__()
   |

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:27:9: FBT002 Boolean default positional argument in function definition
   |
25 |         original_basis_kwargs: dict = {},
26 |         n: int = 4000,
27 |         norm_basis_mean_shift: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^ FBT002
28 |     ):
29 |         super().__init__()
   |

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:33:9: S101 Use of `assert` detected
   |
31 |         self.r_min = r_min
32 |         self.r_max = r_max
33 |         assert self.r_min >= 0.0
   |         ^^^^^^ S101
34 |         assert self.r_max > r_min
35 |         self.n = n
   |

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:34:9: S101 Use of `assert` detected
   |
32 |         self.r_max = r_max
33 |         assert self.r_min >= 0.0
34 |         assert self.r_max > r_min
   |         ^^^^^^ S101
35 |         self.n = n
   |

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:44:13: S101 Use of `assert` detected
   |
42 |             rs = torch.linspace(r_min, r_max, n + 1)[1:]
43 |             bs = self.basis(rs)
44 |             assert bs.ndim == 2 and len(bs) == n
   |             ^^^^^^ S101
45 |             if norm_basis_mean_shift:
46 |                 basis_std, basis_mean = torch.std_mean(bs, dim=0)
   |

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:44:13: PT018 Assertion should be broken down into multiple parts
   |
42 |             rs = torch.linspace(r_min, r_max, n + 1)[1:]
43 |             bs = self.basis(rs)
44 |             assert bs.ndim == 2 and len(bs) == n
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT018
45 |             if norm_basis_mean_shift:
46 |                 basis_std, basis_mean = torch.std_mean(bs, dim=0)
   |
   = help: Break down assertion into multiple parts

src\stk_search\geom3d\models\Allegro\nn\_norm_basis.py:44:31: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
42 |             rs = torch.linspace(r_min, r_max, n + 1)[1:]
43 |             bs = self.basis(rs)
44 |             assert bs.ndim == 2 and len(bs) == n
   |                               ^ PLR2004
45 |             if norm_basis_mean_shift:
46 |                 basis_std, basis_mean = torch.std_mean(bs, dim=0)
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\__init__.py:5:1: PLE0604 Invalid object in `__all__`, must contain only strings
  |
3 | from ._linear import Linear
4 | 
5 | __all__ = [Contracter, MakeWeightedChannels, Linear]
  | ^^^^^^^ PLE0604
  |

src\stk_search\geom3d\models\Allegro\nn\_strided\_channels.py:13:9: ANN204 Missing return type annotation for special method `__init__`
   |
11 |     _num_irreps: int
12 | 
13 |     def __init__(
   |         ^^^^^^^^ ANN204
14 |         self,
15 |         irreps_in,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_strided\_channels.py:20:9: S101 Use of `assert` detected
   |
18 |     ):
19 |         super().__init__()
20 |         assert all(mul == 1 for mul, ir in irreps_in)
   |         ^^^^^^ S101
21 |         assert multiplicity_out >= 1
22 |         # Each edgewise output multiplicity is a per-irrep weighted sum over the input
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_channels.py:21:9: S101 Use of `assert` detected
   |
19 |         super().__init__()
20 |         assert all(mul == 1 for mul, ir in irreps_in)
21 |         assert multiplicity_out >= 1
   |         ^^^^^^ S101
22 |         # Each edgewise output multiplicity is a per-irrep weighted sum over the input
23 |         # So we need to apply the weight for the ith irrep to all DOF in that irrep
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_channels.py:24:19: RUF017 Avoid quadratic list summation
   |
22 |         # Each edgewise output multiplicity is a per-irrep weighted sum over the input
23 |         # So we need to apply the weight for the ith irrep to all DOF in that irrep
24 |         w_index = sum(([i] * ir.dim for i, (mul, ir) in enumerate(irreps_in)), [])
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF017
25 |         # pad to padded length
26 |         n_pad = (
   |
   = help: Replace with `functools.reduce`

src\stk_search\geom3d\models\Allegro\nn\_strided\_channels.py:38:9: ANN202 Missing return type annotation for private function `forward`
   |
36 |         self.weight_numel = len(irreps_in) * multiplicity_out
37 | 
38 |     def forward(self, edge_attr, weights):
   |         ^^^^^^^ ANN202
39 |         # weights are [z, u, i]
40 |         # edge_attr are [z, i]
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:16:5: C901 `codegen_strided_tensor_product_forward` is too complex (25 > 10)
   |
16 | def codegen_strided_tensor_product_forward(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
17 |     irreps_in1: o3.Irreps,
18 |     in1_var: List[float],
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:16:5: PLR0913 Too many arguments in function definition (12 > 5)
   |
16 | def codegen_strided_tensor_product_forward(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
17 |     irreps_in1: o3.Irreps,
18 |     in1_var: List[float],
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:16:5: PLR0912 Too many branches (28 > 12)
   |
16 | def codegen_strided_tensor_product_forward(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
17 |     irreps_in1: o3.Irreps,
18 |     in1_var: List[float],
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:16:5: PLR0915 Too many statements (113 > 50)
   |
16 | def codegen_strided_tensor_product_forward(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
17 |     irreps_in1: o3.Irreps,
18 |     in1_var: List[float],
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:18:14: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
16 | def codegen_strided_tensor_product_forward(
17 |     irreps_in1: o3.Irreps,
18 |     in1_var: List[float],
   |              ^^^^ FA100
19 |     irreps_in2: o3.Irreps,
20 |     in2_var: List[float],
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:20:14: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
18 |     in1_var: List[float],
19 |     irreps_in2: o3.Irreps,
20 |     in2_var: List[float],
   |              ^^^^ FA100
21 |     irreps_out: o3.Irreps,
22 |     out_var: List[float],
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:22:14: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
20 |     in2_var: List[float],
21 |     irreps_out: o3.Irreps,
22 |     out_var: List[float],
   |              ^^^^ FA100
23 |     instructions: List[Instruction],
24 |     normalization: str = "component",
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:23:19: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
21 |     irreps_out: o3.Irreps,
22 |     out_var: List[float],
23 |     instructions: List[Instruction],
   |                   ^^^^ FA100
24 |     normalization: str = "component",
25 |     shared_weights: bool = False,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:25:5: FBT001 Boolean-typed positional argument in function definition
   |
23 |     instructions: List[Instruction],
24 |     normalization: str = "component",
25 |     shared_weights: bool = False,
   |     ^^^^^^^^^^^^^^ FBT001
26 |     specialized_code: bool = True,
27 |     sparse_mode: Optional[str] = None,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:25:5: FBT002 Boolean default positional argument in function definition
   |
23 |     instructions: List[Instruction],
24 |     normalization: str = "component",
25 |     shared_weights: bool = False,
   |     ^^^^^^^^^^^^^^ FBT002
26 |     specialized_code: bool = True,
27 |     sparse_mode: Optional[str] = None,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:26:5: FBT001 Boolean-typed positional argument in function definition
   |
24 |     normalization: str = "component",
25 |     shared_weights: bool = False,
26 |     specialized_code: bool = True,
   |     ^^^^^^^^^^^^^^^^ FBT001
27 |     sparse_mode: Optional[str] = None,
28 |     pad_to_alignment: int = 1,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:26:5: FBT002 Boolean default positional argument in function definition
   |
24 |     normalization: str = "component",
25 |     shared_weights: bool = False,
26 |     specialized_code: bool = True,
   |     ^^^^^^^^^^^^^^^^ FBT002
27 |     sparse_mode: Optional[str] = None,
28 |     pad_to_alignment: int = 1,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:27:18: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
25 |     shared_weights: bool = False,
26 |     specialized_code: bool = True,
27 |     sparse_mode: Optional[str] = None,
   |                  ^^^^^^^^ FA100
28 |     pad_to_alignment: int = 1,
29 | ) -> Optional[fx.GraphModule]:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:29:6: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
27 |     sparse_mode: Optional[str] = None,
28 |     pad_to_alignment: int = 1,
29 | ) -> Optional[fx.GraphModule]:
   |      ^^^^^^^^ FA100
30 |     """Returns None if strided doesn't make sense for this TP."""
31 |     # TODO padding
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:30:5: D401 First line of docstring should be in imperative mood: "Returns None if strided doesn't make sense for this TP."
   |
28 |     pad_to_alignment: int = 1,
29 | ) -> Optional[fx.GraphModule]:
30 |     """Returns None if strided doesn't make sense for this TP."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
31 |     # TODO padding
32 |     # Check if irreps can be strided
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:31:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
29 | ) -> Optional[fx.GraphModule]:
30 |     """Returns None if strided doesn't make sense for this TP."""
31 |     # TODO padding
   |       ^^^^ TD002
32 |     # Check if irreps can be strided
33 |     try:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:31:7: TD004 Missing colon in TODO
   |
29 | ) -> Optional[fx.GraphModule]:
30 |     """Returns None if strided doesn't make sense for this TP."""
31 |     # TODO padding
   |       ^^^^ TD004
32 |     # Check if irreps can be strided
33 |     try:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:31:7: TD003 Missing issue link on the line following this TODO
   |
29 | ) -> Optional[fx.GraphModule]:
30 |     """Returns None if strided doesn't make sense for this TP."""
31 |     # TODO padding
   |       ^^^^ TD003
32 |     # Check if irreps can be strided
33 |     try:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:31:7: FIX002 Line contains TODO, consider resolving the issue
   |
29 | ) -> Optional[fx.GraphModule]:
30 |     """Returns None if strided doesn't make sense for this TP."""
31 |     # TODO padding
   |       ^^^^ FIX002
32 |     # Check if irreps can be strided
33 |     try:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:42:5: S101 Use of `assert` detected
   |
41 |     # check the instructions
42 |     assert specialized_code
   |     ^^^^^^ S101
43 | 
44 |     connection_mode = instructions[0].connection_mode
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:52:9: S101 Use of `assert` detected
   |
50 |         return None
51 |     if not has_weight:
52 |         assert connection_mode == "uuu"  # for now
   |         ^^^^^^ S101
53 | 
54 |     # TODO: sort insturctions?
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:54:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
52 |         assert connection_mode == "uuu"  # for now
53 | 
54 |     # TODO: sort insturctions?
   |       ^^^^ TD002
55 | 
56 |     # Make the big w3j
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:54:7: TD003 Missing issue link on the line following this TODO
   |
52 |         assert connection_mode == "uuu"  # for now
53 | 
54 |     # TODO: sort insturctions?
   |       ^^^^ TD003
55 | 
56 |     # Make the big w3j
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:54:7: FIX002 Line contains TODO, consider resolving the issue
   |
52 |         assert connection_mode == "uuu"  # for now
53 | 
54 |     # TODO: sort insturctions?
   |       ^^^^ FIX002
55 | 
56 |     # Make the big w3j
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:65:9: S101 Use of `assert` detected
   |
63 |         mul_ir_out = layout_out.base_irreps[ins.i_out]
64 | 
65 |         assert mul_ir_in1.ir.p * mul_ir_in2.ir.p == mul_ir_out.ir.p
   |         ^^^^^^ S101
66 |         assert (
67 |             abs(mul_ir_in1.ir.l - mul_ir_in2.ir.l)
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:66:9: S101 Use of `assert` detected
   |
65 |         assert mul_ir_in1.ir.p * mul_ir_in2.ir.p == mul_ir_out.ir.p
66 |         assert (
   |         ^^^^^^ S101
67 |             abs(mul_ir_in1.ir.l - mul_ir_in2.ir.l)
68 |             <= mul_ir_out.ir.l
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:82:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
81 |         # Normalize the path through its w3j entries
82 |         # TODO: path_weight
   |           ^^^^ TD002
83 |         # TODO: in and out var
84 |         if normalization == "component":
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:82:11: TD003 Missing issue link on the line following this TODO
   |
81 |         # Normalize the path through its w3j entries
82 |         # TODO: path_weight
   |           ^^^^ TD003
83 |         # TODO: in and out var
84 |         if normalization == "component":
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:82:11: FIX002 Line contains TODO, consider resolving the issue
   |
81 |         # Normalize the path through its w3j entries
82 |         # TODO: path_weight
   |           ^^^^ FIX002
83 |         # TODO: in and out var
84 |         if normalization == "component":
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:83:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
81 |         # Normalize the path through its w3j entries
82 |         # TODO: path_weight
83 |         # TODO: in and out var
   |           ^^^^ TD002
84 |         if normalization == "component":
85 |             w3j_norm_term = 2 * mul_ir_out.ir.l + 1
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:83:11: TD003 Missing issue link on the line following this TODO
   |
81 |         # Normalize the path through its w3j entries
82 |         # TODO: path_weight
83 |         # TODO: in and out var
   |           ^^^^ TD003
84 |         if normalization == "component":
85 |             w3j_norm_term = 2 * mul_ir_out.ir.l + 1
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:83:11: FIX002 Line contains TODO, consider resolving the issue
   |
81 |         # Normalize the path through its w3j entries
82 |         # TODO: path_weight
83 |         # TODO: in and out var
   |           ^^^^ FIX002
84 |         if normalization == "component":
85 |             w3j_norm_term = 2 * mul_ir_out.ir.l + 1
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:165:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
163 |         )
164 | 
165 |     # TODO: support use of sparse w3j
    |       ^^^^ TD002
166 |     if sparse_mode is None:
167 |         # in dense, must shape it for einsum:
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:165:7: TD003 Missing issue link on the line following this TODO
    |
163 |         )
164 | 
165 |     # TODO: support use of sparse w3j
    |       ^^^^ TD003
166 |     if sparse_mode is None:
167 |         # in dense, must shape it for einsum:
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:165:7: FIX002 Line contains TODO, consider resolving the issue
    |
163 |         )
164 | 
165 |     # TODO: support use of sparse w3j
    |       ^^^^ FIX002
166 |     if sparse_mode is None:
167 |         # in dense, must shape it for einsum:
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:181:58: C408 Unnecessary `tuple` call (rewrite as a literal)
    |
179 |         w3j = (
180 |             w3j.to_dense()
181 |             .reshape(((num_paths,) if num_paths > 1 else tuple()) + kij_shape)
    |                                                          ^^^^^^^ C408
182 |             .contiguous()
183 |         )
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:208:28: RUF005 Consider `(*weight_shape, num_paths)` instead of concatenation
    |
206 |             # ^ if there's only one weighted path, the einsum simplifies without the p dimension
207 |             weight_label = weight_label + "p"
208 |             weight_shape = weight_shape + (num_paths,)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
209 |         if not shared_weights:
210 |             weight_shape = (-1,) + weight_shape
    |
    = help: Replace with `(*weight_shape, num_paths)`

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:210:28: RUF005 Consider `(-1, *weight_shape)` instead of concatenation
    |
208 |             weight_shape = weight_shape + (num_paths,)
209 |         if not shared_weights:
210 |             weight_shape = (-1,) + weight_shape
    |                            ^^^^^^^^^^^^^^^^^^^^ RUF005
211 |     else:
212 |         weight_shape = tuple()
    |
    = help: Replace with `(-1, *weight_shape)`

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:212:24: C408 Unnecessary `tuple` call (rewrite as a literal)
    |
210 |             weight_shape = (-1,) + weight_shape
211 |     else:
212 |         weight_shape = tuple()
    |                        ^^^^^^^ C408
213 | 
214 |     # generate actual code
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:218:9: N802 Function name `Proxy` should be lowercase
    |
216 |     tracer = fx.proxy.GraphAppendingTracer(graph_out)
217 | 
218 |     def Proxy(n):
    |         ^^^^^ N802
219 |         return fx.Proxy(n, tracer=tracer)
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:218:9: ANN202 Missing return type annotation for private function `Proxy`
    |
216 |     tracer = fx.proxy.GraphAppendingTracer(graph_out)
217 | 
218 |     def Proxy(n):
    |         ^^^^^ ANN202
219 |         return fx.Proxy(n, tracer=tracer)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:311:9: SLF001 Private member accessed: `_w3j_mm`
    |
309 |     constants_root.register_buffer("_big_w3j", w3j)
310 |     if sparse_mode is not None:
311 |         constants_root._w3j_mm = ExplicitGradSpmm(w3j)
    |         ^^^^^^^^^^^^^^^^^^^^^^ SLF001
312 |     graphmod_out = fx.GraphModule(constants_root, graph_out, class_name="tp_forward")
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:328:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
326 |         # for more details.
327 |         #
328 |         # TODO: consider the impact maximum intermediate result size on this logic
    |           ^^^^ TD002
329 |         #         \- this is the `memory_limit` option in opt_einsum
330 |         # TODO: allow user to choose opt_einsum parameters?
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:328:11: TD003 Missing issue link on the line following this TODO
    |
326 |         # for more details.
327 |         #
328 |         # TODO: consider the impact maximum intermediate result size on this logic
    |           ^^^^ TD003
329 |         #         \- this is the `memory_limit` option in opt_einsum
330 |         # TODO: allow user to choose opt_einsum parameters?
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:328:11: FIX002 Line contains TODO, consider resolving the issue
    |
326 |         # for more details.
327 |         #
328 |         # TODO: consider the impact maximum intermediate result size on this logic
    |           ^^^^ FIX002
329 |         #         \- this is the `memory_limit` option in opt_einsum
330 |         # TODO: allow user to choose opt_einsum parameters?
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:330:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
328 |         # TODO: consider the impact maximum intermediate result size on this logic
329 |         #         \- this is the `memory_limit` option in opt_einsum
330 |         # TODO: allow user to choose opt_einsum parameters?
    |           ^^^^ TD002
331 |         #
332 |         # We use float32 and zeros to save memory and time, since opt_einsum_fx looks only at traced shapes, not values or dtypes.
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:330:11: TD003 Missing issue link on the line following this TODO
    |
328 |         # TODO: consider the impact maximum intermediate result size on this logic
329 |         #         \- this is the `memory_limit` option in opt_einsum
330 |         # TODO: allow user to choose opt_einsum parameters?
    |           ^^^^ TD003
331 |         #
332 |         # We use float32 and zeros to save memory and time, since opt_einsum_fx looks only at traced shapes, not values or dtypes.
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:330:11: FIX002 Line contains TODO, consider resolving the issue
    |
328 |         # TODO: consider the impact maximum intermediate result size on this logic
329 |         #         \- this is the `memory_limit` option in opt_einsum
330 |         # TODO: allow user to choose opt_einsum parameters?
    |           ^^^^ FIX002
331 |         #
332 |         # We use float32 and zeros to save memory and time, since opt_einsum_fx looks only at traced shapes, not values or dtypes.
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:345:5: SLF001 Private member accessed: `_dim_in1`
    |
344 |     graphmod_out.weight_shape = weight_shape
345 |     graphmod_out._dim_in1 = layout_in1.base_dim
    |     ^^^^^^^^^^^^^^^^^^^^^ SLF001
346 |     graphmod_out._dim_in2 = layout_in2.base_dim
347 |     graphmod_out._dim_out = layout_out.base_dim
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:346:5: SLF001 Private member accessed: `_dim_in2`
    |
344 |     graphmod_out.weight_shape = weight_shape
345 |     graphmod_out._dim_in1 = layout_in1.base_dim
346 |     graphmod_out._dim_in2 = layout_in2.base_dim
    |     ^^^^^^^^^^^^^^^^^^^^^ SLF001
347 |     graphmod_out._dim_out = layout_out.base_dim
348 |     graphmod_out._mul_out = layout_out.mul
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:347:5: SLF001 Private member accessed: `_dim_out`
    |
345 |     graphmod_out._dim_in1 = layout_in1.base_dim
346 |     graphmod_out._dim_in2 = layout_in2.base_dim
347 |     graphmod_out._dim_out = layout_out.base_dim
    |     ^^^^^^^^^^^^^^^^^^^^^ SLF001
348 |     graphmod_out._mul_out = layout_out.mul
349 |     graphmod_out.weight_numel = abs(prod(weight_shape))
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:348:5: SLF001 Private member accessed: `_mul_out`
    |
346 |     graphmod_out._dim_in2 = layout_in2.base_dim
347 |     graphmod_out._dim_out = layout_out.base_dim
348 |     graphmod_out._mul_out = layout_out.mul
    |     ^^^^^^^^^^^^^^^^^^^^^ SLF001
349 |     graphmod_out.weight_numel = abs(prod(weight_shape))
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:354:5: N802 Function name `Contracter` should be lowercase
    |
354 | def Contracter(
    |     ^^^^^^^^^^ N802
355 |     irreps_in1,
356 |     irreps_in2,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:354:5: PLR0913 Too many arguments in function definition (9 > 5)
    |
354 | def Contracter(
    |     ^^^^^^^^^^ PLR0913
355 |     irreps_in1,
356 |     irreps_in2,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:354:5: ANN202 Missing return type annotation for private function `Contracter`
    |
354 | def Contracter(
    |     ^^^^^^^^^^ ANN202
355 |     irreps_in1,
356 |     irreps_in2,
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:358:19: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
356 |     irreps_in2,
357 |     irreps_out,
358 |     instructions: List[Tuple[int, int, int]],
    |                   ^^^^ FA100
359 |     has_weight: bool,
360 |     connection_mode: str,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:358:24: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
356 |     irreps_in2,
357 |     irreps_out,
358 |     instructions: List[Tuple[int, int, int]],
    |                        ^^^^^ FA100
359 |     has_weight: bool,
360 |     connection_mode: str,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:359:5: FBT001 Boolean-typed positional argument in function definition
    |
357 |     irreps_out,
358 |     instructions: List[Tuple[int, int, int]],
359 |     has_weight: bool,
    |     ^^^^^^^^^^ FBT001
360 |     connection_mode: str,
361 |     pad_to_alignment: int = 1,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:362:5: FBT001 Boolean-typed positional argument in function definition
    |
360 |     connection_mode: str,
361 |     pad_to_alignment: int = 1,
362 |     shared_weights: bool = False,
    |     ^^^^^^^^^^^^^^ FBT001
363 |     sparse_mode: Optional[str] = None,
364 | ):
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:362:5: FBT002 Boolean default positional argument in function definition
    |
360 |     connection_mode: str,
361 |     pad_to_alignment: int = 1,
362 |     shared_weights: bool = False,
    |     ^^^^^^^^^^^^^^ FBT002
363 |     sparse_mode: Optional[str] = None,
364 | ):
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:363:18: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
361 |     pad_to_alignment: int = 1,
362 |     shared_weights: bool = False,
363 |     sparse_mode: Optional[str] = None,
    |                  ^^^^^^^^ FA100
364 | ):
365 |     irreps_in1 = o3.Irreps(irreps_in1)
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:366:5: S101 Use of `assert` detected
    |
364 | ):
365 |     irreps_in1 = o3.Irreps(irreps_in1)
366 |     assert all(mul == irreps_in1[0].mul for mul, ir in irreps_in1)
    |     ^^^^^^ S101
367 |     irreps_in2 = o3.Irreps(irreps_in2)
368 |     assert all(mul == irreps_in2[0].mul for mul, ir in irreps_in2)
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:368:5: S101 Use of `assert` detected
    |
366 |     assert all(mul == irreps_in1[0].mul for mul, ir in irreps_in1)
367 |     irreps_in2 = o3.Irreps(irreps_in2)
368 |     assert all(mul == irreps_in2[0].mul for mul, ir in irreps_in2)
    |     ^^^^^^ S101
369 |     irreps_out = o3.Irreps(irreps_out)
370 |     assert all(mul == irreps_out[0].mul for mul, ir in irreps_out)
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:370:5: S101 Use of `assert` detected
    |
368 |     assert all(mul == irreps_in2[0].mul for mul, ir in irreps_in2)
369 |     irreps_out = o3.Irreps(irreps_out)
370 |     assert all(mul == irreps_out[0].mul for mul, ir in irreps_out)
    |     ^^^^^^ S101
371 | 
372 |     mod = codegen_strided_tensor_product_forward(
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:410:15: TRY003 Avoid specifying long messages outside the exception class
    |
408 |     )
409 |     if mod is None:
410 |         raise ValueError("Couldn't use strided for given layout")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
411 |     if sparse_mode is None:
412 |         mod = compile(mod)
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_contract.py:410:26: EM101 Exception must not use a string literal, assign to variable first
    |
408 |     )
409 |     if mod is None:
410 |         raise ValueError("Couldn't use strided for given layout")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
411 |     if sparse_mode is None:
412 |         mod = compile(mod)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\Allegro\nn\_strided\_layout.py:19:9: ANN204 Missing return type annotation for special method `__init__`
   |
17 |     mul: int
18 | 
19 |     def __init__(self, irreps: Irreps, pad_to_multiple: int = 1):
   |         ^^^^^^^^ ANN204
20 |         irreps = Irreps(irreps)
21 |         if not self.can_be_strided(irreps):
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_strided\_layout.py:22:19: TRY003 Avoid specifying long messages outside the exception class
   |
20 |         irreps = Irreps(irreps)
21 |         if not self.can_be_strided(irreps):
22 |             raise ValueError(f"Irreps `{irreps}` cannot be strided.")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
23 |         self.irreps = irreps
24 |         self.base_irreps = Irreps([(1, ir) for _, ir in irreps])
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_layout.py:22:30: EM102 Exception must not use an f-string literal, assign to variable first
   |
20 |         irreps = Irreps(irreps)
21 |         if not self.can_be_strided(irreps):
22 |             raise ValueError(f"Irreps `{irreps}` cannot be strided.")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
23 |         self.irreps = irreps
24 |         self.base_irreps = Irreps([(1, ir) for _, ir in irreps])
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Allegro\nn\_strided\_layout.py:26:9: S101 Use of `assert` detected
   |
24 |         self.base_irreps = Irreps([(1, ir) for _, ir in irreps])
25 |         self.mul = self.irreps[0].mul if len(irreps) > 0 else 0
26 |         assert self.irreps.dim == self.base_irreps.dim * self.mul
   |         ^^^^^^ S101
27 |         self.pad_to_multiple = pad_to_multiple
28 |         assert self.pad_to_multiple in (1, 2, 4, 8)
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_layout.py:28:9: S101 Use of `assert` detected
   |
26 |         assert self.irreps.dim == self.base_irreps.dim * self.mul
27 |         self.pad_to_multiple = pad_to_multiple
28 |         assert self.pad_to_multiple in (1, 2, 4, 8)
   |         ^^^^^^ S101
29 | 
30 |         self.base_dim = int(
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_layout.py:56:9: S101 Use of `assert` detected
   |
55 |         # They should be inverses:
56 |         assert torch.all(
   |         ^^^^^^ S101
57 |             self.indexes_to_strided[self.indexes_to_catted]
58 |             == torch.arange(self.irreps.dim)
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:20:5: C901 `codegen_strided_linear` is too complex (14 > 10)
   |
20 | def codegen_strided_linear(
   |     ^^^^^^^^^^^^^^^^^^^^^^ C901
21 |     irreps_in: o3.Irreps,
22 |     irreps_out: o3.Irreps,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:20:5: PLR0913 Too many arguments in function definition (7 > 5)
   |
20 | def codegen_strided_linear(
   |     ^^^^^^^^^^^^^^^^^^^^^^ PLR0913
21 |     irreps_in: o3.Irreps,
22 |     irreps_out: o3.Irreps,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:20:5: PLR0912 Too many branches (15 > 12)
   |
20 | def codegen_strided_linear(
   |     ^^^^^^^^^^^^^^^^^^^^^^ PLR0912
21 |     irreps_in: o3.Irreps,
22 |     irreps_out: o3.Irreps,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:20:5: PLR0915 Too many statements (64 > 50)
   |
20 | def codegen_strided_linear(
   |     ^^^^^^^^^^^^^^^^^^^^^^ PLR0915
21 |     irreps_in: o3.Irreps,
22 |     irreps_out: o3.Irreps,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:23:19: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
21 |     irreps_in: o3.Irreps,
22 |     irreps_out: o3.Irreps,
23 |     instructions: List[Instruction],
   |                   ^^^^ FA100
24 |     normalization: str = "component",
25 |     internal_weights: bool = False,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:25:5: FBT001 Boolean-typed positional argument in function definition
   |
23 |     instructions: List[Instruction],
24 |     normalization: str = "component",
25 |     internal_weights: bool = False,
   |     ^^^^^^^^^^^^^^^^ FBT001
26 |     shared_weights: bool = False,
27 |     pad_to_alignment: int = 1,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:25:5: FBT002 Boolean default positional argument in function definition
   |
23 |     instructions: List[Instruction],
24 |     normalization: str = "component",
25 |     internal_weights: bool = False,
   |     ^^^^^^^^^^^^^^^^ FBT002
26 |     shared_weights: bool = False,
27 |     pad_to_alignment: int = 1,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:26:5: FBT001 Boolean-typed positional argument in function definition
   |
24 |     normalization: str = "component",
25 |     internal_weights: bool = False,
26 |     shared_weights: bool = False,
   |     ^^^^^^^^^^^^^^ FBT001
27 |     pad_to_alignment: int = 1,
28 | ) -> Optional[fx.GraphModule]:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:26:5: FBT002 Boolean default positional argument in function definition
   |
24 |     normalization: str = "component",
25 |     internal_weights: bool = False,
26 |     shared_weights: bool = False,
   |     ^^^^^^^^^^^^^^ FBT002
27 |     pad_to_alignment: int = 1,
28 | ) -> Optional[fx.GraphModule]:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:28:6: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
26 |     shared_weights: bool = False,
27 |     pad_to_alignment: int = 1,
28 | ) -> Optional[fx.GraphModule]:
   |      ^^^^^^^^ FA100
29 |     """Returns None if strided doesn't make sense for this TP."""
30 |     # Check if irreps can be strided
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:29:5: D401 First line of docstring should be in imperative mood: "Returns None if strided doesn't make sense for this TP."
   |
27 |     pad_to_alignment: int = 1,
28 | ) -> Optional[fx.GraphModule]:
29 |     """Returns None if strided doesn't make sense for this TP."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
30 |     # Check if irreps can be strided
31 |     try:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:38:5: S101 Use of `assert` detected
   |
36 |         return None
37 | 
38 |     assert normalization == "component"
   |     ^^^^^^ S101
39 | 
40 |     if internal_weights:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:41:9: S101 Use of `assert` detected
   |
40 |     if internal_weights:
41 |         assert shared_weights
   |         ^^^^^^ S101
42 | 
43 |     # group instructions by output
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:44:21: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
43 |     # group instructions by output
44 |     ins_per_output: List[List[Instruction]] = [
   |                     ^^^^ FA100
45 |         [ins for ins in instructions if ins.i_out == i]
46 |         for i in range(len(layout_out.base_irreps))
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:44:26: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
43 |     # group instructions by output
44 |     ins_per_output: List[List[Instruction]] = [
   |                          ^^^^ FA100
45 |         [ins for ins in instructions if ins.i_out == i]
46 |         for i in range(len(layout_out.base_irreps))
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:48:28: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
46 |         for i in range(len(layout_out.base_irreps))
47 |     ]
48 |     ins_group_irrep_slice: List[Tuple[int, int]] = []
   |                            ^^^^ FA100
49 |     # check that each output is a mix of sequential irreps
50 |     for ins_group in ins_per_output:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:48:33: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
46 |         for i in range(len(layout_out.base_irreps))
47 |     ]
48 |     ins_group_irrep_slice: List[Tuple[int, int]] = []
   |                                 ^^^^^ FA100
49 |     # check that each output is a mix of sequential irreps
50 |     for ins_group in ins_per_output:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:54:17: C401 Unnecessary generator (rewrite as a `set` comprehension)
   |
52 |             ins_group_irrep_slice.append(None)
53 |             continue
54 |         i_ins = set(ins.i_in for ins in ins_group)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C401
55 |         ins_group_irrep_slice.append((min(i_ins), max(i_ins)))
56 |         min_i_in, max_i_in = ins_group_irrep_slice[-1]
   |
   = help: Rewrite as a `set` comprehension

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:57:9: S101 Use of `assert` detected
   |
55 |         ins_group_irrep_slice.append((min(i_ins), max(i_ins)))
56 |         min_i_in, max_i_in = ins_group_irrep_slice[-1]
57 |         assert i_ins == set(range(min_i_in, 1 + max_i_in))
   |         ^^^^^^ S101
58 |         assert all(
59 |             layout_in.base_irreps[min_i_in] == layout_in.base_irreps[i]
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:58:9: S101 Use of `assert` detected
   |
56 |         min_i_in, max_i_in = ins_group_irrep_slice[-1]
57 |         assert i_ins == set(range(min_i_in, 1 + max_i_in))
58 |         assert all(
   |         ^^^^^^ S101
59 |             layout_in.base_irreps[min_i_in] == layout_in.base_irreps[i]
60 |             for i in range(min_i_in, max_i_in + 1)
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:62:9: S101 Use of `assert` detected
   |
60 |             for i in range(min_i_in, max_i_in + 1)
61 |         ), "All mixed irreps must be the same"
62 |         assert all(ins.i_out == ins_group[0].i_out for ins in ins_group)
   |         ^^^^^^ S101
63 | 
64 |     # TODO: split bad groups into multiple groups
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:64:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
62 |         assert all(ins.i_out == ins_group[0].i_out for ins in ins_group)
63 | 
64 |     # TODO: split bad groups into multiple groups
   |       ^^^^ TD002
65 | 
66 |     # generate actual code
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:64:7: TD003 Missing issue link on the line following this TODO
   |
62 |         assert all(ins.i_out == ins_group[0].i_out for ins in ins_group)
63 | 
64 |     # TODO: split bad groups into multiple groups
   |       ^^^^ TD003
65 | 
66 |     # generate actual code
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:64:7: FIX002 Line contains TODO, consider resolving the issue
   |
62 |         assert all(ins.i_out == ins_group[0].i_out for ins in ins_group)
63 | 
64 |     # TODO: split bad groups into multiple groups
   |       ^^^^ FIX002
65 | 
66 |     # generate actual code
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:70:9: N802 Function name `Proxy` should be lowercase
   |
68 |     tracer = fx.proxy.GraphAppendingTracer(graph_out)
69 | 
70 |     def Proxy(n):
   |         ^^^^^ N802
71 |         return fx.Proxy(n, tracer=tracer)
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:70:9: ANN202 Missing return type annotation for private function `Proxy`
   |
68 |     tracer = fx.proxy.GraphAppendingTracer(graph_out)
69 | 
70 |     def Proxy(n):
   |         ^^^^^ ANN202
71 |         return fx.Proxy(n, tracer=tracer)
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:86:9: B007 Loop control variable `ins_grp_i` not used within loop body
   |
85 |     w_index: int = 0
86 |     for ins_grp_i, (ins_grp, ins_grp_ins) in enumerate(
   |         ^^^^^^^^^ B007
87 |         zip(ins_per_output, ins_group_irrep_slice)
88 |     ):
   |
   = help: Rename unused `ins_grp_i` to `_ins_grp_i`

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:138:5: SIM108 Use ternary operator `out = torch.cat(outs, dim=-1) if len(outs) > 1 else outs[0]` instead of `if`-`else`-block
    |
136 |           for i, out in enumerate(outs)
137 |       ]
138 |       if len(outs) > 1:
    |  _____^
139 | |         out = torch.cat(outs, dim=-1)
140 | |     else:
141 | |         out = outs[0]
    | |_____________________^ SIM108
142 |   
143 |       # pad output
    |
    = help: Replace `if`-`else`-block with `out = torch.cat(outs, dim=-1) if len(outs) > 1 else outs[0]`

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:182:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
180 |         # for more details.
181 |         #
182 |         # TODO: consider the impact maximum intermediate result size on this logic
    |           ^^^^ TD002
183 |         #         \- this is the `memory_limit` option in opt_einsum
184 |         # TODO: allow user to choose opt_einsum parameters?
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:182:11: TD003 Missing issue link on the line following this TODO
    |
180 |         # for more details.
181 |         #
182 |         # TODO: consider the impact maximum intermediate result size on this logic
    |           ^^^^ TD003
183 |         #         \- this is the `memory_limit` option in opt_einsum
184 |         # TODO: allow user to choose opt_einsum parameters?
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:182:11: FIX002 Line contains TODO, consider resolving the issue
    |
180 |         # for more details.
181 |         #
182 |         # TODO: consider the impact maximum intermediate result size on this logic
    |           ^^^^ FIX002
183 |         #         \- this is the `memory_limit` option in opt_einsum
184 |         # TODO: allow user to choose opt_einsum parameters?
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:184:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
182 |         # TODO: consider the impact maximum intermediate result size on this logic
183 |         #         \- this is the `memory_limit` option in opt_einsum
184 |         # TODO: allow user to choose opt_einsum parameters?
    |           ^^^^ TD002
185 |         #
186 |         # We use float32 and zeros to save memory and time, since opt_einsum_fx looks only at traced shapes, not values or dtypes.
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:184:11: TD003 Missing issue link on the line following this TODO
    |
182 |         # TODO: consider the impact maximum intermediate result size on this logic
183 |         #         \- this is the `memory_limit` option in opt_einsum
184 |         # TODO: allow user to choose opt_einsum parameters?
    |           ^^^^ TD003
185 |         #
186 |         # We use float32 and zeros to save memory and time, since opt_einsum_fx looks only at traced shapes, not values or dtypes.
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:184:11: FIX002 Line contains TODO, consider resolving the issue
    |
182 |         # TODO: consider the impact maximum intermediate result size on this logic
183 |         #         \- this is the `memory_limit` option in opt_einsum
184 |         # TODO: allow user to choose opt_einsum parameters?
    |           ^^^^ FIX002
185 |         #
186 |         # We use float32 and zeros to save memory and time, since opt_einsum_fx looks only at traced shapes, not values or dtypes.
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:190:26: C408 Unnecessary `tuple` call (rewrite as a literal)
    |
188 |         example_inputs = (
189 |             torch.zeros((batchdim, layout_in.dim)),
190 |             torch.zeros((tuple() if shared_weights else (batchdim,)) + (w_index,)),
    |                          ^^^^^^^ C408
191 |         )
192 |         graphmod_out = jitable(optimize_einsums_full(graphmod_out, example_inputs))
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:200:5: N802 Function name `Linear` should be lowercase
    |
200 | def Linear(
    |     ^^^^^^ N802
201 |     irreps_in,
202 |     irreps_out,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:200:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
200 | def Linear(
    |     ^^^^^^ PLR0913
201 |     irreps_in,
202 |     irreps_out,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:200:5: ANN202 Missing return type annotation for private function `Linear`
    |
200 | def Linear(
    |     ^^^^^^ ANN202
201 |     irreps_in,
202 |     irreps_out,
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:203:21: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
201 |     irreps_in,
202 |     irreps_out,
203 |     shared_weights: Optional[bool] = None,
    |                     ^^^^^^^^ FA100
204 |     internal_weights: bool = False,
205 |     instructions: Optional[List[Tuple[int, int]]] = None,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:204:5: FBT001 Boolean-typed positional argument in function definition
    |
202 |     irreps_out,
203 |     shared_weights: Optional[bool] = None,
204 |     internal_weights: bool = False,
    |     ^^^^^^^^^^^^^^^^ FBT001
205 |     instructions: Optional[List[Tuple[int, int]]] = None,
206 |     pad_to_alignment: int = 1,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:204:5: FBT002 Boolean default positional argument in function definition
    |
202 |     irreps_out,
203 |     shared_weights: Optional[bool] = None,
204 |     internal_weights: bool = False,
    |     ^^^^^^^^^^^^^^^^ FBT002
205 |     instructions: Optional[List[Tuple[int, int]]] = None,
206 |     pad_to_alignment: int = 1,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:205:19: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
203 |     shared_weights: Optional[bool] = None,
204 |     internal_weights: bool = False,
205 |     instructions: Optional[List[Tuple[int, int]]] = None,
    |                   ^^^^^^^^ FA100
206 |     pad_to_alignment: int = 1,
207 | ):
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:205:28: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
203 |     shared_weights: Optional[bool] = None,
204 |     internal_weights: bool = False,
205 |     instructions: Optional[List[Tuple[int, int]]] = None,
    |                            ^^^^ FA100
206 |     pad_to_alignment: int = 1,
207 | ):
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_linear.py:205:33: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
203 |     shared_weights: Optional[bool] = None,
204 |     internal_weights: bool = False,
205 |     instructions: Optional[List[Tuple[int, int]]] = None,
    |                                 ^^^^^ FA100
206 |     pad_to_alignment: int = 1,
207 | ):
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:15:13: ANN205 Missing return type annotation for staticmethod `forward`
   |
13 |     class _ExplicitGradSpmm(torch.autograd.Function):
14 |         @staticmethod
15 |         def forward(ctx, sparse, a):
   |             ^^^^^^^ ANN205
16 |             ctx.save_for_backward(sparse)
17 |             return torch.mm(sparse, a)
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:20:13: ANN205 Missing return type annotation for staticmethod `backward`
   |
19 |         @staticmethod
20 |         def backward(ctx, grad_output):
   |             ^^^^^^^^ ANN205
21 |             (sparse,) = ctx.saved_tensors
22 |             return None, torch.mm(sparse.t(), grad_output)
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:24:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
22 |             return None, torch.mm(sparse.t(), grad_output)
23 | 
24 |     # TODO: support csr with similar method; wait for 1.10 probably
   |       ^^^^ TD002
25 |     @torch.jit.script
26 |     def _remake_sparse_coo(i, v, shape: Tuple[int, int]):
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:24:7: TD003 Missing issue link on the line following this TODO
   |
22 |             return None, torch.mm(sparse.t(), grad_output)
23 | 
24 |     # TODO: support csr with similar method; wait for 1.10 probably
   |       ^^^^ TD003
25 |     @torch.jit.script
26 |     def _remake_sparse_coo(i, v, shape: Tuple[int, int]):
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:24:7: FIX002 Line contains TODO, consider resolving the issue
   |
22 |             return None, torch.mm(sparse.t(), grad_output)
23 | 
24 |     # TODO: support csr with similar method; wait for 1.10 probably
   |       ^^^^ FIX002
25 |     @torch.jit.script
26 |     def _remake_sparse_coo(i, v, shape: Tuple[int, int]):
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:26:9: ANN202 Missing return type annotation for private function `_remake_sparse_coo`
   |
24 |     # TODO: support csr with similar method; wait for 1.10 probably
25 |     @torch.jit.script
26 |     def _remake_sparse_coo(i, v, shape: Tuple[int, int]):
   |         ^^^^^^^^^^^^^^^^^^ ANN202
27 |         out = torch.sparse_coo_tensor(
28 |             indices=i, values=v, size=shape, device=v.device, dtype=v.dtype
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:26:41: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
24 |     # TODO: support csr with similar method; wait for 1.10 probably
25 |     @torch.jit.script
26 |     def _remake_sparse_coo(i, v, shape: Tuple[int, int]):
   |                                         ^^^^^ FA100
27 |         out = torch.sparse_coo_tensor(
28 |             indices=i, values=v, size=shape, device=v.device, dtype=v.dtype
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:32:25: FBT003 Boolean positional value in function call
   |
30 |         # mark it as coalesced, cause it is from when we build it in
31 |         # ExplicitGradSpmm's __init__
32 |         out._coalesced_(True)  # undocumented, AFAIK
   |                         ^^^^ FBT003
33 |         assert out.is_coalesced()
34 |         return out
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:33:9: S101 Use of `assert` detected
   |
31 |         # ExplicitGradSpmm's __init__
32 |         out._coalesced_(True)  # undocumented, AFAIK
33 |         assert out.is_coalesced()
   |         ^^^^^^ S101
34 |         return out
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:38:16: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
36 |     @compile_mode("trace")
37 |     class ExplicitGradSpmmCOO(torch.nn.Module):
38 |         shape: Tuple[int, int]
   |                ^^^^^ FA100
39 | 
40 |         def __init__(self, mat: torch.Tensor):
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:40:13: ANN204 Missing return type annotation for special method `__init__`
   |
38 |         shape: Tuple[int, int]
39 | 
40 |         def __init__(self, mat: torch.Tensor):
   |             ^^^^^^^^ ANN204
41 |             super().__init__()
42 |             assert mat.is_sparse
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:42:13: S101 Use of `assert` detected
   |
40 |         def __init__(self, mat: torch.Tensor):
41 |             super().__init__()
42 |             assert mat.is_sparse
   |             ^^^^^^ S101
43 |             assert mat.ndim == 2
44 |             mat = mat.coalesce()
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:43:13: S101 Use of `assert` detected
   |
41 |             super().__init__()
42 |             assert mat.is_sparse
43 |             assert mat.ndim == 2
   |             ^^^^^^ S101
44 |             mat = mat.coalesce()
45 |             # To workaround https://github.com/pytorch/pytorch/issues/63987,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:43:32: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
41 |             super().__init__()
42 |             assert mat.is_sparse
43 |             assert mat.ndim == 2
   |                                ^ PLR2004
44 |             mat = mat.coalesce()
45 |             # To workaround https://github.com/pytorch/pytorch/issues/63987,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:51:13: ANN202 Missing return type annotation for private function `forward`
   |
49 |             self.shape = tuple(mat.shape)
50 | 
51 |         def forward(self, x):
   |             ^^^^^^^ ANN202
52 |             # TODO: support csr
53 |             sp = _remake_sparse_coo(self._i, self._v, self.shape)
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:52:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
51 |         def forward(self, x):
52 |             # TODO: support csr
   |               ^^^^ TD002
53 |             sp = _remake_sparse_coo(self._i, self._v, self.shape)
54 |             if self.training:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:52:15: TD003 Missing issue link on the line following this TODO
   |
51 |         def forward(self, x):
52 |             # TODO: support csr
   |               ^^^^ TD003
53 |             sp = _remake_sparse_coo(self._i, self._v, self.shape)
54 |             if self.training:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:52:15: FIX002 Line contains TODO, consider resolving the issue
   |
51 |         def forward(self, x):
52 |             # TODO: support csr
   |               ^^^^ FIX002
53 |             sp = _remake_sparse_coo(self._i, self._v, self.shape)
54 |             if self.training:
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:63:13: ANN202 Missing return type annotation for private function `_make_tracing_inputs`
   |
61 |             return tmp
62 | 
63 |         def _make_tracing_inputs(self, n: int):
   |             ^^^^^^^^^^^^^^^^^^^^ ANN202
64 |             return [
65 |                 {
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:81:53: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
80 |         @torch.jit.script
81 |         def _remake_sparse_csr(crow, col, v, shape: Tuple[int, int]) -> torch.Tensor:
   |                                                     ^^^^^ FA100
82 |             return torch.sparse_csr_tensor(
83 |                 crow_indices=crow,
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:94:20: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
92 |         @compile_mode("trace")
93 |         class ExplicitGradSpmmCSR(torch.nn.Module):
94 |             shape: Tuple[int, int]
   |                    ^^^^^ FA100
95 | 
96 |             def __init__(self, mat: torch.Tensor):
   |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:96:17: ANN204 Missing return type annotation for special method `__init__`
   |
94 |             shape: Tuple[int, int]
95 | 
96 |             def __init__(self, mat: torch.Tensor):
   |                 ^^^^^^^^ ANN204
97 |                 super().__init__()
98 |                 assert mat.is_sparse_csr
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:98:17: S101 Use of `assert` detected
    |
 96 |             def __init__(self, mat: torch.Tensor):
 97 |                 super().__init__()
 98 |                 assert mat.is_sparse_csr
    |                 ^^^^^^ S101
 99 |                 assert mat.ndim == 2
100 |                 # To workaround https://github.com/pytorch/pytorch/issues/63987,
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:99:17: S101 Use of `assert` detected
    |
 97 |                 super().__init__()
 98 |                 assert mat.is_sparse_csr
 99 |                 assert mat.ndim == 2
    |                 ^^^^^^ S101
100 |                 # To workaround https://github.com/pytorch/pytorch/issues/63987,
101 |                 # save indices and values explicitly
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:99:36: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
 97 |                 super().__init__()
 98 |                 assert mat.is_sparse_csr
 99 |                 assert mat.ndim == 2
    |                                    ^ PLR2004
100 |                 # To workaround https://github.com/pytorch/pytorch/issues/63987,
101 |                 # save indices and values explicitly
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:107:17: ANN202 Missing return type annotation for private function `forward`
    |
105 |                 self.shape = tuple(mat.shape)
106 | 
107 |             def forward(self, x):
    |                 ^^^^^^^ ANN202
108 |                 # TODO: support csr
109 |                 sp = _remake_sparse_csr(self._crow, self._col, self._v, self.shape)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:108:19: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
107 |             def forward(self, x):
108 |                 # TODO: support csr
    |                   ^^^^ TD002
109 |                 sp = _remake_sparse_csr(self._crow, self._col, self._v, self.shape)
110 |                 if self.training:
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:108:19: TD003 Missing issue link on the line following this TODO
    |
107 |             def forward(self, x):
108 |                 # TODO: support csr
    |                   ^^^^ TD003
109 |                 sp = _remake_sparse_csr(self._crow, self._col, self._v, self.shape)
110 |                 if self.training:
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:108:19: FIX002 Line contains TODO, consider resolving the issue
    |
107 |             def forward(self, x):
108 |                 # TODO: support csr
    |                   ^^^^ FIX002
109 |                 sp = _remake_sparse_csr(self._crow, self._col, self._v, self.shape)
110 |                 if self.training:
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:119:17: ANN202 Missing return type annotation for private function `_make_tracing_inputs`
    |
117 |                 return tmp
118 | 
119 |             def _make_tracing_inputs(self, n: int):
    |                 ^^^^^^^^^^^^^^^^^^^^ ANN202
120 |                 return [
121 |                     {
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:134:9: N802 Function name `ExplicitGradSpmm` should be lowercase
    |
132 |                 ]
133 | 
134 |     def ExplicitGradSpmm(mat):
    |         ^^^^^^^^^^^^^^^^ N802
135 |         if mat.is_sparse:
136 |             return ExplicitGradSpmmCOO(mat)
    |

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:134:9: ANN202 Missing return type annotation for private function `ExplicitGradSpmm`
    |
132 |                 ]
133 | 
134 |     def ExplicitGradSpmm(mat):
    |         ^^^^^^^^^^^^^^^^ ANN202
135 |         if mat.is_sparse:
136 |             return ExplicitGradSpmmCOO(mat)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:137:9: RET505 Unnecessary `elif` after `return` statement
    |
135 |         if mat.is_sparse:
136 |             return ExplicitGradSpmmCOO(mat)
137 |         elif _TORCH_IS_GE_1_10 and mat.is_sparse_csr:
    |         ^^^^ RET505
138 |             return ExplicitGradSpmmCSR(mat)
139 |         else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:148:13: ANN204 Missing return type annotation for special method `__init__`
    |
147 |     class ExplicitGradSpmm(torch.nn.Module):
148 |         def __init__(self, mat):
    |             ^^^^^^^^ ANN204
149 |             super().__init__()
150 |             self.mat = SparseTensor.from_dense(mat.to_dense())
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Allegro\nn\_strided\_spmm.py:152:13: ANN202 Missing return type annotation for private function `forward`
    |
150 |             self.mat = SparseTensor.from_dense(mat.to_dense())
151 | 
152 |         def forward(self, x):
    |             ^^^^^^^ ANN202
153 |             return spmm_add(self.mat, x)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\Allegro\nn\cutoffs.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Allegro\nn\cutoffs.py:8:5: D401 First line of docstring should be in imperative mood: "A piecewise cosine cutoff starting the cosine decay at r_decay_factor*r_max."
   |
 6 |   @torch.jit.script
 7 |   def cosine_cutoff(x: torch.Tensor, r_max: torch.Tensor, r_start_cos_ratio: float = 0.8):
 8 |       """A piecewise cosine cutoff starting the cosine decay at r_decay_factor*r_max.
   |  _____^
 9 | | 
10 | |     Broadcasts over r_max.
11 | |     """
   | |_______^ D401
12 |       r_max, x = torch.broadcast_tensors(r_max.unsqueeze(-1), x.unsqueeze(0))
13 |       r_decay: torch.Tensor = r_start_cos_ratio * r_max
   |

src\stk_search\geom3d\models\Allegro\nn\cutoffs.py:20:5: D417 Missing argument description in the docstring for `polynomial_cutoff`: `x`
   |
19 | @torch.jit.script
20 | def polynomial_cutoff(
   |     ^^^^^^^^^^^^^^^^^ D417
21 |     x: torch.Tensor, r_max: torch.Tensor, p: float = 6.0
22 | ) -> torch.Tensor:
   |

src\stk_search\geom3d\models\Allegro\nn\cutoffs.py:23:5: D400 First line should end with a period
   |
21 |       x: torch.Tensor, r_max: torch.Tensor, p: float = 6.0
22 |   ) -> torch.Tensor:
23 |       """Polynomial cutoff, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |  _____^
24 | | 
25 | |     Parameters
26 | |     ----------
27 | |     r_max : tensor
28 | |         Broadcasts over r_max.
29 | | 
30 | |     p : int
31 | |         Power used in envelope function
32 | | 
33 | |     """
   | |_______^ D400
34 |       assert p >= 2.0
35 |       r_max, x = torch.broadcast_tensors(r_max.unsqueeze(-1), x.unsqueeze(0))
   |
   = help: Add period

src\stk_search\geom3d\models\Allegro\nn\cutoffs.py:23:5: D415 First line should end with a period, question mark, or exclamation point
   |
21 |       x: torch.Tensor, r_max: torch.Tensor, p: float = 6.0
22 |   ) -> torch.Tensor:
23 |       """Polynomial cutoff, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |  _____^
24 | | 
25 | |     Parameters
26 | |     ----------
27 | |     r_max : tensor
28 | |         Broadcasts over r_max.
29 | | 
30 | |     p : int
31 | |         Power used in envelope function
32 | | 
33 | |     """
   | |_______^ D415
34 |       assert p >= 2.0
35 |       r_max, x = torch.broadcast_tensors(r_max.unsqueeze(-1), x.unsqueeze(0))
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Allegro\nn\cutoffs.py:34:5: S101 Use of `assert` detected
   |
33 |     """
34 |     assert p >= 2.0
   |     ^^^^^^ S101
35 |     r_max, x = torch.broadcast_tensors(r_max.unsqueeze(-1), x.unsqueeze(0))
36 |     x = x / r_max
   |

src\stk_search\geom3d\models\Allegro\nn\cutoffs.py:34:17: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
   |
33 |     """
34 |     assert p >= 2.0
   |                 ^^^ PLR2004
35 |     r_max, x = torch.broadcast_tensors(r_max.unsqueeze(-1), x.unsqueeze(0))
36 |     x = x / r_max
   |

src\stk_search\geom3d\models\AutoEncoder.py:1:1: N999 Invalid module name: 'AutoEncoder'
src\stk_search\geom3d\models\AutoEncoder.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\AutoEncoder.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | from torch import nn
  |

src\stk_search\geom3d\models\AutoEncoder.py:6:5: N802 Function name `L1_loss` should be lowercase
  |
6 | def L1_loss(p, z, average=True):
  |     ^^^^^^^ N802
7 |     loss = torch.abs(p-z)
8 |     loss = loss.sum(dim=1)
  |

src\stk_search\geom3d\models\AutoEncoder.py:6:5: D103 Missing docstring in public function
  |
6 | def L1_loss(p, z, average=True):
  |     ^^^^^^^ D103
7 |     loss = torch.abs(p-z)
8 |     loss = loss.sum(dim=1)
  |

src\stk_search\geom3d\models\AutoEncoder.py:6:19: FBT002 Boolean default positional argument in function definition
  |
6 | def L1_loss(p, z, average=True):
  |                   ^^^^^^^ FBT002
7 |     loss = torch.abs(p-z)
8 |     loss = loss.sum(dim=1)
  |

src\stk_search\geom3d\models\AutoEncoder.py:14:5: N802 Function name `L2_loss` should be lowercase
   |
14 | def L2_loss(p, z, average=True):
   |     ^^^^^^^ N802
15 |     loss = (p-z)**2
16 |     loss = loss.sum(dim=1)
   |

src\stk_search\geom3d\models\AutoEncoder.py:14:5: D103 Missing docstring in public function
   |
14 | def L2_loss(p, z, average=True):
   |     ^^^^^^^ D103
15 |     loss = (p-z)**2
16 |     loss = loss.sum(dim=1)
   |

src\stk_search\geom3d\models\AutoEncoder.py:14:19: FBT002 Boolean default positional argument in function definition
   |
14 | def L2_loss(p, z, average=True):
   |                   ^^^^^^^ FBT002
15 |     loss = (p-z)**2
16 |     loss = loss.sum(dim=1)
   |

src\stk_search\geom3d\models\AutoEncoder.py:22:5: D103 Missing docstring in public function
   |
22 | def cosine_similarity(p, z, average=True):
   |     ^^^^^^^^^^^^^^^^^ D103
23 |     p = F.normalize(p, p=2, dim=1)
24 |     z = F.normalize(z, p=2, dim=1)
   |

src\stk_search\geom3d\models\AutoEncoder.py:22:29: FBT002 Boolean default positional argument in function definition
   |
22 | def cosine_similarity(p, z, average=True):
   |                             ^^^^^^^ FBT002
23 |     p = F.normalize(p, p=2, dim=1)
24 |     z = F.normalize(z, p=2, dim=1)
   |

src\stk_search\geom3d\models\AutoEncoder.py:31:7: D101 Missing docstring in public class
   |
31 | class AutoEncoder(torch.nn.Module):
   |       ^^^^^^^^^^^ D101
32 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
33 |         super(AutoEncoder, self).__init__()
   |

src\stk_search\geom3d\models\AutoEncoder.py:32:9: ANN204 Missing return type annotation for special method `__init__`
   |
31 | class AutoEncoder(torch.nn.Module):
32 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
   |         ^^^^^^^^ ANN204
33 |         super(AutoEncoder, self).__init__()
34 |         self.emb_dim = emb_dim
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\AutoEncoder.py:32:9: D107 Missing docstring in `__init__`
   |
31 | class AutoEncoder(torch.nn.Module):
32 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
   |         ^^^^^^^^ D107
33 |         super(AutoEncoder, self).__init__()
34 |         self.emb_dim = emb_dim
   |

src\stk_search\geom3d\models\AutoEncoder.py:33:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
31 | class AutoEncoder(torch.nn.Module):
32 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
33 |         super(AutoEncoder, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^ UP008
34 |         self.emb_dim = emb_dim
35 |         self.loss = loss
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\AutoEncoder.py:42:13: ERA001 Found commented-out code
   |
40 |         if loss == "l1":
41 |             self.criterion = nn.L1Loss()
42 |             # self.criterion = L1_loss
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
43 |         elif loss == "l2":
44 |             self.criterion = nn.MSELoss()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\AutoEncoder.py:45:13: ERA001 Found commented-out code
   |
43 |         elif loss == "l2":
44 |             self.criterion = nn.MSELoss()
45 |             # self.criterion = L2_loss
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
46 |         elif loss == "cosine":
47 |             self.criterion = cosine_similarity
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\AutoEncoder.py:56:9: D102 Missing docstring in public method
   |
54 |         )
55 | 
56 |     def forward(self, x, y):
   |         ^^^^^^^ D102
57 |         if self.detach_target:
58 |             y = y.detach()
   |

src\stk_search\geom3d\models\AutoEncoder.py:66:16: RET504 Unnecessary assignment to `loss` before `return` statement
   |
65 |         loss = reconstruction_loss
66 |         return loss
   |                ^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\AutoEncoder.py:69:7: D101 Missing docstring in public class
   |
69 | class VariationalAutoEncoder(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^^^ D101
70 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
71 |         super(VariationalAutoEncoder, self).__init__()
   |

src\stk_search\geom3d\models\AutoEncoder.py:70:9: ANN204 Missing return type annotation for special method `__init__`
   |
69 | class VariationalAutoEncoder(torch.nn.Module):
70 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
   |         ^^^^^^^^ ANN204
71 |         super(VariationalAutoEncoder, self).__init__()
72 |         self.emb_dim = emb_dim
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\AutoEncoder.py:70:9: D107 Missing docstring in `__init__`
   |
69 | class VariationalAutoEncoder(torch.nn.Module):
70 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
   |         ^^^^^^^^ D107
71 |         super(VariationalAutoEncoder, self).__init__()
72 |         self.emb_dim = emb_dim
   |

src\stk_search\geom3d\models\AutoEncoder.py:71:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
69 | class VariationalAutoEncoder(torch.nn.Module):
70 |     def __init__(self, emb_dim, loss, detach_target, beta=1):
71 |         super(VariationalAutoEncoder, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
72 |         self.emb_dim = emb_dim
73 |         self.loss = loss
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\AutoEncoder.py:80:13: ERA001 Found commented-out code
   |
78 |         if loss == "l1":
79 |             self.criterion = nn.L1Loss()
80 |             # self.criterion = L1_loss
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
81 |         elif loss == "l2":
82 |             self.criterion = nn.MSELoss()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\AutoEncoder.py:83:13: ERA001 Found commented-out code
   |
81 |         elif loss == "l2":
82 |             self.criterion = nn.MSELoss()
83 |             # self.criterion = L2_loss
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
84 |         elif loss == "cosine":
85 |             self.criterion = cosine_similarity
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\AutoEncoder.py:97:9: D102 Missing docstring in public method
   |
95 |         )
96 | 
97 |     def encode(self, x):
   |         ^^^^^^ D102
98 |         mu = self.fc_mu(x)
99 |         log_var = self.fc_var(x)
   |

src\stk_search\geom3d\models\AutoEncoder.py:102:9: D102 Missing docstring in public method
    |
100 |         return mu, log_var
101 | 
102 |     def reparameterize(self, mu, log_var):
    |         ^^^^^^^^^^^^^^ D102
103 |         std = torch.exp(0.5 * log_var)
104 |         eps = torch.randn_like(std)
    |

src\stk_search\geom3d\models\AutoEncoder.py:107:9: D102 Missing docstring in public method
    |
105 |         return mu + eps * std
106 | 
107 |     def forward(self, x, y):
    |         ^^^^^^^ D102
108 |         if self.detach_target:
109 |             y = y.detach()
    |

src\stk_search\geom3d\models\AutoEncoder.py:121:16: RET504 Unnecessary assignment to `loss` before `return` statement
    |
119 |         loss = reconstruction_loss + self.beta * kl_loss
120 | 
121 |         return loss
    |                ^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\BERT.py:1:1: N999 Invalid module name: 'BERT'
src\stk_search\geom3d\models\BERT.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\BERT.py:6:7: D101 Missing docstring in public class
  |
6 | class BertForSequenceRegression(BertPreTrainedModel):
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^ D101
7 |     def __init__(self, config):
8 |         super(BertForSequenceRegression, self).__init__(config)
  |

src\stk_search\geom3d\models\BERT.py:7:9: ANN204 Missing return type annotation for special method `__init__`
  |
6 | class BertForSequenceRegression(BertPreTrainedModel):
7 |     def __init__(self, config):
  |         ^^^^^^^^ ANN204
8 |         super(BertForSequenceRegression, self).__init__(config)
9 |         self.bert = BertModel(config)
  |
  = help: Add return type annotation: `None`

src\stk_search\geom3d\models\BERT.py:7:9: D107 Missing docstring in `__init__`
  |
6 | class BertForSequenceRegression(BertPreTrainedModel):
7 |     def __init__(self, config):
  |         ^^^^^^^^ D107
8 |         super(BertForSequenceRegression, self).__init__(config)
9 |         self.bert = BertModel(config)
  |

src\stk_search\geom3d\models\BERT.py:8:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
 6 | class BertForSequenceRegression(BertPreTrainedModel):
 7 |     def __init__(self, config):
 8 |         super(BertForSequenceRegression, self).__init__(config)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
 9 |         self.bert = BertModel(config)
10 |         self.dropout = nn.Dropout(config.hidden_dropout_prob)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\BERT.py:14:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
12 |         self.loss_fct = torch.nn.MSELoss()
13 | 
14 |     def forward(self,
   |         ^^^^^^^ PLR0913
15 |         input_ids=None, attention_mask=None, token_type_ids=None, position_ids=None, head_mask=None, inputs_embeds=None,
16 |         labels=None, output_attentions=None, output_hidden_states=None):
   |

src\stk_search\geom3d\models\BERT.py:14:9: D102 Missing docstring in public method
   |
12 |         self.loss_fct = torch.nn.MSELoss()
13 | 
14 |     def forward(self,
   |         ^^^^^^^ D102
15 |         input_ids=None, attention_mask=None, token_type_ids=None, position_ids=None, head_mask=None, inputs_embeds=None,
16 |         labels=None, output_attentions=None, output_hidden_states=None):
   |

src\stk_search\geom3d\models\BERT.py:33:20: RET504 Unnecessary assignment to `loss` before `return` statement
   |
31 |         if labels is not None:
32 |             loss = self.loss_fct(outputs.view(-1), labels.view(-1))
33 |             return loss
   |                    ^^^^ RET504
34 |         else:
35 |             return outputs
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\BERT.py:34:9: RET505 Unnecessary `else` after `return` statement
   |
32 |             loss = self.loss_fct(outputs.view(-1), labels.view(-1))
33 |             return loss
34 |         else:
   |         ^^^^ RET505
35 |             return outputs
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\CDConv.py:1:1: N999 Invalid module name: 'CDConv'
src\stk_search\geom3d\models\CDConv.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\CDConv.py:9:1: B018 Found useless expression. Either assign it to a variable or remove it.
   |
 7 | from torch import Tensor, nn
 8 | 
 9 | _max, scatter_min, scatter_mean, scatter_sum
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B018
10 | from torch_geometric.nn import (
11 |     MLP,
   |

src\stk_search\geom3d\models\CDConv.py:9:1: F821 Undefined name `_max`
   |
 7 | from torch import Tensor, nn
 8 | 
 9 | _max, scatter_min, scatter_mean, scatter_sum
   | ^^^^ F821
10 | from torch_geometric.nn import (
11 |     MLP,
   |

src\stk_search\geom3d\models\CDConv.py:9:7: F821 Undefined name `scatter_min`
   |
 7 | from torch import Tensor, nn
 8 | 
 9 | _max, scatter_min, scatter_mean, scatter_sum
   |       ^^^^^^^^^^^ F821
10 | from torch_geometric.nn import (
11 |     MLP,
   |

src\stk_search\geom3d\models\CDConv.py:9:20: F821 Undefined name `scatter_mean`
   |
 7 | from torch import Tensor, nn
 8 | 
 9 | _max, scatter_min, scatter_mean, scatter_sum
   |                    ^^^^^^^^^^^^ F821
10 | from torch_geometric.nn import (
11 |     MLP,
   |

src\stk_search\geom3d\models\CDConv.py:9:34: F821 Undefined name `scatter_sum`
   |
 7 | from torch import Tensor, nn
 8 | 
 9 | _max, scatter_min, scatter_mean, scatter_sum
   |                                  ^^^^^^^^^^^ F821
10 | from torch_geometric.nn import (
11 |     MLP,
   |

src\stk_search\geom3d\models\CDConv.py:10:1: E402 Module level import not at top of file
   |
 9 |   _max, scatter_min, scatter_mean, scatter_sum
10 | / from torch_geometric.nn import (
11 | |     MLP,
12 | |     global_mean_pool,
13 | |     radius,
14 | | )
   | |_^ E402
15 |   from torch_geometric.nn.conv import MessagePassing
16 |   from torch_geometric.typing import (
   |

src\stk_search\geom3d\models\CDConv.py:15:1: E402 Module level import not at top of file
   |
13 |     radius,
14 | )
15 | from torch_geometric.nn.conv import MessagePassing
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
16 | from torch_geometric.typing import (
17 |     OptTensor,
   |

src\stk_search\geom3d\models\CDConv.py:16:1: E402 Module level import not at top of file
   |
14 |   )
15 |   from torch_geometric.nn.conv import MessagePassing
16 | / from torch_geometric.typing import (
17 | |     OptTensor,
18 | |     SparseTensor,
19 | |     set_diag,
20 | | )
   | |_^ E402
21 |   from torch_geometric.utils import add_self_loops, remove_self_loops
   |

src\stk_search\geom3d\models\CDConv.py:21:1: E402 Module level import not at top of file
   |
19 |     set_diag,
20 | )
21 | from torch_geometric.utils import add_self_loops, remove_self_loops
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

src\stk_search\geom3d\models\CDConv.py:24:5: D103 Missing docstring in public function
   |
24 | def kaiming_uniform(tensor, size):
   |     ^^^^^^^^^^^^^^^ D103
25 |     fan = 1
26 |     for i in range(1, len(size)):
   |

src\stk_search\geom3d\models\CDConv.py:34:7: D101 Missing docstring in public class
   |
32 |         return tensor.uniform_(-bound, bound)
33 | 
34 | class WeightNet(nn.Module):
   |       ^^^^^^^^^ D101
35 |     def __init__(self, l: int, kernel_channels):
36 |         super(WeightNet, self).__init__()
   |

src\stk_search\geom3d\models\CDConv.py:35:9: ANN204 Missing return type annotation for special method `__init__`
   |
34 | class WeightNet(nn.Module):
35 |     def __init__(self, l: int, kernel_channels):
   |         ^^^^^^^^ ANN204
36 |         super(WeightNet, self).__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\CDConv.py:35:9: D107 Missing docstring in `__init__`
   |
34 | class WeightNet(nn.Module):
35 |     def __init__(self, l: int, kernel_channels):
   |         ^^^^^^^^ D107
36 |         super(WeightNet, self).__init__()
   |

src\stk_search\geom3d\models\CDConv.py:35:24: E741 Ambiguous variable name: `l`
   |
34 | class WeightNet(nn.Module):
35 |     def __init__(self, l: int, kernel_channels):
   |                        ^ E741
36 |         super(WeightNet, self).__init__()
   |

src\stk_search\geom3d\models\CDConv.py:36:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
34 | class WeightNet(nn.Module):
35 |     def __init__(self, l: int, kernel_channels):
36 |         super(WeightNet, self).__init__()
   |              ^^^^^^^^^^^^^^^^^ UP008
37 | 
38 |         self.l = l
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\CDConv.py:54:9: D102 Missing docstring in public method
   |
52 |         self.relu = nn.LeakyReLU(0.2)
53 | 
54 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
55 |         for i, channels in enumerate(self.kernel_channels):
56 |             if i == 0:
   |

src\stk_search\geom3d\models\CDConv.py:62:9: D102 Missing docstring in public method
   |
60 |             self.bs[i].data.fill_(0.0)
61 | 
62 |     def forward(self, input, idx):
   |         ^^^^^^^ D102
63 |         for i in range(len(self.kernel_channels)):
64 |             W = torch.index_select(self.Ws[i], 0, idx)
   |

src\stk_search\geom3d\models\CDConv.py:62:23: A002 Argument `input` is shadowing a Python builtin
   |
60 |             self.bs[i].data.fill_(0.0)
61 | 
62 |     def forward(self, input, idx):
   |                       ^^^^^ A002
63 |         for i in range(len(self.kernel_channels)):
64 |             W = torch.index_select(self.Ws[i], 0, idx)
   |

src\stk_search\geom3d\models\CDConv.py:64:13: N806 Variable `W` in function should be lowercase
   |
62 |     def forward(self, input, idx):
63 |         for i in range(len(self.kernel_channels)):
64 |             W = torch.index_select(self.Ws[i], 0, idx)
   |             ^ N806
65 |             b = torch.index_select(self.bs[i], 0, idx)
66 |             if i == 0:
   |

src\stk_search\geom3d\models\CDConv.py:73:7: D101 Missing docstring in public class
   |
71 |         return weight
72 | 
73 | class CDConv(MessagePassing):
   |       ^^^^^^ D101
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
75 |         kwargs.setdefault("aggr", "add")
   |

src\stk_search\geom3d\models\CDConv.py:74:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
73 | class CDConv(MessagePassing):
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
   |         ^^^^^^^^ PLR0913
75 |         kwargs.setdefault("aggr", "add")
76 |         super().__init__(**kwargs)
   |

src\stk_search\geom3d\models\CDConv.py:74:9: ANN204 Missing return type annotation for special method `__init__`
   |
73 | class CDConv(MessagePassing):
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
   |         ^^^^^^^^ ANN204
75 |         kwargs.setdefault("aggr", "add")
76 |         super().__init__(**kwargs)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\CDConv.py:74:9: D107 Missing docstring in `__init__`
   |
73 | class CDConv(MessagePassing):
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
   |         ^^^^^^^^ D107
75 |         kwargs.setdefault("aggr", "add")
76 |         super().__init__(**kwargs)
   |

src\stk_search\geom3d\models\CDConv.py:74:34: E741 Ambiguous variable name: `l`
   |
73 | class CDConv(MessagePassing):
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
   |                                  ^ E741
75 |         kwargs.setdefault("aggr", "add")
76 |         super().__init__(**kwargs)
   |

src\stk_search\geom3d\models\CDConv.py:74:98: FBT001 Boolean-typed positional argument in function definition
   |
73 | class CDConv(MessagePassing):
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
   |                                                                                                  ^^^^^^^^^^^^^^ FBT001
75 |         kwargs.setdefault("aggr", "add")
76 |         super().__init__(**kwargs)
   |

src\stk_search\geom3d\models\CDConv.py:74:98: FBT002 Boolean default positional argument in function definition
   |
73 | class CDConv(MessagePassing):
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
   |                                                                                                  ^^^^^^^^^^^^^^ FBT002
75 |         kwargs.setdefault("aggr", "add")
76 |         super().__init__(**kwargs)
   |

src\stk_search\geom3d\models\CDConv.py:74:127: ANN003 Missing type annotation for `**kwargs`
   |
73 | class CDConv(MessagePassing):
74 |     def __init__(self, r: float, l: float, kernel_channels, in_channels: int, out_channels: int, add_self_loops: bool = True, **kwargs):
   |                                                                                                                               ^^^^^^^^ ANN003
75 |         kwargs.setdefault("aggr", "add")
76 |         super().__init__(**kwargs)
   |

src\stk_search\geom3d\models\CDConv.py:90:9: D102 Missing docstring in public method
   |
88 |         self.reset_parameters()
89 | 
90 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
91 |         self.WeightNet.reset_parameters()
92 |         kaiming_uniform(self.W.data, size=[self.kernel_channels * self.in_channels, self.out_channels])
   |

src\stk_search\geom3d\models\CDConv.py:94:9: D102 Missing docstring in public method
   |
92 |         kaiming_uniform(self.W.data, size=[self.kernel_channels * self.in_channels, self.out_channels])
93 | 
94 |     def forward(self, x: OptTensor, pos: Tensor, seq: Tensor, ori: Tensor, batch: Tensor) -> Tensor:
   |         ^^^^^^^ D102
95 |         row, col = radius(pos, pos, self.r, batch, batch, max_num_neighbors=9999)
96 |         edge_index = torch.stack([col, row], dim=0)
   |

src\stk_search\geom3d\models\CDConv.py:109:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
107 |         out = torch.matmul(out, self.W)
108 | 
109 |         return out
    |                ^^^ RET504
110 | 
111 |     def message(self, x_j: Optional[Tensor], pos_i: Tensor, pos_j: Tensor, seq_i: Tensor, seq_j: Tensor, ori_i: Tensor, ori_j: Tensor) -> Tensor:
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\CDConv.py:111:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
109 |         return out
110 | 
111 |     def message(self, x_j: Optional[Tensor], pos_i: Tensor, pos_j: Tensor, seq_i: Tensor, seq_j: Tensor, ori_i: Tensor, ori_j: Tensor) -> Tensor:
    |         ^^^^^^^ PLR0913
112 |         # orientation
113 |         pos = pos_j - pos_i
    |

src\stk_search\geom3d\models\CDConv.py:111:9: D102 Missing docstring in public method
    |
109 |         return out
110 | 
111 |     def message(self, x_j: Optional[Tensor], pos_i: Tensor, pos_j: Tensor, seq_i: Tensor, seq_j: Tensor, ori_i: Tensor, ori_j: Tensor) -> Tensor:
    |         ^^^^^^^ D102
112 |         # orientation
113 |         pos = pos_j - pos_i
    |

src\stk_search\geom3d\models\CDConv.py:111:28: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
109 |         return out
110 | 
111 |     def message(self, x_j: Optional[Tensor], pos_i: Tensor, pos_j: Tensor, seq_i: Tensor, seq_j: Tensor, ori_i: Tensor, ori_j: Tensor) -> Tensor:
    |                            ^^^^^^^^ FA100
112 |         # orientation
113 |         pos = pos_j - pos_i
    |

src\stk_search\geom3d\models\CDConv.py:140:16: RET504 Unnecessary assignment to `msg` before `return` statement
    |
138 |         msg = msg.reshape((-1, msg.size(1)*msg.size(2)))
139 | 
140 |         return msg
    |                ^^^ RET504
141 | 
142 |     def __repr__(self) -> str:
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\CDConv.py:142:9: D105 Missing docstring in magic method
    |
140 |         return msg
141 | 
142 |     def __repr__(self) -> str:
    |         ^^^^^^^^ D105
143 |         return (f"{self.__class__.__name__}(r={self.r}, "
144 |                 f"l={self.l},"
    |

src\stk_search\geom3d\models\CDConv.py:149:7: D101 Missing docstring in public class
    |
147 |                 f"out_channels={self.out_channels})")
148 | 
149 | class MaxPooling(nn.Module):
    |       ^^^^^^^^^^ D101
150 |     def __init__(self):
151 |         super().__init__()
    |

src\stk_search\geom3d\models\CDConv.py:150:9: ANN204 Missing return type annotation for special method `__init__`
    |
149 | class MaxPooling(nn.Module):
150 |     def __init__(self):
    |         ^^^^^^^^ ANN204
151 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\CDConv.py:150:9: D107 Missing docstring in `__init__`
    |
149 | class MaxPooling(nn.Module):
150 |     def __init__(self):
    |         ^^^^^^^^ D107
151 |         super().__init__()
    |

src\stk_search\geom3d\models\CDConv.py:153:9: D102 Missing docstring in public method
    |
151 |         super().__init__()
152 | 
153 |     def forward(self, x, pos, seq, ori, batch):
    |         ^^^^^^^ D102
154 |         idx = torch.div(seq.squeeze(1), 2, rounding_mode="floor")
155 |         idx = torch.cat([idx, idx[-1].view((1,))])
    |

src\stk_search\geom3d\models\CDConv.py:160:13: F821 Undefined name `scatter_max`
    |
158 |         idx = torch.cumsum(idx, dim=0) - idx
159 |         idx = idx.to(torch.int64)
160 |         x = scatter_max(src=x, index=idx, dim=0)[0]
    |             ^^^^^^^^^^^ F821
161 |         pos = scatter_mean(src=pos, index=idx, dim=0)
162 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
    |

src\stk_search\geom3d\models\CDConv.py:161:15: F821 Undefined name `scatter_mean`
    |
159 |         idx = idx.to(torch.int64)
160 |         x = scatter_max(src=x, index=idx, dim=0)[0]
161 |         pos = scatter_mean(src=pos, index=idx, dim=0)
    |               ^^^^^^^^^^^^ F821
162 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
163 |         ori = scatter_mean(src=ori, index=idx, dim=0)
    |

src\stk_search\geom3d\models\CDConv.py:162:15: F821 Undefined name `scatter_max`
    |
160 |         x = scatter_max(src=x, index=idx, dim=0)[0]
161 |         pos = scatter_mean(src=pos, index=idx, dim=0)
162 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
    |               ^^^^^^^^^^^ F821
163 |         ori = scatter_mean(src=ori, index=idx, dim=0)
164 |         ori = torch.nn.functional.normalize(ori, 2, -1)
    |

src\stk_search\geom3d\models\CDConv.py:163:15: F821 Undefined name `scatter_mean`
    |
161 |         pos = scatter_mean(src=pos, index=idx, dim=0)
162 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
163 |         ori = scatter_mean(src=ori, index=idx, dim=0)
    |               ^^^^^^^^^^^^ F821
164 |         ori = torch.nn.functional.normalize(ori, 2, -1)
165 |         batch = scatter_max(src=batch, index=idx, dim=0)[0]
    |

src\stk_search\geom3d\models\CDConv.py:165:17: F821 Undefined name `scatter_max`
    |
163 |         ori = scatter_mean(src=ori, index=idx, dim=0)
164 |         ori = torch.nn.functional.normalize(ori, 2, -1)
165 |         batch = scatter_max(src=batch, index=idx, dim=0)[0]
    |                 ^^^^^^^^^^^ F821
166 | 
167 |         return x, pos, seq, ori, batch
    |

src\stk_search\geom3d\models\CDConv.py:169:7: D101 Missing docstring in public class
    |
167 |         return x, pos, seq, ori, batch
168 | 
169 | class AvgPooling(nn.Module):
    |       ^^^^^^^^^^ D101
170 |     def __init__(self):
171 |         super().__init__()
    |

src\stk_search\geom3d\models\CDConv.py:170:9: ANN204 Missing return type annotation for special method `__init__`
    |
169 | class AvgPooling(nn.Module):
170 |     def __init__(self):
    |         ^^^^^^^^ ANN204
171 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\CDConv.py:170:9: D107 Missing docstring in `__init__`
    |
169 | class AvgPooling(nn.Module):
170 |     def __init__(self):
    |         ^^^^^^^^ D107
171 |         super().__init__()
    |

src\stk_search\geom3d\models\CDConv.py:173:9: D102 Missing docstring in public method
    |
171 |         super().__init__()
172 | 
173 |     def forward(self, x, pos, seq, ori, batch):
    |         ^^^^^^^ D102
174 |         idx = torch.div(seq.squeeze(1), 2, rounding_mode="floor")
175 |         idx = torch.cat([idx, idx[-1].view((1,))])
    |

src\stk_search\geom3d\models\CDConv.py:180:13: F821 Undefined name `scatter_mean`
    |
178 |         idx = torch.cumsum(idx, dim=0) - idx
179 |         idx = idx.to(torch.int64)
180 |         x = scatter_mean(src=x, index=idx, dim=0)
    |             ^^^^^^^^^^^^ F821
181 |         pos = scatter_mean(src=pos, index=idx, dim=0)
182 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
    |

src\stk_search\geom3d\models\CDConv.py:181:15: F821 Undefined name `scatter_mean`
    |
179 |         idx = idx.to(torch.int64)
180 |         x = scatter_mean(src=x, index=idx, dim=0)
181 |         pos = scatter_mean(src=pos, index=idx, dim=0)
    |               ^^^^^^^^^^^^ F821
182 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
183 |         ori = scatter_mean(src=ori, index=idx, dim=0)
    |

src\stk_search\geom3d\models\CDConv.py:182:15: F821 Undefined name `scatter_max`
    |
180 |         x = scatter_mean(src=x, index=idx, dim=0)
181 |         pos = scatter_mean(src=pos, index=idx, dim=0)
182 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
    |               ^^^^^^^^^^^ F821
183 |         ori = scatter_mean(src=ori, index=idx, dim=0)
184 |         ori = torch.nn.functional.normalize(ori, 2, -1)
    |

src\stk_search\geom3d\models\CDConv.py:183:15: F821 Undefined name `scatter_mean`
    |
181 |         pos = scatter_mean(src=pos, index=idx, dim=0)
182 |         seq = scatter_max(src=torch.div(seq, 2, rounding_mode="floor"), index=idx, dim=0)[0]
183 |         ori = scatter_mean(src=ori, index=idx, dim=0)
    |               ^^^^^^^^^^^^ F821
184 |         ori = torch.nn.functional.normalize(ori, 2, -1)
185 |         batch = scatter_max(src=batch, index=idx, dim=0)[0]
    |

src\stk_search\geom3d\models\CDConv.py:185:17: F821 Undefined name `scatter_max`
    |
183 |         ori = scatter_mean(src=ori, index=idx, dim=0)
184 |         ori = torch.nn.functional.normalize(ori, 2, -1)
185 |         batch = scatter_max(src=batch, index=idx, dim=0)[0]
    |                 ^^^^^^^^^^^ F821
186 | 
187 |         return x, pos, seq, ori, batch
    |

src\stk_search\geom3d\models\CDConv.py:190:7: D101 Missing docstring in public class
    |
190 | class Linear(nn.Module):
    |       ^^^^^^ D101
191 |     def __init__(self,
192 |                  in_channels: int,
    |

src\stk_search\geom3d\models\CDConv.py:191:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
190 | class Linear(nn.Module):
191 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
192 |                  in_channels: int,
193 |                  out_channels: int,
    |

src\stk_search\geom3d\models\CDConv.py:191:9: D107 Missing docstring in `__init__`
    |
190 | class Linear(nn.Module):
191 |     def __init__(self,
    |         ^^^^^^^^ D107
192 |                  in_channels: int,
193 |                  out_channels: int,
    |

src\stk_search\geom3d\models\CDConv.py:194:18: FBT001 Boolean-typed positional argument in function definition
    |
192 |                  in_channels: int,
193 |                  out_channels: int,
194 |                  batch_norm: bool = True,
    |                  ^^^^^^^^^^ FBT001
195 |                  dropout: float = 0.0,
196 |                  bias: bool = False,
    |

src\stk_search\geom3d\models\CDConv.py:194:18: FBT002 Boolean default positional argument in function definition
    |
192 |                  in_channels: int,
193 |                  out_channels: int,
194 |                  batch_norm: bool = True,
    |                  ^^^^^^^^^^ FBT002
195 |                  dropout: float = 0.0,
196 |                  bias: bool = False,
    |

src\stk_search\geom3d\models\CDConv.py:196:18: FBT001 Boolean-typed positional argument in function definition
    |
194 |                  batch_norm: bool = True,
195 |                  dropout: float = 0.0,
196 |                  bias: bool = False,
    |                  ^^^^ FBT001
197 |                  leakyrelu_negative_slope: float = 0.1,
198 |                  momentum: float = 0.2) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:196:18: FBT002 Boolean default positional argument in function definition
    |
194 |                  batch_norm: bool = True,
195 |                  dropout: float = 0.0,
196 |                  bias: bool = False,
    |                  ^^^^ FBT002
197 |                  leakyrelu_negative_slope: float = 0.1,
198 |                  momentum: float = 0.2) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:199:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
197 |                  leakyrelu_negative_slope: float = 0.1,
198 |                  momentum: float = 0.2) -> nn.Module:
199 |         super(Linear, self).__init__()
    |              ^^^^^^^^^^^^^^ UP008
200 | 
201 |         module = []
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\CDConv.py:209:9: D102 Missing docstring in public method
    |
207 |         self.module = nn.Sequential(*module)
208 | 
209 |     def forward(self, x):
    |         ^^^^^^^ D102
210 |         return self.module(x)
    |

src\stk_search\geom3d\models\CDConv.py:212:7: D101 Missing docstring in public class
    |
210 |         return self.module(x)
211 | 
212 | class MLP(nn.Module):
    |       ^^^ D101
213 |     def __init__(self,
214 |                  in_channels: int,
    |

src\stk_search\geom3d\models\CDConv.py:212:7: F811 Redefinition of unused `MLP` from line 11
    |
210 |         return self.module(x)
211 | 
212 | class MLP(nn.Module):
    |       ^^^ F811
213 |     def __init__(self,
214 |                  in_channels: int,
    |
    = help: Remove definition: `MLP`

src\stk_search\geom3d\models\CDConv.py:213:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
212 | class MLP(nn.Module):
213 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
214 |                  in_channels: int,
215 |                  mid_channels: int,
    |

src\stk_search\geom3d\models\CDConv.py:213:9: D107 Missing docstring in `__init__`
    |
212 | class MLP(nn.Module):
213 |     def __init__(self,
    |         ^^^^^^^^ D107
214 |                  in_channels: int,
215 |                  mid_channels: int,
    |

src\stk_search\geom3d\models\CDConv.py:217:18: FBT001 Boolean-typed positional argument in function definition
    |
215 |                  mid_channels: int,
216 |                  out_channels: int,
217 |                  batch_norm: bool,
    |                  ^^^^^^^^^^ FBT001
218 |                  dropout: float = 0.0,
219 |                  bias: bool = True,
    |

src\stk_search\geom3d\models\CDConv.py:219:18: FBT001 Boolean-typed positional argument in function definition
    |
217 |                  batch_norm: bool,
218 |                  dropout: float = 0.0,
219 |                  bias: bool = True,
    |                  ^^^^ FBT001
220 |                  leakyrelu_negative_slope: float = 0.2,
221 |                  momentum: float = 0.2) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:219:18: FBT002 Boolean default positional argument in function definition
    |
217 |                  batch_norm: bool,
218 |                  dropout: float = 0.0,
219 |                  bias: bool = True,
    |                  ^^^^ FBT002
220 |                  leakyrelu_negative_slope: float = 0.2,
221 |                  momentum: float = 0.2) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:222:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
220 |                  leakyrelu_negative_slope: float = 0.2,
221 |                  momentum: float = 0.2) -> nn.Module:
222 |         super(MLP, self).__init__()
    |              ^^^^^^^^^^^ UP008
223 | 
224 |         module = []
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\CDConv.py:246:9: D102 Missing docstring in public method
    |
244 |         self.module = nn.Sequential(*module)
245 | 
246 |     def forward(self, input):
    |         ^^^^^^^ D102
247 |         return self.module(input)
    |

src\stk_search\geom3d\models\CDConv.py:246:23: A002 Argument `input` is shadowing a Python builtin
    |
244 |         self.module = nn.Sequential(*module)
245 | 
246 |     def forward(self, input):
    |                       ^^^^^ A002
247 |         return self.module(input)
    |

src\stk_search\geom3d\models\CDConv.py:249:7: D101 Missing docstring in public class
    |
247 |         return self.module(input)
248 | 
249 | class BasicBlock(nn.Module):
    |       ^^^^^^^^^^ D101
250 |     def __init__(self,
251 |                  r: float,
    |

src\stk_search\geom3d\models\CDConv.py:250:9: PLR0913 Too many arguments in function definition (11 > 5)
    |
249 | class BasicBlock(nn.Module):
250 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
251 |                  r: float,
252 |                  l: float,
    |

src\stk_search\geom3d\models\CDConv.py:250:9: D107 Missing docstring in `__init__`
    |
249 | class BasicBlock(nn.Module):
250 |     def __init__(self,
    |         ^^^^^^^^ D107
251 |                  r: float,
252 |                  l: float,
    |

src\stk_search\geom3d\models\CDConv.py:252:18: E741 Ambiguous variable name: `l`
    |
250 |     def __init__(self,
251 |                  r: float,
252 |                  l: float,
    |                  ^ E741
253 |                  kernel_channels,
254 |                  in_channels: int,
    |

src\stk_search\geom3d\models\CDConv.py:257:18: FBT001 Boolean-typed positional argument in function definition
    |
255 |                  out_channels: int,
256 |                  base_width: float = 16.0,
257 |                  batch_norm: bool = True,
    |                  ^^^^^^^^^^ FBT001
258 |                  dropout: float = 0.0,
259 |                  bias: bool = False,
    |

src\stk_search\geom3d\models\CDConv.py:257:18: FBT002 Boolean default positional argument in function definition
    |
255 |                  out_channels: int,
256 |                  base_width: float = 16.0,
257 |                  batch_norm: bool = True,
    |                  ^^^^^^^^^^ FBT002
258 |                  dropout: float = 0.0,
259 |                  bias: bool = False,
    |

src\stk_search\geom3d\models\CDConv.py:259:18: FBT001 Boolean-typed positional argument in function definition
    |
257 |                  batch_norm: bool = True,
258 |                  dropout: float = 0.0,
259 |                  bias: bool = False,
    |                  ^^^^ FBT001
260 |                  leakyrelu_negative_slope: float = 0.1,
261 |                  momentum: float = 0.2) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:259:18: FBT002 Boolean default positional argument in function definition
    |
257 |                  batch_norm: bool = True,
258 |                  dropout: float = 0.0,
259 |                  bias: bool = False,
    |                  ^^^^ FBT002
260 |                  leakyrelu_negative_slope: float = 0.1,
261 |                  momentum: float = 0.2) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:263:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
261 |                  momentum: float = 0.2) -> nn.Module:
262 | 
263 |         super(BasicBlock, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^ UP008
264 | 
265 |         if in_channels != out_channels:
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\CDConv.py:294:9: D102 Missing docstring in public method
    |
292 |                              momentum=momentum)
293 | 
294 |     def forward(self, x, pos, seq, ori, batch):
    |         ^^^^^^^ D102
295 |         identity = self.identity(x)
296 |         x = self.input(x)
    |

src\stk_search\geom3d\models\CDConv.py:299:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
297 |         x = self.conv(x, pos, seq, ori, batch)
298 |         out = self.output(x) + identity
299 |         return out
    |                ^^^ RET504
300 | 
301 | class CDConv(nn.Module):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\CDConv.py:301:7: D101 Missing docstring in public class
    |
299 |         return out
300 | 
301 | class CDConv(nn.Module):
    |       ^^^^^^ D101
302 |     def __init__(self,
303 |                  geometric_radii: List[float],
    |

src\stk_search\geom3d\models\CDConv.py:301:7: F811 Redefinition of unused `CDConv` from line 73
    |
299 |         return out
300 | 
301 | class CDConv(nn.Module):
    |       ^^^^^^ F811
302 |     def __init__(self,
303 |                  geometric_radii: List[float],
    |
    = help: Remove definition: `CDConv`

src\stk_search\geom3d\models\CDConv.py:302:9: PLR0913 Too many arguments in function definition (10 > 5)
    |
301 | class CDConv(nn.Module):
302 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
303 |                  geometric_radii: List[float],
304 |                  sequential_kernel_size: float,
    |

src\stk_search\geom3d\models\CDConv.py:302:9: D107 Missing docstring in `__init__`
    |
301 | class CDConv(nn.Module):
302 |     def __init__(self,
    |         ^^^^^^^^ D107
303 |                  geometric_radii: List[float],
304 |                  sequential_kernel_size: float,
    |

src\stk_search\geom3d\models\CDConv.py:303:35: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
301 | class CDConv(nn.Module):
302 |     def __init__(self,
303 |                  geometric_radii: List[float],
    |                                   ^^^^ FA100
304 |                  sequential_kernel_size: float,
305 |                  kernel_channels: List[int],
    |

src\stk_search\geom3d\models\CDConv.py:305:35: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
303 |                  geometric_radii: List[float],
304 |                  sequential_kernel_size: float,
305 |                  kernel_channels: List[int],
    |                                   ^^^^ FA100
306 |                  channels: List[int],
307 |                  base_width: float = 16.0,
    |

src\stk_search\geom3d\models\CDConv.py:306:28: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
304 |                  sequential_kernel_size: float,
305 |                  kernel_channels: List[int],
306 |                  channels: List[int],
    |                            ^^^^ FA100
307 |                  base_width: float = 16.0,
308 |                  embedding_dim: int = 16,
    |

src\stk_search\geom3d\models\CDConv.py:309:18: FBT001 Boolean-typed positional argument in function definition
    |
307 |                  base_width: float = 16.0,
308 |                  embedding_dim: int = 16,
309 |                  batch_norm: bool = True,
    |                  ^^^^^^^^^^ FBT001
310 |                  dropout: float = 0.2,
311 |                  bias: bool = False,
    |

src\stk_search\geom3d\models\CDConv.py:309:18: FBT002 Boolean default positional argument in function definition
    |
307 |                  base_width: float = 16.0,
308 |                  embedding_dim: int = 16,
309 |                  batch_norm: bool = True,
    |                  ^^^^^^^^^^ FBT002
310 |                  dropout: float = 0.2,
311 |                  bias: bool = False,
    |

src\stk_search\geom3d\models\CDConv.py:311:18: FBT001 Boolean-typed positional argument in function definition
    |
309 |                  batch_norm: bool = True,
310 |                  dropout: float = 0.2,
311 |                  bias: bool = False,
    |                  ^^^^ FBT001
312 |                  num_classes: int = 1195) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:311:18: FBT002 Boolean default positional argument in function definition
    |
309 |                  batch_norm: bool = True,
310 |                  dropout: float = 0.2,
311 |                  bias: bool = False,
    |                  ^^^^ FBT002
312 |                  num_classes: int = 1195) -> nn.Module:
    |

src\stk_search\geom3d\models\CDConv.py:316:9: S101 Use of `assert` detected
    |
314 |         super().__init__()
315 | 
316 |         assert (len(geometric_radii) == len(channels)), "Model: 'geometric_radii' and 'channels' should have the same number of elements!"
    |         ^^^^^^ S101
317 | 
318 |         self.embedding = torch.nn.Embedding(num_embeddings=21, embedding_dim=embedding_dim)
    |

src\stk_search\geom3d\models\CDConv.py:323:16: F402 Import `radius` from line 13 shadowed by loop variable
    |
321 |         layers = []
322 |         in_channels = embedding_dim
323 |         for i, radius in enumerate(geometric_radii):
    |                ^^^^^^ F402
324 |             layers.append(BasicBlock(r = radius,
325 |                                      l = sequential_kernel_size,
    |

src\stk_search\geom3d\models\CDConv.py:352:9: D102 Missing docstring in public method
    |
350 |                               dropout=dropout)
351 | 
352 |     def forward(self, data):
    |         ^^^^^^^ D102
353 |         x, pos, seq, ori, batch = (self.embedding(data.x), data.pos, data.seq, data.ori, data.batch)
    |

src\stk_search\geom3d\models\CDConv.py:364:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
362 |         out = self.classifier(x)
363 | 
364 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\CNN.py:1:1: N999 Invalid module name: 'CNN'
src\stk_search\geom3d\models\CNN.py:1:1: F403 `from collections import *` used; unable to detect undefined names
  |
1 | from collections import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ F403
2 | 
3 | from torch import nn
  |

src\stk_search\geom3d\models\CNN.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\CNN.py:6:7: D101 Missing docstring in public class
  |
6 | class CNN(nn.Module):
  |       ^^^ D101
7 |     def __init__(
8 |         self, vocab_size, pad_size, hidden_size, num_tasks,
  |

src\stk_search\geom3d\models\CNN.py:7:9: PLR0913 Too many arguments in function definition (7 > 5)
  |
6 | class CNN(nn.Module):
7 |     def __init__(
  |         ^^^^^^^^ PLR0913
8 |         self, vocab_size, pad_size, hidden_size, num_tasks,
9 |         out_channels=16, kernel_size=8, dropout=0.3,
  |

src\stk_search\geom3d\models\CNN.py:7:9: ANN204 Missing return type annotation for special method `__init__`
  |
6 | class CNN(nn.Module):
7 |     def __init__(
  |         ^^^^^^^^ ANN204
8 |         self, vocab_size, pad_size, hidden_size, num_tasks,
9 |         out_channels=16, kernel_size=8, dropout=0.3,
  |
  = help: Add return type annotation: `None`

src\stk_search\geom3d\models\CNN.py:7:9: D107 Missing docstring in `__init__`
  |
6 | class CNN(nn.Module):
7 |     def __init__(
  |         ^^^^^^^^ D107
8 |         self, vocab_size, pad_size, hidden_size, num_tasks,
9 |         out_channels=16, kernel_size=8, dropout=0.3,
  |

src\stk_search\geom3d\models\CNN.py:11:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
 9 |         out_channels=16, kernel_size=8, dropout=0.3,
10 |     ):
11 |         super(CNN, self).__init__()
   |              ^^^^^^^^^^^ UP008
12 |         self.vocab_size = vocab_size
13 |         self.pad_size = pad_size
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\CNN.py:36:9: T201 `print` found
   |
34 |             nn.Linear(hidden_size, num_tasks)
35 |         )
36 |         print(self)
   |         ^^^^^ T201
37 | 
38 |     def forward(self, x):
   |
   = help: Remove `print`

src\stk_search\geom3d\models\CNN.py:38:9: D102 Missing docstring in public method
   |
36 |         print(self)
37 | 
38 |     def forward(self, x):
   |         ^^^^^^^ D102
39 |         x = self.embedding(x)
40 |         repr = self.layer1(x)
   |

src\stk_search\geom3d\models\CNN.py:40:9: A001 Variable `repr` is shadowing a Python builtin
   |
38 |     def forward(self, x):
39 |         x = self.embedding(x)
40 |         repr = self.layer1(x)
   |         ^^^^ A001
41 |         repr = repr.view(-1, self.out_channels * self.intermediate_dim)
42 |         repr = self.layer2(repr)
   |

src\stk_search\geom3d\models\CNN.py:41:9: A001 Variable `repr` is shadowing a Python builtin
   |
39 |         x = self.embedding(x)
40 |         repr = self.layer1(x)
41 |         repr = repr.view(-1, self.out_channels * self.intermediate_dim)
   |         ^^^^ A001
42 |         repr = self.layer2(repr)
43 |         out = self.pred_layer(repr)
   |

src\stk_search\geom3d\models\CNN.py:42:9: A001 Variable `repr` is shadowing a Python builtin
   |
40 |         repr = self.layer1(x)
41 |         repr = repr.view(-1, self.out_channels * self.intermediate_dim)
42 |         repr = self.layer2(repr)
   |         ^^^^ A001
43 |         out = self.pred_layer(repr)
44 |         return out
   |

src\stk_search\geom3d\models\CNN.py:44:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
42 |         repr = self.layer2(repr)
43 |         out = self.pred_layer(repr)
44 |         return out
   |                ^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ClofNet.py:1:1: N999 Invalid module name: 'ClofNet'
src\stk_search\geom3d\models\ClofNet.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\ClofNet.py:6:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
5 | import torch
6 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
7 | from torch import Tensor, nn
8 | from torch.nn import Embedding, Linear
  |

src\stk_search\geom3d\models\ClofNet.py:11:37: F811 Redefinition of unused `MessagePassing` from line 10
   |
 9 | from torch_cluster import radius_graph
10 | from torch_geometric.nn import MessagePassing
11 | from torch_geometric.nn.conv import MessagePassing
   |                                     ^^^^^^^^^^^^^^ F811
12 | from torch_geometric.nn.inits import glorot_orthogonal
13 | from torch_geometric.typing import Adj, OptTensor, PairTensor, SparseTensor
   |
   = help: Remove definition: `MessagePassing`

src\stk_search\geom3d\models\ClofNet.py:20:18: N812 Lowercase `pi` imported as non-lowercase `PI`
   |
18 | except ImportError:
19 |     sym = None
20 | from math import pi as PI
   |                  ^^^^^^^^ N812
21 | 
22 | device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
   |

src\stk_search\geom3d\models\ClofNet.py:25:7: N801 Class name `rbf_emb` should use CapWords convention
   |
25 | class rbf_emb(nn.Module):
   |       ^^^^^^^ N801
26 |     """modified: delete cutoff with r
27 |     """
   |

src\stk_search\geom3d\models\ClofNet.py:26:5: D200 One-line docstring should fit on one line
   |
25 |   class rbf_emb(nn.Module):
26 |       """modified: delete cutoff with r
   |  _____^
27 | |     """
   | |_______^ D200
28 |   
29 |       def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\ClofNet.py:26:5: D400 First line should end with a period
   |
25 |   class rbf_emb(nn.Module):
26 |       """modified: delete cutoff with r
   |  _____^
27 | |     """
   | |_______^ D400
28 |   
29 |       def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |
   = help: Add period

src\stk_search\geom3d\models\ClofNet.py:26:5: D415 First line should end with a period, question mark, or exclamation point
   |
25 |   class rbf_emb(nn.Module):
26 |       """modified: delete cutoff with r
   |  _____^
27 | |     """
   | |_______^ D415
28 |   
29 |       def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\ClofNet.py:29:9: ANN204 Missing return type annotation for special method `__init__`
   |
27 |     """
28 | 
29 |     def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |         ^^^^^^^^ ANN204
30 |         super().__init__()
31 |         self.rbound_upper = rbound_upper
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:29:9: D107 Missing docstring in `__init__`
   |
27 |     """
28 | 
29 |     def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |         ^^^^^^^^ D107
30 |         super().__init__()
31 |         self.rbound_upper = rbound_upper
   |

src\stk_search\geom3d\models\ClofNet.py:29:47: FBT002 Boolean default positional argument in function definition
   |
27 |     """
28 | 
29 |     def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |                                               ^^^^^^^^^^^^^ FBT002
30 |         super().__init__()
31 |         self.rbound_upper = rbound_upper
   |

src\stk_search\geom3d\models\ClofNet.py:29:68: ANN003 Missing type annotation for `**kwargs`
   |
27 |     """
28 | 
29 |     def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |                                                                    ^^^^^^^^ ANN003
30 |         super().__init__()
31 |         self.rbound_upper = rbound_upper
   |

src\stk_search\geom3d\models\ClofNet.py:29:70: ARG002 Unused method argument: `kwargs`
   |
27 |     """
28 | 
29 |     def __init__(self, num_rbf, rbound_upper, rbf_trainable=False, **kwargs):
   |                                                                      ^^^^^^ ARG002
30 |         super().__init__()
31 |         self.rbound_upper = rbound_upper
   |

src\stk_search\geom3d\models\ClofNet.py:40:9: ANN202 Missing return type annotation for private function `_initial_params`
   |
38 |         self.register_buffer("betas", betas)
39 | 
40 |     def _initial_params(self):
   |         ^^^^^^^^^^^^^^^ ANN202
41 |         start_value = torch.exp(torch.scalar_tensor(-self.rbound_upper))
42 |         end_value = torch.exp(torch.scalar_tensor(-self.rbound_lower))
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\ClofNet.py:48:9: D102 Missing docstring in public method
   |
46 |         return means, betas
47 | 
48 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
49 |         means, betas = self._initial_params()
50 |         self.means.data.copy_(means)
   |

src\stk_search\geom3d\models\ClofNet.py:53:9: D102 Missing docstring in public method
   |
51 |         self.betas.data.copy_(betas)
52 | 
53 |     def forward(self, dist):
   |         ^^^^^^^ D102
54 |         dist=dist.unsqueeze(-1)
55 |         rbounds = 0.5 * \
   |

src\stk_search\geom3d\models\ClofNet.py:58:9: F841 Local variable `a` is assigned to but never used
   |
56 |                   (torch.cos(dist * PI / self.rbound_upper) + 1.0)
57 |         rbounds = rbounds * (dist < self.rbound_upper).float()
58 |         a = self.betas
   |         ^ F841
59 |         d = self.means
60 |         c= torch.square(torch.exp(-dist) - self.means)
   |
   = help: Remove assignment to unused variable `a`

src\stk_search\geom3d\models\ClofNet.py:59:9: F841 Local variable `d` is assigned to but never used
   |
57 |         rbounds = rbounds * (dist < self.rbound_upper).float()
58 |         a = self.betas
59 |         d = self.means
   |         ^ F841
60 |         c= torch.square(torch.exp(-dist) - self.means)
61 |         b = torch.exp(-self.betas * torch.square(torch.exp(-dist) - self.means))
   |
   = help: Remove assignment to unused variable `d`

src\stk_search\geom3d\models\ClofNet.py:60:9: F841 Local variable `c` is assigned to but never used
   |
58 |         a = self.betas
59 |         d = self.means
60 |         c= torch.square(torch.exp(-dist) - self.means)
   |         ^ F841
61 |         b = torch.exp(-self.betas * torch.square(torch.exp(-dist) - self.means))
62 |         return rbounds*torch.exp(-self.betas * torch.square(torch.exp(-dist) - self.means))
   |
   = help: Remove assignment to unused variable `c`

src\stk_search\geom3d\models\ClofNet.py:61:9: F841 Local variable `b` is assigned to but never used
   |
59 |         d = self.means
60 |         c= torch.square(torch.exp(-dist) - self.means)
61 |         b = torch.exp(-self.betas * torch.square(torch.exp(-dist) - self.means))
   |         ^ F841
62 |         return rbounds*torch.exp(-self.betas * torch.square(torch.exp(-dist) - self.means))
   |
   = help: Remove assignment to unused variable `b`

src\stk_search\geom3d\models\ClofNet.py:65:7: N801 Class name `emb` should use CapWords convention
   |
65 | class emb(torch.nn.Module):
   |       ^^^ N801
66 |     def __init__(self, num_radial, cutoff, envelope_exponent):
67 |         super(emb, self).__init__()
   |

src\stk_search\geom3d\models\ClofNet.py:65:7: D101 Missing docstring in public class
   |
65 | class emb(torch.nn.Module):
   |       ^^^ D101
66 |     def __init__(self, num_radial, cutoff, envelope_exponent):
67 |         super(emb, self).__init__()
   |

src\stk_search\geom3d\models\ClofNet.py:66:9: ANN204 Missing return type annotation for special method `__init__`
   |
65 | class emb(torch.nn.Module):
66 |     def __init__(self, num_radial, cutoff, envelope_exponent):
   |         ^^^^^^^^ ANN204
67 |         super(emb, self).__init__()
68 |         #self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:66:9: D107 Missing docstring in `__init__`
   |
65 | class emb(torch.nn.Module):
66 |     def __init__(self, num_radial, cutoff, envelope_exponent):
   |         ^^^^^^^^ D107
67 |         super(emb, self).__init__()
68 |         #self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |

src\stk_search\geom3d\models\ClofNet.py:66:44: ARG002 Unused method argument: `envelope_exponent`
   |
65 | class emb(torch.nn.Module):
66 |     def __init__(self, num_radial, cutoff, envelope_exponent):
   |                                            ^^^^^^^^^^^^^^^^^ ARG002
67 |         super(emb, self).__init__()
68 |         #self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |

src\stk_search\geom3d\models\ClofNet.py:67:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
65 | class emb(torch.nn.Module):
66 |     def __init__(self, num_radial, cutoff, envelope_exponent):
67 |         super(emb, self).__init__()
   |              ^^^^^^^^^^^ UP008
68 |         #self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
69 |         self.dist_emb = rbf_emb(num_radial, cutoff)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ClofNet.py:68:9: ERA001 Found commented-out code
   |
66 |     def __init__(self, num_radial, cutoff, envelope_exponent):
67 |         super(emb, self).__init__()
68 |         #self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
69 |         self.dist_emb = rbf_emb(num_radial, cutoff)
70 |         # self.first_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:70:9: ERA001 Found commented-out code
   |
68 |         #self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
69 |         self.dist_emb = rbf_emb(num_radial, cutoff)
70 |         # self.first_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
71 |         # self.second_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
72 |         # self.vertical_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:71:9: ERA001 Found commented-out code
   |
69 |         self.dist_emb = rbf_emb(num_radial, cutoff)
70 |         # self.first_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
71 |         # self.second_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
72 |         # self.vertical_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
73 |         self.reset_parameters()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:72:9: ERA001 Found commented-out code
   |
70 |         # self.first_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
71 |         # self.second_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
72 |         # self.vertical_emb = dist_emb2(num_radial2, cutoff, envelope_exponent)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
73 |         self.reset_parameters()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:75:9: D102 Missing docstring in public method
   |
73 |         self.reset_parameters()
74 | 
75 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
76 |         self.dist_emb.reset_parameters()
77 |         # self.first_emb.reset_parameters()
   |

src\stk_search\geom3d\models\ClofNet.py:77:9: ERA001 Found commented-out code
   |
75 |     def reset_parameters(self):
76 |         self.dist_emb.reset_parameters()
77 |         # self.first_emb.reset_parameters()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
78 |         # self.second_emb.reset_parameters()
79 |         # self.vertical_emb.reset_parameters()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:78:9: ERA001 Found commented-out code
   |
76 |         self.dist_emb.reset_parameters()
77 |         # self.first_emb.reset_parameters()
78 |         # self.second_emb.reset_parameters()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
79 |         # self.vertical_emb.reset_parameters()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:79:9: ERA001 Found commented-out code
   |
77 |         # self.first_emb.reset_parameters()
78 |         # self.second_emb.reset_parameters()
79 |         # self.vertical_emb.reset_parameters()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
80 | 
81 |     def forward(self, dist):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:81:9: D102 Missing docstring in public method
   |
79 |         # self.vertical_emb.reset_parameters()
80 | 
81 |     def forward(self, dist):
   |         ^^^^^^^ D102
82 |         dist_emb = self.dist_emb(dist)
83 |         # first_emb = self.first_emb(first)
   |

src\stk_search\geom3d\models\ClofNet.py:83:9: ERA001 Found commented-out code
   |
81 |     def forward(self, dist):
82 |         dist_emb = self.dist_emb(dist)
83 |         # first_emb = self.first_emb(first)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
84 |         # second_emb = self.first_emb(second)
85 |         # vertical_emb = self.first_emb(vertical)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:84:9: ERA001 Found commented-out code
   |
82 |         dist_emb = self.dist_emb(dist)
83 |         # first_emb = self.first_emb(first)
84 |         # second_emb = self.first_emb(second)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
85 |         # vertical_emb = self.first_emb(vertical)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:85:9: ERA001 Found commented-out code
   |
83 |         # first_emb = self.first_emb(first)
84 |         # second_emb = self.first_emb(second)
85 |         # vertical_emb = self.first_emb(vertical)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
86 | 
87 |         return dist_emb  # , first_emb, second_emb, vertical_emb
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:87:16: RET504 Unnecessary assignment to `dist_emb` before `return` statement
   |
85 |         # vertical_emb = self.first_emb(vertical)
86 | 
87 |         return dist_emb  # , first_emb, second_emb, vertical_emb
   |                ^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ClofNet.py:90:7: D101 Missing docstring in public class
   |
90 | class ResidualLayer(torch.nn.Module):
   |       ^^^^^^^^^^^^^ D101
91 |     def __init__(self, hidden_channels, act="swish"):
92 |         super(ResidualLayer, self).__init__()
   |

src\stk_search\geom3d\models\ClofNet.py:91:9: ANN204 Missing return type annotation for special method `__init__`
   |
90 | class ResidualLayer(torch.nn.Module):
91 |     def __init__(self, hidden_channels, act="swish"):
   |         ^^^^^^^^ ANN204
92 |         super(ResidualLayer, self).__init__()
93 |         self.act = act
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:91:9: D107 Missing docstring in `__init__`
   |
90 | class ResidualLayer(torch.nn.Module):
91 |     def __init__(self, hidden_channels, act="swish"):
   |         ^^^^^^^^ D107
92 |         super(ResidualLayer, self).__init__()
93 |         self.act = act
   |

src\stk_search\geom3d\models\ClofNet.py:92:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
90 | class ResidualLayer(torch.nn.Module):
91 |     def __init__(self, hidden_channels, act="swish"):
92 |         super(ResidualLayer, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^ UP008
93 |         self.act = act
94 |         self.lin1 = Linear(hidden_channels, hidden_channels)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ClofNet.py:99:9: D102 Missing docstring in public method
    |
 97 |         self.reset_parameters()
 98 | 
 99 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
100 |         glorot_orthogonal(self.lin1.weight, scale=2.0)
101 |         self.lin1.bias.data.fill_(0)
    |

src\stk_search\geom3d\models\ClofNet.py:105:9: D102 Missing docstring in public method
    |
103 |         self.lin2.bias.data.fill_(0)
104 | 
105 |     def forward(self, x):
    |         ^^^^^^^ D102
106 |         return x + self.act(self.lin2(self.act(self.lin1(x))))
    |

src\stk_search\geom3d\models\ClofNet.py:109:7: N801 Class name `init` should use CapWords convention
    |
109 | class init(torch.nn.Module):
    |       ^^^^ N801
110 |     def __init__(self, num_radial, hidden_channels, act="swish", use_node_features=True):
111 |         super(init, self).__init__()
    |

src\stk_search\geom3d\models\ClofNet.py:109:7: D101 Missing docstring in public class
    |
109 | class init(torch.nn.Module):
    |       ^^^^ D101
110 |     def __init__(self, num_radial, hidden_channels, act="swish", use_node_features=True):
111 |         super(init, self).__init__()
    |

src\stk_search\geom3d\models\ClofNet.py:110:9: ANN204 Missing return type annotation for special method `__init__`
    |
109 | class init(torch.nn.Module):
110 |     def __init__(self, num_radial, hidden_channels, act="swish", use_node_features=True):
    |         ^^^^^^^^ ANN204
111 |         super(init, self).__init__()
112 |         self.act = act
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:110:9: D107 Missing docstring in `__init__`
    |
109 | class init(torch.nn.Module):
110 |     def __init__(self, num_radial, hidden_channels, act="swish", use_node_features=True):
    |         ^^^^^^^^ D107
111 |         super(init, self).__init__()
112 |         self.act = act
    |

src\stk_search\geom3d\models\ClofNet.py:110:66: FBT002 Boolean default positional argument in function definition
    |
109 | class init(torch.nn.Module):
110 |     def __init__(self, num_radial, hidden_channels, act="swish", use_node_features=True):
    |                                                                  ^^^^^^^^^^^^^^^^^ FBT002
111 |         super(init, self).__init__()
112 |         self.act = act
    |

src\stk_search\geom3d\models\ClofNet.py:111:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
109 | class init(torch.nn.Module):
110 |     def __init__(self, num_radial, hidden_channels, act="swish", use_node_features=True):
111 |         super(init, self).__init__()
    |              ^^^^^^^^^^^^ UP008
112 |         self.act = act
113 |         self.use_node_features = use_node_features
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ClofNet.py:124:9: D102 Missing docstring in public method
    |
122 |         self.reset_parameters()
123 | 
124 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
125 |         if self.use_node_features:
126 |             self.emb.weight.data.uniform_(-sqrt(3), sqrt(3))
    |

src\stk_search\geom3d\models\ClofNet.py:131:9: D102 Missing docstring in public method
    |
129 |         glorot_orthogonal(self.lin_rbf_1.weight, scale=2.0)
130 | 
131 |     def forward(self, x, emb, i, j):
    |         ^^^^^^^ D102
132 |         rbf, _, _, _ = emb
133 |         if self.use_node_features:
    |

src\stk_search\geom3d\models\ClofNet.py:144:7: D101 Missing docstring in public class
    |
144 | class ClofNet(torch.nn.Module):
    |       ^^^^^^^ D101
145 |     def __init__(
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
    |

src\stk_search\geom3d\models\ClofNet.py:145:9: PLR0913 Too many arguments in function definition (20 > 5)
    |
144 | class ClofNet(torch.nn.Module):
145 |     def __init__(
    |         ^^^^^^^^ PLR0913
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
    |

src\stk_search\geom3d\models\ClofNet.py:145:9: ANN204 Missing return type annotation for special method `__init__`
    |
144 | class ClofNet(torch.nn.Module):
145 |     def __init__(
    |         ^^^^^^^^ ANN204
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:145:9: D107 Missing docstring in `__init__`
    |
144 | class ClofNet(torch.nn.Module):
145 |     def __init__(
    |         ^^^^^^^^ D107
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
    |

src\stk_search\geom3d\models\ClofNet.py:146:19: FBT002 Boolean default positional argument in function definition
    |
144 | class ClofNet(torch.nn.Module):
145 |     def __init__(
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
    |                   ^^^^^^^^^^^^^^^^ FBT002
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
    |

src\stk_search\geom3d\models\ClofNet.py:147:33: ARG002 Unused method argument: `out_channels`
    |
145 |     def __init__(
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
    |                                 ^^^^^^^^^^^^ ARG002
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
    |

src\stk_search\geom3d\models\ClofNet.py:147:49: ARG002 Unused method argument: `int_emb_size`
    |
145 |     def __init__(
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
    |                                                 ^^^^^^^^^^^^ ARG002
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
    |

src\stk_search\geom3d\models\ClofNet.py:148:13: ARG002 Unused method argument: `basis_emb_size_dist`
    |
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
    |             ^^^^^^^^^^^^^^^^^^^ ARG002
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
    |

src\stk_search\geom3d\models\ClofNet.py:148:36: ARG002 Unused method argument: `basis_emb_size_angle`
    |
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
    |                                    ^^^^^^^^^^^^^^^^^^^^ ARG002
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
    |

src\stk_search\geom3d\models\ClofNet.py:148:60: ARG002 Unused method argument: `basis_emb_size_torsion`
    |
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^ ARG002
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
    |

src\stk_search\geom3d\models\ClofNet.py:148:86: ARG002 Unused method argument: `out_emb_channels`
    |
146 |             self, energy_and_force=False, cutoff=5.0, num_layers=4,
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
    |                                                                                      ^^^^^^^^^^^^^^^^ ARG002
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
    |

src\stk_search\geom3d\models\ClofNet.py:149:28: ARG002 Unused method argument: `num_radial2`
    |
147 |             hidden_channels=64, out_channels=1, int_emb_size=64,
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
    |                            ^^^^^^^^^^^ ARG002
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
    |

src\stk_search\geom3d\models\ClofNet.py:150:13: ARG002 Unused method argument: `num_before_skip`
    |
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
    |             ^^^^^^^^^^^^^^^ ARG002
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
152 |         super(ClofNet, self).__init__()
    |

src\stk_search\geom3d\models\ClofNet.py:150:32: ARG002 Unused method argument: `num_after_skip`
    |
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
    |                                ^^^^^^^^^^^^^^ ARG002
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
152 |         super(ClofNet, self).__init__()
    |

src\stk_search\geom3d\models\ClofNet.py:150:50: ARG002 Unused method argument: `num_output_layers`
    |
148 |             basis_emb_size_dist=8, basis_emb_size_angle=8, basis_emb_size_torsion=8, out_emb_channels=256,
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
    |                                                  ^^^^^^^^^^^^^^^^^ ARG002
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
152 |         super(ClofNet, self).__init__()
    |

src\stk_search\geom3d\models\ClofNet.py:151:26: ARG002 Unused method argument: `output_init`
    |
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
    |                          ^^^^^^^^^^^ ARG002
152 |         super(ClofNet, self).__init__()
153 |         self.hidden_channels = hidden_channels
    |

src\stk_search\geom3d\models\ClofNet.py:151:58: FBT002 Boolean default positional argument in function definition
    |
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
    |                                                          ^^^^^^^^^^^^^^^^^ FBT002
152 |         super(ClofNet, self).__init__()
153 |         self.hidden_channels = hidden_channels
    |

src\stk_search\geom3d\models\ClofNet.py:151:82: ANN003 Missing type annotation for `**kwargs`
    |
149 |             num_radial=12, num_radial2=80, envelope_exponent=5,
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
    |                                                                                  ^^^^^^^^ ANN003
152 |         super(ClofNet, self).__init__()
153 |         self.hidden_channels = hidden_channels
    |

src\stk_search\geom3d\models\ClofNet.py:152:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
150 |             num_before_skip=1, num_after_skip=2, num_output_layers=3, heads=1,
151 |             act="swish", output_init="GlorotOrthogonal", use_node_features=True, **kwargs):
152 |         super(ClofNet, self).__init__()
    |              ^^^^^^^^^^^^^^^ UP008
153 |         self.hidden_channels = hidden_channels
154 |         self.cutoff = cutoff
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ClofNet.py:161:9: ERA001 Found commented-out code
    |
159 |         self.init_e = init(num_radial, hidden_channels, act, use_node_features=use_node_features)
160 |         self.heads = heads
161 |         # self.emb = emb(num_spherical, num_radial, self.cutoff, envelope_exponent)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
162 |         self.emblin = Embedding(95, hidden_channels)
163 |         self.emblinfinal = Embedding(95, 1)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:171:13: ERA001 Found commented-out code
    |
169 |         self.lin1 = nn.Sequential(
170 |             nn.Linear(num_radial, hidden_channels),
171 |             #nn.LayerNorm(hidden_channels, elementwise_affine=False),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
172 |             nn.SiLU(inplace=True),
173 |             nn.Linear(hidden_channels, hidden_channels))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:174:9: ERA001 Found commented-out code
    |
172 |             nn.SiLU(inplace=True),
173 |             nn.Linear(hidden_channels, hidden_channels))
174 |         # self.lin1 = Linear(hidden_channels, hidden_channels)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
175 |         self.lin2 = nn.Sequential(
176 |             nn.Linear(num_radial, hidden_channels),
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:177:13: ERA001 Found commented-out code
    |
175 |         self.lin2 = nn.Sequential(
176 |             nn.Linear(num_radial, hidden_channels),
177 |             #nn.LayerNorm(hidden_channels, elementwise_affine=False),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
178 |             nn.SiLU(inplace=True),
179 |             nn.Linear(hidden_channels, hidden_channels))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:182:13: ERA001 Found commented-out code
    |
180 |         self.lin3 = nn.Sequential(
181 |             nn.Linear(3, hidden_channels//2),
182 |             #nn.LayerNorm(hidden_channels//4, elementwise_affine=False),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
183 |             nn.SiLU(inplace=True),
184 |             nn.Linear(hidden_channels//2, 32))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:187:13: ERA001 Found commented-out code
    |
185 |         self.lin4 = nn.Sequential(
186 |             nn.Linear(3, hidden_channels // 4),
187 |             #nn.LayerNorm(hidden_channels // 4, elementwise_affine=False),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
188 |             nn.SiLU(inplace=True),
189 |             nn.Linear(hidden_channels // 4, 3))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:202:13: B007 Loop control variable `i` not used within loop body
    |
201 |         self.interactions = nn.ModuleList()
202 |         for i in range(num_layers-1):
    |             ^ B007
203 |             self.interactions.append(TransformerConv(hidden_channels * self.heads, hidden_channels, heads=self.heads, edge_dim=self.hidden_channels, **kwargs))
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\ClofNet.py:210:9: D102 Missing docstring in public method
    |
208 |         self.reset_parameters()
209 | 
210 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
211 |         self.emb.reset_parameters()
212 |         self.freq1.data = torch.arange(0, self.freq1.numel()).float().mul_(pi)
    |

src\stk_search\geom3d\models\ClofNet.py:214:9: D102 Missing docstring in public method
    |
212 |         self.freq1.data = torch.arange(0, self.freq1.numel()).float().mul_(pi)
213 | 
214 |     def global_add_pool(x: Tensor, batch: Optional[Tensor],
    |         ^^^^^^^^^^^^^^^ D102
215 |                         size: Optional[int] = None) -> Tensor:
    |

src\stk_search\geom3d\models\ClofNet.py:214:25: N805 First argument of a method should be named `self`
    |
212 |         self.freq1.data = torch.arange(0, self.freq1.numel()).float().mul_(pi)
213 | 
214 |     def global_add_pool(x: Tensor, batch: Optional[Tensor],
    |                         ^^^^^^^^^ N805
215 |                         size: Optional[int] = None) -> Tensor:
    |
    = help: Rename `x` to `self`

src\stk_search\geom3d\models\ClofNet.py:214:43: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
212 |         self.freq1.data = torch.arange(0, self.freq1.numel()).float().mul_(pi)
213 | 
214 |     def global_add_pool(x: Tensor, batch: Optional[Tensor],
    |                                           ^^^^^^^^ FA100
215 |                         size: Optional[int] = None) -> Tensor:
    |

src\stk_search\geom3d\models\ClofNet.py:215:31: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
214 |     def global_add_pool(x: Tensor, batch: Optional[Tensor],
215 |                         size: Optional[int] = None) -> Tensor:
    |                               ^^^^^^^^ FA100
216 | 
217 |         if batch is None:
    |

src\stk_search\geom3d\models\ClofNet.py:218:53: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
217 |         if batch is None:
218 |             return x.sum(dim=-2, keepdim=x.dim() == 2)
    |                                                     ^ PLR2004
219 |         size = int(batch.max().item() + 1) if size is None else size
220 |         return scatter(x, batch, dim=-2, dim_size=size, reduce="add")
    |

src\stk_search\geom3d\models\ClofNet.py:222:9: PLR0915 Too many statements (51 > 50)
    |
220 |         return scatter(x, batch, dim=-2, dim_size=size, reduce="add")
221 | 
222 |     def forward(self, z, pos, batch):
    |         ^^^^^^^ PLR0915
223 |         if self.energy_and_force:
224 |             pos.requires_grad_()
    |

src\stk_search\geom3d\models\ClofNet.py:222:9: D102 Missing docstring in public method
    |
220 |         return scatter(x, batch, dim=-2, dim_size=size, reduce="add")
221 | 
222 |     def forward(self, z, pos, batch):
    |         ^^^^^^^ D102
223 |         if self.energy_and_force:
224 |             pos.requires_grad_()
    |

src\stk_search\geom3d\models\ClofNet.py:226:9: F841 Local variable `num_nodes` is assigned to but never used
    |
224 |             pos.requires_grad_()
225 |         edge_index = radius_graph(pos, r=self.cutoff, batch=batch)
226 |         num_nodes = z.size(0)
    |         ^^^^^^^^^ F841
227 |         z_emb = self.emblin(z)
228 |         z_emb = self.ln_emb(z_emb)
    |
    = help: Remove assignment to unused variable `num_nodes`

src\stk_search\geom3d\models\ClofNet.py:241:9: ERA001 Found commented-out code
    |
239 |         coord_vertical = torch.cross(coord_diff, coord_cross)
240 |         frame = torch.cat((coord_diff.unsqueeze(-1), coord_cross.unsqueeze(-1), coord_vertical.unsqueeze(-1)), dim=-1)
241 |         # dist, first, second, vertical, i, j, idx_kj, idx_ji = self.xyz_to_dat(pos, edge_index, num_nodes)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
242 |         emb = self.emb(dist)
243 |         f = self.lin1(emb)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:250:9: ERA001 Found commented-out code
    |
248 |         f = rbounds.unsqueeze(-1) * f
249 |         g=f
250 |         # g = self.lin2(emb)
    |         ^^^^^^^^^^^^^^^^^^^^ ERA001
251 |         # s, ea, ev, ef = self.mol2graph(z, pos)
252 |         # mask = self.ef_proj(ef) * ea.unsqueeze(-1)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:251:9: ERA001 Found commented-out code
    |
249 |         g=f
250 |         # g = self.lin2(emb)
251 |         # s, ea, ev, ef = self.mol2graph(z, pos)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
252 |         # mask = self.ef_proj(ef) * ea.unsqueeze(-1)
253 |         s = self.neighbor_emb(z, z_emb, edge_index, f)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:252:9: ERA001 Found commented-out code
    |
250 |         # g = self.lin2(emb)
251 |         # s, ea, ev, ef = self.mol2graph(z, pos)
252 |         # mask = self.ef_proj(ef) * ea.unsqueeze(-1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
253 |         s = self.neighbor_emb(z, z_emb, edge_index, f)
254 |         #NE = self.s2v(s, frame, edge_index, g)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:254:9: ERA001 Found commented-out code
    |
252 |         # mask = self.ef_proj(ef) * ea.unsqueeze(-1)
253 |         s = self.neighbor_emb(z, z_emb, edge_index, f)
254 |         #NE = self.s2v(s, frame, edge_index, g)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
255 |         NE1 = self.s2v(s, coord_diff.unsqueeze(-1), edge_index, f)
256 |         scalrization1 = torch.sum(NE1[i].unsqueeze(2) * frame.unsqueeze(-1), dim=1)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:255:9: N806 Variable `NE1` in function should be lowercase
    |
253 |         s = self.neighbor_emb(z, z_emb, edge_index, f)
254 |         #NE = self.s2v(s, frame, edge_index, g)
255 |         NE1 = self.s2v(s, coord_diff.unsqueeze(-1), edge_index, f)
    |         ^^^ N806
256 |         scalrization1 = torch.sum(NE1[i].unsqueeze(2) * frame.unsqueeze(-1), dim=1)
257 |         scalrization2 = torch.sum(NE1[j].unsqueeze(2) * frame.unsqueeze(-1), dim=1)
    |

src\stk_search\geom3d\models\ClofNet.py:259:9: ERA001 Found commented-out code
    |
257 |         scalrization2 = torch.sum(NE1[j].unsqueeze(2) * frame.unsqueeze(-1), dim=1)
258 |         scalrization1[:, 1, :] = torch.abs(scalrization1[:, 1, :].clone())
259 |         # scalrization1[:, 2, :] = torch.abs(scalrization1[:, 2, :])
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
260 |         scalrization2[:, 1, :] = torch.abs(scalrization2[:, 1, :].clone())
261 |         # calculate scalarization of(k - j)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:262:9: ERA001 Found commented-out code
    |
260 |         scalrization2[:, 1, :] = torch.abs(scalrization2[:, 1, :].clone())
261 |         # calculate scalarization of(k - j)
262 |         # scalar1 = torch.sum(NE*a.unsqueeze(-1), dim=1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
263 |         # scalar2 = torch.sum(NE * b.unsqueeze(-1), dim=1)
264 |         #lin3,lin4 maps vector to multiple frequencies
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:263:9: ERA001 Found commented-out code
    |
261 |         # calculate scalarization of(k - j)
262 |         # scalar1 = torch.sum(NE*a.unsqueeze(-1), dim=1)
263 |         # scalar2 = torch.sum(NE * b.unsqueeze(-1), dim=1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
264 |         #lin3,lin4 maps vector to multiple frequencies
265 |         scalar3 = (self.lin3(torch.permute(scalrization1, (0,2,1)))+ torch.permute(scalrization1, (0,2,1))[:,:,0].unsqueeze(2))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:267:9: ERA001 Found commented-out code
    |
265 |         scalar3 = (self.lin3(torch.permute(scalrization1, (0,2,1)))+ torch.permute(scalrization1, (0,2,1))[:,:,0].unsqueeze(2))
266 |         scalar4 = (self.lin3(torch.permute(scalrization2, (0,2,1)))+ torch.permute(scalrization2, (0,2,1))[:,:,0].unsqueeze(2))
267 |         #(E,hidden)
    |         ^^^^^^^^^^^ ERA001
268 |         scalar3 = torch.einsum("ijk,ik->ij", [scalar3, frequency])
269 |         #scalar3 = torch.matmul(scalar3,frequency)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:269:9: ERA001 Found commented-out code
    |
267 |         #(E,hidden)
268 |         scalar3 = torch.einsum("ijk,ik->ij", [scalar3, frequency])
269 |         #scalar3 = torch.matmul(scalar3,frequency)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
270 |         scalar4 = torch.einsum("ijk,ik->ij", [scalar4, frequency])
271 |         scalar5 = (self.lin4(torch.permute(scalrization1, (0, 2, 1))) + torch.permute(scalrization1, (0, 2, 1))).permute((0, 2, 1))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:274:9: N806 Variable `Aij` in function should be lowercase
    |
272 |         scalar6 = (self.lin4(torch.permute(scalrization2, (0, 2, 1))) + torch.permute(scalrization2, (0, 2, 1))).permute((0, 2, 1))
273 | 
274 |         Aij = torch.sum(self.q_proj(scalar5) * self.k_proj(scalar6), dim=1)
    |         ^^^ N806
275 |         #ev_decay
276 |         edgeweight = torch.cat((scalar3,scalar4, Aij), dim=-1) * rbounds.unsqueeze(-1)
    |

src\stk_search\geom3d\models\ClofNet.py:285:9: PLW0127 Self-assignment of variable `edgefeature`
    |
283 |         edgefeature[:, 1, :] = torch.abs(edgefeature[:, 1, :].clone())
284 |         edgefeature = torch.einsum("ijk,ik->ij", [edgefeature, frequency])* rbounds.unsqueeze(-1)
285 |         edgefeature = edgefeature #+ edgefeature1
    |         ^^^^^^^^^^^ PLW0127
286 |         z_emb = self.interaction1(z_emb, edge_index, edge_attr=edgefeature, edgeweight=edgeweight)
287 |         i = 0
    |

src\stk_search\geom3d\models\ClofNet.py:295:16: RET504 Unnecessary assignment to `s` before `return` statement
    |
293 |         size = int(batch.max().item() + 1)
294 |         s = scatter(s, batch, dim=-2, dim_size=size, reduce="sum")
295 |         return s
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ClofNet.py:298:7: D101 Missing docstring in public class
    |
298 | class NeighborEmb(MessagePassing):
    |       ^^^^^^^^^^^ D101
299 | 
300 |     def __init__(self, hid_dim: int, **kwargs):  # ln_emb: bool, **kwargs):
    |

src\stk_search\geom3d\models\ClofNet.py:300:9: ANN204 Missing return type annotation for special method `__init__`
    |
298 | class NeighborEmb(MessagePassing):
299 | 
300 |     def __init__(self, hid_dim: int, **kwargs):  # ln_emb: bool, **kwargs):
    |         ^^^^^^^^ ANN204
301 |         super(NeighborEmb, self).__init__(aggr="add")
302 |         self.embedding = nn.Embedding(95, hid_dim)
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:300:9: D107 Missing docstring in `__init__`
    |
298 | class NeighborEmb(MessagePassing):
299 | 
300 |     def __init__(self, hid_dim: int, **kwargs):  # ln_emb: bool, **kwargs):
    |         ^^^^^^^^ D107
301 |         super(NeighborEmb, self).__init__(aggr="add")
302 |         self.embedding = nn.Embedding(95, hid_dim)
    |

src\stk_search\geom3d\models\ClofNet.py:300:38: ANN003 Missing type annotation for `**kwargs`
    |
298 | class NeighborEmb(MessagePassing):
299 | 
300 |     def __init__(self, hid_dim: int, **kwargs):  # ln_emb: bool, **kwargs):
    |                                      ^^^^^^^^ ANN003
301 |         super(NeighborEmb, self).__init__(aggr="add")
302 |         self.embedding = nn.Embedding(95, hid_dim)
    |

src\stk_search\geom3d\models\ClofNet.py:300:40: ARG002 Unused method argument: `kwargs`
    |
298 | class NeighborEmb(MessagePassing):
299 | 
300 |     def __init__(self, hid_dim: int, **kwargs):  # ln_emb: bool, **kwargs):
    |                                        ^^^^^^ ARG002
301 |         super(NeighborEmb, self).__init__(aggr="add")
302 |         self.embedding = nn.Embedding(95, hid_dim)
    |

src\stk_search\geom3d\models\ClofNet.py:301:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
300 |     def __init__(self, hid_dim: int, **kwargs):  # ln_emb: bool, **kwargs):
301 |         super(NeighborEmb, self).__init__(aggr="add")
    |              ^^^^^^^^^^^^^^^^^^^ UP008
302 |         self.embedding = nn.Embedding(95, hid_dim)
303 |         # self.conv = CFConv()
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ClofNet.py:303:9: ERA001 Found commented-out code
    |
301 |         super(NeighborEmb, self).__init__(aggr="add")
302 |         self.embedding = nn.Embedding(95, hid_dim)
303 |         # self.conv = CFConv()
    |         ^^^^^^^^^^^^^^^^^^^^^^ ERA001
304 |         self.hid_dim = hid_dim
305 |         self.ln_emb = nn.LayerNorm(hid_dim,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:308:9: D102 Missing docstring in public method
    |
306 |                                    elementwise_affine=False)  # kwargs['ln_learnable']) #if ln_emb else nn.Identity()
307 | 
308 |     def forward(self, z, s, edge_index, embs):
    |         ^^^^^^^ D102
309 |         s_neighbors = self.ln_emb(self.embedding(z))
310 |         s_neighbors = self.propagate(edge_index, x=s_neighbors, norm=embs)
    |

src\stk_search\geom3d\models\ClofNet.py:312:9: ERA001 Found commented-out code
    |
310 |         s_neighbors = self.propagate(edge_index, x=s_neighbors, norm=embs)
311 | 
312 |         # s_neighbors = self.conv(s_neighbors, mask)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
313 |         s = s + s_neighbors
314 |         return s
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:314:16: RET504 Unnecessary assignment to `s` before `return` statement
    |
312 |         # s_neighbors = self.conv(s_neighbors, mask)
313 |         s = s + s_neighbors
314 |         return s
    |                ^ RET504
315 | 
316 |     def message(self, x_j, norm):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ClofNet.py:316:9: D102 Missing docstring in public method
    |
314 |         return s
315 | 
316 |     def message(self, x_j, norm):
    |         ^^^^^^^ D102
317 |         return norm.view(-1, self.hid_dim) * x_j
    |

src\stk_search\geom3d\models\ClofNet.py:320:7: D101 Missing docstring in public class
    |
320 | class CFConvS2V(MessagePassing):
    |       ^^^^^^^^^ D101
321 | 
322 |     def __init__(self, hid_dim: int, **kwargs):  # ln_s2v: bool,
    |

src\stk_search\geom3d\models\ClofNet.py:322:9: ANN204 Missing return type annotation for special method `__init__`
    |
320 | class CFConvS2V(MessagePassing):
321 | 
322 |     def __init__(self, hid_dim: int, **kwargs):  # ln_s2v: bool,
    |         ^^^^^^^^ ANN204
323 |         # lin1_tailact: bool, nolin1: bool=False, **kwargs):
324 |         super(CFConvS2V, self).__init__(aggr="add")
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:322:9: D107 Missing docstring in `__init__`
    |
320 | class CFConvS2V(MessagePassing):
321 | 
322 |     def __init__(self, hid_dim: int, **kwargs):  # ln_s2v: bool,
    |         ^^^^^^^^ D107
323 |         # lin1_tailact: bool, nolin1: bool=False, **kwargs):
324 |         super(CFConvS2V, self).__init__(aggr="add")
    |

src\stk_search\geom3d\models\ClofNet.py:322:38: ANN003 Missing type annotation for `**kwargs`
    |
320 | class CFConvS2V(MessagePassing):
321 | 
322 |     def __init__(self, hid_dim: int, **kwargs):  # ln_s2v: bool,
    |                                      ^^^^^^^^ ANN003
323 |         # lin1_tailact: bool, nolin1: bool=False, **kwargs):
324 |         super(CFConvS2V, self).__init__(aggr="add")
    |

src\stk_search\geom3d\models\ClofNet.py:322:40: ARG002 Unused method argument: `kwargs`
    |
320 | class CFConvS2V(MessagePassing):
321 | 
322 |     def __init__(self, hid_dim: int, **kwargs):  # ln_s2v: bool,
    |                                        ^^^^^^ ARG002
323 |         # lin1_tailact: bool, nolin1: bool=False, **kwargs):
324 |         super(CFConvS2V, self).__init__(aggr="add")
    |

src\stk_search\geom3d\models\ClofNet.py:324:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
322 |     def __init__(self, hid_dim: int, **kwargs):  # ln_s2v: bool,
323 |         # lin1_tailact: bool, nolin1: bool=False, **kwargs):
324 |         super(CFConvS2V, self).__init__(aggr="add")
    |              ^^^^^^^^^^^^^^^^^ UP008
325 |         # super().__init__()
326 |         self.hid_dim = hid_dim
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ClofNet.py:325:9: ERA001 Found commented-out code
    |
323 |         # lin1_tailact: bool, nolin1: bool=False, **kwargs):
324 |         super(CFConvS2V, self).__init__(aggr="add")
325 |         # super().__init__()
    |         ^^^^^^^^^^^^^^^^^^^^ ERA001
326 |         self.hid_dim = hid_dim
327 |         self.lin1 = nn.Sequential(  # nn.Identity() if nolin1 else nn.Sequential(
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:333:9: ERA001 Found commented-out code
    |
331 |         # if ln_s2v else nn.Identity(),
332 |         # kwargs["act"] if lin1_tailact else nn.Identity())
333 |         #self.lin2 = nn.Linear(3, hid_dim)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
334 | 
335 |     def forward(self, s, v, edge_index, emb):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:336:9: D205 1 blank line required between summary line and description
    |
335 |       def forward(self, s, v, edge_index, emb):
336 |           """S (B, N, hid_dim)
    |  _________^
337 | |         v (B, N, 3, hid_dim)
338 | |         ea (B, N, N)
339 | |         ef (B, N, N, ef_dim)
340 | |         ev (B, N, N, 3)
341 | |         v (BN, 3, 1)
342 | |         emb (BN, hid_dim)
343 | |         """
    | |___________^ D205
344 |           s = self.lin1(s)
345 |           #v = self.lin2(v)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\ClofNet.py:336:9: D400 First line should end with a period
    |
335 |       def forward(self, s, v, edge_index, emb):
336 |           """S (B, N, hid_dim)
    |  _________^
337 | |         v (B, N, 3, hid_dim)
338 | |         ea (B, N, N)
339 | |         ef (B, N, N, ef_dim)
340 | |         ev (B, N, N, 3)
341 | |         v (BN, 3, 1)
342 | |         emb (BN, hid_dim)
343 | |         """
    | |___________^ D400
344 |           s = self.lin1(s)
345 |           #v = self.lin2(v)
    |
    = help: Add period

src\stk_search\geom3d\models\ClofNet.py:336:9: D415 First line should end with a period, question mark, or exclamation point
    |
335 |       def forward(self, s, v, edge_index, emb):
336 |           """S (B, N, hid_dim)
    |  _________^
337 | |         v (B, N, 3, hid_dim)
338 | |         ea (B, N, N)
339 | |         ef (B, N, N, ef_dim)
340 | |         ev (B, N, N, 3)
341 | |         v (BN, 3, 1)
342 | |         emb (BN, hid_dim)
343 | |         """
    | |___________^ D415
344 |           s = self.lin1(s)
345 |           #v = self.lin2(v)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\ClofNet.py:345:9: ERA001 Found commented-out code
    |
343 |         """
344 |         s = self.lin1(s)
345 |         #v = self.lin2(v)
    |         ^^^^^^^^^^^^^^^^^ ERA001
346 |         # sv = s*v
347 |         emb = emb.unsqueeze(1) * v
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:346:9: ERA001 Found commented-out code
    |
344 |         s = self.lin1(s)
345 |         #v = self.lin2(v)
346 |         # sv = s*v
    |         ^^^^^^^^^^ ERA001
347 |         emb = emb.unsqueeze(1) * v
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:349:9: ERA001 Found commented-out code
    |
347 |         emb = emb.unsqueeze(1) * v
348 | 
349 |         # s= s.view(-1, 1, self.hid_dim)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
350 |         v = self.propagate(edge_index, x=s, norm=emb)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:352:9: ERA001 Found commented-out code
    |
350 |         v = self.propagate(edge_index, x=s, norm=emb)
351 | 
352 |         # s_neighbors = self.conv(s_neighbors, mask)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
353 |         return v.view(-1, 3, self.hid_dim)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:355:9: D102 Missing docstring in public method
    |
353 |         return v.view(-1, 3, self.hid_dim)
354 | 
355 |     def message(self, x_j, norm):
    |         ^^^^^^^ D102
356 |         x_j = x_j.unsqueeze(1)
357 |         a = norm.view(-1, 3, self.hid_dim) * x_j
    |

src\stk_search\geom3d\models\ClofNet.py:362:5: D419 Docstring is empty
    |
361 |   class TransformerConv(MessagePassing):
362 |       r"""
    |  _____^
363 | | 
364 | | 
365 | |     """
    | |_______^ D419
366 |       _alpha: OptTensor
    |

src\stk_search\geom3d\models\ClofNet.py:368:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
366 |     _alpha: OptTensor
367 | 
368 |     def __init__(
    |         ^^^^^^^^ PLR0913
369 |             self,
370 |             in_channels: Union[int, Tuple[int, int]],
    |

src\stk_search\geom3d\models\ClofNet.py:368:9: ANN204 Missing return type annotation for special method `__init__`
    |
366 |     _alpha: OptTensor
367 | 
368 |     def __init__(
    |         ^^^^^^^^ ANN204
369 |             self,
370 |             in_channels: Union[int, Tuple[int, int]],
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ClofNet.py:368:9: D107 Missing docstring in `__init__`
    |
366 |     _alpha: OptTensor
367 | 
368 |     def __init__(
    |         ^^^^^^^^ D107
369 |             self,
370 |             in_channels: Union[int, Tuple[int, int]],
    |

src\stk_search\geom3d\models\ClofNet.py:370:26: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
368 |     def __init__(
369 |             self,
370 |             in_channels: Union[int, Tuple[int, int]],
    |                          ^^^^^ FA100
371 |             out_channels: int,
372 |             heads: int = 2,
    |

src\stk_search\geom3d\models\ClofNet.py:370:37: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
368 |     def __init__(
369 |             self,
370 |             in_channels: Union[int, Tuple[int, int]],
    |                                     ^^^^^ FA100
371 |             out_channels: int,
372 |             heads: int = 2,
    |

src\stk_search\geom3d\models\ClofNet.py:373:13: FBT001 Boolean-typed positional argument in function definition
    |
371 |             out_channels: int,
372 |             heads: int = 2,
373 |             concat: bool = True,
    |             ^^^^^^ FBT001
374 |             beta: bool = False,
375 |             dropout: float = 0.,
    |

src\stk_search\geom3d\models\ClofNet.py:373:13: FBT002 Boolean default positional argument in function definition
    |
371 |             out_channels: int,
372 |             heads: int = 2,
373 |             concat: bool = True,
    |             ^^^^^^ FBT002
374 |             beta: bool = False,
375 |             dropout: float = 0.,
    |

src\stk_search\geom3d\models\ClofNet.py:374:13: FBT001 Boolean-typed positional argument in function definition
    |
372 |             heads: int = 2,
373 |             concat: bool = True,
374 |             beta: bool = False,
    |             ^^^^ FBT001
375 |             dropout: float = 0.,
376 |             edge_dim: Optional[int] = None,
    |

src\stk_search\geom3d\models\ClofNet.py:374:13: FBT002 Boolean default positional argument in function definition
    |
372 |             heads: int = 2,
373 |             concat: bool = True,
374 |             beta: bool = False,
    |             ^^^^ FBT002
375 |             dropout: float = 0.,
376 |             edge_dim: Optional[int] = None,
    |

src\stk_search\geom3d\models\ClofNet.py:376:23: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
374 |             beta: bool = False,
375 |             dropout: float = 0.,
376 |             edge_dim: Optional[int] = None,
    |                       ^^^^^^^^ FA100
377 |             bias: bool = True,
378 |             root_weight: bool = True,
    |

src\stk_search\geom3d\models\ClofNet.py:377:13: FBT001 Boolean-typed positional argument in function definition
    |
375 |             dropout: float = 0.,
376 |             edge_dim: Optional[int] = None,
377 |             bias: bool = True,
    |             ^^^^ FBT001
378 |             root_weight: bool = True,
379 |             **kwargs,
    |

src\stk_search\geom3d\models\ClofNet.py:377:13: FBT002 Boolean default positional argument in function definition
    |
375 |             dropout: float = 0.,
376 |             edge_dim: Optional[int] = None,
377 |             bias: bool = True,
    |             ^^^^ FBT002
378 |             root_weight: bool = True,
379 |             **kwargs,
    |

src\stk_search\geom3d\models\ClofNet.py:378:13: FBT001 Boolean-typed positional argument in function definition
    |
376 |             edge_dim: Optional[int] = None,
377 |             bias: bool = True,
378 |             root_weight: bool = True,
    |             ^^^^^^^^^^^ FBT001
379 |             **kwargs,
380 |     ):
    |

src\stk_search\geom3d\models\ClofNet.py:378:13: FBT002 Boolean default positional argument in function definition
    |
376 |             edge_dim: Optional[int] = None,
377 |             bias: bool = True,
378 |             root_weight: bool = True,
    |             ^^^^^^^^^^^ FBT002
379 |             **kwargs,
380 |     ):
    |

src\stk_search\geom3d\models\ClofNet.py:379:13: ANN003 Missing type annotation for `**kwargs`
    |
377 |             bias: bool = True,
378 |             root_weight: bool = True,
379 |             **kwargs,
    |             ^^^^^^^^ ANN003
380 |     ):
381 |         kwargs.setdefault("aggr", "add")
    |

src\stk_search\geom3d\models\ClofNet.py:382:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
380 |     ):
381 |         kwargs.setdefault("aggr", "add")
382 |         super(TransformerConv, self).__init__(node_dim=0, **kwargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^ UP008
383 | 
384 |         self.in_channels = in_channels
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ClofNet.py:424:9: D102 Missing docstring in public method
    |
422 |         self.reset_parameters()
423 | 
424 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
425 |         self.lin_key.reset_parameters()
426 |         self.lin_query.reset_parameters()
    |

src\stk_search\geom3d\models\ClofNet.py:434:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
432 |             self.lin_beta.reset_parameters()
433 | 
434 |     def forward(self, x: Union[Tensor, PairTensor], edge_index: Adj,
    |         ^^^^^^^ PLR0913
435 |                 edge_attr: OptTensor = None, edgeweight: OptTensor = None, emb: OptTensor = None, return_attention_weights=None):
    |

src\stk_search\geom3d\models\ClofNet.py:434:9: D102 Missing docstring in public method
    |
432 |             self.lin_beta.reset_parameters()
433 | 
434 |     def forward(self, x: Union[Tensor, PairTensor], edge_index: Adj,
    |         ^^^^^^^ D102
435 |                 edge_attr: OptTensor = None, edgeweight: OptTensor = None, emb: OptTensor = None, return_attention_weights=None):
    |

src\stk_search\geom3d\models\ClofNet.py:434:26: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
432 |             self.lin_beta.reset_parameters()
433 | 
434 |     def forward(self, x: Union[Tensor, PairTensor], edge_index: Adj,
    |                          ^^^^^ FA100
435 |                 edge_attr: OptTensor = None, edgeweight: OptTensor = None, emb: OptTensor = None, return_attention_weights=None):
    |

src\stk_search\geom3d\models\ClofNet.py:437:9: N806 Variable `H` in function should be lowercase
    |
435 |                 edge_attr: OptTensor = None, edgeweight: OptTensor = None, emb: OptTensor = None, return_attention_weights=None):
436 | 
437 |         H, C = self.heads, self.out_channels
    |         ^ N806
438 | 
439 |         if isinstance(x, Tensor):
    |

src\stk_search\geom3d\models\ClofNet.py:437:12: N806 Variable `C` in function should be lowercase
    |
435 |                 edge_attr: OptTensor = None, edgeweight: OptTensor = None, emb: OptTensor = None, return_attention_weights=None):
436 | 
437 |         H, C = self.heads, self.out_channels
    |            ^ N806
438 | 
439 |         if isinstance(x, Tensor):
    |

src\stk_search\geom3d\models\ClofNet.py:458:13: ERA001 Found commented-out code
    |
457 |         if self.root_weight:
458 |             #x_r = self.lin_skip(x[1])
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
459 |             x_r = x[1]
460 |             if self.lin_beta is not None:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:468:13: S101 Use of `assert` detected
    |
467 |         if isinstance(return_attention_weights, bool):
468 |             assert alpha is not None
    |             ^^^^^^ S101
469 |             if isinstance(edge_index, Tensor):
470 |                 return out, (edge_index, alpha)
    |

src\stk_search\geom3d\models\ClofNet.py:469:13: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
467 |           if isinstance(return_attention_weights, bool):
468 |               assert alpha is not None
469 |               if isinstance(edge_index, Tensor):
    |  _____________^
470 | |                 return out, (edge_index, alpha)
471 | |             elif isinstance(edge_index, SparseTensor):
472 | |                 return out, edge_index.set_value(alpha, layout="coo")
    | |_____________________________________________________________________^ RET503
473 |           else:
474 |               return out
    |
    = help: Add explicit `return` statement

src\stk_search\geom3d\models\ClofNet.py:471:13: RET505 Unnecessary `elif` after `return` statement
    |
469 |             if isinstance(edge_index, Tensor):
470 |                 return out, (edge_index, alpha)
471 |             elif isinstance(edge_index, SparseTensor):
    |             ^^^^ RET505
472 |                 return out, edge_index.set_value(alpha, layout="coo")
473 |         else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\ClofNet.py:476:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
474 |             return out
475 | 
476 |     def message(self, query_i: Tensor, key_j: Tensor, value_j: Tensor,
    |         ^^^^^^^ PLR0913
477 |                 edge_attr: OptTensor, edgeweight: OptTensor, emb: OptTensor, index: Tensor, ptr: OptTensor,
478 |                 size_i: Optional[int]) -> Tensor:
    |

src\stk_search\geom3d\models\ClofNet.py:476:9: D102 Missing docstring in public method
    |
474 |             return out
475 | 
476 |     def message(self, query_i: Tensor, key_j: Tensor, value_j: Tensor,
    |         ^^^^^^^ D102
477 |                 edge_attr: OptTensor, edgeweight: OptTensor, emb: OptTensor, index: Tensor, ptr: OptTensor,
478 |                 size_i: Optional[int]) -> Tensor:
    |

src\stk_search\geom3d\models\ClofNet.py:477:62: ARG002 Unused method argument: `emb`
    |
476 |     def message(self, query_i: Tensor, key_j: Tensor, value_j: Tensor,
477 |                 edge_attr: OptTensor, edgeweight: OptTensor, emb: OptTensor, index: Tensor, ptr: OptTensor,
    |                                                              ^^^ ARG002
478 |                 size_i: Optional[int]) -> Tensor:
    |

src\stk_search\geom3d\models\ClofNet.py:478:25: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
476 |     def message(self, query_i: Tensor, key_j: Tensor, value_j: Tensor,
477 |                 edge_attr: OptTensor, edgeweight: OptTensor, emb: OptTensor, index: Tensor, ptr: OptTensor,
478 |                 size_i: Optional[int]) -> Tensor:
    |                         ^^^^^^^^ FA100
479 | 
480 |         if self.lin_edge is not None:
    |

src\stk_search\geom3d\models\ClofNet.py:481:13: S101 Use of `assert` detected
    |
480 |         if self.lin_edge is not None:
481 |             assert edge_attr is not None
    |             ^^^^^^ S101
482 |             edge_attr = self.lin_edge(edge_attr).view(-1, self.heads,
483 |                                                       self.out_channels)
    |

src\stk_search\geom3d\models\ClofNet.py:494:13: ERA001 Found commented-out code
    |
492 |         out *= edgeweight.unsqueeze(1)
493 |         if edge_attr is not None:
494 |             #out += emb* edge_attr
    |             ^^^^^^^^^^^^^^^^^^^^^^ ERA001
495 |             out += edgeweight.unsqueeze(1) * edge_attr
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:497:9: ERA001 Found commented-out code
    |
495 |             out += edgeweight.unsqueeze(1) * edge_attr
496 | 
497 |         #out *= alpha.view(-1, self.heads, 1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
498 |         return out
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ClofNet.py:500:9: D105 Missing docstring in magic method
    |
498 |         return out
499 | 
500 |     def __repr__(self) -> str:
    |         ^^^^^^^^ D105
501 |         return (f"{self.__class__.__name__}({self.in_channels}, "
502 |                 f"{self.out_channels}, heads={self.heads})")
    |

src\stk_search\geom3d\models\DMPNN.py:1:1: N999 Invalid module name: 'DMPNN'
src\stk_search\geom3d\models\DMPNN.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """credit to https://github.com/chao1224/BioChemGNN_Dense/blob/master/src/models/DMPNN.py
2 | | credit to https://github.com/chao1224/BioChemGNN/blob/main/BioChemGNN/models/DMPNN.py
3 | | """
  | |___^ D205
4 |   from collections import *
  |
  = help: Insert single blank line

src\stk_search\geom3d\models\DMPNN.py:1:1: D400 First line should end with a period
  |
1 | / """credit to https://github.com/chao1224/BioChemGNN_Dense/blob/master/src/models/DMPNN.py
2 | | credit to https://github.com/chao1224/BioChemGNN/blob/main/BioChemGNN/models/DMPNN.py
3 | | """
  | |___^ D400
4 |   from collections import *
  |
  = help: Add period

src\stk_search\geom3d\models\DMPNN.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """credit to https://github.com/chao1224/BioChemGNN_Dense/blob/master/src/models/DMPNN.py
2 | | credit to https://github.com/chao1224/BioChemGNN/blob/main/BioChemGNN/models/DMPNN.py
3 | | """
  | |___^ D415
4 |   from collections import *
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\DMPNN.py:4:1: F403 `from collections import *` used; unable to detect undefined names
  |
2 | credit to https://github.com/chao1224/BioChemGNN/blob/main/BioChemGNN/models/DMPNN.py
3 | """
4 | from collections import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ F403
5 | 
6 | import torch
  |

src\stk_search\geom3d\models\DMPNN.py:9:22: N812 Lowercase `functional` imported as non-lowercase `F`
   |
 7 | from ogb.graphproppred.mol_encoder import AtomEncoder, BondEncoder
 8 | from torch import nn
 9 | from torch.nn import functional as F
   |                      ^^^^^^^^^^^^^^^ N812
10 | from torch_scatter import scatter_add
   |

src\stk_search\geom3d\models\DMPNN.py:14:5: D200 One-line docstring should fit on one line
   |
13 |   def get_revert_edge_index(num_edge):
14 |       """Corresponding to this line: https://github.com/chao1224/3D_Benchmark_dev/blob/main/Geom3D/datasets/datasets_utils.py#L90-L92
   |  _____^
15 | |     """
   | |_______^ D200
16 |       l = []
17 |       for i in range(int(num_edge / 2)):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\DMPNN.py:14:5: D400 First line should end with a period
   |
13 |   def get_revert_edge_index(num_edge):
14 |       """Corresponding to this line: https://github.com/chao1224/3D_Benchmark_dev/blob/main/Geom3D/datasets/datasets_utils.py#L90-L92
   |  _____^
15 | |     """
   | |_______^ D400
16 |       l = []
17 |       for i in range(int(num_edge / 2)):
   |
   = help: Add period

src\stk_search\geom3d\models\DMPNN.py:14:5: D415 First line should end with a period, question mark, or exclamation point
   |
13 |   def get_revert_edge_index(num_edge):
14 |       """Corresponding to this line: https://github.com/chao1224/3D_Benchmark_dev/blob/main/Geom3D/datasets/datasets_utils.py#L90-L92
   |  _____^
15 | |     """
   | |_______^ D415
16 |       l = []
17 |       for i in range(int(num_edge / 2)):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\DMPNN.py:16:5: E741 Ambiguous variable name: `l`
   |
14 |     """Corresponding to this line: https://github.com/chao1224/3D_Benchmark_dev/blob/main/Geom3D/datasets/datasets_utils.py#L90-L92
15 |     """
16 |     l = []
   |     ^ E741
17 |     for i in range(int(num_edge / 2)):
18 |         l.extend([i*2+1, i*2])
   |

src\stk_search\geom3d\models\DMPNN.py:22:7: D101 Missing docstring in public class
   |
22 | class DMPNN(nn.Module):
   |       ^^^^^ D101
23 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
24 |         super(DMPNN, self).__init__()
   |

src\stk_search\geom3d\models\DMPNN.py:23:9: ANN204 Missing return type annotation for special method `__init__`
   |
22 | class DMPNN(nn.Module):
23 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
   |         ^^^^^^^^ ANN204
24 |         super(DMPNN, self).__init__()
25 |         self.num_layer = num_layer
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DMPNN.py:23:9: D107 Missing docstring in `__init__`
   |
22 | class DMPNN(nn.Module):
23 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
   |         ^^^^^^^^ D107
24 |         super(DMPNN, self).__init__()
25 |         self.num_layer = num_layer
   |

src\stk_search\geom3d\models\DMPNN.py:23:44: N803 Argument name `JK` should be lowercase
   |
22 | class DMPNN(nn.Module):
23 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
   |                                            ^^ N803
24 |         super(DMPNN, self).__init__()
25 |         self.num_layer = num_layer
   |

src\stk_search\geom3d\models\DMPNN.py:23:69: ARG002 Unused method argument: `gnn_type`
   |
22 | class DMPNN(nn.Module):
23 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
   |                                                                     ^^^^^^^^ ARG002
24 |         super(DMPNN, self).__init__()
25 |         self.num_layer = num_layer
   |

src\stk_search\geom3d\models\DMPNN.py:24:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
22 | class DMPNN(nn.Module):
23 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
24 |         super(DMPNN, self).__init__()
   |              ^^^^^^^^^^^^^ UP008
25 |         self.num_layer = num_layer
26 |         self.drop_ratio = drop_ratio
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DMPNN.py:29:29: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
27 |         self.JK = JK
28 | 
29 |         if self.num_layer < 2:
   |                             ^ PLR2004
30 |             raise ValueError("Number of GNN layers must be greater than 1.")
   |

src\stk_search\geom3d\models\DMPNN.py:30:19: TRY003 Avoid specifying long messages outside the exception class
   |
29 |         if self.num_layer < 2:
30 |             raise ValueError("Number of GNN layers must be greater than 1.")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
31 | 
32 |         self.atom_encoder = AtomEncoder(emb_dim)
   |

src\stk_search\geom3d\models\DMPNN.py:30:30: EM101 Exception must not use a string literal, assign to variable first
   |
29 |         if self.num_layer < 2:
30 |             raise ValueError("Number of GNN layers must be greater than 1.")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
31 | 
32 |         self.atom_encoder = AtomEncoder(emb_dim)
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\DMPNN.py:44:9: D102 Missing docstring in public method
   |
42 |             self.batch_norms.append(nn.BatchNorm1d(emb_dim))
43 | 
44 |     def forward(self, *argv):
   |         ^^^^^^^ D102
45 |         if len(argv) == 3:
46 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
   |

src\stk_search\geom3d\models\DMPNN.py:44:23: ANN002 Missing type annotation for `*argv`
   |
42 |             self.batch_norms.append(nn.BatchNorm1d(emb_dim))
43 | 
44 |     def forward(self, *argv):
   |                       ^^^^^ ANN002
45 |         if len(argv) == 3:
46 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
   |

src\stk_search\geom3d\models\DMPNN.py:45:25: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
44 |     def forward(self, *argv):
45 |         if len(argv) == 3:
   |                         ^ PLR2004
46 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
47 |         elif len(argv) == 1:
   |

src\stk_search\geom3d\models\DMPNN.py:51:19: TRY003 Avoid specifying long messages outside the exception class
   |
49 |             x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
50 |         else:
51 |             raise ValueError("unmatched number of arguments.")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
52 | 
53 |         x = self.atom_encoder(x)
   |

src\stk_search\geom3d\models\DMPNN.py:51:30: EM101 Exception must not use a string literal, assign to variable first
   |
49 |             x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
50 |         else:
51 |             raise ValueError("unmatched number of arguments.")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
52 | 
53 |         x = self.atom_encoder(x)
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\DMPNN.py:56:20: F841 Local variable `out_node_index` is assigned to but never used
   |
54 |         edge_attr = self.bond_encoder(edge_attr)
55 | 
56 |         b_from_a = out_node_index = edge_index[0]
   |                    ^^^^^^^^^^^^^^ F841
57 |         b_to_a = in_node_index = edge_index[1]
58 |         message = torch.cat([x[b_to_a], edge_attr], dim=-1)
   |
   = help: Remove assignment to unused variable `out_node_index`

src\stk_search\geom3d\models\DMPNN.py:78:16: RET504 Unnecessary assignment to `node_representation` before `return` statement
   |
76 |         node_representation = F.relu(self.W_output(node_representation))
77 | 
78 |         return node_representation
   |                ^^^^^^^^^^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\DimeNet.py:1:1: N999 Invalid module name: 'DimeNet'
src\stk_search\geom3d\models\DimeNet.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\DimeNet.py:1:18: N812 Lowercase `pi` imported as non-lowercase `PI`
  |
1 | from math import pi as PI
  |                  ^^^^^^^^ N812
2 | from math import sqrt
  |

src\stk_search\geom3d\models\DimeNet.py:15:5: D103 Missing docstring in public function
   |
15 | def swish(x):
   |     ^^^^^ D103
16 |     return x * x.sigmoid()
   |

src\stk_search\geom3d\models\DimeNet.py:19:5: D103 Missing docstring in public function
   |
19 | def glorot_orthogonal(tensor, scale):
   |     ^^^^^^^^^^^^^^^^^ D103
20 |     if tensor is not None:
21 |         torch.nn.init.orthogonal_(tensor.data)
   |

src\stk_search\geom3d\models\DimeNet.py:26:7: D101 Missing docstring in public class
   |
26 | class Envelope(torch.nn.Module):
   |       ^^^^^^^^ D101
27 |     def __init__(self, exponent):
28 |         super(Envelope, self).__init__()
   |

src\stk_search\geom3d\models\DimeNet.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
26 | class Envelope(torch.nn.Module):
27 |     def __init__(self, exponent):
   |         ^^^^^^^^ ANN204
28 |         super(Envelope, self).__init__()
29 |         self.p = exponent + 1
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:27:9: D107 Missing docstring in `__init__`
   |
26 | class Envelope(torch.nn.Module):
27 |     def __init__(self, exponent):
   |         ^^^^^^^^ D107
28 |         super(Envelope, self).__init__()
29 |         self.p = exponent + 1
   |

src\stk_search\geom3d\models\DimeNet.py:28:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
26 | class Envelope(torch.nn.Module):
27 |     def __init__(self, exponent):
28 |         super(Envelope, self).__init__()
   |              ^^^^^^^^^^^^^^^^ UP008
29 |         self.p = exponent + 1
30 |         self.a = -(self.p + 1) * (self.p + 2) / 2
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:34:9: D102 Missing docstring in public method
   |
32 |         self.c = -self.p * (self.p + 1) / 2
33 | 
34 |     def forward(self, x):
   |         ^^^^^^^ D102
35 |         p, a, b, c = self.p, self.a, self.b, self.c
36 |         x_pow_p0 = x.pow(p - 1)
   |

src\stk_search\geom3d\models\DimeNet.py:42:7: D101 Missing docstring in public class
   |
42 | class BesselBasisLayer(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^ D101
43 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
44 |         super(BesselBasisLayer, self).__init__()
   |

src\stk_search\geom3d\models\DimeNet.py:43:9: ANN204 Missing return type annotation for special method `__init__`
   |
42 | class BesselBasisLayer(torch.nn.Module):
43 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ ANN204
44 |         super(BesselBasisLayer, self).__init__()
45 |         self.cutoff = cutoff
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:43:9: D107 Missing docstring in `__init__`
   |
42 | class BesselBasisLayer(torch.nn.Module):
43 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ D107
44 |         super(BesselBasisLayer, self).__init__()
45 |         self.cutoff = cutoff
   |

src\stk_search\geom3d\models\DimeNet.py:44:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
42 | class BesselBasisLayer(torch.nn.Module):
43 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
44 |         super(BesselBasisLayer, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
45 |         self.cutoff = cutoff
46 |         self.envelope = Envelope(envelope_exponent)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:52:9: D102 Missing docstring in public method
   |
50 |         self.reset_parameters()
51 | 
52 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
53 |         # added the with torch.no_grad() to avoid the warning
54 |         with torch.no_grad(): torch.arange(1, self.freq.numel() + 1, out=self.freq).mul_(PI)
   |

src\stk_search\geom3d\models\DimeNet.py:54:29: E701 Multiple statements on one line (colon)
   |
52 |     def reset_parameters(self):
53 |         # added the with torch.no_grad() to avoid the warning
54 |         with torch.no_grad(): torch.arange(1, self.freq.numel() + 1, out=self.freq).mul_(PI)
   |                             ^ E701
55 | 
56 |     def forward(self, dist):
   |

src\stk_search\geom3d\models\DimeNet.py:56:9: D102 Missing docstring in public method
   |
54 |         with torch.no_grad(): torch.arange(1, self.freq.numel() + 1, out=self.freq).mul_(PI)
55 | 
56 |     def forward(self, dist):
   |         ^^^^^^^ D102
57 |         dist = dist.unsqueeze(-1) / self.cutoff
58 |         return self.envelope(dist) * (self.freq * dist).sin()
   |

src\stk_search\geom3d\models\DimeNet.py:61:7: D101 Missing docstring in public class
   |
61 | class SphericalBasisLayer(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^ D101
62 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
63 |         super(SphericalBasisLayer, self).__init__()
   |

src\stk_search\geom3d\models\DimeNet.py:62:9: ANN204 Missing return type annotation for special method `__init__`
   |
61 | class SphericalBasisLayer(torch.nn.Module):
62 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ ANN204
63 |         super(SphericalBasisLayer, self).__init__()
64 |         assert num_radial <= 64
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:62:9: D107 Missing docstring in `__init__`
   |
61 | class SphericalBasisLayer(torch.nn.Module):
62 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ D107
63 |         super(SphericalBasisLayer, self).__init__()
64 |         assert num_radial <= 64
   |

src\stk_search\geom3d\models\DimeNet.py:63:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
61 | class SphericalBasisLayer(torch.nn.Module):
62 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
63 |         super(SphericalBasisLayer, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
64 |         assert num_radial <= 64
65 |         self.num_spherical = num_spherical
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:64:9: S101 Use of `assert` detected
   |
62 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
63 |         super(SphericalBasisLayer, self).__init__()
64 |         assert num_radial <= 64
   |         ^^^^^^ S101
65 |         self.num_spherical = num_spherical
66 |         self.num_radial = num_radial
   |

src\stk_search\geom3d\models\DimeNet.py:64:30: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
   |
62 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
63 |         super(SphericalBasisLayer, self).__init__()
64 |         assert num_radial <= 64
   |                              ^^ PLR2004
65 |         self.num_spherical = num_spherical
66 |         self.num_radial = num_radial
   |

src\stk_search\geom3d\models\DimeNet.py:80:71: B023 Function definition does not bind loop variable `sph1`
   |
78 |             if i == 0:
79 |                 sph1 = sym.lambdify([theta], sph_harm_forms[i][0], modules)(0)
80 |                 self.sph_funcs.append(lambda x: torch.zeros_like(x) + sph1)
   |                                                                       ^^^^ B023
81 |             else:
82 |                 sph = sym.lambdify([theta], sph_harm_forms[i][0], modules)
   |

src\stk_search\geom3d\models\DimeNet.py:88:9: D102 Missing docstring in public method
   |
86 |                 self.bessel_funcs.append(bessel)
87 | 
88 |     def forward(self, dist, angle, idx_kj):
   |         ^^^^^^^ D102
89 |         dist = dist / self.cutoff
90 |         rbf = torch.stack([f(dist) for f in self.bessel_funcs], dim=1)
   |

src\stk_search\geom3d\models\DimeNet.py:97:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
95 |         n, k = self.num_spherical, self.num_radial
96 |         out = (rbf[idx_kj].view(-1, n, k) * cbf.view(-1, n, 1)).view(-1, n * k)
97 |         return out
   |                ^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\DimeNet.py:100:7: D101 Missing docstring in public class
    |
100 | class EmbeddingBlock(torch.nn.Module):
    |       ^^^^^^^^^^^^^^ D101
101 |     def __init__(self, node_class, num_radial, hidden_channels, act=swish):
102 |         super(EmbeddingBlock, self).__init__()
    |

src\stk_search\geom3d\models\DimeNet.py:101:9: ANN204 Missing return type annotation for special method `__init__`
    |
100 | class EmbeddingBlock(torch.nn.Module):
101 |     def __init__(self, node_class, num_radial, hidden_channels, act=swish):
    |         ^^^^^^^^ ANN204
102 |         super(EmbeddingBlock, self).__init__()
103 |         self.act = act
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:101:9: D107 Missing docstring in `__init__`
    |
100 | class EmbeddingBlock(torch.nn.Module):
101 |     def __init__(self, node_class, num_radial, hidden_channels, act=swish):
    |         ^^^^^^^^ D107
102 |         super(EmbeddingBlock, self).__init__()
103 |         self.act = act
    |

src\stk_search\geom3d\models\DimeNet.py:102:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
100 | class EmbeddingBlock(torch.nn.Module):
101 |     def __init__(self, node_class, num_radial, hidden_channels, act=swish):
102 |         super(EmbeddingBlock, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^ UP008
103 |         self.act = act
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:111:9: D102 Missing docstring in public method
    |
109 |         self.reset_parameters()
110 | 
111 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
112 |         self.emb.weight.data.uniform_(-sqrt(3), sqrt(3))
113 |         self.lin_rbf.reset_parameters()
    |

src\stk_search\geom3d\models\DimeNet.py:116:9: D102 Missing docstring in public method
    |
114 |         self.lin.reset_parameters()
115 | 
116 |     def forward(self, x, rbf, i, j):
    |         ^^^^^^^ D102
117 |         x = self.emb(x)
118 |         rbf = self.act(self.lin_rbf(rbf))
    |

src\stk_search\geom3d\models\DimeNet.py:122:7: D101 Missing docstring in public class
    |
122 | class ResidualLayer(torch.nn.Module):
    |       ^^^^^^^^^^^^^ D101
123 |     def __init__(self, hidden_channels, act=swish):
124 |         super(ResidualLayer, self).__init__()
    |

src\stk_search\geom3d\models\DimeNet.py:123:9: ANN204 Missing return type annotation for special method `__init__`
    |
122 | class ResidualLayer(torch.nn.Module):
123 |     def __init__(self, hidden_channels, act=swish):
    |         ^^^^^^^^ ANN204
124 |         super(ResidualLayer, self).__init__()
125 |         self.act = act
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:123:9: D107 Missing docstring in `__init__`
    |
122 | class ResidualLayer(torch.nn.Module):
123 |     def __init__(self, hidden_channels, act=swish):
    |         ^^^^^^^^ D107
124 |         super(ResidualLayer, self).__init__()
125 |         self.act = act
    |

src\stk_search\geom3d\models\DimeNet.py:124:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
122 | class ResidualLayer(torch.nn.Module):
123 |     def __init__(self, hidden_channels, act=swish):
124 |         super(ResidualLayer, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^ UP008
125 |         self.act = act
126 |         self.lin1 = Linear(hidden_channels, hidden_channels)
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:131:9: D102 Missing docstring in public method
    |
129 |         self.reset_parameters()
130 | 
131 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
132 |         glorot_orthogonal(self.lin1.weight, scale=2.0)
133 |         self.lin1.bias.data.fill_(0)
    |

src\stk_search\geom3d\models\DimeNet.py:137:9: D102 Missing docstring in public method
    |
135 |         self.lin2.bias.data.fill_(0)
136 | 
137 |     def forward(self, x):
    |         ^^^^^^^ D102
138 |         return x + self.act(self.lin2(self.act(self.lin1(x))))
    |

src\stk_search\geom3d\models\DimeNet.py:141:7: D101 Missing docstring in public class
    |
141 | class InteractionBlock(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^ D101
142 |     def __init__(
143 |         self,
    |

src\stk_search\geom3d\models\DimeNet.py:142:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
141 | class InteractionBlock(torch.nn.Module):
142 |     def __init__(
    |         ^^^^^^^^ PLR0913
143 |         self,
144 |         hidden_channels,
    |

src\stk_search\geom3d\models\DimeNet.py:142:9: ANN204 Missing return type annotation for special method `__init__`
    |
141 | class InteractionBlock(torch.nn.Module):
142 |     def __init__(
    |         ^^^^^^^^ ANN204
143 |         self,
144 |         hidden_channels,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:142:9: D107 Missing docstring in `__init__`
    |
141 | class InteractionBlock(torch.nn.Module):
142 |     def __init__(
    |         ^^^^^^^^ D107
143 |         self,
144 |         hidden_channels,
    |

src\stk_search\geom3d\models\DimeNet.py:152:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
150 |         act=swish,
151 |     ):
152 |         super(InteractionBlock, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
153 |         self.act = act
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:176:9: D102 Missing docstring in public method
    |
174 |         self.reset_parameters()
175 | 
176 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
177 |         glorot_orthogonal(self.lin_rbf.weight, scale=2.0)
178 |         glorot_orthogonal(self.lin_sbf.weight, scale=2.0)
    |

src\stk_search\geom3d\models\DimeNet.py:191:9: D102 Missing docstring in public method
    |
189 |             res_layer.reset_parameters()
190 | 
191 |     def forward(self, x, rbf, sbf, idx_kj, idx_ji):
    |         ^^^^^^^ D102
192 |         rbf = self.lin_rbf(rbf)
193 |         sbf = self.lin_sbf(sbf)
    |

src\stk_search\geom3d\models\DimeNet.py:210:7: D101 Missing docstring in public class
    |
210 | class OutputBlock(torch.nn.Module):
    |       ^^^^^^^^^^^ D101
211 |     def __init__(
212 |         self, num_radial, hidden_channels, out_channels, num_layers, act=swish
    |

src\stk_search\geom3d\models\DimeNet.py:211:9: ANN204 Missing return type annotation for special method `__init__`
    |
210 | class OutputBlock(torch.nn.Module):
211 |     def __init__(
    |         ^^^^^^^^ ANN204
212 |         self, num_radial, hidden_channels, out_channels, num_layers, act=swish
213 |     ):
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:211:9: D107 Missing docstring in `__init__`
    |
210 | class OutputBlock(torch.nn.Module):
211 |     def __init__(
    |         ^^^^^^^^ D107
212 |         self, num_radial, hidden_channels, out_channels, num_layers, act=swish
213 |     ):
    |

src\stk_search\geom3d\models\DimeNet.py:214:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
212 |         self, num_radial, hidden_channels, out_channels, num_layers, act=swish
213 |     ):
214 |         super(OutputBlock, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^ UP008
215 |         self.act = act
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:225:9: D102 Missing docstring in public method
    |
223 |         self.reset_parameters()
224 | 
225 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
226 |         glorot_orthogonal(self.lin_rbf.weight, scale=2.0)
227 |         for lin in self.lins:
    |

src\stk_search\geom3d\models\DimeNet.py:232:9: D102 Missing docstring in public method
    |
230 |         self.lin.weight.data.fill_(0)
231 | 
232 |     def forward(self, x, rbf, i, num_nodes=None):
    |         ^^^^^^^ D102
233 |         x = self.lin_rbf(rbf) * x
234 |         x = scatter(x, i, dim=0, dim_size=num_nodes)
    |

src\stk_search\geom3d\models\DimeNet.py:241:5: D205 1 blank line required between summary line and description
    |
240 |   class DimeNet(nn.Module):
241 |       r"""The directional message passing neural network (DimeNet) from the
    |  _____^
242 | |     `"Directional Message Passing for Molecular Graphs"
243 | |     <https://arxiv.org/abs/2003.03123>`_ paper.
244 | |     DimeNet transforms messages based on the angle between them in a
245 | |     rotation-equivariant fashion.
246 | |     .. note::
247 | |         For an example of using a pretrained DimeNet variant, see
248 | |         `examples/qm9_pretrained_DimeNet.py
249 | |         <https://github.com/rusty1s/pytorch_geometric/blob/master/examples/
250 | |         qm9_pretrained_DimeNet.py>`_.
251 | | 
252 | |     Args:
253 | |     ----
254 | |         hidden_channels (int): Hidden embedding size.
255 | |         out_channels (int): Size of each output sample.
256 | |         num_blocks (int): Number of building blocks.
257 | |         num_bilinear (int): Size of the bilinear layer tensor.
258 | |         num_spherical (int): Number of spherical harmonics.
259 | |         num_radial (int): Number of radial basis functions.
260 | |         cutoff: (float, optional): Cutoff distance for interatomic
261 | |             interactions. (default: :obj:`5.0`)
262 | |         envelope_exponent (int, optional): Shape of the smooth cutoff.
263 | |             (default: :obj:`5`)
264 | |         num_before_skip: (int, optional): Number of residual layers in the
265 | |             interaction blocks before the skip connection. (default: :obj:`1`)
266 | |         num_after_skip: (int, optional): Number of residual layers in the
267 | |             interaction blocks after the skip connection. (default: :obj:`2`)
268 | |         num_output_layers: (int, optional): Number of linear layers for the
269 | |             output blocks. (default: :obj:`3`)
270 | |         act: (function, optional): The activation funtion.
271 | |             (default: :obj:`swish`)
272 | | 
273 | |     """
    | |_______^ D205
274 |   
275 |       def __init__(
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\DimeNet.py:275:9: PLR0913 Too many arguments in function definition (13 > 5)
    |
273 |     """
274 | 
275 |     def __init__(
    |         ^^^^^^^^ PLR0913
276 |         self,
277 |         node_class,
    |

src\stk_search\geom3d\models\DimeNet.py:275:9: ANN204 Missing return type annotation for special method `__init__`
    |
273 |     """
274 | 
275 |     def __init__(
    |         ^^^^^^^^ ANN204
276 |         self,
277 |         node_class,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNet.py:275:9: D107 Missing docstring in `__init__`
    |
273 |     """
274 | 
275 |     def __init__(
    |         ^^^^^^^^ D107
276 |         self,
277 |         node_class,
    |

src\stk_search\geom3d\models\DimeNet.py:291:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
289 |         act=swish,
290 |     ):
291 |         super(DimeNet, self).__init__()
    |              ^^^^^^^^^^^^^^^ UP008
292 | 
293 |         self.cutoff = cutoff
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNet.py:329:9: D102 Missing docstring in public method
    |
327 |         self.reset_parameters()
328 | 
329 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
330 |         self.rbf.reset_parameters()
331 |         self.emb.reset_parameters()
    |

src\stk_search\geom3d\models\DimeNet.py:337:9: D102 Missing docstring in public method
    |
335 |             interaction.reset_parameters()
336 | 
337 |     def triplets(self, edge_index, num_nodes):
    |         ^^^^^^^^ D102
338 |         row, col = edge_index  # j->i
    |

src\stk_search\geom3d\models\DimeNet.py:360:9: D102 Missing docstring in public method
    |
358 |         return col, row, idx_i, idx_j, idx_k, idx_kj, idx_ji
359 | 
360 |     def forward(self, z, pos, batch=None):
    |         ^^^^^^^ D102
361 |         edge_index = radius_graph(pos, r=self.cutoff, batch=batch)
    |

src\stk_search\geom3d\models\DimeNet.py:382:9: N806 Variable `P` in function should be lowercase
    |
380 |         # Embedding block.
381 |         x = self.emb(z, rbf, i, j)
382 |         P = self.output_blocks[0](x, rbf, i, num_nodes=pos.size(0))
    |         ^ N806
383 | 
384 |         # Interaction blocks.
    |

src\stk_search\geom3d\models\DimeNet.py:389:13: N806 Variable `P` in function should be lowercase
    |
387 |         ):
388 |             x = interaction_block(x, rbf, sbf, idx_kj, idx_ji)
389 |             P += output_block(x, rbf, i)
    |             ^ N806
390 | 
391 |         return P.sum(dim=0) if batch is None else scatter(P, batch, dim=0)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:1:1: N999 Invalid module name: 'DimeNetPlusPlus'
src\stk_search\geom3d\models\DimeNetPlusPlus.py:24:7: D101 Missing docstring in public class
   |
24 | class InteractionPPBlock(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^^ D101
25 |     def __init__(
26 |         self,
   |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:25:9: PLR0913 Too many arguments in function definition (8 > 5)
   |
24 | class InteractionPPBlock(torch.nn.Module):
25 |     def __init__(
   |         ^^^^^^^^ PLR0913
26 |         self,
27 |         hidden_channels,
   |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:25:9: ANN204 Missing return type annotation for special method `__init__`
   |
24 | class InteractionPPBlock(torch.nn.Module):
25 |     def __init__(
   |         ^^^^^^^^ ANN204
26 |         self,
27 |         hidden_channels,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNetPlusPlus.py:25:9: D107 Missing docstring in `__init__`
   |
24 | class InteractionPPBlock(torch.nn.Module):
25 |     def __init__(
   |         ^^^^^^^^ D107
26 |         self,
27 |         hidden_channels,
   |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:36:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
34 |         act=swish,
35 |     ):
36 |         super(InteractionPPBlock, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
37 |         self.act = act
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNetPlusPlus.py:66:9: D102 Missing docstring in public method
   |
64 |         self.reset_parameters()
65 | 
66 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
67 |         glorot_orthogonal(self.lin_rbf1.weight, scale=2.0)
68 |         glorot_orthogonal(self.lin_rbf2.weight, scale=2.0)
   |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:87:9: D102 Missing docstring in public method
   |
85 |             res_layer.reset_parameters()
86 | 
87 |     def forward(self, x, rbf, sbf, idx_kj, idx_ji):
   |         ^^^^^^^ D102
88 |         # Initial transformations.
89 |         x_ji = self.act(self.lin_ji(x))
   |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:119:7: D101 Missing docstring in public class
    |
119 | class OutputPPBlock(torch.nn.Module):
    |       ^^^^^^^^^^^^^ D101
120 |     def __init__(
121 |         self,
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:120:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
119 | class OutputPPBlock(torch.nn.Module):
120 |     def __init__(
    |         ^^^^^^^^ PLR0913
121 |         self,
122 |         num_radial,
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:120:9: ANN204 Missing return type annotation for special method `__init__`
    |
119 | class OutputPPBlock(torch.nn.Module):
120 |     def __init__(
    |         ^^^^^^^^ ANN204
121 |         self,
122 |         num_radial,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNetPlusPlus.py:120:9: D107 Missing docstring in `__init__`
    |
119 | class OutputPPBlock(torch.nn.Module):
120 |     def __init__(
    |         ^^^^^^^^ D107
121 |         self,
122 |         num_radial,
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:129:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
127 |         act=swish,
128 |     ):
129 |         super(OutputPPBlock, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^ UP008
130 |         self.act = act
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNetPlusPlus.py:141:9: D102 Missing docstring in public method
    |
139 |         self.reset_parameters()
140 | 
141 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
142 |         glorot_orthogonal(self.lin_rbf.weight, scale=2.0)
143 |         glorot_orthogonal(self.lin_up.weight, scale=2.0)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:149:9: D102 Missing docstring in public method
    |
147 |         self.lin.weight.data.fill_(0)
148 | 
149 |     def forward(self, x, rbf, i, num_nodes=None, extract_representation=False):
    |         ^^^^^^^ D102
150 |         x = self.lin_rbf(rbf) * x
151 |         x = scatter(x, i, dim=0, dim_size=num_nodes)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:149:50: FBT002 Boolean default positional argument in function definition
    |
147 |         self.lin.weight.data.fill_(0)
148 | 
149 |     def forward(self, x, rbf, i, num_nodes=None, extract_representation=False):
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^ FBT002
150 |         x = self.lin_rbf(rbf) * x
151 |         x = scatter(x, i, dim=0, dim_size=num_nodes)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:157:9: RET505 Unnecessary `else` after `return` statement
    |
155 |         if extract_representation:
156 |             return x
157 |         else:
    |         ^^^^ RET505
158 |             return self.lin(x)
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\DimeNetPlusPlus.py:189:9: PLR0913 Too many arguments in function definition (16 > 5)
    |
187 |     """
188 | 
189 |     def __init__(
    |         ^^^^^^^^ PLR0913
190 |         self,
191 |         node_class,
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:189:9: ANN204 Missing return type annotation for special method `__init__`
    |
187 |     """
188 | 
189 |     def __init__(
    |         ^^^^^^^^ ANN204
190 |         self,
191 |         node_class,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\DimeNetPlusPlus.py:189:9: D107 Missing docstring in `__init__`
    |
187 |     """
188 | 
189 |     def __init__(
    |         ^^^^^^^^ D107
190 |         self,
191 |         node_class,
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:208:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
206 |         readout="add",
207 |     ):
208 |         super(DimeNetPlusPlus, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^ UP008
209 | 
210 |         self.cutoff = cutoff
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\DimeNetPlusPlus.py:254:9: D102 Missing docstring in public method
    |
252 |         self.reset_parameters()
253 | 
254 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
255 |         self.rbf.reset_parameters()
256 |         self.emb.reset_parameters()
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:262:9: D102 Missing docstring in public method
    |
260 |             interaction.reset_parameters()
261 | 
262 |     def triplets(self, edge_index, num_nodes):
    |         ^^^^^^^^ D102
263 |         row, col = edge_index  # j->i
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:285:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
283 |         return col, row, idx_i, idx_j, idx_k, idx_kj, idx_ji
284 | 
285 |     def forward(self, z, pos, batch, edge_index=None, extract_representation=False, return_latent=False):
    |         ^^^^^^^ PLR0913
286 |         if edge_index is None:
287 |             edge_index = radius_graph(pos, r=self.cutoff, batch=batch)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:285:9: D102 Missing docstring in public method
    |
283 |         return col, row, idx_i, idx_j, idx_k, idx_kj, idx_ji
284 | 
285 |     def forward(self, z, pos, batch, edge_index=None, extract_representation=False, return_latent=False):
    |         ^^^^^^^ D102
286 |         if edge_index is None:
287 |             edge_index = radius_graph(pos, r=self.cutoff, batch=batch)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:285:55: FBT002 Boolean default positional argument in function definition
    |
283 |         return col, row, idx_i, idx_j, idx_k, idx_kj, idx_ji
284 | 
285 |     def forward(self, z, pos, batch, edge_index=None, extract_representation=False, return_latent=False):
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^ FBT002
286 |         if edge_index is None:
287 |             edge_index = radius_graph(pos, r=self.cutoff, batch=batch)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:285:85: FBT002 Boolean default positional argument in function definition
    |
283 |         return col, row, idx_i, idx_j, idx_k, idx_kj, idx_ji
284 | 
285 |     def forward(self, z, pos, batch, edge_index=None, extract_representation=False, return_latent=False):
    |                                                                                     ^^^^^^^^^^^^^ FBT002
286 |         if edge_index is None:
287 |             edge_index = radius_graph(pos, r=self.cutoff, batch=batch)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:310:9: N806 Variable `P` in function should be lowercase
    |
308 |         # Embedding block.
309 |         x = self.emb(z, rbf, i, j)
310 |         P = self.output_blocks[0](x, rbf, i, num_nodes=pos.size(0), extract_representation=extract_representation)
    |         ^ N806
311 | 
312 |         # Interaction blocks.
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:315:13: N806 Variable `P` in function should be lowercase
    |
313 |         for interaction_block, output_block in zip(self.interaction_blocks, self.output_blocks[1:]):
314 |             x = interaction_block(x, rbf, sbf, idx_kj, idx_ji)
315 |             P += output_block(x, rbf, i, num_nodes=pos.size(0), extract_representation=extract_representation)
    |             ^ N806
316 | 
317 |         # representation if extract_representation=True
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:319:9: N806 Variable `P` in function should be lowercase
    |
317 |         # representation if extract_representation=True
318 |         # energy if extract_representation=False
319 |         P /= (self.num_blocks + 1)
    |         ^ N806
320 |         out = P.sum(dim=0) if batch is None else scatter(P, batch, dim=0, reduce=self.readout)
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:326:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
324 |         return out
325 | 
326 |     def forward_with_gathered_index(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
327 |         self, gathered_z, pos, batch,
328 |         edge_index, periodic_index_mapping, gathered_batch,  # for periodic crystal modeling
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:326:9: D102 Missing docstring in public method
    |
324 |         return out
325 | 
326 |     def forward_with_gathered_index(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
327 |         self, gathered_z, pos, batch,
328 |         edge_index, periodic_index_mapping, gathered_batch,  # for periodic crystal modeling
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:327:32: ARG002 Unused method argument: `batch`
    |
326 |     def forward_with_gathered_index(
327 |         self, gathered_z, pos, batch,
    |                                ^^^^^ ARG002
328 |         edge_index, periodic_index_mapping, gathered_batch,  # for periodic crystal modeling
329 |         extract_representation=False, return_latent=False
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:329:9: FBT002 Boolean default positional argument in function definition
    |
327 |         self, gathered_z, pos, batch,
328 |         edge_index, periodic_index_mapping, gathered_batch,  # for periodic crystal modeling
329 |         extract_representation=False, return_latent=False
    |         ^^^^^^^^^^^^^^^^^^^^^^ FBT002
330 |     ):
331 |         j, i = edge_index
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:329:39: FBT002 Boolean default positional argument in function definition
    |
327 |         self, gathered_z, pos, batch,
328 |         edge_index, periodic_index_mapping, gathered_batch,  # for periodic crystal modeling
329 |         extract_representation=False, return_latent=False
    |                                       ^^^^^^^^^^^^^ FBT002
330 |     ):
331 |         j, i = edge_index
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:353:9: N806 Variable `P` in function should be lowercase
    |
351 |         gathered_j = periodic_index_mapping[j]
352 |         x = self.emb(gathered_z, rbf, gathered_i, gathered_j)  # for edge representation
353 |         P = self.output_blocks[0](x, rbf, gathered_i, num_nodes=gathered_z.size(0), extract_representation=extract_representation)
    |         ^ N806
354 | 
355 |         # Interaction blocks.
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:358:13: N806 Variable `P` in function should be lowercase
    |
356 |         for interaction_block, output_block in zip(self.interaction_blocks, self.output_blocks[1:]):
357 |             x = interaction_block(x, rbf, sbf, idx_kj, idx_ji)
358 |             P += output_block(x, rbf, gathered_i, num_nodes=gathered_z.size(0), extract_representation=extract_representation)
    |             ^ N806
359 | 
360 |         # representation if extract_representation=True
    |

src\stk_search\geom3d\models\DimeNetPlusPlus.py:362:9: N806 Variable `P` in function should be lowercase
    |
360 |         # representation if extract_representation=True
361 |         # energy if extract_representation=False
362 |         P /= (self.num_blocks + 1)
    |         ^ N806
363 | 
364 |         out = scatter(P, gathered_batch, dim=0, reduce=self.readout)
    |

src\stk_search\geom3d\models\DimeNet_utils.py:1:1: N999 Invalid module name: 'DimeNet_utils'
src\stk_search\geom3d\models\DimeNet_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\DimeNet_utils.py:7:5: N802 Function name `Jn` should be lowercase
  |
7 | def Jn(r, n):
  |     ^^ N802
8 |     return np.sqrt(np.pi / (2 * r)) * sp.jv(n + 0.5, r)
  |

src\stk_search\geom3d\models\DimeNet_utils.py:7:5: D103 Missing docstring in public function
  |
7 | def Jn(r, n):
  |     ^^ D103
8 |     return np.sqrt(np.pi / (2 * r)) * sp.jv(n + 0.5, r)
  |

src\stk_search\geom3d\models\DimeNet_utils.py:11:5: N802 Function name `Jn_zeros` should be lowercase
   |
11 | def Jn_zeros(n, k):
   |     ^^^^^^^^ N802
12 |     zerosj = np.zeros((n, k), dtype="float32")
13 |     zerosj[0] = np.arange(1, k + 1) * np.pi
   |

src\stk_search\geom3d\models\DimeNet_utils.py:11:5: D103 Missing docstring in public function
   |
11 | def Jn_zeros(n, k):
   |     ^^^^^^^^ D103
12 |     zerosj = np.zeros((n, k), dtype="float32")
13 |     zerosj[0] = np.arange(1, k + 1) * np.pi
   |

src\stk_search\geom3d\models\DimeNet_utils.py:26:5: D103 Missing docstring in public function
   |
26 | def spherical_bessel_formulas(n):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ D103
27 |     x = sym.symbols("x")
   |

src\stk_search\geom3d\models\DimeNet_utils.py:38:5: D103 Missing docstring in public function
   |
38 | def bessel_basis(n, k):
   |     ^^^^^^^^^^^^ D103
39 |     zeros = Jn_zeros(n, k)
40 |     normalizer = []
   |

src\stk_search\geom3d\models\DimeNet_utils.py:63:5: D103 Missing docstring in public function
   |
63 | def sph_harm_prefactor(k, m):
   |     ^^^^^^^^^^^^^^^^^^ D103
64 |     return (
65 |         (2 * k + 1)
   |

src\stk_search\geom3d\models\DimeNet_utils.py:71:5: D103 Missing docstring in public function
   |
71 | def associated_legendre_polynomials(k, zero_m_only=True):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
72 |     z = sym.symbols("z")
73 |     P_l_m = [[0] * (j + 1) for j in range(k)]
   |

src\stk_search\geom3d\models\DimeNet_utils.py:71:40: FBT002 Boolean default positional argument in function definition
   |
71 | def associated_legendre_polynomials(k, zero_m_only=True):
   |                                        ^^^^^^^^^^^ FBT002
72 |     z = sym.symbols("z")
73 |     P_l_m = [[0] * (j + 1) for j in range(k)]
   |

src\stk_search\geom3d\models\DimeNet_utils.py:73:5: N806 Variable `P_l_m` in function should be lowercase
   |
71 | def associated_legendre_polynomials(k, zero_m_only=True):
72 |     z = sym.symbols("z")
73 |     P_l_m = [[0] * (j + 1) for j in range(k)]
   |     ^^^^^ N806
74 | 
75 |     P_l_m[0][0] = 1
   |

src\stk_search\geom3d\models\DimeNet_utils.py:100:5: C901 `real_sph_harm` is too complex (16 > 10)
    |
100 | def real_sph_harm(k, zero_m_only=True, spherical_coordinates=True):
    |     ^^^^^^^^^^^^^ C901
101 |     if not zero_m_only:
102 |         S_m = [0]
    |

src\stk_search\geom3d\models\DimeNet_utils.py:100:5: PLR0912 Too many branches (15 > 12)
    |
100 | def real_sph_harm(k, zero_m_only=True, spherical_coordinates=True):
    |     ^^^^^^^^^^^^^ PLR0912
101 |     if not zero_m_only:
102 |         S_m = [0]
    |

src\stk_search\geom3d\models\DimeNet_utils.py:100:5: D103 Missing docstring in public function
    |
100 | def real_sph_harm(k, zero_m_only=True, spherical_coordinates=True):
    |     ^^^^^^^^^^^^^ D103
101 |     if not zero_m_only:
102 |         S_m = [0]
    |

src\stk_search\geom3d\models\DimeNet_utils.py:100:22: FBT002 Boolean default positional argument in function definition
    |
100 | def real_sph_harm(k, zero_m_only=True, spherical_coordinates=True):
    |                      ^^^^^^^^^^^ FBT002
101 |     if not zero_m_only:
102 |         S_m = [0]
    |

src\stk_search\geom3d\models\DimeNet_utils.py:100:40: FBT002 Boolean default positional argument in function definition
    |
100 | def real_sph_harm(k, zero_m_only=True, spherical_coordinates=True):
    |                                        ^^^^^^^^^^^^^^^^^^^^^ FBT002
101 |     if not zero_m_only:
102 |         S_m = [0]
    |

src\stk_search\geom3d\models\DimeNet_utils.py:102:9: N806 Variable `S_m` in function should be lowercase
    |
100 | def real_sph_harm(k, zero_m_only=True, spherical_coordinates=True):
101 |     if not zero_m_only:
102 |         S_m = [0]
    |         ^^^ N806
103 |         C_m = [1]
104 |         for i in range(1, k):
    |

src\stk_search\geom3d\models\DimeNet_utils.py:103:9: N806 Variable `C_m` in function should be lowercase
    |
101 |     if not zero_m_only:
102 |         S_m = [0]
103 |         C_m = [1]
    |         ^^^ N806
104 |         for i in range(1, k):
105 |             x = sym.symbols("x")
    |

src\stk_search\geom3d\models\DimeNet_utils.py:107:13: N806 Variable `S_m` in function should be lowercase
    |
105 |             x = sym.symbols("x")
106 |             y = sym.symbols("y")
107 |             S_m += [x * S_m[i - 1] + y * C_m[i - 1]]
    |             ^^^ N806
108 |             C_m += [x * C_m[i - 1] - y * S_m[i - 1]]
    |

src\stk_search\geom3d\models\DimeNet_utils.py:108:13: N806 Variable `C_m` in function should be lowercase
    |
106 |             y = sym.symbols("y")
107 |             S_m += [x * S_m[i - 1] + y * C_m[i - 1]]
108 |             C_m += [x * C_m[i - 1] - y * S_m[i - 1]]
    |             ^^^ N806
109 | 
110 |     P_l_m = associated_legendre_polynomials(k, zero_m_only)
    |

src\stk_search\geom3d\models\DimeNet_utils.py:110:5: N806 Variable `P_l_m` in function should be lowercase
    |
108 |             C_m += [x * C_m[i - 1] - y * S_m[i - 1]]
109 | 
110 |     P_l_m = associated_legendre_polynomials(k, zero_m_only)
    |     ^^^^^ N806
111 |     if spherical_coordinates:
112 |         theta = sym.symbols("theta")
    |

src\stk_search\geom3d\models\DimeNet_utils.py:116:20: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
    |
114 |         for i in range(len(P_l_m)):
115 |             for j in range(len(P_l_m[i])):
116 |                 if type(P_l_m[i][j]) != int:
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ E721
117 |                     P_l_m[i][j] = P_l_m[i][j].subs(z, sym.cos(theta))
118 |         if not zero_m_only:
    |

src\stk_search\geom3d\models\DimeNet_utils.py:133:5: N806 Variable `Y_func_l_m` in function should be lowercase
    |
131 |                 )
132 | 
133 |     Y_func_l_m = [["0"] * (2 * j + 1) for j in range(k)]
    |     ^^^^^^^^^^ N806
134 |     for i in range(k):
135 |         Y_func_l_m[i][0] = sym.simplify(sph_harm_prefactor(i, 0) * P_l_m[i][0])
    |

src\stk_search\geom3d\models\EGNN.py:1:1: N999 Invalid module name: 'EGNN'
src\stk_search\geom3d\models\EGNN.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\EGNN.py:6:5: D401 First line of docstring should be in imperative mood: "Custom PyTorch op to replicate TensorFlow's `unsorted_segment_sum`."
  |
5 | def unsorted_segment_sum(data, segment_ids, num_segments):
6 |     """Custom PyTorch op to replicate TensorFlow's `unsorted_segment_sum`."""
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
7 |     result_shape = (num_segments, data.size(1))
8 |     result = data.new_full(result_shape, 0)  # Init empty result tensor.
  |

src\stk_search\geom3d\models\EGNN.py:14:7: N801 Class name `E_GCL` should use CapWords convention
   |
14 | class E_GCL(nn.Module):
   |       ^^^^^ N801
15 |     def __init__(
16 |         self,
   |

src\stk_search\geom3d\models\EGNN.py:14:7: D101 Missing docstring in public class
   |
14 | class E_GCL(nn.Module):
   |       ^^^^^ D101
15 |     def __init__(
16 |         self,
   |

src\stk_search\geom3d\models\EGNN.py:15:9: PLR0913 Too many arguments in function definition (12 > 5)
   |
14 | class E_GCL(nn.Module):
15 |     def __init__(
   |         ^^^^^^^^ PLR0913
16 |         self,
17 |         input_nf,
   |

src\stk_search\geom3d\models\EGNN.py:15:9: ANN204 Missing return type annotation for special method `__init__`
   |
14 | class E_GCL(nn.Module):
15 |     def __init__(
   |         ^^^^^^^^ ANN204
16 |         self,
17 |         input_nf,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\EGNN.py:15:9: D107 Missing docstring in `__init__`
   |
14 | class E_GCL(nn.Module):
15 |     def __init__(
   |         ^^^^^^^^ D107
16 |         self,
17 |         input_nf,
   |

src\stk_search\geom3d\models\EGNN.py:22:16: B008 Do not perform function call `nn.ReLU` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
20 |         edges_in_d=0,
21 |         nodes_attr_dim=0,
22 |         act_fn=nn.ReLU(),
   |                ^^^^^^^^^ B008
23 |         positions_weight=1.0,
24 |         recurrent=True,
   |

src\stk_search\geom3d\models\EGNN.py:24:9: FBT002 Boolean default positional argument in function definition
   |
22 |         act_fn=nn.ReLU(),
23 |         positions_weight=1.0,
24 |         recurrent=True,
   |         ^^^^^^^^^ FBT002
25 |         attention=False,
26 |         clamp=False,
   |

src\stk_search\geom3d\models\EGNN.py:25:9: FBT002 Boolean default positional argument in function definition
   |
23 |         positions_weight=1.0,
24 |         recurrent=True,
25 |         attention=False,
   |         ^^^^^^^^^ FBT002
26 |         clamp=False,
27 |         norm_diff=False,
   |

src\stk_search\geom3d\models\EGNN.py:26:9: FBT002 Boolean default positional argument in function definition
   |
24 |         recurrent=True,
25 |         attention=False,
26 |         clamp=False,
   |         ^^^^^ FBT002
27 |         norm_diff=False,
28 |         tanh=False,
   |

src\stk_search\geom3d\models\EGNN.py:27:9: FBT002 Boolean default positional argument in function definition
   |
25 |         attention=False,
26 |         clamp=False,
27 |         norm_diff=False,
   |         ^^^^^^^^^ FBT002
28 |         tanh=False,
29 |     ):
   |

src\stk_search\geom3d\models\EGNN.py:28:9: FBT002 Boolean default positional argument in function definition
   |
26 |         clamp=False,
27 |         norm_diff=False,
28 |         tanh=False,
   |         ^^^^ FBT002
29 |     ):
   |

src\stk_search\geom3d\models\EGNN.py:31:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
29 |     ):
30 | 
31 |         super(E_GCL, self).__init__()
   |              ^^^^^^^^^^^^^ UP008
32 |         input_edge = input_nf * 2
33 |         self.positions_weight = positions_weight
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\EGNN.py:69:9: D102 Missing docstring in public method
   |
67 |             self.att_mlp = nn.Sequential(nn.Linear(hidden_nf, 1), nn.Sigmoid())
68 | 
69 |     def edge_model(self, source, target, radial, edge_attr):
   |         ^^^^^^^^^^ D102
70 |         if edge_attr is None:  # Unused.
71 |             out = torch.cat([source, target, radial], dim=1)
   |

src\stk_search\geom3d\models\EGNN.py:80:9: D102 Missing docstring in public method
   |
78 |         return out
79 | 
80 |     def node_model(self, x, edge_index, edge_attr, node_attr):
   |         ^^^^^^^^^^ D102
81 |         row, col = edge_index
82 |         agg = unsorted_segment_sum(edge_attr, row, num_segments=x.size(0))
   |

src\stk_search\geom3d\models\EGNN.py:92:9: D102 Missing docstring in public method
   |
90 |         return out, agg
91 | 
92 |     def positions_model(self, positions, edge_index, positions_diff, edge_feat):
   |         ^^^^^^^^^^^^^^^ D102
93 |         row, col = edge_index
94 |         trans = positions_diff * self.positions_mlp(edge_feat)
   |

src\stk_search\geom3d\models\EGNN.py:102:9: D102 Missing docstring in public method
    |
100 |         return positions
101 | 
102 |     def positions2radial(self, edge_index, positions):
    |         ^^^^^^^^^^^^^^^^ D102
103 |         row, col = edge_index
104 |         positions_diff = positions[row] - positions[col]
    |

src\stk_search\geom3d\models\EGNN.py:114:9: D205 1 blank line required between summary line and description
    |
113 |       def forward(self, h, positions, edge_index, node_attr=None, edge_attr=None):
114 |           """h: (N, emb)
    |  _________^
115 | |         positions: (N, 3)
116 | |         edge_index: (2, M)
117 | |         node_attr: None or (N, node_input_dim), where node_input_dim=1
118 | |         edge_attr: None or (M, edge_input_dim)
119 | |         """
    | |___________^ D205
120 |           row, col = edge_index
121 |           radial, positions_diff = self.positions2radial(
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\EGNN.py:114:9: D400 First line should end with a period
    |
113 |       def forward(self, h, positions, edge_index, node_attr=None, edge_attr=None):
114 |           """h: (N, emb)
    |  _________^
115 | |         positions: (N, 3)
116 | |         edge_index: (2, M)
117 | |         node_attr: None or (N, node_input_dim), where node_input_dim=1
118 | |         edge_attr: None or (M, edge_input_dim)
119 | |         """
    | |___________^ D400
120 |           row, col = edge_index
121 |           radial, positions_diff = self.positions2radial(
    |
    = help: Add period

src\stk_search\geom3d\models\EGNN.py:114:9: D415 First line should end with a period, question mark, or exclamation point
    |
113 |       def forward(self, h, positions, edge_index, node_attr=None, edge_attr=None):
114 |           """h: (N, emb)
    |  _________^
115 | |         positions: (N, 3)
116 | |         edge_index: (2, M)
117 | |         node_attr: None or (N, node_input_dim), where node_input_dim=1
118 | |         edge_attr: None or (M, edge_input_dim)
119 | |         """
    | |___________^ D415
120 |           row, col = edge_index
121 |           radial, positions_diff = self.positions2radial(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\EGNN.py:126:9: ERA001 Found commented-out code
    |
124 |         edge_feat = self.edge_model(h[row], h[col], radial, edge_attr)  # (M, n_emb)
125 | 
126 |         # positions = self.positions_model(positions, edge_index, positions_diff, edge_feat)  # (M, 3)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
127 |         h, agg = self.node_model(
128 |             h, edge_index, edge_feat, node_attr
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\EGNN.py:133:9: D102 Missing docstring in public method
    |
133 |     def forward_with_gathered_index(self, h, positions, edge_index, node_attr, periodic_index_mapping):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
134 |         row, col = edge_index
135 |         radial, positions_diff = self.positions2radial(
    |

src\stk_search\geom3d\models\EGNN.py:141:79: F821 Undefined name `edge_attr`
    |
139 |         gathered_row = periodic_index_mapping[row]
140 |         gathered_col = periodic_index_mapping[col]
141 |         edge_feat = self.edge_model(h[gathered_row], h[gathered_col], radial, edge_attr)  # (M, n_emb)
    |                                                                               ^^^^^^^^^ F821
142 | 
143 |         h, agg = self.node_model(
    |

src\stk_search\geom3d\models\EGNN.py:146:30: F821 Undefined name `edge_attr`
    |
144 |             h, edge_index, edge_feat, node_attr
145 |         )  # (N, emb_dim), (N, emb_dim*2 + input_node_dim)
146 |         return h, positions, edge_attr
    |                              ^^^^^^^^^ F821
    |

src\stk_search\geom3d\models\EGNN.py:150:7: D101 Missing docstring in public class
    |
150 | class EGNN(nn.Module):
    |       ^^^^ D101
151 |     def __init__(
152 |         self,
    |

src\stk_search\geom3d\models\EGNN.py:151:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
150 | class EGNN(nn.Module):
151 |     def __init__(
    |         ^^^^^^^^ PLR0913
152 |         self,
153 |         in_node_nf,
    |

src\stk_search\geom3d\models\EGNN.py:151:9: ANN204 Missing return type annotation for special method `__init__`
    |
150 | class EGNN(nn.Module):
151 |     def __init__(
    |         ^^^^^^^^ ANN204
152 |         self,
153 |         in_node_nf,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\EGNN.py:151:9: D107 Missing docstring in `__init__`
    |
150 | class EGNN(nn.Module):
151 |     def __init__(
    |         ^^^^^^^^ D107
152 |         self,
153 |         in_node_nf,
    |

src\stk_search\geom3d\models\EGNN.py:156:16: B008 Do not perform function call `nn.SiLU` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
154 |         in_edge_nf,
155 |         hidden_nf,
156 |         act_fn=nn.SiLU(),
    |                ^^^^^^^^^ B008
157 |         n_layers=4,
158 |         positions_weight=1.0,
    |

src\stk_search\geom3d\models\EGNN.py:159:9: FBT002 Boolean default positional argument in function definition
    |
157 |         n_layers=4,
158 |         positions_weight=1.0,
159 |         attention=True,
    |         ^^^^^^^^^ FBT002
160 |         node_attr=True,
161 |     ):
    |

src\stk_search\geom3d\models\EGNN.py:160:9: FBT002 Boolean default positional argument in function definition
    |
158 |         positions_weight=1.0,
159 |         attention=True,
160 |         node_attr=True,
    |         ^^^^^^^^^ FBT002
161 |     ):
162 |         super(EGNN, self).__init__()
    |

src\stk_search\geom3d\models\EGNN.py:162:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
160 |         node_attr=True,
161 |     ):
162 |         super(EGNN, self).__init__()
    |              ^^^^^^^^^^^^ UP008
163 |         self.hidden_nf = hidden_nf
164 |         self.n_layers = n_layers
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\EGNN.py:169:9: SIM108 Use ternary operator `n_node_attr = in_node_nf if node_attr else 0` instead of `if`-`else`-block
    |
167 |           self.node_attr = node_attr
168 |   
169 |           if node_attr:
    |  _________^
170 | |             n_node_attr = in_node_nf
171 | |         else:
172 | |             n_node_attr = 0
    | |___________________________^ SIM108
173 |   
174 |           for i in range(n_layers):
    |
    = help: Replace `if`-`else`-block with `n_node_attr = in_node_nf if node_attr else 0`

src\stk_search\geom3d\models\EGNN.py:195:9: D102 Missing docstring in public method
    |
195 |     def forward(self, x, positions, edge_index, edge_attr=None):
    |         ^^^^^^^ D102
196 |         h = self.embedding(x)
    |

src\stk_search\geom3d\models\EGNN.py:209:16: RET504 Unnecessary assignment to `h` before `return` statement
    |
208 |         h = self.node_dec(h)
209 |         return h
    |                ^ RET504
210 | 
211 |     def forward_with_gathered_index(self, gathered_x, positions, edge_index, periodic_index_mapping):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\EGNN.py:211:9: D102 Missing docstring in public method
    |
209 |         return h
210 | 
211 |     def forward_with_gathered_index(self, gathered_x, positions, edge_index, periodic_index_mapping):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
212 |         h = self.embedding(gathered_x)
    |

src\stk_search\geom3d\models\EGNN.py:219:13: ERA001 Found commented-out code
    |
217 |                     h, positions, edge_index, node_attr=gathered_x, periodic_index_mapping=periodic_index_mapping
218 |                 )
219 |             # else:
    |             ^^^^^^^ ERA001
220 |             #     h, _, _ = self._modules["gcl_%d" % i](
221 |             #         h, positions, edge_index, node_attr=None, edge_attr=edge_attr
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\EGNN.py:220:13: ERA001 Found commented-out code
    |
218 |                 )
219 |             # else:
220 |             #     h, _, _ = self._modules["gcl_%d" % i](
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
221 |             #         h, positions, edge_index, node_attr=None, edge_attr=edge_attr
222 |             #     )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\EGNN.py:222:13: ERA001 Found commented-out code
    |
220 |             #     h, _, _ = self._modules["gcl_%d" % i](
221 |             #         h, positions, edge_index, node_attr=None, edge_attr=edge_attr
222 |             #     )
    |             ^^^^^^^ ERA001
223 | 
224 |         h = self.node_dec(h)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\EGNN.py:225:16: RET504 Unnecessary assignment to `h` before `return` statement
    |
224 |         h = self.node_dec(h)
225 |         return h
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ENN.py:1:1: N999 Invalid module name: 'ENN'
src\stk_search\geom3d\models\ENN.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """credit to https://github.com/chao1224/BioChemGNN_Dense/blob/master/src/models/enn.py
2 | | """
  | |___^ D200
3 |   from collections import *
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\ENN.py:1:1: D400 First line should end with a period
  |
1 | / """credit to https://github.com/chao1224/BioChemGNN_Dense/blob/master/src/models/enn.py
2 | | """
  | |___^ D400
3 |   from collections import *
  |
  = help: Add period

src\stk_search\geom3d\models\ENN.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """credit to https://github.com/chao1224/BioChemGNN_Dense/blob/master/src/models/enn.py
2 | | """
  | |___^ D415
3 |   from collections import *
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\ENN.py:3:1: F403 `from collections import *` used; unable to detect undefined names
  |
1 | """credit to https://github.com/chao1224/BioChemGNN_Dense/blob/master/src/models/enn.py
2 | """
3 | from collections import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ F403
4 | 
5 | import torch
  |

src\stk_search\geom3d\models\ENN.py:13:7: D101 Missing docstring in public class
   |
13 | class GraphSoftmax(nn.Module):
   |       ^^^^^^^^^^^^ D101
14 |     eps = 1e-10
   |

src\stk_search\geom3d\models\ENN.py:16:9: D102 Missing docstring in public method
   |
14 |     eps = 1e-10
15 | 
16 |     def forward(self, batch, input):
   |         ^^^^^^^ D102
17 |         batch_size = torch.max(batch).item() + 1
18 |         x = input - scatter_max(input, batch, dim=0, dim_size=batch_size)[0][batch]
   |

src\stk_search\geom3d\models\ENN.py:16:30: A002 Argument `input` is shadowing a Python builtin
   |
14 |     eps = 1e-10
15 | 
16 |     def forward(self, batch, input):
   |                              ^^^^^ A002
17 |         batch_size = torch.max(batch).item() + 1
18 |         x = input - scatter_max(input, batch, dim=0, dim_size=batch_size)[0][batch]
   |

src\stk_search\geom3d\models\ENN.py:25:7: D101 Missing docstring in public class
   |
25 | class Set2Set(nn.Module):
   |       ^^^^^^^ D101
26 |     def __init__(self, input_dim, processing_steps, num_layers):
27 |         super(Set2Set, self).__init__()
   |

src\stk_search\geom3d\models\ENN.py:26:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 | class Set2Set(nn.Module):
26 |     def __init__(self, input_dim, processing_steps, num_layers):
   |         ^^^^^^^^ ANN204
27 |         super(Set2Set, self).__init__()
28 |         self.input_dim = input_dim
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ENN.py:26:9: D107 Missing docstring in `__init__`
   |
25 | class Set2Set(nn.Module):
26 |     def __init__(self, input_dim, processing_steps, num_layers):
   |         ^^^^^^^^ D107
27 |         super(Set2Set, self).__init__()
28 |         self.input_dim = input_dim
   |

src\stk_search\geom3d\models\ENN.py:27:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
25 | class Set2Set(nn.Module):
26 |     def __init__(self, input_dim, processing_steps, num_layers):
27 |         super(Set2Set, self).__init__()
   |              ^^^^^^^^^^^^^^^ UP008
28 |         self.input_dim = input_dim
29 |         self.output_dim = input_dim * 2
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ENN.py:35:9: D102 Missing docstring in public method
   |
33 |         self.softmax = GraphSoftmax()
34 | 
35 |     def forward(self, x, batch):
   |         ^^^^^^^ D102
36 |         batch_size = torch.max(batch).item() + 1
   |

src\stk_search\geom3d\models\ENN.py:52:16: RET504 Unnecessary assignment to `q_star` before `return` statement
   |
51 |         q_star = q_star.squeeze(0)
52 |         return q_star
   |                ^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ENN.py:55:7: N801 Class name `ENN_S2S` should use CapWords convention
   |
55 | class ENN_S2S(nn.Module):
   |       ^^^^^^^ N801
56 |     def __init__(
57 |             self, hidden_dim, gru_layer_num, enn_layer_num,
   |

src\stk_search\geom3d\models\ENN.py:55:7: D101 Missing docstring in public class
   |
55 | class ENN_S2S(nn.Module):
   |       ^^^^^^^ D101
56 |     def __init__(
57 |             self, hidden_dim, gru_layer_num, enn_layer_num,
   |

src\stk_search\geom3d\models\ENN.py:56:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
55 | class ENN_S2S(nn.Module):
56 |     def __init__(
   |         ^^^^^^^^ PLR0913
57 |             self, hidden_dim, gru_layer_num, enn_layer_num,
58 |             set2set_processing_steps, set2set_num_layers, output_dim
   |

src\stk_search\geom3d\models\ENN.py:56:9: ANN204 Missing return type annotation for special method `__init__`
   |
55 | class ENN_S2S(nn.Module):
56 |     def __init__(
   |         ^^^^^^^^ ANN204
57 |             self, hidden_dim, gru_layer_num, enn_layer_num,
58 |             set2set_processing_steps, set2set_num_layers, output_dim
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ENN.py:56:9: D107 Missing docstring in `__init__`
   |
55 | class ENN_S2S(nn.Module):
56 |     def __init__(
   |         ^^^^^^^^ D107
57 |             self, hidden_dim, gru_layer_num, enn_layer_num,
58 |             set2set_processing_steps, set2set_num_layers, output_dim
   |

src\stk_search\geom3d\models\ENN.py:60:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
58 |             set2set_processing_steps, set2set_num_layers, output_dim
59 |     ):
60 |         super(ENN_S2S, self).__init__()
   |              ^^^^^^^^^^^^^^^ UP008
61 | 
62 |         self.hidden_dim = hidden_dim
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ENN.py:75:9: D102 Missing docstring in public method
   |
73 |         self.fc_layer = nn.Linear(self.hidden_dim*2, self.output_dim)
74 | 
75 |     def forward(self, data):
   |         ^^^^^^^ D102
76 |         x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
77 |         batch = data.batch
   |

src\stk_search\geom3d\models\ENN.py:89:16: RET504 Unnecessary assignment to `x` before `return` statement
   |
87 |         x = self.set2set(x, batch)
88 |         x = self.fc_layer(x)
89 |         return x
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\Equiformer\__init__.py:2:5: F401 `.equiformer_type_0.EquiformerEnergy` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .equiformer_type_0 import (
2 |     EquiformerEnergy,
  |     ^^^^^^^^^^^^^^^^ F401
3 | )
  |
  = help: Use an explicit re-export: `EquiformerEnergy as EquiformerEnergy`

src\stk_search\geom3d\models\Equiformer\__init__.py:15:41: F401 `.equiformer_type_0_periodic.EquiformerEnergyPeriodic` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
13 | # # Equiformer_nonlinear_bessel_l3_energy_force,
14 | # # Equiformer_nonlinear_bessel_l3_e3_energy_force,
15 | from .equiformer_type_0_periodic import EquiformerEnergyPeriodic
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ F401
16 | 
17 | # Equiformer_l2,
   |
   = help: Use an explicit re-export: `EquiformerEnergyPeriodic as EquiformerEnergyPeriodic`

src\stk_search\geom3d\models\Equiformer\__init__.py:24:5: F401 `.equiformer_type_01.EquiformerEnergyForce` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
22 | # Equiformer_nonlinear_bessel_l2_drop00,
23 | from .equiformer_type_01 import (
24 |     EquiformerEnergyForce,
   |     ^^^^^^^^^^^^^^^^^^^^^ F401
25 | )
   |
   = help: Use an explicit re-export: `EquiformerEnergyForce as EquiformerEnergyForce`

src\stk_search\geom3d\models\Equiformer\drop.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """Add `extra_repr` into DropPath implemented by timm
2 | | for displaying more info.
3 | | """
  | |___^ D205
  |
  = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\drop.py:7:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
6 | import torch
7 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
8 | from e3nn import o3
9 | from torch import nn
  |

src\stk_search\geom3d\models\Equiformer\drop.py:12:41: FBT001 Boolean-typed positional argument in function definition
   |
12 | def drop_path(x, drop_prob: float = 0., training: bool = False):
   |                                         ^^^^^^^^ FBT001
13 |     """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
14 |     This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
   |

src\stk_search\geom3d\models\Equiformer\drop.py:12:41: FBT002 Boolean default positional argument in function definition
   |
12 | def drop_path(x, drop_prob: float = 0., training: bool = False):
   |                                         ^^^^^^^^ FBT002
13 |     """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
14 |     This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
   |

src\stk_search\geom3d\models\Equiformer\drop.py:13:5: D205 1 blank line required between summary line and description
   |
12 |   def drop_path(x, drop_prob: float = 0., training: bool = False):
13 |       """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
   |  _____^
14 | |     This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
15 | |     the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
16 | |     See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
17 | |     changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
18 | |     'survival rate' as the argument.
19 | |     """
   | |_______^ D205
20 |       if drop_prob == 0. or not training:
21 |           return x
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\drop.py:27:12: RET504 Unnecessary assignment to `output` before `return` statement
   |
25 |     random_tensor.floor_()  # binarize
26 |     output = x.div(keep_prob) * random_tensor
27 |     return output
   |            ^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\drop.py:31:5: D200 One-line docstring should fit on one line
   |
30 |   class DropPath(nn.Module):
31 |       """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
   |  _____^
32 | |     """
   | |_______^ D200
33 |   
34 |       def __init__(self, drop_prob=None):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\drop.py:34:9: ANN204 Missing return type annotation for special method `__init__`
   |
32 |     """
33 | 
34 |     def __init__(self, drop_prob=None):
   |         ^^^^^^^^ ANN204
35 |         super(DropPath, self).__init__()
36 |         self.drop_prob = drop_prob
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\drop.py:34:9: D107 Missing docstring in `__init__`
   |
32 |     """
33 | 
34 |     def __init__(self, drop_prob=None):
   |         ^^^^^^^^ D107
35 |         super(DropPath, self).__init__()
36 |         self.drop_prob = drop_prob
   |

src\stk_search\geom3d\models\Equiformer\drop.py:35:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
34 |     def __init__(self, drop_prob=None):
35 |         super(DropPath, self).__init__()
   |              ^^^^^^^^^^^^^^^^ UP008
36 |         self.drop_prob = drop_prob
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\drop.py:38:9: D102 Missing docstring in public method
   |
36 |         self.drop_prob = drop_prob
37 | 
38 |     def forward(self, x):
   |         ^^^^^^^ D102
39 |         return drop_path(x, self.drop_prob, self.training)
   |

src\stk_search\geom3d\models\Equiformer\drop.py:41:9: D102 Missing docstring in public method
   |
39 |         return drop_path(x, self.drop_prob, self.training)
40 | 
41 |     def extra_repr(self):
   |         ^^^^^^^^^^ D102
42 |         return f"drop_prob={self.drop_prob}"
   |

src\stk_search\geom3d\models\Equiformer\drop.py:46:5: D200 One-line docstring should fit on one line
   |
45 |   class GraphDropPath(nn.Module):
46 |       """Consider batch for graph data when dropping paths.
   |  _____^
47 | |     """
   | |_______^ D200
48 |   
49 |       def __init__(self, drop_prob=None):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\drop.py:49:9: ANN204 Missing return type annotation for special method `__init__`
   |
47 |     """
48 | 
49 |     def __init__(self, drop_prob=None):
   |         ^^^^^^^^ ANN204
50 |         super(GraphDropPath, self).__init__()
51 |         self.drop_prob = drop_prob
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\drop.py:49:9: D107 Missing docstring in `__init__`
   |
47 |     """
48 | 
49 |     def __init__(self, drop_prob=None):
   |         ^^^^^^^^ D107
50 |         super(GraphDropPath, self).__init__()
51 |         self.drop_prob = drop_prob
   |

src\stk_search\geom3d\models\Equiformer\drop.py:50:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
49 |     def __init__(self, drop_prob=None):
50 |         super(GraphDropPath, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^ UP008
51 |         self.drop_prob = drop_prob
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\drop.py:54:9: D102 Missing docstring in public method
   |
54 |     def forward(self, x, batch):
   |         ^^^^^^^ D102
55 |         batch_size = batch.max() + 1
56 |         shape = (batch_size,) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
   |

src\stk_search\geom3d\models\Equiformer\drop.py:60:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
58 |         drop = drop_path(ones, self.drop_prob, self.training)
59 |         out = x * drop[batch]
60 |         return out
   |                ^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\drop.py:63:9: D102 Missing docstring in public method
   |
63 |     def extra_repr(self):
   |         ^^^^^^^^^^ D102
64 |         return f"drop_prob={self.drop_prob}"
   |

src\stk_search\geom3d\models\Equiformer\drop.py:68:7: D101 Missing docstring in public class
   |
68 | class EquivariantDropout(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^ D101
69 |     def __init__(self, irreps, drop_prob):
70 |         super(EquivariantDropout, self).__init__()
   |

src\stk_search\geom3d\models\Equiformer\drop.py:69:9: ANN204 Missing return type annotation for special method `__init__`
   |
68 | class EquivariantDropout(nn.Module):
69 |     def __init__(self, irreps, drop_prob):
   |         ^^^^^^^^ ANN204
70 |         super(EquivariantDropout, self).__init__()
71 |         self.irreps = irreps
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\drop.py:69:9: D107 Missing docstring in `__init__`
   |
68 | class EquivariantDropout(nn.Module):
69 |     def __init__(self, irreps, drop_prob):
   |         ^^^^^^^^ D107
70 |         super(EquivariantDropout, self).__init__()
71 |         self.irreps = irreps
   |

src\stk_search\geom3d\models\Equiformer\drop.py:70:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
68 | class EquivariantDropout(nn.Module):
69 |     def __init__(self, irreps, drop_prob):
70 |         super(EquivariantDropout, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
71 |         self.irreps = irreps
72 |         self.num_irreps = irreps.num_irreps
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\drop.py:74:49: FBT003 Boolean positional value in function call
   |
72 |         self.num_irreps = irreps.num_irreps
73 |         self.drop_prob = drop_prob
74 |         self.drop = torch.nn.Dropout(drop_prob, True)
   |                                                 ^^^^ FBT003
75 |         self.mul = o3.ElementwiseTensorProduct(irreps,
76 |             o3.Irreps(f"{self.num_irreps}x0e"))
   |

src\stk_search\geom3d\models\Equiformer\drop.py:79:9: D102 Missing docstring in public method
   |
79 |     def forward(self, x):
   |         ^^^^^^^ D102
80 |         if not self.training or self.drop_prob == 0.0:
81 |             return x
   |

src\stk_search\geom3d\models\Equiformer\drop.py:86:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
84 |         mask = self.drop(mask)
85 |         out = self.mul(x, mask)
86 |         return out
   |                ^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\drop.py:89:7: D101 Missing docstring in public class
   |
89 | class EquivariantScalarsDropout(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^ D101
90 |     def __init__(self, irreps, drop_prob):
91 |         super(EquivariantScalarsDropout, self).__init__()
   |

src\stk_search\geom3d\models\Equiformer\drop.py:90:9: ANN204 Missing return type annotation for special method `__init__`
   |
89 | class EquivariantScalarsDropout(nn.Module):
90 |     def __init__(self, irreps, drop_prob):
   |         ^^^^^^^^ ANN204
91 |         super(EquivariantScalarsDropout, self).__init__()
92 |         self.irreps = irreps
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\drop.py:90:9: D107 Missing docstring in `__init__`
   |
89 | class EquivariantScalarsDropout(nn.Module):
90 |     def __init__(self, irreps, drop_prob):
   |         ^^^^^^^^ D107
91 |         super(EquivariantScalarsDropout, self).__init__()
92 |         self.irreps = irreps
   |

src\stk_search\geom3d\models\Equiformer\drop.py:91:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
89 | class EquivariantScalarsDropout(nn.Module):
90 |     def __init__(self, irreps, drop_prob):
91 |         super(EquivariantScalarsDropout, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
92 |         self.irreps = irreps
93 |         self.drop_prob = drop_prob
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\drop.py:96:9: D102 Missing docstring in public method
   |
96 |     def forward(self, x):
   |         ^^^^^^^ D102
97 |         if not self.training or self.drop_prob == 0.0:
98 |             return x
   |

src\stk_search\geom3d\models\Equiformer\drop.py:108:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
106 |             out.append(temp)
107 |         out = torch.cat(out, dim=-1)
108 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\drop.py:111:9: D102 Missing docstring in public method
    |
111 |     def extra_repr(self):
    |         ^^^^^^^^^^ D102
112 |         return f"irreps={self.irreps}, drop_prob={self.drop_prob}"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:38:5: D103 Missing docstring in public function
   |
38 | def get_norm_layer(norm_type):
   |     ^^^^^^^^^^^^^^ D103
39 |     if norm_type == "graph":
40 |         return EquivariantGraphNorm
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:41:5: RET505 Unnecessary `elif` after `return` statement
   |
39 |     if norm_type == "graph":
40 |         return EquivariantGraphNorm
41 |     elif norm_type == "instance":
   |     ^^^^ RET505
42 |         return EquivariantInstanceNorm
43 |     elif norm_type == "layer":
   |
   = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:50:15: TRY003 Avoid specifying long messages outside the exception class
   |
48 |         return None
49 |     else:
50 |         raise ValueError(f"Norm type {norm_type} not supported.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:50:26: EM102 Exception must not use an f-string literal, assign to variable first
   |
48 |         return None
49 |     else:
50 |         raise ValueError(f"Norm type {norm_type} not supported.")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:53:7: D101 Missing docstring in public class
   |
53 | class SmoothLeakyReLU(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^ D101
54 |     def __init__(self, negative_slope=0.2):
55 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:54:9: ANN204 Missing return type annotation for special method `__init__`
   |
53 | class SmoothLeakyReLU(torch.nn.Module):
54 |     def __init__(self, negative_slope=0.2):
   |         ^^^^^^^^ ANN204
55 |         super().__init__()
56 |         self.alpha = negative_slope
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:54:9: D107 Missing docstring in `__init__`
   |
53 | class SmoothLeakyReLU(torch.nn.Module):
54 |     def __init__(self, negative_slope=0.2):
   |         ^^^^^^^^ D107
55 |         super().__init__()
56 |         self.alpha = negative_slope
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:59:9: D102 Missing docstring in public method
   |
59 |     def forward(self, x):
   |         ^^^^^^^ D102
60 |         x1 = ((1 + self.alpha) / 2) * x
61 |         x2 = ((1 - self.alpha) / 2) * x * (2 * torch.sigmoid(x) - 1)
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:65:9: D102 Missing docstring in public method
   |
65 |     def extra_repr(self):
   |         ^^^^^^^^^^ D102
66 |         return f"negative_slope={self.alpha}"
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:69:5: D103 Missing docstring in public function
   |
69 | def get_mul_0(irreps):
   |     ^^^^^^^^^ D103
70 |     mul_0 = 0
71 |     for mul, ir in irreps:
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:77:7: D101 Missing docstring in public class
   |
77 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
78 | 
79 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:79:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
77 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
78 | 
79 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |         ^^^^^^^^ PLR0913
80 |         bias=True, rescale=True,
81 |         internal_weights=None, shared_weights=None,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:79:9: ANN204 Missing return type annotation for special method `__init__`
   |
77 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
78 | 
79 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |         ^^^^^^^^ ANN204
80 |         bias=True, rescale=True,
81 |         internal_weights=None, shared_weights=None,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:79:9: D107 Missing docstring in `__init__`
   |
77 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
78 | 
79 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |         ^^^^^^^^ D107
80 |         bias=True, rescale=True,
81 |         internal_weights=None, shared_weights=None,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:80:9: FBT002 Boolean default positional argument in function definition
   |
79 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
80 |         bias=True, rescale=True,
   |         ^^^^ FBT002
81 |         internal_weights=None, shared_weights=None,
82 |         normalization=None, norm_layer="graph"):
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:80:20: FBT002 Boolean default positional argument in function definition
   |
79 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
80 |         bias=True, rescale=True,
   |                    ^^^^^^^ FBT002
81 |         internal_weights=None, shared_weights=None,
82 |         normalization=None, norm_layer="graph"):
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:91:9: D102 Missing docstring in public method
   |
91 |     def forward(self, x, y, batch, weight=None):
   |         ^^^^^^^ D102
92 |         out = self.forward_tp_rescale_bias(x, y, weight)
93 |         out = self.norm(out, batch=batch)
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:94:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
92 |         out = self.forward_tp_rescale_bias(x, y, weight)
93 |         out = self.norm(out, batch=batch)
94 |         return out
   |                ^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:97:7: D101 Missing docstring in public class
   |
97 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
98 | 
99 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:99:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
 97 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
 98 | 
 99 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ PLR0913
100 |         bias=True, rescale=True,
101 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:99:9: ANN204 Missing return type annotation for special method `__init__`
    |
 97 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
 98 | 
 99 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ ANN204
100 |         bias=True, rescale=True,
101 |         internal_weights=None, shared_weights=None,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:99:9: D107 Missing docstring in `__init__`
    |
 97 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
 98 | 
 99 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ D107
100 |         bias=True, rescale=True,
101 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:100:9: FBT002 Boolean default positional argument in function definition
    |
 99 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
100 |         bias=True, rescale=True,
    |         ^^^^ FBT002
101 |         internal_weights=None, shared_weights=None,
102 |         normalization=None, norm_layer="graph"):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:100:20: FBT002 Boolean default positional argument in function definition
    |
 99 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
100 |         bias=True, rescale=True,
    |                    ^^^^^^^ FBT002
101 |         internal_weights=None, shared_weights=None,
102 |         normalization=None, norm_layer="graph"):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:120:9: D102 Missing docstring in public method
    |
120 |     def forward(self, x, y, batch, weight=None):
    |         ^^^^^^^ D102
121 |         out = self.forward_tp_rescale_bias(x, y, weight)
122 |         out = self.norm(out, batch=batch)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:124:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
122 |         out = self.norm(out, batch=batch)
123 |         out = self.gate(out)
124 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:127:7: D101 Missing docstring in public class
    |
127 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
128 | 
129 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:129:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
127 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
128 | 
129 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ PLR0913
130 |         bias=True, rescale=True,
131 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:129:9: ANN204 Missing return type annotation for special method `__init__`
    |
127 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
128 | 
129 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ ANN204
130 |         bias=True, rescale=True,
131 |         internal_weights=None, shared_weights=None,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:129:9: D107 Missing docstring in `__init__`
    |
127 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
128 | 
129 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ D107
130 |         bias=True, rescale=True,
131 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:130:9: FBT002 Boolean default positional argument in function definition
    |
129 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
130 |         bias=True, rescale=True,
    |         ^^^^ FBT002
131 |         internal_weights=None, shared_weights=None,
132 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:130:20: FBT002 Boolean default positional argument in function definition
    |
129 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
130 |         bias=True, rescale=True,
    |                    ^^^^^^^ FBT002
131 |         internal_weights=None, shared_weights=None,
132 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:150:9: D102 Missing docstring in public method
    |
150 |     def forward(self, x, y, weight=None):
    |         ^^^^^^^ D102
151 |         out = self.forward_tp_rescale_bias(x, y, weight)
152 |         out = self.gate(out)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:153:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
151 |         out = self.forward_tp_rescale_bias(x, y, weight)
152 |         out = self.gate(out)
153 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:156:5: N802 Function name `DepthwiseTensorProduct` should be lowercase
    |
156 | def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
    |     ^^^^^^^^^^^^^^^^^^^^^^ N802
157 |     internal_weights=False, bias=True):
158 |     """The irreps of output is pre-determined.
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:157:5: FBT002 Boolean default positional argument in function definition
    |
156 | def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
157 |     internal_weights=False, bias=True):
    |     ^^^^^^^^^^^^^^^^ FBT002
158 |     """The irreps of output is pre-determined.
159 |     `irreps_node_output` is used to get certain types of vectors.
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:157:29: FBT002 Boolean default positional argument in function definition
    |
156 | def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
157 |     internal_weights=False, bias=True):
    |                             ^^^^ FBT002
158 |     """The irreps of output is pre-determined.
159 |     `irreps_node_output` is used to get certain types of vectors.
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:158:5: D205 1 blank line required between summary line and description
    |
156 |   def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
157 |       internal_weights=False, bias=True):
158 |       """The irreps of output is pre-determined.
    |  _____^
159 | |     `irreps_node_output` is used to get certain types of vectors.
160 | |     """
    | |_______^ D205
161 |       irreps_output = []
162 |       instructions = []
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:158:5: D401 First line of docstring should be in imperative mood: "The irreps of output is pre-determined."
    |
156 |   def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
157 |       internal_weights=False, bias=True):
158 |       """The irreps of output is pre-determined.
    |  _____^
159 | |     `irreps_node_output` is used to get certain types of vectors.
160 | |     """
    | |_______^ D401
161 |       irreps_output = []
162 |       instructions = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:181:12: RET504 Unnecessary assignment to `tp` before `return` statement
    |
179 |             shared_weights=internal_weights,
180 |             bias=bias, rescale=_RESCALE)
181 |     return tp
    |            ^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:185:5: D200 One-line docstring should fit on one line
    |
184 |   class SeparableFCTP(torch.nn.Module):
185 |       """Use separable FCTP for spatial convolution.
    |  _____^
186 | |     """
    | |_______^ D200
187 |   
188 |       def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:188:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
186 |     """
187 | 
188 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |         ^^^^^^^^ PLR0913
189 |         fc_neurons, use_activation=False, norm_layer="graph",
190 |         internal_weights=False):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:188:9: ANN204 Missing return type annotation for special method `__init__`
    |
186 |     """
187 | 
188 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |         ^^^^^^^^ ANN204
189 |         fc_neurons, use_activation=False, norm_layer="graph",
190 |         internal_weights=False):
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:188:9: D107 Missing docstring in `__init__`
    |
186 |     """
187 | 
188 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |         ^^^^^^^^ D107
189 |         fc_neurons, use_activation=False, norm_layer="graph",
190 |         internal_weights=False):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:189:21: FBT002 Boolean default positional argument in function definition
    |
188 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
189 |         fc_neurons, use_activation=False, norm_layer="graph",
    |                     ^^^^^^^^^^^^^^ FBT002
190 |         internal_weights=False):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:190:9: FBT002 Boolean default positional argument in function definition
    |
188 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
189 |         fc_neurons, use_activation=False, norm_layer="graph",
190 |         internal_weights=False):
    |         ^^^^^^^^^^^^^^^^ FBT002
191 | 
192 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:203:42: RUF005 Consider `[*fc_neurons, self.dtp.tp.weight_numel]` instead of concatenation
    |
201 |         self.dtp_rad = None
202 |         if fc_neurons is not None:
203 |             self.dtp_rad = RadialProfile(fc_neurons + [self.dtp.tp.weight_numel])
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
204 |             for (slice, slice_sqrt_k) in self.dtp.slices_sqrt_k.values():
205 |                 self.dtp_rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
    |
    = help: Replace with `[*fc_neurons, self.dtp.tp.weight_numel]`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:204:18: A001 Variable `slice` is shadowing a Python builtin
    |
202 |         if fc_neurons is not None:
203 |             self.dtp_rad = RadialProfile(fc_neurons + [self.dtp.tp.weight_numel])
204 |             for (slice, slice_sqrt_k) in self.dtp.slices_sqrt_k.values():
    |                  ^^^^^ A001
205 |                 self.dtp_rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
206 |                 self.dtp_rad.offset.data[slice] *= slice_sqrt_k
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:232:72: ANN003 Missing type annotation for `**kwargs`
    |
232 |     def forward(self, node_input, edge_attr, edge_scalars, batch=None, **kwargs):
    |                                                                        ^^^^^^^^ ANN003
233 |         """Depthwise TP: `node_input` TP `edge_attr`, with TP parametrized by
234 |         self.dtp_rad(`edge_scalars`).
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:232:74: ARG002 Unused method argument: `kwargs`
    |
232 |     def forward(self, node_input, edge_attr, edge_scalars, batch=None, **kwargs):
    |                                                                          ^^^^^^ ARG002
233 |         """Depthwise TP: `node_input` TP `edge_attr`, with TP parametrized by
234 |         self.dtp_rad(`edge_scalars`).
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:233:9: D205 1 blank line required between summary line and description
    |
232 |       def forward(self, node_input, edge_attr, edge_scalars, batch=None, **kwargs):
233 |           """Depthwise TP: `node_input` TP `edge_attr`, with TP parametrized by
    |  _________^
234 | |         self.dtp_rad(`edge_scalars`).
235 | |         """
    | |___________^ D205
236 |           weight = None
237 |           if self.dtp_rad is not None and edge_scalars is not None:
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:250:5: D205 1 blank line required between summary line and description
    |
248 |   @compile_mode("script")
249 |   class Vec2AttnHeads(torch.nn.Module):
250 |       """Reshape vectors of shape [N, irreps_mid] to vectors of shape
    |  _____^
251 | |     [N, num_heads, irreps_head].
252 | |     """
    | |_______^ D205
253 |   
254 |       def __init__(self, irreps_head, num_heads):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:254:9: ANN204 Missing return type annotation for special method `__init__`
    |
252 |     """
253 | 
254 |     def __init__(self, irreps_head, num_heads):
    |         ^^^^^^^^ ANN204
255 |         super().__init__()
256 |         self.num_heads = num_heads
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:254:9: D107 Missing docstring in `__init__`
    |
252 |     """
253 | 
254 |     def __init__(self, irreps_head, num_heads):
    |         ^^^^^^^^ D107
255 |         super().__init__()
256 |         self.num_heads = num_heads
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:269:9: D102 Missing docstring in public method
    |
269 |     def forward(self, x):
    |         ^^^^^^^ D102
270 |         N, _ = x.shape
271 |         out = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:270:9: N806 Variable `N` in function should be lowercase
    |
269 |     def forward(self, x):
270 |         N, _ = x.shape
    |         ^ N806
271 |         out = []
272 |         for ir_idx, (start_idx, end_idx) in enumerate(self.mid_in_indices):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:272:13: B007 Loop control variable `ir_idx` not used within loop body
    |
270 |         N, _ = x.shape
271 |         out = []
272 |         for ir_idx, (start_idx, end_idx) in enumerate(self.mid_in_indices):
    |             ^^^^^^ B007
273 |             temp = x.narrow(1, start_idx, end_idx - start_idx)
274 |             temp = temp.reshape(N, self.num_heads, -1)
    |
    = help: Rename unused `ir_idx` to `_ir_idx`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:277:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
275 |             out.append(temp)
276 |         out = torch.cat(out, dim=2)
277 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:280:9: ANN204 Missing return type annotation for special method `__repr__`
    |
280 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
281 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head}, num_heads={self.num_heads})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:280:9: D105 Missing docstring in magic method
    |
280 |     def __repr__(self):
    |         ^^^^^^^^ D105
281 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head}, num_heads={self.num_heads})"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:286:5: D205 1 blank line required between summary line and description
    |
284 |   @compile_mode("script")
285 |   class AttnHeads2Vec(torch.nn.Module):
286 |       """Convert vectors of shape [N, num_heads, irreps_head] into
    |  _____^
287 | |     vectors of shape [N, irreps_head * num_heads].
288 | |     """
    | |_______^ D205
289 |   
290 |       def __init__(self, irreps_head):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:290:9: ANN204 Missing return type annotation for special method `__init__`
    |
288 |     """
289 | 
290 |     def __init__(self, irreps_head):
    |         ^^^^^^^^ ANN204
291 |         super().__init__()
292 |         self.irreps_head = irreps_head
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:290:9: D107 Missing docstring in `__init__`
    |
288 |     """
289 | 
290 |     def __init__(self, irreps_head):
    |         ^^^^^^^^ D107
291 |         super().__init__()
292 |         self.irreps_head = irreps_head
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:300:9: D102 Missing docstring in public method
    |
300 |     def forward(self, x):
    |         ^^^^^^^ D102
301 |         N, _, _ = x.shape
302 |         out = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:301:9: N806 Variable `N` in function should be lowercase
    |
300 |     def forward(self, x):
301 |         N, _, _ = x.shape
    |         ^ N806
302 |         out = []
303 |         for ir_idx, (start_idx, end_idx) in enumerate(self.head_indices):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:303:13: B007 Loop control variable `ir_idx` not used within loop body
    |
301 |         N, _, _ = x.shape
302 |         out = []
303 |         for ir_idx, (start_idx, end_idx) in enumerate(self.head_indices):
    |             ^^^^^^ B007
304 |             temp = x.narrow(2, start_idx, end_idx - start_idx)
305 |             temp = temp.reshape(N, -1)
    |
    = help: Rename unused `ir_idx` to `_ir_idx`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:308:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
306 |             out.append(temp)
307 |         out = torch.cat(out, dim=1)
308 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:311:9: ANN204 Missing return type annotation for special method `__repr__`
    |
311 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
312 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:311:9: D105 Missing docstring in magic method
    |
311 |     def __repr__(self):
    |         ^^^^^^^^ D105
312 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head})"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:315:7: D101 Missing docstring in public class
    |
315 | class ConcatIrrepsTensor(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^ D101
316 | 
317 |     def __init__(self, irreps_1, irreps_2):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:317:9: ANN204 Missing return type annotation for special method `__init__`
    |
315 | class ConcatIrrepsTensor(torch.nn.Module):
316 | 
317 |     def __init__(self, irreps_1, irreps_2):
    |         ^^^^^^^^ ANN204
318 |         super().__init__()
319 |         assert irreps_1 == irreps_1.simplify()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:317:9: D107 Missing docstring in `__init__`
    |
315 | class ConcatIrrepsTensor(torch.nn.Module):
316 | 
317 |     def __init__(self, irreps_1, irreps_2):
    |         ^^^^^^^^ D107
318 |         super().__init__()
319 |         assert irreps_1 == irreps_1.simplify()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:319:9: S101 Use of `assert` detected
    |
317 |     def __init__(self, irreps_1, irreps_2):
318 |         super().__init__()
319 |         assert irreps_1 == irreps_1.simplify()
    |         ^^^^^^ S101
320 |         self.check_sorted(irreps_1)
321 |         assert irreps_2 == irreps_2.simplify()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:321:9: S101 Use of `assert` detected
    |
319 |         assert irreps_1 == irreps_1.simplify()
320 |         self.check_sorted(irreps_1)
321 |         assert irreps_2 == irreps_2.simplify()
    |         ^^^^^^ S101
322 |         self.check_sorted(irreps_2)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:353:9: D102 Missing docstring in public method
    |
353 |     def get_irreps_dim(self, irreps):
    |         ^^^^^^^^^^^^^^ D102
354 |         muls = []
355 |         for mul, ir in irreps:
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:360:9: D102 Missing docstring in public method
    |
360 |     def check_sorted(self, irreps):
    |         ^^^^^^^^^^^^ D102
361 |         lmax = None
362 |         p = None
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:369:17: S101 Use of `assert` detected
    |
367 |                 continue
368 |             if ir.l == lmax:
369 |                 assert p < ir.p, f"Parity order error: {irreps}"
    |                 ^^^^^^ S101
370 |             assert lmax <= ir.l
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:370:13: S101 Use of `assert` detected
    |
368 |             if ir.l == lmax:
369 |                 assert p < ir.p, f"Parity order error: {irreps}"
370 |             assert lmax <= ir.l
    |             ^^^^^^ S101
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:373:9: D102 Missing docstring in public method
    |
373 |     def get_ir_index(self, ir, irreps):
    |         ^^^^^^^^^^^^ D102
374 |         for index, (_, irrep) in enumerate(irreps):
375 |             if irrep == ir:
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:380:9: D102 Missing docstring in public method
    |
380 |     def forward(self, feature_1, feature_2):
    |         ^^^^^^^ D102
381 | 
382 |         output = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:390:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
388 |                 output.append(feature_2.narrow(-1, start_idx_2, mul_2))
389 |         output = torch.cat(output, dim=-1)
390 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:393:9: ANN204 Missing return type annotation for special method `__repr__`
    |
393 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
394 |         return f"{self.__class__.__name__}(irreps_1={self.irreps_1}, irreps_2={self.irreps_2})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:393:9: D105 Missing docstring in magic method
    |
393 |     def __repr__(self):
    |         ^^^^^^^^ D105
394 |         return f"{self.__class__.__name__}(irreps_1={self.irreps_1}, irreps_2={self.irreps_2})"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:399:5: D205 1 blank line required between summary line and description
    |
397 |   @compile_mode("script")
398 |   class GraphAttention(torch.nn.Module):
399 |       """1. Message = Alpha * Value
    |  _____^
400 | |     2. Two Linear to merge src and dst -> Separable FCTP -> 0e + (0e+1e+...)
401 | |     3. 0e -> Activation -> Inner Product -> (Alpha)
402 | |     4. (0e+1e+...) -> (Value)
403 | |     """
    | |_______^ D205
404 |   
405 |       def __init__(self,
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:399:5: D400 First line should end with a period
    |
397 |   @compile_mode("script")
398 |   class GraphAttention(torch.nn.Module):
399 |       """1. Message = Alpha * Value
    |  _____^
400 | |     2. Two Linear to merge src and dst -> Separable FCTP -> 0e + (0e+1e+...)
401 | |     3. 0e -> Activation -> Inner Product -> (Alpha)
402 | |     4. (0e+1e+...) -> (Value)
403 | |     """
    | |_______^ D400
404 |   
405 |       def __init__(self,
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:399:5: D415 First line should end with a period, question mark, or exclamation point
    |
397 |   @compile_mode("script")
398 |   class GraphAttention(torch.nn.Module):
399 |       """1. Message = Alpha * Value
    |  _____^
400 | |     2. Two Linear to merge src and dst -> Separable FCTP -> 0e + (0e+1e+...)
401 | |     3. 0e -> Activation -> Inner Product -> (Alpha)
402 | |     4. (0e+1e+...) -> (Value)
403 | |     """
    | |_______^ D415
404 |   
405 |       def __init__(self,
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:405:9: PLR0913 Too many arguments in function definition (12 > 5)
    |
403 |     """
404 | 
405 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
406 |         irreps_node_input, irreps_node_attr,
407 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:405:9: ANN204 Missing return type annotation for special method `__init__`
    |
403 |     """
404 | 
405 |     def __init__(self,
    |         ^^^^^^^^ ANN204
406 |         irreps_node_input, irreps_node_attr,
407 |         irreps_edge_attr, irreps_node_output,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:405:9: D107 Missing docstring in `__init__`
    |
403 |     """
404 | 
405 |     def __init__(self,
    |         ^^^^^^^^ D107
406 |         irreps_node_input, irreps_node_attr,
407 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:410:9: FBT002 Boolean default positional argument in function definition
    |
408 |         fc_neurons,
409 |         irreps_head, num_heads, irreps_pre_attn=None,
410 |         rescale_degree=False, nonlinear_message=False,
    |         ^^^^^^^^^^^^^^ FBT002
411 |         alpha_drop=0.1, proj_drop=0.1):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:410:31: FBT002 Boolean default positional argument in function definition
    |
408 |         fc_neurons,
409 |         irreps_head, num_heads, irreps_pre_attn=None,
410 |         rescale_degree=False, nonlinear_message=False,
    |                               ^^^^^^^^^^^^^^^^^ FBT002
411 |         alpha_drop=0.1, proj_drop=0.1):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:477:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
477 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ PLR0913
478 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:477:9: D102 Missing docstring in public method
    |
477 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ D102
478 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:477:35: ARG002 Unused method argument: `node_attr`
    |
477 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |                                   ^^^^^^^^^ ARG002
478 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:478:9: ARG002 Unused method argument: `batch`
    |
477 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
478 |         batch, **kwargs):
    |         ^^^^^ ARG002
479 | 
480 |         message_src = self.merge_src(node_input)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:478:16: ANN003 Missing type annotation for `**kwargs`
    |
477 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
478 |         batch, **kwargs):
    |                ^^^^^^^^ ANN003
479 | 
480 |         message_src = self.merge_src(node_input)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:478:18: ARG002 Unused method argument: `kwargs`
    |
477 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
478 |         batch, **kwargs):
    |                  ^^^^^^ ARG002
479 | 
480 |         message_src = self.merge_src(node_input)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:525:9: D102 Missing docstring in public method
    |
525 |     def extra_repr(self):
    |         ^^^^^^^^^^ D102
526 |         output_str = super(GraphAttention, self).extra_repr()
527 |         output_str = output_str + f"rescale_degree={self.rescale_degree}, "
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:526:27: UP008 Use `super()` instead of `super(__class__, self)`
    |
525 |     def extra_repr(self):
526 |         output_str = super(GraphAttention, self).extra_repr()
    |                           ^^^^^^^^^^^^^^^^^^^^^^ UP008
527 |         output_str = output_str + f"rescale_degree={self.rescale_degree}, "
528 |         return output_str
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:528:16: RET504 Unnecessary assignment to `output_str` before `return` statement
    |
526 |         output_str = super(GraphAttention, self).extra_repr()
527 |         output_str = output_str + f"rescale_degree={self.rescale_degree}, "
528 |         return output_str
    |                ^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:533:5: D200 One-line docstring should fit on one line
    |
531 |   @compile_mode("script")
532 |   class FeedForwardNetwork(torch.nn.Module):
533 |       """Use two (FCTP + Gate)
    |  _____^
534 | |     """
    | |_______^ D200
535 |   
536 |       def __init__(self,
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:533:5: D400 First line should end with a period
    |
531 |   @compile_mode("script")
532 |   class FeedForwardNetwork(torch.nn.Module):
533 |       """Use two (FCTP + Gate)
    |  _____^
534 | |     """
    | |_______^ D400
535 |   
536 |       def __init__(self,
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:533:5: D415 First line should end with a period, question mark, or exclamation point
    |
531 |   @compile_mode("script")
532 |   class FeedForwardNetwork(torch.nn.Module):
533 |       """Use two (FCTP + Gate)
    |  _____^
534 | |     """
    | |_______^ D415
535 |   
536 |       def __init__(self,
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:536:9: ANN204 Missing return type annotation for special method `__init__`
    |
534 |     """
535 | 
536 |     def __init__(self,
    |         ^^^^^^^^ ANN204
537 |         irreps_node_input, irreps_node_attr,
538 |         irreps_node_output, irreps_mlp_mid=None,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:536:9: D107 Missing docstring in `__init__`
    |
534 |     """
535 | 
536 |     def __init__(self,
    |         ^^^^^^^^ D107
537 |         irreps_node_input, irreps_node_attr,
538 |         irreps_node_output, irreps_mlp_mid=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:561:9: D102 Missing docstring in public method
    |
561 |     def forward(self, node_input, node_attr, **kwargs):
    |         ^^^^^^^ D102
562 |         node_output = self.fctp_1(node_input, node_attr)
563 |         node_output = self.fctp_2(node_output, node_attr)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:561:46: ANN003 Missing type annotation for `**kwargs`
    |
561 |     def forward(self, node_input, node_attr, **kwargs):
    |                                              ^^^^^^^^ ANN003
562 |         node_output = self.fctp_1(node_input, node_attr)
563 |         node_output = self.fctp_2(node_output, node_attr)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:561:48: ARG002 Unused method argument: `kwargs`
    |
561 |     def forward(self, node_input, node_attr, **kwargs):
    |                                                ^^^^^^ ARG002
562 |         node_output = self.fctp_1(node_input, node_attr)
563 |         node_output = self.fctp_2(node_output, node_attr)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:571:5: D205 1 blank line required between summary line and description
    |
569 |   @compile_mode("script")
570 |   class TransBlock(torch.nn.Module):
571 |       """1. Layer Norm 1 -> GraphAttention -> Layer Norm 2 -> FeedForwardNetwork
    |  _____^
572 | |     2. Use pre-norm architecture
573 | |     """
    | |_______^ D205
574 |   
575 |       def __init__(self,
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:571:5: D400 First line should end with a period
    |
569 |   @compile_mode("script")
570 |   class TransBlock(torch.nn.Module):
571 |       """1. Layer Norm 1 -> GraphAttention -> Layer Norm 2 -> FeedForwardNetwork
    |  _____^
572 | |     2. Use pre-norm architecture
573 | |     """
    | |_______^ D400
574 |   
575 |       def __init__(self,
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:571:5: D415 First line should end with a period, question mark, or exclamation point
    |
569 |   @compile_mode("script")
570 |   class TransBlock(torch.nn.Module):
571 |       """1. Layer Norm 1 -> GraphAttention -> Layer Norm 2 -> FeedForwardNetwork
    |  _____^
572 | |     2. Use pre-norm architecture
573 | |     """
    | |_______^ D415
574 |   
575 |       def __init__(self,
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:575:9: PLR0913 Too many arguments in function definition (15 > 5)
    |
573 |     """
574 | 
575 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
576 |         irreps_node_input, irreps_node_attr,
577 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:575:9: ANN204 Missing return type annotation for special method `__init__`
    |
573 |     """
574 | 
575 |     def __init__(self,
    |         ^^^^^^^^ ANN204
576 |         irreps_node_input, irreps_node_attr,
577 |         irreps_edge_attr, irreps_node_output,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:575:9: D107 Missing docstring in `__init__`
    |
573 |     """
574 | 
575 |     def __init__(self,
    |         ^^^^^^^^ D107
576 |         irreps_node_input, irreps_node_attr,
577 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:580:9: FBT002 Boolean default positional argument in function definition
    |
578 |         fc_neurons,
579 |         irreps_head, num_heads, irreps_pre_attn=None,
580 |         rescale_degree=False, nonlinear_message=False,
    |         ^^^^^^^^^^^^^^ FBT002
581 |         alpha_drop=0.1, proj_drop=0.1,
582 |         drop_path_rate=0.0,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:580:31: FBT002 Boolean default positional argument in function definition
    |
578 |         fc_neurons,
579 |         irreps_head, num_heads, irreps_pre_attn=None,
580 |         rescale_degree=False, nonlinear_message=False,
    |                               ^^^^^^^^^^^^^^^^^ FBT002
581 |         alpha_drop=0.1, proj_drop=0.1,
582 |         drop_path_rate=0.0,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:633:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
633 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ PLR0913
634 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:633:9: D102 Missing docstring in public method
    |
633 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ D102
634 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:634:16: ANN003 Missing type annotation for `**kwargs`
    |
633 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
634 |         batch, **kwargs):
    |                ^^^^^^^^ ANN003
635 | 
636 |         node_output = node_input
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:634:18: ARG002 Unused method argument: `kwargs`
    |
633 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
634 |         batch, **kwargs):
    |                  ^^^^^^ ARG002
635 | 
636 |         node_output = node_input
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:639:9: ERA001 Found commented-out code
    |
637 |         node_features = node_input
638 |         node_features = self.norm_1(node_features, batch=batch)
639 |         #norm_1_output = node_features
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
640 |         node_features = self.ga(node_input=node_features,
641 |             node_attr=node_attr,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:652:9: ERA001 Found commented-out code
    |
650 |         node_features = node_output
651 |         node_features = self.norm_2(node_features, batch=batch)
652 |         #node_features = self.concat_norm_output(norm_1_output, node_features)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
653 |         node_features = self.ffn(node_features, node_attr)
654 |         if self.ffn_shortcut is not None:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:661:16: RET504 Unnecessary assignment to `node_output` before `return` statement
    |
659 |         node_output = node_output + node_features
660 | 
661 |         return node_output
    |                ^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:664:7: D101 Missing docstring in public class
    |
664 | class NodeEmbeddingNetwork(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^ D101
665 | 
666 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:666:9: ANN204 Missing return type annotation for special method `__init__`
    |
664 | class NodeEmbeddingNetwork(torch.nn.Module):
665 | 
666 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |         ^^^^^^^^ ANN204
667 | 
668 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:666:9: D107 Missing docstring in `__init__`
    |
664 | class NodeEmbeddingNetwork(torch.nn.Module):
665 | 
666 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |         ^^^^^^^^ D107
667 | 
668 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:666:62: FBT002 Boolean default positional argument in function definition
    |
664 | class NodeEmbeddingNetwork(torch.nn.Module):
665 | 
666 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |                                                              ^^^^ FBT002
667 | 
668 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:677:9: D200 One-line docstring should fit on one line
    |
676 |       def forward(self, node_atom):
677 |           """`node_atom` is a LongTensor.
    |  _________^
678 | |         """
    | |___________^ D200
679 |           node_atom_onehot = torch.nn.functional.one_hot(node_atom, self.max_atom_type).float()
680 |           node_attr = node_atom_onehot
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:686:7: D101 Missing docstring in public class
    |
686 | class ScaledScatter(torch.nn.Module):
    |       ^^^^^^^^^^^^^ D101
687 |     def __init__(self, avg_aggregate_num):
688 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:687:9: ANN204 Missing return type annotation for special method `__init__`
    |
686 | class ScaledScatter(torch.nn.Module):
687 |     def __init__(self, avg_aggregate_num):
    |         ^^^^^^^^ ANN204
688 |         super().__init__()
689 |         self.avg_aggregate_num = avg_aggregate_num + 0.0
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:687:9: D107 Missing docstring in `__init__`
    |
686 | class ScaledScatter(torch.nn.Module):
687 |     def __init__(self, avg_aggregate_num):
    |         ^^^^^^^^ D107
688 |         super().__init__()
689 |         self.avg_aggregate_num = avg_aggregate_num + 0.0
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:692:9: D102 Missing docstring in public method
    |
692 |     def forward(self, x, index, **kwargs):
    |         ^^^^^^^ D102
693 |         out = scatter(x, index, **kwargs)
694 |         out = out.div(self.avg_aggregate_num ** 0.5)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:692:33: ANN003 Missing type annotation for `**kwargs`
    |
692 |     def forward(self, x, index, **kwargs):
    |                                 ^^^^^^^^ ANN003
693 |         out = scatter(x, index, **kwargs)
694 |         out = out.div(self.avg_aggregate_num ** 0.5)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:695:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
693 |         out = scatter(x, index, **kwargs)
694 |         out = out.div(self.avg_aggregate_num ** 0.5)
695 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:698:9: D102 Missing docstring in public method
    |
698 |     def extra_repr(self):
    |         ^^^^^^^^^^ D102
699 |         return f"avg_aggregate_num={self.avg_aggregate_num}"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:702:7: D101 Missing docstring in public class
    |
702 | class EdgeDegreeEmbeddingNetwork(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
703 |     def __init__(self, irreps_node_embedding, irreps_edge_attr, fc_neurons, avg_aggregate_num):
704 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:703:9: ANN204 Missing return type annotation for special method `__init__`
    |
702 | class EdgeDegreeEmbeddingNetwork(torch.nn.Module):
703 |     def __init__(self, irreps_node_embedding, irreps_edge_attr, fc_neurons, avg_aggregate_num):
    |         ^^^^^^^^ ANN204
704 |         super().__init__()
705 |         self.exp = LinearRS(o3.Irreps("1x0e"), irreps_node_embedding,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:703:9: D107 Missing docstring in `__init__`
    |
702 | class EdgeDegreeEmbeddingNetwork(torch.nn.Module):
703 |     def __init__(self, irreps_node_embedding, irreps_edge_attr, fc_neurons, avg_aggregate_num):
    |         ^^^^^^^^ D107
704 |         super().__init__()
705 |         self.exp = LinearRS(o3.Irreps("1x0e"), irreps_node_embedding,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:710:34: RUF005 Consider `[*fc_neurons, self.dw.tp.weight_numel]` instead of concatenation
    |
708 |             irreps_edge_attr, irreps_node_embedding,
709 |             internal_weights=False, bias=False)
710 |         self.rad = RadialProfile(fc_neurons + [self.dw.tp.weight_numel])
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
711 |         for (slice, slice_sqrt_k) in self.dw.slices_sqrt_k.values():
712 |             self.rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
    |
    = help: Replace with `[*fc_neurons, self.dw.tp.weight_numel]`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:711:14: A001 Variable `slice` is shadowing a Python builtin
    |
709 |             internal_weights=False, bias=False)
710 |         self.rad = RadialProfile(fc_neurons + [self.dw.tp.weight_numel])
711 |         for (slice, slice_sqrt_k) in self.dw.slices_sqrt_k.values():
    |              ^^^^^ A001
712 |             self.rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
713 |             self.rad.offset.data[slice] *= slice_sqrt_k
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:718:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
718 |     def forward(self, node_input, edge_attr, edge_scalars, edge_src, edge_dst, batch):
    |         ^^^^^^^ PLR0913
719 |         node_features = torch.ones_like(node_input.narrow(1, 0, 1))
720 |         node_features = self.exp(node_features)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:718:9: D102 Missing docstring in public method
    |
718 |     def forward(self, node_input, edge_attr, edge_scalars, edge_src, edge_dst, batch):
    |         ^^^^^^^ D102
719 |         node_features = torch.ones_like(node_input.narrow(1, 0, 1))
720 |         node_features = self.exp(node_features)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:718:80: ARG002 Unused method argument: `batch`
    |
718 |     def forward(self, node_input, edge_attr, edge_scalars, edge_src, edge_dst, batch):
    |                                                                                ^^^^^ ARG002
719 |         node_features = torch.ones_like(node_input.narrow(1, 0, 1))
720 |         node_features = self.exp(node_features)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:726:16: RET504 Unnecessary assignment to `node_features` before `return` statement
    |
724 |         node_features = self.scale_scatter(edge_features, edge_dst, dim=0,
725 |             dim_size=node_features.shape[0])
726 |         return node_features
    |                ^^^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:729:7: D101 Missing docstring in public class
    |
729 | class EquiformerEnergy(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^ D101
730 |     def __init__(self,
731 |         irreps_in="5x0e",
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:730:9: PLR0913 Too many arguments in function definition (24 > 5)
    |
729 | class EquiformerEnergy(torch.nn.Module):
730 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
731 |         irreps_in="5x0e",
732 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:730:9: ANN204 Missing return type annotation for special method `__init__`
    |
729 | class EquiformerEnergy(torch.nn.Module):
730 |     def __init__(self,
    |         ^^^^^^^^ ANN204
731 |         irreps_in="5x0e",
732 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:730:9: D107 Missing docstring in `__init__`
    |
729 | class EquiformerEnergy(torch.nn.Module):
730 |     def __init__(self,
    |         ^^^^^^^^ D107
731 |         irreps_in="5x0e",
732 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:735:64: B006 Do not use mutable data structures for argument defaults
    |
733 |         irreps_node_attr="1x0e", irreps_sh="1x0e+1x1e+1x2e",
734 |         max_radius=5.0,
735 |         number_of_basis=128, basis_type="gaussian", fc_neurons=[64, 64],
    |                                                                ^^^^^^^^ B006
736 |         irreps_feature="512x0e",
737 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:738:9: FBT002 Boolean default positional argument in function definition
    |
736 |         irreps_feature="512x0e",
737 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
738 |         rescale_degree=False, nonlinear_message=False,
    |         ^^^^^^^^^^^^^^ FBT002
739 |         irreps_mlp_mid="128x0e+64x1e+32x2e",
740 |         norm_layer="layer",
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:738:31: FBT002 Boolean default positional argument in function definition
    |
736 |         irreps_feature="512x0e",
737 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
738 |         rescale_degree=False, nonlinear_message=False,
    |                               ^^^^^^^^^^^^^^^^^ FBT002
739 |         irreps_mlp_mid="128x0e+64x1e+32x2e",
740 |         norm_layer="layer",
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:754:9: ERA001 Found commented-out code
    |
752 |         self.drop_path_rate = drop_path_rate
753 |         self.norm_layer = norm_layer
754 |         # self.task_mean = mean
    |         ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
755 |         # self.task_std = std
756 |         self.scale = scale
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:755:9: ERA001 Found commented-out code
    |
753 |         self.norm_layer = norm_layer
754 |         # self.task_mean = mean
755 |         # self.task_std = std
    |         ^^^^^^^^^^^^^^^^^^^^^ ERA001
756 |         self.scale = scale
757 |         self.register_buffer("atomref", atomref)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:767:27: RUF005 Consider `[self.number_of_basis, *fc_neurons]` instead of concatenation
    |
765 |         self.irreps_edge_attr = o3.Irreps(irreps_sh) if irreps_sh is not None \
766 |             else o3.Irreps.spherical_harmonics(self.lmax)
767 |         self.fc_neurons = [self.number_of_basis] + fc_neurons
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
768 |         self.irreps_head = o3.Irreps(irreps_head)
769 |         self.num_heads = num_heads
    |
    = help: Replace with `[self.number_of_basis, *fc_neurons]`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:803:9: D102 Missing docstring in public method
    |
803 |     def build_blocks(self):
    |         ^^^^^^^^^^^^ D102
804 |         for i in range(self.num_layers):
805 |             if i != (self.num_layers - 1):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:827:9: ANN202 Missing return type annotation for private function `_init_weights`
    |
827 |     def _init_weights(self, m):
    |         ^^^^^^^^^^^^^ ANN202
828 |         if isinstance(m, torch.nn.Linear):
829 |             if m.bias is not None:
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:837:9: D102 Missing docstring in public method
    |
836 |     @torch.jit.ignore
837 |     def no_weight_decay(self):
    |         ^^^^^^^^^^^^^^^ D102
838 |         no_wd_list = []
839 |         named_parameters_list = [name for name, _ in self.named_parameters()]
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:841:17: SIM101 Multiple `isinstance` calls for `module`, merge into a single call
    |
839 |           named_parameters_list = [name for name, _ in self.named_parameters()]
840 |           for module_name, module in self.named_modules():
841 |               if (isinstance(module, torch.nn.Linear)
    |  _________________^
842 | |                 or isinstance(module, torch.nn.LayerNorm)
843 | |                 or isinstance(module, EquivariantLayerNormV2)
844 | |                 or isinstance(module, EquivariantInstanceNorm)
845 | |                 or isinstance(module, EquivariantGraphNorm)
846 | |                 or isinstance(module, GaussianRadialBasisLayer)
847 | |                 or isinstance(module, RadialBasis)):
    | |__________________________________________________^ SIM101
848 |                   for parameter_name, _ in module.named_parameters():
849 |                       if isinstance(module, torch.nn.Linear) and "weight" in parameter_name:
    |
    = help: Merge `isinstance` calls for `module`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:852:21: S101 Use of `assert` detected
    |
850 |                         continue
851 |                     global_parameter_name = module_name + "." + parameter_name
852 |                     assert global_parameter_name in named_parameters_list
    |                     ^^^^^^ S101
853 |                     no_wd_list.append(global_parameter_name)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:858:9: D102 Missing docstring in public method
    |
858 |     def forward(self, pos, batch, node_atom, **kwargs) -> torch.Tensor:
    |         ^^^^^^^ D102
859 | 
860 |         edge_src, edge_dst = radius_graph(pos, r=self.max_radius, batch=batch,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:858:46: ANN003 Missing type annotation for `**kwargs`
    |
858 |     def forward(self, pos, batch, node_atom, **kwargs) -> torch.Tensor:
    |                                              ^^^^^^^^ ANN003
859 | 
860 |         edge_src, edge_dst = radius_graph(pos, r=self.max_radius, batch=batch,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:858:48: ARG002 Unused method argument: `kwargs`
    |
858 |     def forward(self, pos, batch, node_atom, **kwargs) -> torch.Tensor:
    |                                                ^^^^^^ ARG002
859 | 
860 |         edge_src, edge_dst = radius_graph(pos, r=self.max_radius, batch=batch,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:866:9: ERA001 Found commented-out code
    |
864 |             x=edge_vec, normalize=True, normalization="component")
865 | 
866 |         # node_atom = node_atom.new_tensor([-1, 0, -1, -1, -1, -1, 1, 2, 3, 4])[node_atom]
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
867 |         atom_embedding, atom_attr, atom_onehot = self.atom_embed(node_atom)
868 |         edge_length = edge_vec.norm(dim=1)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:891:9: ERA001 Found commented-out code
    |
890 |         # if self.scale is not None:
891 |         #     outputs = self.scale * outputs
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
892 | 
893 |         return outputs
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:893:16: RET504 Unnecessary assignment to `outputs` before `return` statement
    |
891 |         #     outputs = self.scale * outputs
892 | 
893 |         return outputs
    |                ^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:896:5: N802 Function name `Equiformer_l2` should be lowercase
    |
896 | def Equiformer_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^ N802
897 |     model = EquiformerEnergy(
898 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:896:5: D103 Missing docstring in public function
    |
896 | def Equiformer_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^ D103
897 |     model = EquiformerEnergy(
898 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:896:61: ANN003 Missing type annotation for `**kwargs`
    |
896 | def Equiformer_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                             ^^^^^^^^ ANN003
897 |     model = EquiformerEnergy(
898 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:896:63: ARG001 Unused function argument: `kwargs`
    |
896 | def Equiformer_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                               ^^^^^^ ARG001
897 |     model = EquiformerEnergy(
898 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:909:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
907 |         norm_layer="layer",
908 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
909 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:912:5: N802 Function name `Equiformer_nonlinear_l2` should be lowercase
    |
912 | def Equiformer_nonlinear_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^ N802
913 |     model = EquiformerEnergy(
914 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:912:5: D103 Missing docstring in public function
    |
912 | def Equiformer_nonlinear_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^ D103
913 |     model = EquiformerEnergy(
914 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:912:71: ANN003 Missing type annotation for `**kwargs`
    |
912 | def Equiformer_nonlinear_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                       ^^^^^^^^ ANN003
913 |     model = EquiformerEnergy(
914 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:912:73: ARG001 Unused function argument: `kwargs`
    |
912 | def Equiformer_nonlinear_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                         ^^^^^^ ARG001
913 |     model = EquiformerEnergy(
914 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:925:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
923 |         norm_layer="layer",
924 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
925 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:928:5: N802 Function name `Equiformer_nonlinear_l2_e3` should be lowercase
    |
928 | def Equiformer_nonlinear_l2_e3(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
929 |     model = EquiformerEnergy(
930 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:928:5: D103 Missing docstring in public function
    |
928 | def Equiformer_nonlinear_l2_e3(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
929 |     model = EquiformerEnergy(
930 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:928:74: ANN003 Missing type annotation for `**kwargs`
    |
928 | def Equiformer_nonlinear_l2_e3(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                          ^^^^^^^^ ANN003
929 |     model = EquiformerEnergy(
930 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:928:76: ARG001 Unused function argument: `kwargs`
    |
928 | def Equiformer_nonlinear_l2_e3(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                            ^^^^^^ ARG001
929 |     model = EquiformerEnergy(
930 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:941:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
939 |         norm_layer="layer",
940 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
941 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:945:5: N802 Function name `Equiformer_nonlinear_bessel_l2` should be lowercase
    |
944 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.2
945 | def Equiformer_nonlinear_bessel_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
946 |     model = EquiformerEnergy(
947 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:945:5: D103 Missing docstring in public function
    |
944 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.2
945 | def Equiformer_nonlinear_bessel_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
946 |     model = EquiformerEnergy(
947 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:945:78: ANN003 Missing type annotation for `**kwargs`
    |
944 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.2
945 | def Equiformer_nonlinear_bessel_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                              ^^^^^^^^ ANN003
946 |     model = EquiformerEnergy(
947 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:945:80: ARG001 Unused function argument: `kwargs`
    |
944 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.2
945 | def Equiformer_nonlinear_bessel_l2(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                ^^^^^^ ARG001
946 |     model = EquiformerEnergy(
947 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:958:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
956 |         norm_layer="layer",
957 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
958 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:962:5: N802 Function name `Equiformer_nonlinear_bessel_l2_drop01` should be lowercase
    |
961 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.1
962 | def Equiformer_nonlinear_bessel_l2_drop01(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
963 |     model = EquiformerEnergy(
964 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:962:5: D103 Missing docstring in public function
    |
961 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.1
962 | def Equiformer_nonlinear_bessel_l2_drop01(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
963 |     model = EquiformerEnergy(
964 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:962:85: ANN003 Missing type annotation for `**kwargs`
    |
961 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.1
962 | def Equiformer_nonlinear_bessel_l2_drop01(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                     ^^^^^^^^ ANN003
963 |     model = EquiformerEnergy(
964 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:962:87: ARG001 Unused function argument: `kwargs`
    |
961 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.1
962 | def Equiformer_nonlinear_bessel_l2_drop01(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                       ^^^^^^ ARG001
963 |     model = EquiformerEnergy(
964 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:975:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
973 |         norm_layer="layer",
974 |         alpha_drop=0.1, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
975 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:979:5: N802 Function name `Equiformer_nonlinear_bessel_l2_drop00` should be lowercase
    |
978 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.0
979 | def Equiformer_nonlinear_bessel_l2_drop00(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
980 |     model = EquiformerEnergy(
981 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:979:5: D103 Missing docstring in public function
    |
978 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.0
979 | def Equiformer_nonlinear_bessel_l2_drop00(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
980 |     model = EquiformerEnergy(
981 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:979:85: ANN003 Missing type annotation for `**kwargs`
    |
978 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.0
979 | def Equiformer_nonlinear_bessel_l2_drop00(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                     ^^^^^^^^ ANN003
980 |     model = EquiformerEnergy(
981 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:979:87: ARG001 Unused function argument: `kwargs`
    |
978 | # Equiformer, L_max = 2, Bessel radial basis, dropout = 0.0
979 | def Equiformer_nonlinear_bessel_l2_drop00(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                       ^^^^^^ ARG001
980 |     model = EquiformerEnergy(
981 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0.py:992:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
990 |         norm_layer="layer",
991 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
992 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:37:7: D101 Missing docstring in public class
   |
37 | class CosineCutoff(torch.nn.Module):
   |       ^^^^^^^^^^^^ D101
38 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
39 |         super(CosineCutoff, self).__init__()
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:38:9: ANN204 Missing return type annotation for special method `__init__`
   |
37 | class CosineCutoff(torch.nn.Module):
38 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
   |         ^^^^^^^^ ANN204
39 |         super(CosineCutoff, self).__init__()
40 |         self.cutoff_lower = cutoff_lower
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:38:9: D107 Missing docstring in `__init__`
   |
37 | class CosineCutoff(torch.nn.Module):
38 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
   |         ^^^^^^^^ D107
39 |         super(CosineCutoff, self).__init__()
40 |         self.cutoff_lower = cutoff_lower
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:39:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
37 | class CosineCutoff(torch.nn.Module):
38 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
39 |         super(CosineCutoff, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^ UP008
40 |         self.cutoff_lower = cutoff_lower
41 |         self.cutoff_upper = cutoff_upper
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:43:9: D102 Missing docstring in public method
   |
41 |         self.cutoff_upper = cutoff_upper
42 | 
43 |     def forward(self, distances):
   |         ^^^^^^^ D102
44 |         if self.cutoff_lower > 0:
45 |             cutoffs = 0.5 * (
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:60:20: RET504 Unnecessary assignment to `cutoffs` before `return` statement
   |
58 |             cutoffs = cutoffs * (distances < self.cutoff_upper).float()
59 |             cutoffs = cutoffs * (distances > self.cutoff_lower).float()
60 |             return cutoffs
   |                    ^^^^^^^ RET504
61 |         else:
62 |             cutoffs = 0.5 * (torch.cos(distances * math.pi / self.cutoff_upper) + 1.0)
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:61:9: RET505 Unnecessary `else` after `return` statement
   |
59 |             cutoffs = cutoffs * (distances > self.cutoff_lower).float()
60 |             return cutoffs
61 |         else:
   |         ^^^^ RET505
62 |             cutoffs = 0.5 * (torch.cos(distances * math.pi / self.cutoff_upper) + 1.0)
63 |             # remove contributions beyond the cutoff radius
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:65:20: RET504 Unnecessary assignment to `cutoffs` before `return` statement
   |
63 |             # remove contributions beyond the cutoff radius
64 |             cutoffs = cutoffs * (distances < self.cutoff_upper).float()
65 |             return cutoffs
   |                    ^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:69:7: D101 Missing docstring in public class
   |
68 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
69 | class ExpNormalSmearing(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^ D101
70 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
71 |         super(ExpNormalSmearing, self).__init__()
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:70:9: ANN204 Missing return type annotation for special method `__init__`
   |
68 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
69 | class ExpNormalSmearing(torch.nn.Module):
70 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
   |         ^^^^^^^^ ANN204
71 |         super(ExpNormalSmearing, self).__init__()
72 |         self.cutoff_lower = cutoff_lower
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:70:9: D107 Missing docstring in `__init__`
   |
68 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
69 | class ExpNormalSmearing(torch.nn.Module):
70 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
   |         ^^^^^^^^ D107
71 |         super(ExpNormalSmearing, self).__init__()
72 |         self.cutoff_lower = cutoff_lower
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:70:72: FBT002 Boolean default positional argument in function definition
   |
68 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
69 | class ExpNormalSmearing(torch.nn.Module):
70 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
   |                                                                        ^^^^^^^^^ FBT002
71 |         super(ExpNormalSmearing, self).__init__()
72 |         self.cutoff_lower = cutoff_lower
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:71:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
69 | class ExpNormalSmearing(torch.nn.Module):
70 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
71 |         super(ExpNormalSmearing, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
72 |         self.cutoff_lower = cutoff_lower
73 |         self.cutoff_upper = cutoff_upper
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:82:46: F821 Undefined name `nn`
   |
80 |         means, betas = self._initial_params()
81 |         if trainable:
82 |             self.register_parameter("means", nn.Parameter(means))
   |                                              ^^ F821
83 |             self.register_parameter("betas", nn.Parameter(betas))
84 |         else:
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:83:46: F821 Undefined name `nn`
   |
81 |         if trainable:
82 |             self.register_parameter("means", nn.Parameter(means))
83 |             self.register_parameter("betas", nn.Parameter(betas))
   |                                              ^^ F821
84 |         else:
85 |             self.register_buffer("means", means)
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:88:9: ANN202 Missing return type annotation for private function `_initial_params`
   |
86 |             self.register_buffer("betas", betas)
87 | 
88 |     def _initial_params(self):
   |         ^^^^^^^^^^^^^^^ ANN202
89 |         # initialize means and betas according to the default values in PhysNet
90 |         # https://pubs.acs.org/doi/10.1021/acs.jctc.9b00181
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:100:9: D102 Missing docstring in public method
    |
 98 |         return means, betas
 99 | 
100 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
101 |         means, betas = self._initial_params()
102 |         self.means.data.copy_(means)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:105:9: D102 Missing docstring in public method
    |
103 |         self.betas.data.copy_(betas)
104 | 
105 |     def forward(self, dist):
    |         ^^^^^^^ D102
106 |         dist = dist.unsqueeze(-1)
107 |         return self.cutoff_fn(dist) * torch.exp(
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:113:7: D101 Missing docstring in public class
    |
113 | class EquiformerEnergyForce(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^^ D101
114 |     def __init__(self,
115 |         irreps_in="64x0e",
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:114:9: PLR0913 Too many arguments in function definition (23 > 5)
    |
113 | class EquiformerEnergyForce(torch.nn.Module):
114 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
115 |         irreps_in="64x0e",
116 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:114:9: ANN204 Missing return type annotation for special method `__init__`
    |
113 | class EquiformerEnergyForce(torch.nn.Module):
114 |     def __init__(self,
    |         ^^^^^^^^ ANN204
115 |         irreps_in="64x0e",
116 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:114:9: D107 Missing docstring in `__init__`
    |
113 | class EquiformerEnergyForce(torch.nn.Module):
114 |     def __init__(self,
    |         ^^^^^^^^ D107
115 |         irreps_in="64x0e",
116 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:119:64: B006 Do not use mutable data structures for argument defaults
    |
117 |         irreps_node_attr="1x0e", irreps_sh="1x0e+1x1e+1x2e",
118 |         max_radius=5.0,
119 |         number_of_basis=128, basis_type="gaussian", fc_neurons=[64, 64],
    |                                                                ^^^^^^^^ B006
120 |         irreps_feature="512x0e",
121 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:122:9: FBT002 Boolean default positional argument in function definition
    |
120 |         irreps_feature="512x0e",
121 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
122 |         rescale_degree=False, nonlinear_message=False,
    |         ^^^^^^^^^^^^^^ FBT002
123 |         irreps_mlp_mid="128x0e+64x1e+32x2e",
124 |         use_attn_head=False,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:122:31: FBT002 Boolean default positional argument in function definition
    |
120 |         irreps_feature="512x0e",
121 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
122 |         rescale_degree=False, nonlinear_message=False,
    |                               ^^^^^^^^^^^^^^^^^ FBT002
123 |         irreps_mlp_mid="128x0e+64x1e+32x2e",
124 |         use_attn_head=False,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:124:9: FBT002 Boolean default positional argument in function definition
    |
122 |         rescale_degree=False, nonlinear_message=False,
123 |         irreps_mlp_mid="128x0e+64x1e+32x2e",
124 |         use_attn_head=False,
    |         ^^^^^^^^^^^^^ FBT002
125 |         norm_layer="layer",
126 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:139:9: ERA001 Found commented-out code
    |
137 |         self.use_attn_head = use_attn_head
138 |         self.norm_layer = norm_layer
139 |         # self.task_mean = mean
    |         ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
140 |         # self.task_std = std
141 |         # self.scale = scale
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:140:9: ERA001 Found commented-out code
    |
138 |         self.norm_layer = norm_layer
139 |         # self.task_mean = mean
140 |         # self.task_std = std
    |         ^^^^^^^^^^^^^^^^^^^^^ ERA001
141 |         # self.scale = scale
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:141:9: ERA001 Found commented-out code
    |
139 |         # self.task_mean = mean
140 |         # self.task_std = std
141 |         # self.scale = scale
    |         ^^^^^^^^^^^^^^^^^^^^ ERA001
142 | 
143 |         self.irreps_node_attr = o3.Irreps(irreps_node_attr)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:151:27: RUF005 Consider `[self.number_of_basis, *fc_neurons]` instead of concatenation
    |
149 |         self.irreps_edge_attr = o3.Irreps(irreps_sh) if irreps_sh is not None \
150 |             else o3.Irreps.spherical_harmonics(self.lmax)
151 |         self.fc_neurons = [self.number_of_basis] + fc_neurons
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
152 |         self.irreps_head = o3.Irreps(irreps_head)
153 |         self.num_heads = num_heads
    |
    = help: Replace with `[self.number_of_basis, *fc_neurons]`

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:204:9: D102 Missing docstring in public method
    |
204 |     def build_blocks(self):
    |         ^^^^^^^^^^^^ D102
205 |         for i in range(self.num_layers):
206 |             if i != (self.num_layers - 1):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:228:9: ANN202 Missing return type annotation for private function `_init_weights`
    |
228 |     def _init_weights(self, m):
    |         ^^^^^^^^^^^^^ ANN202
229 |         if isinstance(m, torch.nn.Linear):
230 |             if m.bias is not None:
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:238:9: D102 Missing docstring in public method
    |
237 |     @torch.jit.ignore
238 |     def no_weight_decay(self):
    |         ^^^^^^^^^^^^^^^ D102
239 |         no_wd_list = []
240 |         named_parameters_list = [name for name, _ in self.named_parameters()]
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:242:17: SIM101 Multiple `isinstance` calls for `module`, merge into a single call
    |
240 |           named_parameters_list = [name for name, _ in self.named_parameters()]
241 |           for module_name, module in self.named_modules():
242 |               if (isinstance(module, torch.nn.Linear)
    |  _________________^
243 | |                 or isinstance(module, torch.nn.LayerNorm)
244 | |                 or isinstance(module, EquivariantLayerNormV2)
245 | |                 or isinstance(module, EquivariantInstanceNorm)
246 | |                 or isinstance(module, EquivariantGraphNorm)
247 | |                 or isinstance(module, GaussianRadialBasisLayer)
248 | |                 or isinstance(module, RadialBasis)):
    | |__________________________________________________^ SIM101
249 |                   for parameter_name, _ in module.named_parameters():
250 |                       if isinstance(module, torch.nn.Linear) and "weight" in parameter_name:
    |
    = help: Merge `isinstance` calls for `module`

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:253:21: S101 Use of `assert` detected
    |
251 |                         continue
252 |                     global_parameter_name = module_name + "." + parameter_name
253 |                     assert global_parameter_name in named_parameters_list
    |                     ^^^^^^ S101
254 |                     no_wd_list.append(global_parameter_name)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:262:9: D102 Missing docstring in public method
    |
260 |     # https://github.com/Open-Catalyst-Project/ocp/blob/main/ocpmodels/models/spinconv.py#L186
261 |     @torch.enable_grad()
262 |     def forward(self, node_atom, pos, batch):
    |         ^^^^^^^ D102
263 | 
264 |         pos = pos.requires_grad_(True)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:264:34: FBT003 Boolean positional value in function call
    |
262 |     def forward(self, node_atom, pos, batch):
263 | 
264 |         pos = pos.requires_grad_(True)
    |                                  ^^^^ FBT003
265 | 
266 |         edge_src, edge_dst = radius_graph(pos, r=self.max_radius, batch=batch,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:299:9: ERA001 Found commented-out code
    |
298 |         # if self.scale is not None:
299 |         #     outputs = self.scale * outputs
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
300 | 
301 |         energy = outputs
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:303:9: ERA001 Found commented-out code
    |
301 |         energy = outputs
302 |         # # https://github.com/Open-Catalyst-Project/ocp/blob/main/ocpmodels/models/spinconv.py#L321-L328
303 |         # forces = -1 * (
    |         ^^^^^^^^^^^^^^^^^ ERA001
304 |         #             torch.autograd.grad(
305 |         #                 energy,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:307:9: ERA001 Found commented-out code
    |
305 |         #                 energy,
306 |         #                 pos,
307 |         #                 grad_outputs=torch.ones_like(energy),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
308 |         #                 create_graph=True,
309 |         #             )[0]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:308:9: ERA001 Found commented-out code
    |
306 |         #                 pos,
307 |         #                 grad_outputs=torch.ones_like(energy),
308 |         #                 create_graph=True,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
309 |         #             )[0]
310 |         #         )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:310:9: ERA001 Found commented-out code
    |
308 |         #                 create_graph=True,
309 |         #             )[0]
310 |         #         )
    |         ^^^^^^^^^^^ ERA001
311 |         return energy
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:311:16: RET504 Unnecessary assignment to `energy` before `return` statement
    |
309 |         #             )[0]
310 |         #         )
311 |         return energy
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:314:5: N802 Function name `Equiformer_l2_energy_force` should be lowercase
    |
314 | def Equiformer_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
315 |     model = EquiformerEnergyForce(
316 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:314:5: D103 Missing docstring in public function
    |
314 | def Equiformer_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
315 |     model = EquiformerEnergyForce(
316 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:314:74: ANN003 Missing type annotation for `**kwargs`
    |
314 | def Equiformer_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                          ^^^^^^^^ ANN003
315 |     model = EquiformerEnergyForce(
316 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:314:76: ARG001 Unused function argument: `kwargs`
    |
314 | def Equiformer_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                            ^^^^^^ ARG001
315 |     model = EquiformerEnergyForce(
316 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:327:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
325 |         norm_layer="layer",
326 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
327 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:330:5: N802 Function name `Equiformer_nonlinear_l2_energy_force` should be lowercase
    |
330 | def Equiformer_nonlinear_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
331 |     model = EquiformerEnergyForce(
332 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:330:5: D103 Missing docstring in public function
    |
330 | def Equiformer_nonlinear_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
331 |     model = EquiformerEnergyForce(
332 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:330:84: ANN003 Missing type annotation for `**kwargs`
    |
330 | def Equiformer_nonlinear_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                    ^^^^^^^^ ANN003
331 |     model = EquiformerEnergyForce(
332 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:330:86: ARG001 Unused function argument: `kwargs`
    |
330 | def Equiformer_nonlinear_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                      ^^^^^^ ARG001
331 |     model = EquiformerEnergyForce(
332 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:343:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
341 |         norm_layer="layer",
342 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
343 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:346:5: N802 Function name `Equiformer_nonlinear_l2_e3_energy_force` should be lowercase
    |
346 | def Equiformer_nonlinear_l2_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
347 |     model = EquiformerEnergyForce(
348 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:346:5: D103 Missing docstring in public function
    |
346 | def Equiformer_nonlinear_l2_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
347 |     model = EquiformerEnergyForce(
348 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:346:87: ANN003 Missing type annotation for `**kwargs`
    |
346 | def Equiformer_nonlinear_l2_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                       ^^^^^^^^ ANN003
347 |     model = EquiformerEnergyForce(
348 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:346:89: ARG001 Unused function argument: `kwargs`
    |
346 | def Equiformer_nonlinear_l2_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                         ^^^^^^ ARG001
347 |     model = EquiformerEnergyForce(
348 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:359:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
357 |         norm_layer="layer",
358 |         alpha_drop=0.2, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
359 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:362:5: N802 Function name `Equiformer_nonlinear_bessel_l2_energy_force` should be lowercase
    |
362 | def Equiformer_nonlinear_bessel_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
363 |     model = EquiformerEnergyForce(
364 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:362:5: D103 Missing docstring in public function
    |
362 | def Equiformer_nonlinear_bessel_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
363 |     model = EquiformerEnergyForce(
364 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:362:91: ANN003 Missing type annotation for `**kwargs`
    |
362 | def Equiformer_nonlinear_bessel_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                           ^^^^^^^^ ANN003
363 |     model = EquiformerEnergyForce(
364 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:362:93: ARG001 Unused function argument: `kwargs`
    |
362 | def Equiformer_nonlinear_bessel_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                             ^^^^^^ ARG001
363 |     model = EquiformerEnergyForce(
364 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:375:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
373 |         norm_layer="layer",
374 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
375 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:378:5: N802 Function name `Equiformer_nonlinear_exp_l2_energy_force` should be lowercase
    |
378 | def Equiformer_nonlinear_exp_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
379 |     model = EquiformerEnergyForce(
380 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:378:5: D103 Missing docstring in public function
    |
378 | def Equiformer_nonlinear_exp_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
379 |     model = EquiformerEnergyForce(
380 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:378:88: ANN003 Missing type annotation for `**kwargs`
    |
378 | def Equiformer_nonlinear_exp_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                        ^^^^^^^^ ANN003
379 |     model = EquiformerEnergyForce(
380 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:378:90: ARG001 Unused function argument: `kwargs`
    |
378 | def Equiformer_nonlinear_exp_l2_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                          ^^^^^^ ARG001
379 |     model = EquiformerEnergyForce(
380 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:391:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
389 |         norm_layer="layer",
390 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
391 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:394:5: N802 Function name `Equiformer_nonlinear_exp_l3_energy_force` should be lowercase
    |
394 | def Equiformer_nonlinear_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
395 |     model = EquiformerEnergyForce(
396 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:394:5: D103 Missing docstring in public function
    |
394 | def Equiformer_nonlinear_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
395 |     model = EquiformerEnergyForce(
396 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:394:88: ANN003 Missing type annotation for `**kwargs`
    |
394 | def Equiformer_nonlinear_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                        ^^^^^^^^ ANN003
395 |     model = EquiformerEnergyForce(
396 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:394:90: ARG001 Unused function argument: `kwargs`
    |
394 | def Equiformer_nonlinear_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                          ^^^^^^ ARG001
395 |     model = EquiformerEnergyForce(
396 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:407:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
405 |         norm_layer="layer",
406 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
407 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:410:5: N802 Function name `Equiformer_nonlinear_attn_exp_l3_energy_force` should be lowercase
    |
410 | def Equiformer_nonlinear_attn_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
411 |     model = EquiformerEnergyForce(
412 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:410:5: D103 Missing docstring in public function
    |
410 | def Equiformer_nonlinear_attn_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
411 |     model = EquiformerEnergyForce(
412 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:410:93: ANN003 Missing type annotation for `**kwargs`
    |
410 | def Equiformer_nonlinear_attn_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                             ^^^^^^^^ ANN003
411 |     model = EquiformerEnergyForce(
412 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:410:95: ARG001 Unused function argument: `kwargs`
    |
410 | def Equiformer_nonlinear_attn_exp_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                               ^^^^^^ ARG001
411 |     model = EquiformerEnergyForce(
412 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:424:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
422 |         norm_layer="layer",
423 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
424 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:427:5: N802 Function name `Equiformer_nonlinear_exp_l3_e3_energy_force` should be lowercase
    |
427 | def Equiformer_nonlinear_exp_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
428 |     model = EquiformerEnergyForce(
429 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:427:5: D103 Missing docstring in public function
    |
427 | def Equiformer_nonlinear_exp_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
428 |     model = EquiformerEnergyForce(
429 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:427:91: ANN003 Missing type annotation for `**kwargs`
    |
427 | def Equiformer_nonlinear_exp_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                           ^^^^^^^^ ANN003
428 |     model = EquiformerEnergyForce(
429 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:427:93: ARG001 Unused function argument: `kwargs`
    |
427 | def Equiformer_nonlinear_exp_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                             ^^^^^^ ARG001
428 |     model = EquiformerEnergyForce(
429 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:440:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
438 |         norm_layer="layer",
439 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
440 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:443:5: N802 Function name `Equiformer_nonlinear_bessel_l3_energy_force` should be lowercase
    |
443 | def Equiformer_nonlinear_bessel_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
444 |     model = EquiformerEnergyForce(
445 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:443:5: D103 Missing docstring in public function
    |
443 | def Equiformer_nonlinear_bessel_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
444 |     model = EquiformerEnergyForce(
445 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:443:91: ANN003 Missing type annotation for `**kwargs`
    |
443 | def Equiformer_nonlinear_bessel_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                           ^^^^^^^^ ANN003
444 |     model = EquiformerEnergyForce(
445 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:443:93: ARG001 Unused function argument: `kwargs`
    |
443 | def Equiformer_nonlinear_bessel_l3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                             ^^^^^^ ARG001
444 |     model = EquiformerEnergyForce(
445 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:456:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
454 |         norm_layer="layer",
455 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
456 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:459:5: N802 Function name `Equiformer_nonlinear_bessel_l3_e3_energy_force` should be lowercase
    |
459 | def Equiformer_nonlinear_bessel_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
460 |     model = EquiformerEnergyForce(
461 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:459:5: D103 Missing docstring in public function
    |
459 | def Equiformer_nonlinear_bessel_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
460 |     model = EquiformerEnergyForce(
461 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:459:94: ANN003 Missing type annotation for `**kwargs`
    |
459 | def Equiformer_nonlinear_bessel_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                              ^^^^^^^^ ANN003
460 |     model = EquiformerEnergyForce(
461 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:459:96: ARG001 Unused function argument: `kwargs`
    |
459 | def Equiformer_nonlinear_bessel_l3_e3_energy_force(irreps_in, radius, num_basis, node_class, **kwargs):
    |                                                                                                ^^^^^^ ARG001
460 |     model = EquiformerEnergyForce(
461 |         irreps_in=irreps_in,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_01.py:472:12: RET504 Unnecessary assignment to `model` before `return` statement
    |
470 |         norm_layer="layer",
471 |         alpha_drop=0.0, proj_drop=0.0, out_drop=0.0, drop_path_rate=0.0)
472 |     return model
    |            ^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:37:5: D103 Missing docstring in public function
   |
37 | def get_norm_layer(norm_type):
   |     ^^^^^^^^^^^^^^ D103
38 |     if norm_type == "graph":
39 |         return EquivariantGraphNorm
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:40:5: RET505 Unnecessary `elif` after `return` statement
   |
38 |     if norm_type == "graph":
39 |         return EquivariantGraphNorm
40 |     elif norm_type == "instance":
   |     ^^^^ RET505
41 |         return EquivariantInstanceNorm
42 |     elif norm_type == "layer":
   |
   = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:49:15: TRY003 Avoid specifying long messages outside the exception class
   |
47 |         return None
48 |     else:
49 |         raise ValueError(f"Norm type {norm_type} not supported.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:49:26: EM102 Exception must not use an f-string literal, assign to variable first
   |
47 |         return None
48 |     else:
49 |         raise ValueError(f"Norm type {norm_type} not supported.")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:52:7: D101 Missing docstring in public class
   |
52 | class SmoothLeakyReLU(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^ D101
53 |     def __init__(self, negative_slope=0.2):
54 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:53:9: ANN204 Missing return type annotation for special method `__init__`
   |
52 | class SmoothLeakyReLU(torch.nn.Module):
53 |     def __init__(self, negative_slope=0.2):
   |         ^^^^^^^^ ANN204
54 |         super().__init__()
55 |         self.alpha = negative_slope
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:53:9: D107 Missing docstring in `__init__`
   |
52 | class SmoothLeakyReLU(torch.nn.Module):
53 |     def __init__(self, negative_slope=0.2):
   |         ^^^^^^^^ D107
54 |         super().__init__()
55 |         self.alpha = negative_slope
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:58:9: D102 Missing docstring in public method
   |
58 |     def forward(self, x):
   |         ^^^^^^^ D102
59 |         x1 = ((1 + self.alpha) / 2) * x
60 |         x2 = ((1 - self.alpha) / 2) * x * (2 * torch.sigmoid(x) - 1)
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:64:9: D102 Missing docstring in public method
   |
64 |     def extra_repr(self):
   |         ^^^^^^^^^^ D102
65 |         return f"negative_slope={self.alpha}"
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:68:5: D103 Missing docstring in public function
   |
68 | def get_mul_0(irreps):
   |     ^^^^^^^^^ D103
69 |     mul_0 = 0
70 |     for mul, ir in irreps:
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:76:7: D101 Missing docstring in public class
   |
76 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
77 | 
78 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:78:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
76 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
77 | 
78 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |         ^^^^^^^^ PLR0913
79 |         bias=True, rescale=True,
80 |         internal_weights=None, shared_weights=None,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:78:9: ANN204 Missing return type annotation for special method `__init__`
   |
76 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
77 | 
78 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |         ^^^^^^^^ ANN204
79 |         bias=True, rescale=True,
80 |         internal_weights=None, shared_weights=None,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:78:9: D107 Missing docstring in `__init__`
   |
76 | class FullyConnectedTensorProductRescaleNorm(FullyConnectedTensorProductRescale):
77 | 
78 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |         ^^^^^^^^ D107
79 |         bias=True, rescale=True,
80 |         internal_weights=None, shared_weights=None,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:79:9: FBT002 Boolean default positional argument in function definition
   |
78 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
79 |         bias=True, rescale=True,
   |         ^^^^ FBT002
80 |         internal_weights=None, shared_weights=None,
81 |         normalization=None, norm_layer="graph"):
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:79:20: FBT002 Boolean default positional argument in function definition
   |
78 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
79 |         bias=True, rescale=True,
   |                    ^^^^^^^ FBT002
80 |         internal_weights=None, shared_weights=None,
81 |         normalization=None, norm_layer="graph"):
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:90:9: D102 Missing docstring in public method
   |
90 |     def forward(self, x, y, batch, weight=None):
   |         ^^^^^^^ D102
91 |         out = self.forward_tp_rescale_bias(x, y, weight)
92 |         out = self.norm(out, batch=batch)
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:93:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
91 |         out = self.forward_tp_rescale_bias(x, y, weight)
92 |         out = self.norm(out, batch=batch)
93 |         return out
   |                ^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:96:7: D101 Missing docstring in public class
   |
96 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
97 | 
98 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
   |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:98:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
 96 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
 97 | 
 98 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ PLR0913
 99 |         bias=True, rescale=True,
100 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:98:9: ANN204 Missing return type annotation for special method `__init__`
    |
 96 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
 97 | 
 98 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ ANN204
 99 |         bias=True, rescale=True,
100 |         internal_weights=None, shared_weights=None,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:98:9: D107 Missing docstring in `__init__`
    |
 96 | class FullyConnectedTensorProductRescaleNormSwishGate(FullyConnectedTensorProductRescaleNorm):
 97 | 
 98 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ D107
 99 |         bias=True, rescale=True,
100 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:99:9: FBT002 Boolean default positional argument in function definition
    |
 98 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
 99 |         bias=True, rescale=True,
    |         ^^^^ FBT002
100 |         internal_weights=None, shared_weights=None,
101 |         normalization=None, norm_layer="graph"):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:99:20: FBT002 Boolean default positional argument in function definition
    |
 98 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
 99 |         bias=True, rescale=True,
    |                    ^^^^^^^ FBT002
100 |         internal_weights=None, shared_weights=None,
101 |         normalization=None, norm_layer="graph"):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:119:9: D102 Missing docstring in public method
    |
119 |     def forward(self, x, y, batch, weight=None):
    |         ^^^^^^^ D102
120 |         out = self.forward_tp_rescale_bias(x, y, weight)
121 |         out = self.norm(out, batch=batch)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:123:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
121 |         out = self.norm(out, batch=batch)
122 |         out = self.gate(out)
123 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:126:7: D101 Missing docstring in public class
    |
126 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
127 | 
128 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:128:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
126 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
127 | 
128 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ PLR0913
129 |         bias=True, rescale=True,
130 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:128:9: ANN204 Missing return type annotation for special method `__init__`
    |
126 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
127 | 
128 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ ANN204
129 |         bias=True, rescale=True,
130 |         internal_weights=None, shared_weights=None,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:128:9: D107 Missing docstring in `__init__`
    |
126 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
127 | 
128 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
    |         ^^^^^^^^ D107
129 |         bias=True, rescale=True,
130 |         internal_weights=None, shared_weights=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:129:9: FBT002 Boolean default positional argument in function definition
    |
128 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
129 |         bias=True, rescale=True,
    |         ^^^^ FBT002
130 |         internal_weights=None, shared_weights=None,
131 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:129:20: FBT002 Boolean default positional argument in function definition
    |
128 |     def __init__(self, irreps_in1, irreps_in2, irreps_out,
129 |         bias=True, rescale=True,
    |                    ^^^^^^^ FBT002
130 |         internal_weights=None, shared_weights=None,
131 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:149:9: D102 Missing docstring in public method
    |
149 |     def forward(self, x, y, weight=None):
    |         ^^^^^^^ D102
150 |         out = self.forward_tp_rescale_bias(x, y, weight)
151 |         out = self.gate(out)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:152:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
150 |         out = self.forward_tp_rescale_bias(x, y, weight)
151 |         out = self.gate(out)
152 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:155:5: N802 Function name `DepthwiseTensorProduct` should be lowercase
    |
155 | def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
    |     ^^^^^^^^^^^^^^^^^^^^^^ N802
156 |     internal_weights=False, bias=True):
157 |     """The irreps of output is pre-determined.
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:156:5: FBT002 Boolean default positional argument in function definition
    |
155 | def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
156 |     internal_weights=False, bias=True):
    |     ^^^^^^^^^^^^^^^^ FBT002
157 |     """The irreps of output is pre-determined.
158 |     `irreps_node_output` is used to get certain types of vectors.
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:156:29: FBT002 Boolean default positional argument in function definition
    |
155 | def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
156 |     internal_weights=False, bias=True):
    |                             ^^^^ FBT002
157 |     """The irreps of output is pre-determined.
158 |     `irreps_node_output` is used to get certain types of vectors.
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:157:5: D205 1 blank line required between summary line and description
    |
155 |   def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
156 |       internal_weights=False, bias=True):
157 |       """The irreps of output is pre-determined.
    |  _____^
158 | |     `irreps_node_output` is used to get certain types of vectors.
159 | |     """
    | |_______^ D205
160 |       irreps_output = []
161 |       instructions = []
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:157:5: D401 First line of docstring should be in imperative mood: "The irreps of output is pre-determined."
    |
155 |   def DepthwiseTensorProduct(irreps_node_input, irreps_edge_attr, irreps_node_output,
156 |       internal_weights=False, bias=True):
157 |       """The irreps of output is pre-determined.
    |  _____^
158 | |     `irreps_node_output` is used to get certain types of vectors.
159 | |     """
    | |_______^ D401
160 |       irreps_output = []
161 |       instructions = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:180:12: RET504 Unnecessary assignment to `tp` before `return` statement
    |
178 |             shared_weights=internal_weights,
179 |             bias=bias, rescale=_RESCALE)
180 |     return tp
    |            ^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:184:5: D200 One-line docstring should fit on one line
    |
183 |   class SeparableFCTP(torch.nn.Module):
184 |       """Use separable FCTP for spatial convolution.
    |  _____^
185 | |     """
    | |_______^ D200
186 |   
187 |       def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:187:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
185 |     """
186 | 
187 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |         ^^^^^^^^ PLR0913
188 |         fc_neurons, use_activation=False, norm_layer="graph",
189 |         internal_weights=False):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:187:9: ANN204 Missing return type annotation for special method `__init__`
    |
185 |     """
186 | 
187 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |         ^^^^^^^^ ANN204
188 |         fc_neurons, use_activation=False, norm_layer="graph",
189 |         internal_weights=False):
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:187:9: D107 Missing docstring in `__init__`
    |
185 |     """
186 | 
187 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
    |         ^^^^^^^^ D107
188 |         fc_neurons, use_activation=False, norm_layer="graph",
189 |         internal_weights=False):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:188:21: FBT002 Boolean default positional argument in function definition
    |
187 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
188 |         fc_neurons, use_activation=False, norm_layer="graph",
    |                     ^^^^^^^^^^^^^^ FBT002
189 |         internal_weights=False):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:189:9: FBT002 Boolean default positional argument in function definition
    |
187 |     def __init__(self, irreps_node_input, irreps_edge_attr, irreps_node_output,
188 |         fc_neurons, use_activation=False, norm_layer="graph",
189 |         internal_weights=False):
    |         ^^^^^^^^^^^^^^^^ FBT002
190 | 
191 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:202:42: RUF005 Consider `[*fc_neurons, self.dtp.tp.weight_numel]` instead of concatenation
    |
200 |         self.dtp_rad = None
201 |         if fc_neurons is not None:
202 |             self.dtp_rad = RadialProfile(fc_neurons + [self.dtp.tp.weight_numel])
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
203 |             for (slice, slice_sqrt_k) in self.dtp.slices_sqrt_k.values():
204 |                 self.dtp_rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
    |
    = help: Replace with `[*fc_neurons, self.dtp.tp.weight_numel]`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:203:18: A001 Variable `slice` is shadowing a Python builtin
    |
201 |         if fc_neurons is not None:
202 |             self.dtp_rad = RadialProfile(fc_neurons + [self.dtp.tp.weight_numel])
203 |             for (slice, slice_sqrt_k) in self.dtp.slices_sqrt_k.values():
    |                  ^^^^^ A001
204 |                 self.dtp_rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
205 |                 self.dtp_rad.offset.data[slice] *= slice_sqrt_k
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:231:72: ANN003 Missing type annotation for `**kwargs`
    |
231 |     def forward(self, node_input, edge_attr, edge_scalars, batch=None, **kwargs):
    |                                                                        ^^^^^^^^ ANN003
232 |         """Depthwise TP: `node_input` TP `edge_attr`, with TP parametrized by
233 |         self.dtp_rad(`edge_scalars`).
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:231:74: ARG002 Unused method argument: `kwargs`
    |
231 |     def forward(self, node_input, edge_attr, edge_scalars, batch=None, **kwargs):
    |                                                                          ^^^^^^ ARG002
232 |         """Depthwise TP: `node_input` TP `edge_attr`, with TP parametrized by
233 |         self.dtp_rad(`edge_scalars`).
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:232:9: D205 1 blank line required between summary line and description
    |
231 |       def forward(self, node_input, edge_attr, edge_scalars, batch=None, **kwargs):
232 |           """Depthwise TP: `node_input` TP `edge_attr`, with TP parametrized by
    |  _________^
233 | |         self.dtp_rad(`edge_scalars`).
234 | |         """
    | |___________^ D205
235 |           weight = None
236 |           if self.dtp_rad is not None and edge_scalars is not None:
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:249:5: D205 1 blank line required between summary line and description
    |
247 |   @compile_mode("script")
248 |   class Vec2AttnHeads(torch.nn.Module):
249 |       """Reshape vectors of shape [N, irreps_mid] to vectors of shape
    |  _____^
250 | |     [N, num_heads, irreps_head].
251 | |     """
    | |_______^ D205
252 |   
253 |       def __init__(self, irreps_head, num_heads):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:253:9: ANN204 Missing return type annotation for special method `__init__`
    |
251 |     """
252 | 
253 |     def __init__(self, irreps_head, num_heads):
    |         ^^^^^^^^ ANN204
254 |         super().__init__()
255 |         self.num_heads = num_heads
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:253:9: D107 Missing docstring in `__init__`
    |
251 |     """
252 | 
253 |     def __init__(self, irreps_head, num_heads):
    |         ^^^^^^^^ D107
254 |         super().__init__()
255 |         self.num_heads = num_heads
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:268:9: D102 Missing docstring in public method
    |
268 |     def forward(self, x):
    |         ^^^^^^^ D102
269 |         N, _ = x.shape
270 |         out = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:269:9: N806 Variable `N` in function should be lowercase
    |
268 |     def forward(self, x):
269 |         N, _ = x.shape
    |         ^ N806
270 |         out = []
271 |         for ir_idx, (start_idx, end_idx) in enumerate(self.mid_in_indices):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:271:13: B007 Loop control variable `ir_idx` not used within loop body
    |
269 |         N, _ = x.shape
270 |         out = []
271 |         for ir_idx, (start_idx, end_idx) in enumerate(self.mid_in_indices):
    |             ^^^^^^ B007
272 |             temp = x.narrow(1, start_idx, end_idx - start_idx)
273 |             temp = temp.reshape(N, self.num_heads, -1)
    |
    = help: Rename unused `ir_idx` to `_ir_idx`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:276:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
274 |             out.append(temp)
275 |         out = torch.cat(out, dim=2)
276 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:279:9: ANN204 Missing return type annotation for special method `__repr__`
    |
279 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
280 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head}, num_heads={self.num_heads})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:279:9: D105 Missing docstring in magic method
    |
279 |     def __repr__(self):
    |         ^^^^^^^^ D105
280 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head}, num_heads={self.num_heads})"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:285:5: D205 1 blank line required between summary line and description
    |
283 |   @compile_mode("script")
284 |   class AttnHeads2Vec(torch.nn.Module):
285 |       """Convert vectors of shape [N, num_heads, irreps_head] into
    |  _____^
286 | |     vectors of shape [N, irreps_head * num_heads].
287 | |     """
    | |_______^ D205
288 |   
289 |       def __init__(self, irreps_head):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:289:9: ANN204 Missing return type annotation for special method `__init__`
    |
287 |     """
288 | 
289 |     def __init__(self, irreps_head):
    |         ^^^^^^^^ ANN204
290 |         super().__init__()
291 |         self.irreps_head = irreps_head
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:289:9: D107 Missing docstring in `__init__`
    |
287 |     """
288 | 
289 |     def __init__(self, irreps_head):
    |         ^^^^^^^^ D107
290 |         super().__init__()
291 |         self.irreps_head = irreps_head
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:299:9: D102 Missing docstring in public method
    |
299 |     def forward(self, x):
    |         ^^^^^^^ D102
300 |         N, _, _ = x.shape
301 |         out = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:300:9: N806 Variable `N` in function should be lowercase
    |
299 |     def forward(self, x):
300 |         N, _, _ = x.shape
    |         ^ N806
301 |         out = []
302 |         for ir_idx, (start_idx, end_idx) in enumerate(self.head_indices):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:302:13: B007 Loop control variable `ir_idx` not used within loop body
    |
300 |         N, _, _ = x.shape
301 |         out = []
302 |         for ir_idx, (start_idx, end_idx) in enumerate(self.head_indices):
    |             ^^^^^^ B007
303 |             temp = x.narrow(2, start_idx, end_idx - start_idx)
304 |             temp = temp.reshape(N, -1)
    |
    = help: Rename unused `ir_idx` to `_ir_idx`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:307:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
305 |             out.append(temp)
306 |         out = torch.cat(out, dim=1)
307 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:310:9: ANN204 Missing return type annotation for special method `__repr__`
    |
310 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
311 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:310:9: D105 Missing docstring in magic method
    |
310 |     def __repr__(self):
    |         ^^^^^^^^ D105
311 |         return f"{self.__class__.__name__}(irreps_head={self.irreps_head})"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:314:7: D101 Missing docstring in public class
    |
314 | class ConcatIrrepsTensor(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^ D101
315 | 
316 |     def __init__(self, irreps_1, irreps_2):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:316:9: ANN204 Missing return type annotation for special method `__init__`
    |
314 | class ConcatIrrepsTensor(torch.nn.Module):
315 | 
316 |     def __init__(self, irreps_1, irreps_2):
    |         ^^^^^^^^ ANN204
317 |         super().__init__()
318 |         assert irreps_1 == irreps_1.simplify()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:316:9: D107 Missing docstring in `__init__`
    |
314 | class ConcatIrrepsTensor(torch.nn.Module):
315 | 
316 |     def __init__(self, irreps_1, irreps_2):
    |         ^^^^^^^^ D107
317 |         super().__init__()
318 |         assert irreps_1 == irreps_1.simplify()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:318:9: S101 Use of `assert` detected
    |
316 |     def __init__(self, irreps_1, irreps_2):
317 |         super().__init__()
318 |         assert irreps_1 == irreps_1.simplify()
    |         ^^^^^^ S101
319 |         self.check_sorted(irreps_1)
320 |         assert irreps_2 == irreps_2.simplify()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:320:9: S101 Use of `assert` detected
    |
318 |         assert irreps_1 == irreps_1.simplify()
319 |         self.check_sorted(irreps_1)
320 |         assert irreps_2 == irreps_2.simplify()
    |         ^^^^^^ S101
321 |         self.check_sorted(irreps_2)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:352:9: D102 Missing docstring in public method
    |
352 |     def get_irreps_dim(self, irreps):
    |         ^^^^^^^^^^^^^^ D102
353 |         muls = []
354 |         for mul, ir in irreps:
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:359:9: D102 Missing docstring in public method
    |
359 |     def check_sorted(self, irreps):
    |         ^^^^^^^^^^^^ D102
360 |         lmax = None
361 |         p = None
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:368:17: S101 Use of `assert` detected
    |
366 |                 continue
367 |             if ir.l == lmax:
368 |                 assert p < ir.p, f"Parity order error: {irreps}"
    |                 ^^^^^^ S101
369 |             assert lmax <= ir.l
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:369:13: S101 Use of `assert` detected
    |
367 |             if ir.l == lmax:
368 |                 assert p < ir.p, f"Parity order error: {irreps}"
369 |             assert lmax <= ir.l
    |             ^^^^^^ S101
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:372:9: D102 Missing docstring in public method
    |
372 |     def get_ir_index(self, ir, irreps):
    |         ^^^^^^^^^^^^ D102
373 |         for index, (_, irrep) in enumerate(irreps):
374 |             if irrep == ir:
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:379:9: D102 Missing docstring in public method
    |
379 |     def forward(self, feature_1, feature_2):
    |         ^^^^^^^ D102
380 | 
381 |         output = []
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:389:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
387 |                 output.append(feature_2.narrow(-1, start_idx_2, mul_2))
388 |         output = torch.cat(output, dim=-1)
389 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:392:9: ANN204 Missing return type annotation for special method `__repr__`
    |
392 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
393 |         return f"{self.__class__.__name__}(irreps_1={self.irreps_1}, irreps_2={self.irreps_2})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:392:9: D105 Missing docstring in magic method
    |
392 |     def __repr__(self):
    |         ^^^^^^^^ D105
393 |         return f"{self.__class__.__name__}(irreps_1={self.irreps_1}, irreps_2={self.irreps_2})"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:398:5: D205 1 blank line required between summary line and description
    |
396 |   @compile_mode("script")
397 |   class GraphAttention(torch.nn.Module):
398 |       """1. Message = Alpha * Value
    |  _____^
399 | |     2. Two Linear to merge src and dst -> Separable FCTP -> 0e + (0e+1e+...)
400 | |     3. 0e -> Activation -> Inner Product -> (Alpha)
401 | |     4. (0e+1e+...) -> (Value)
402 | |     """
    | |_______^ D205
403 |   
404 |       def __init__(self,
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:398:5: D400 First line should end with a period
    |
396 |   @compile_mode("script")
397 |   class GraphAttention(torch.nn.Module):
398 |       """1. Message = Alpha * Value
    |  _____^
399 | |     2. Two Linear to merge src and dst -> Separable FCTP -> 0e + (0e+1e+...)
400 | |     3. 0e -> Activation -> Inner Product -> (Alpha)
401 | |     4. (0e+1e+...) -> (Value)
402 | |     """
    | |_______^ D400
403 |   
404 |       def __init__(self,
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:398:5: D415 First line should end with a period, question mark, or exclamation point
    |
396 |   @compile_mode("script")
397 |   class GraphAttention(torch.nn.Module):
398 |       """1. Message = Alpha * Value
    |  _____^
399 | |     2. Two Linear to merge src and dst -> Separable FCTP -> 0e + (0e+1e+...)
400 | |     3. 0e -> Activation -> Inner Product -> (Alpha)
401 | |     4. (0e+1e+...) -> (Value)
402 | |     """
    | |_______^ D415
403 |   
404 |       def __init__(self,
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:404:9: PLR0913 Too many arguments in function definition (12 > 5)
    |
402 |     """
403 | 
404 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
405 |         irreps_node_input, irreps_node_attr,
406 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:404:9: ANN204 Missing return type annotation for special method `__init__`
    |
402 |     """
403 | 
404 |     def __init__(self,
    |         ^^^^^^^^ ANN204
405 |         irreps_node_input, irreps_node_attr,
406 |         irreps_edge_attr, irreps_node_output,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:404:9: D107 Missing docstring in `__init__`
    |
402 |     """
403 | 
404 |     def __init__(self,
    |         ^^^^^^^^ D107
405 |         irreps_node_input, irreps_node_attr,
406 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:409:9: FBT002 Boolean default positional argument in function definition
    |
407 |         fc_neurons,
408 |         irreps_head, num_heads, irreps_pre_attn=None,
409 |         rescale_degree=False, nonlinear_message=False,
    |         ^^^^^^^^^^^^^^ FBT002
410 |         alpha_drop=0.1, proj_drop=0.1):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:409:31: FBT002 Boolean default positional argument in function definition
    |
407 |         fc_neurons,
408 |         irreps_head, num_heads, irreps_pre_attn=None,
409 |         rescale_degree=False, nonlinear_message=False,
    |                               ^^^^^^^^^^^^^^^^^ FBT002
410 |         alpha_drop=0.1, proj_drop=0.1):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:476:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
476 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ PLR0913
477 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:476:9: D102 Missing docstring in public method
    |
476 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ D102
477 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:476:35: ARG002 Unused method argument: `node_attr`
    |
476 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |                                   ^^^^^^^^^ ARG002
477 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:477:9: ARG002 Unused method argument: `batch`
    |
476 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
477 |         batch, **kwargs):
    |         ^^^^^ ARG002
478 | 
479 |         message_src = self.merge_src(node_input)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:477:16: ANN003 Missing type annotation for `**kwargs`
    |
476 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
477 |         batch, **kwargs):
    |                ^^^^^^^^ ANN003
478 | 
479 |         message_src = self.merge_src(node_input)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:477:18: ARG002 Unused method argument: `kwargs`
    |
476 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
477 |         batch, **kwargs):
    |                  ^^^^^^ ARG002
478 | 
479 |         message_src = self.merge_src(node_input)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:524:9: D102 Missing docstring in public method
    |
524 |     def extra_repr(self):
    |         ^^^^^^^^^^ D102
525 |         output_str = super(GraphAttention, self).extra_repr()
526 |         output_str = output_str + f"rescale_degree={self.rescale_degree}, "
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:525:27: UP008 Use `super()` instead of `super(__class__, self)`
    |
524 |     def extra_repr(self):
525 |         output_str = super(GraphAttention, self).extra_repr()
    |                           ^^^^^^^^^^^^^^^^^^^^^^ UP008
526 |         output_str = output_str + f"rescale_degree={self.rescale_degree}, "
527 |         return output_str
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:527:16: RET504 Unnecessary assignment to `output_str` before `return` statement
    |
525 |         output_str = super(GraphAttention, self).extra_repr()
526 |         output_str = output_str + f"rescale_degree={self.rescale_degree}, "
527 |         return output_str
    |                ^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:532:5: D200 One-line docstring should fit on one line
    |
530 |   @compile_mode("script")
531 |   class FeedForwardNetwork(torch.nn.Module):
532 |       """Use two (FCTP + Gate)
    |  _____^
533 | |     """
    | |_______^ D200
534 |   
535 |       def __init__(self,
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:532:5: D400 First line should end with a period
    |
530 |   @compile_mode("script")
531 |   class FeedForwardNetwork(torch.nn.Module):
532 |       """Use two (FCTP + Gate)
    |  _____^
533 | |     """
    | |_______^ D400
534 |   
535 |       def __init__(self,
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:532:5: D415 First line should end with a period, question mark, or exclamation point
    |
530 |   @compile_mode("script")
531 |   class FeedForwardNetwork(torch.nn.Module):
532 |       """Use two (FCTP + Gate)
    |  _____^
533 | |     """
    | |_______^ D415
534 |   
535 |       def __init__(self,
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:535:9: ANN204 Missing return type annotation for special method `__init__`
    |
533 |     """
534 | 
535 |     def __init__(self,
    |         ^^^^^^^^ ANN204
536 |         irreps_node_input, irreps_node_attr,
537 |         irreps_node_output, irreps_mlp_mid=None,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:535:9: D107 Missing docstring in `__init__`
    |
533 |     """
534 | 
535 |     def __init__(self,
    |         ^^^^^^^^ D107
536 |         irreps_node_input, irreps_node_attr,
537 |         irreps_node_output, irreps_mlp_mid=None,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:560:9: D102 Missing docstring in public method
    |
560 |     def forward(self, node_input, node_attr, **kwargs):
    |         ^^^^^^^ D102
561 |         node_output = self.fctp_1(node_input, node_attr)
562 |         node_output = self.fctp_2(node_output, node_attr)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:560:46: ANN003 Missing type annotation for `**kwargs`
    |
560 |     def forward(self, node_input, node_attr, **kwargs):
    |                                              ^^^^^^^^ ANN003
561 |         node_output = self.fctp_1(node_input, node_attr)
562 |         node_output = self.fctp_2(node_output, node_attr)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:560:48: ARG002 Unused method argument: `kwargs`
    |
560 |     def forward(self, node_input, node_attr, **kwargs):
    |                                                ^^^^^^ ARG002
561 |         node_output = self.fctp_1(node_input, node_attr)
562 |         node_output = self.fctp_2(node_output, node_attr)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:570:5: D205 1 blank line required between summary line and description
    |
568 |   @compile_mode("script")
569 |   class TransBlock(torch.nn.Module):
570 |       """1. Layer Norm 1 -> GraphAttention -> Layer Norm 2 -> FeedForwardNetwork
    |  _____^
571 | |     2. Use pre-norm architecture
572 | |     """
    | |_______^ D205
573 |   
574 |       def __init__(self,
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:570:5: D400 First line should end with a period
    |
568 |   @compile_mode("script")
569 |   class TransBlock(torch.nn.Module):
570 |       """1. Layer Norm 1 -> GraphAttention -> Layer Norm 2 -> FeedForwardNetwork
    |  _____^
571 | |     2. Use pre-norm architecture
572 | |     """
    | |_______^ D400
573 |   
574 |       def __init__(self,
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:570:5: D415 First line should end with a period, question mark, or exclamation point
    |
568 |   @compile_mode("script")
569 |   class TransBlock(torch.nn.Module):
570 |       """1. Layer Norm 1 -> GraphAttention -> Layer Norm 2 -> FeedForwardNetwork
    |  _____^
571 | |     2. Use pre-norm architecture
572 | |     """
    | |_______^ D415
573 |   
574 |       def __init__(self,
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:574:9: PLR0913 Too many arguments in function definition (15 > 5)
    |
572 |     """
573 | 
574 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
575 |         irreps_node_input, irreps_node_attr,
576 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:574:9: ANN204 Missing return type annotation for special method `__init__`
    |
572 |     """
573 | 
574 |     def __init__(self,
    |         ^^^^^^^^ ANN204
575 |         irreps_node_input, irreps_node_attr,
576 |         irreps_edge_attr, irreps_node_output,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:574:9: D107 Missing docstring in `__init__`
    |
572 |     """
573 | 
574 |     def __init__(self,
    |         ^^^^^^^^ D107
575 |         irreps_node_input, irreps_node_attr,
576 |         irreps_edge_attr, irreps_node_output,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:579:9: FBT002 Boolean default positional argument in function definition
    |
577 |         fc_neurons,
578 |         irreps_head, num_heads, irreps_pre_attn=None,
579 |         rescale_degree=False, nonlinear_message=False,
    |         ^^^^^^^^^^^^^^ FBT002
580 |         alpha_drop=0.1, proj_drop=0.1,
581 |         drop_path_rate=0.0,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:579:31: FBT002 Boolean default positional argument in function definition
    |
577 |         fc_neurons,
578 |         irreps_head, num_heads, irreps_pre_attn=None,
579 |         rescale_degree=False, nonlinear_message=False,
    |                               ^^^^^^^^^^^^^^^^^ FBT002
580 |         alpha_drop=0.1, proj_drop=0.1,
581 |         drop_path_rate=0.0,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:632:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
632 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ PLR0913
633 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:632:9: D102 Missing docstring in public method
    |
632 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
    |         ^^^^^^^ D102
633 |         batch, **kwargs):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:633:16: ANN003 Missing type annotation for `**kwargs`
    |
632 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
633 |         batch, **kwargs):
    |                ^^^^^^^^ ANN003
634 | 
635 |         node_output = node_input
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:633:18: ARG002 Unused method argument: `kwargs`
    |
632 |     def forward(self, node_input, node_attr, edge_src, edge_dst, edge_attr, edge_scalars,
633 |         batch, **kwargs):
    |                  ^^^^^^ ARG002
634 | 
635 |         node_output = node_input
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:638:9: ERA001 Found commented-out code
    |
636 |         node_features = node_input
637 |         node_features = self.norm_1(node_features, batch=batch)
638 |         #norm_1_output = node_features
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
639 |         node_features = self.ga(node_input=node_features,
640 |             node_attr=node_attr,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:651:9: ERA001 Found commented-out code
    |
649 |         node_features = node_output
650 |         node_features = self.norm_2(node_features, batch=batch)
651 |         #node_features = self.concat_norm_output(norm_1_output, node_features)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
652 |         node_features = self.ffn(node_features, node_attr)
653 |         if self.ffn_shortcut is not None:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:660:16: RET504 Unnecessary assignment to `node_output` before `return` statement
    |
658 |         node_output = node_output + node_features
659 | 
660 |         return node_output
    |                ^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:663:7: D101 Missing docstring in public class
    |
663 | class NodeEmbeddingNetwork(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^ D101
664 | 
665 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:665:9: ANN204 Missing return type annotation for special method `__init__`
    |
663 | class NodeEmbeddingNetwork(torch.nn.Module):
664 | 
665 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |         ^^^^^^^^ ANN204
666 | 
667 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:665:9: D107 Missing docstring in `__init__`
    |
663 | class NodeEmbeddingNetwork(torch.nn.Module):
664 | 
665 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |         ^^^^^^^^ D107
666 | 
667 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:665:62: FBT002 Boolean default positional argument in function definition
    |
663 | class NodeEmbeddingNetwork(torch.nn.Module):
664 | 
665 |     def __init__(self, irreps_node_embedding, max_atom_type, bias=True):
    |                                                              ^^^^ FBT002
666 | 
667 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:676:9: D200 One-line docstring should fit on one line
    |
675 |       def forward(self, node_atom):
676 |           """`node_atom` is a LongTensor.
    |  _________^
677 | |         """
    | |___________^ D200
678 |           node_atom_onehot = torch.nn.functional.one_hot(node_atom, self.max_atom_type).float()
679 |           node_attr = node_atom_onehot
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:685:7: D101 Missing docstring in public class
    |
685 | class ScaledScatter(torch.nn.Module):
    |       ^^^^^^^^^^^^^ D101
686 |     def __init__(self, avg_aggregate_num):
687 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:686:9: ANN204 Missing return type annotation for special method `__init__`
    |
685 | class ScaledScatter(torch.nn.Module):
686 |     def __init__(self, avg_aggregate_num):
    |         ^^^^^^^^ ANN204
687 |         super().__init__()
688 |         self.avg_aggregate_num = avg_aggregate_num + 0.0
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:686:9: D107 Missing docstring in `__init__`
    |
685 | class ScaledScatter(torch.nn.Module):
686 |     def __init__(self, avg_aggregate_num):
    |         ^^^^^^^^ D107
687 |         super().__init__()
688 |         self.avg_aggregate_num = avg_aggregate_num + 0.0
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:691:9: D102 Missing docstring in public method
    |
691 |     def forward(self, x, index, **kwargs):
    |         ^^^^^^^ D102
692 |         out = scatter(x, index, reduce=REDUCE, **kwargs)
693 |         out = out.div(self.avg_aggregate_num ** 0.5)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:691:33: ANN003 Missing type annotation for `**kwargs`
    |
691 |     def forward(self, x, index, **kwargs):
    |                                 ^^^^^^^^ ANN003
692 |         out = scatter(x, index, reduce=REDUCE, **kwargs)
693 |         out = out.div(self.avg_aggregate_num ** 0.5)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:694:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
692 |         out = scatter(x, index, reduce=REDUCE, **kwargs)
693 |         out = out.div(self.avg_aggregate_num ** 0.5)
694 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:697:9: D102 Missing docstring in public method
    |
697 |     def extra_repr(self):
    |         ^^^^^^^^^^ D102
698 |         return f"avg_aggregate_num={self.avg_aggregate_num}"
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:701:7: D101 Missing docstring in public class
    |
701 | class EdgeDegreeEmbeddingNetwork(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
702 |     def __init__(self, irreps_node_embedding, irreps_edge_attr, fc_neurons, avg_aggregate_num):
703 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:702:9: ANN204 Missing return type annotation for special method `__init__`
    |
701 | class EdgeDegreeEmbeddingNetwork(torch.nn.Module):
702 |     def __init__(self, irreps_node_embedding, irreps_edge_attr, fc_neurons, avg_aggregate_num):
    |         ^^^^^^^^ ANN204
703 |         super().__init__()
704 |         self.exp = LinearRS(o3.Irreps("1x0e"), irreps_node_embedding,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:702:9: D107 Missing docstring in `__init__`
    |
701 | class EdgeDegreeEmbeddingNetwork(torch.nn.Module):
702 |     def __init__(self, irreps_node_embedding, irreps_edge_attr, fc_neurons, avg_aggregate_num):
    |         ^^^^^^^^ D107
703 |         super().__init__()
704 |         self.exp = LinearRS(o3.Irreps("1x0e"), irreps_node_embedding,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:709:34: RUF005 Consider `[*fc_neurons, self.dw.tp.weight_numel]` instead of concatenation
    |
707 |             irreps_edge_attr, irreps_node_embedding,
708 |             internal_weights=False, bias=False)
709 |         self.rad = RadialProfile(fc_neurons + [self.dw.tp.weight_numel])
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
710 |         for (slice, slice_sqrt_k) in self.dw.slices_sqrt_k.values():
711 |             self.rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
    |
    = help: Replace with `[*fc_neurons, self.dw.tp.weight_numel]`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:710:14: A001 Variable `slice` is shadowing a Python builtin
    |
708 |             internal_weights=False, bias=False)
709 |         self.rad = RadialProfile(fc_neurons + [self.dw.tp.weight_numel])
710 |         for (slice, slice_sqrt_k) in self.dw.slices_sqrt_k.values():
    |              ^^^^^ A001
711 |             self.rad.net[-1].weight.data[slice, :] *= slice_sqrt_k
712 |             self.rad.offset.data[slice] *= slice_sqrt_k
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:717:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
717 |     def forward(self, node_input, edge_attr, edge_scalars, edge_src, edge_dst, batch):
    |         ^^^^^^^ PLR0913
718 |         node_features = torch.ones_like(node_input.narrow(1, 0, 1))
719 |         node_features = self.exp(node_features)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:717:9: D102 Missing docstring in public method
    |
717 |     def forward(self, node_input, edge_attr, edge_scalars, edge_src, edge_dst, batch):
    |         ^^^^^^^ D102
718 |         node_features = torch.ones_like(node_input.narrow(1, 0, 1))
719 |         node_features = self.exp(node_features)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:717:80: ARG002 Unused method argument: `batch`
    |
717 |     def forward(self, node_input, edge_attr, edge_scalars, edge_src, edge_dst, batch):
    |                                                                                ^^^^^ ARG002
718 |         node_features = torch.ones_like(node_input.narrow(1, 0, 1))
719 |         node_features = self.exp(node_features)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:725:16: RET504 Unnecessary assignment to `node_features` before `return` statement
    |
723 |         node_features = self.scale_scatter(edge_features, edge_dst, dim=0,
724 |             dim_size=node_features.shape[0])
725 |         return node_features
    |                ^^^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:728:7: D101 Missing docstring in public class
    |
728 | class EquiformerEnergyPeriodic(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^ D101
729 |     def __init__(self,
730 |         irreps_in="5x0e",
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:729:9: PLR0913 Too many arguments in function definition (24 > 5)
    |
728 | class EquiformerEnergyPeriodic(torch.nn.Module):
729 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
730 |         irreps_in="5x0e",
731 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:729:9: ANN204 Missing return type annotation for special method `__init__`
    |
728 | class EquiformerEnergyPeriodic(torch.nn.Module):
729 |     def __init__(self,
    |         ^^^^^^^^ ANN204
730 |         irreps_in="5x0e",
731 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:729:9: D107 Missing docstring in `__init__`
    |
728 | class EquiformerEnergyPeriodic(torch.nn.Module):
729 |     def __init__(self,
    |         ^^^^^^^^ D107
730 |         irreps_in="5x0e",
731 |         irreps_node_embedding="128x0e+64x1e+32x2e", node_class=119, num_layers=6,
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:734:64: B006 Do not use mutable data structures for argument defaults
    |
732 |         irreps_node_attr="1x0e", irreps_sh="1x0e+1x1e+1x2e",
733 |         max_radius=5.0,
734 |         number_of_basis=128, basis_type="gaussian", fc_neurons=[64, 64],
    |                                                                ^^^^^^^^ B006
735 |         irreps_feature="512x0e",
736 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:737:9: FBT002 Boolean default positional argument in function definition
    |
735 |         irreps_feature="512x0e",
736 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
737 |         rescale_degree=False, nonlinear_message=False,
    |         ^^^^^^^^^^^^^^ FBT002
738 |         irreps_mlp_mid="128x0e+64x1e+32x2e",
739 |         norm_layer="layer",
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:737:31: FBT002 Boolean default positional argument in function definition
    |
735 |         irreps_feature="512x0e",
736 |         irreps_head="32x0e+16x1o+8x2e", num_heads=4, irreps_pre_attn=None,
737 |         rescale_degree=False, nonlinear_message=False,
    |                               ^^^^^^^^^^^^^^^^^ FBT002
738 |         irreps_mlp_mid="128x0e+64x1e+32x2e",
739 |         norm_layer="layer",
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:753:9: ERA001 Found commented-out code
    |
751 |         self.drop_path_rate = drop_path_rate
752 |         self.norm_layer = norm_layer
753 |         # self.task_mean = mean
    |         ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
754 |         # self.task_std = std
755 |         self.scale = scale
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:754:9: ERA001 Found commented-out code
    |
752 |         self.norm_layer = norm_layer
753 |         # self.task_mean = mean
754 |         # self.task_std = std
    |         ^^^^^^^^^^^^^^^^^^^^^ ERA001
755 |         self.scale = scale
756 |         self.register_buffer("atomref", atomref)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:766:27: RUF005 Consider `[self.number_of_basis, *fc_neurons]` instead of concatenation
    |
764 |         self.irreps_edge_attr = o3.Irreps(irreps_sh) if irreps_sh is not None \
765 |             else o3.Irreps.spherical_harmonics(self.lmax)
766 |         self.fc_neurons = [self.number_of_basis] + fc_neurons
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
767 |         self.irreps_head = o3.Irreps(irreps_head)
768 |         self.num_heads = num_heads
    |
    = help: Replace with `[self.number_of_basis, *fc_neurons]`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:802:9: D102 Missing docstring in public method
    |
802 |     def build_blocks(self):
    |         ^^^^^^^^^^^^ D102
803 |         for i in range(self.num_layers):
804 |             if i != (self.num_layers - 1):
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:826:9: ANN202 Missing return type annotation for private function `_init_weights`
    |
826 |     def _init_weights(self, m):
    |         ^^^^^^^^^^^^^ ANN202
827 |         if isinstance(m, torch.nn.Linear):
828 |             if m.bias is not None:
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:836:9: D102 Missing docstring in public method
    |
835 |     @torch.jit.ignore
836 |     def no_weight_decay(self):
    |         ^^^^^^^^^^^^^^^ D102
837 |         no_wd_list = []
838 |         named_parameters_list = [name for name, _ in self.named_parameters()]
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:840:17: SIM101 Multiple `isinstance` calls for `module`, merge into a single call
    |
838 |           named_parameters_list = [name for name, _ in self.named_parameters()]
839 |           for module_name, module in self.named_modules():
840 |               if (isinstance(module, torch.nn.Linear)
    |  _________________^
841 | |                 or isinstance(module, torch.nn.LayerNorm)
842 | |                 or isinstance(module, EquivariantLayerNormV2)
843 | |                 or isinstance(module, EquivariantInstanceNorm)
844 | |                 or isinstance(module, EquivariantGraphNorm)
845 | |                 or isinstance(module, GaussianRadialBasisLayer)
846 | |                 or isinstance(module, RadialBasis)):
    | |__________________________________________________^ SIM101
847 |                   for parameter_name, _ in module.named_parameters():
848 |                       if isinstance(module, torch.nn.Linear) and "weight" in parameter_name:
    |
    = help: Merge `isinstance` calls for `module`

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:851:21: S101 Use of `assert` detected
    |
849 |                         continue
850 |                     global_parameter_name = module_name + "." + parameter_name
851 |                     assert global_parameter_name in named_parameters_list
    |                     ^^^^^^ S101
852 |                     no_wd_list.append(global_parameter_name)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:856:9: D102 Missing docstring in public method
    |
854 |         return set(no_wd_list)
855 | 
856 |     def forward(self, pos, batch, node_atom, edge_index, **kwargs) -> torch.Tensor:
    |         ^^^^^^^ D102
857 |         edge_src, edge_dst = edge_index
858 |         edge_vec = pos.index_select(0, edge_src) - pos.index_select(0, edge_dst)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:856:58: ANN003 Missing type annotation for `**kwargs`
    |
854 |         return set(no_wd_list)
855 | 
856 |     def forward(self, pos, batch, node_atom, edge_index, **kwargs) -> torch.Tensor:
    |                                                          ^^^^^^^^ ANN003
857 |         edge_src, edge_dst = edge_index
858 |         edge_vec = pos.index_select(0, edge_src) - pos.index_select(0, edge_dst)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:856:60: ARG002 Unused method argument: `kwargs`
    |
854 |         return set(no_wd_list)
855 | 
856 |     def forward(self, pos, batch, node_atom, edge_index, **kwargs) -> torch.Tensor:
    |                                                            ^^^^^^ ARG002
857 |         edge_src, edge_dst = edge_index
858 |         edge_vec = pos.index_select(0, edge_src) - pos.index_select(0, edge_dst)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:882:16: RET504 Unnecessary assignment to `outputs` before `return` statement
    |
880 |         outputs = self.scale_scatter(outputs, batch, dim=0)
881 | 
882 |         return outputs
    |                ^^^^^^^ RET504
883 | 
884 |     def forward_with_gathered_index(self, pos, batch, node_atom, edge_index, periodic_index_mapping, **kwargs) -> torch.Tensor:
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:884:9: D102 Missing docstring in public method
    |
882 |         return outputs
883 | 
884 |     def forward_with_gathered_index(self, pos, batch, node_atom, edge_index, periodic_index_mapping, **kwargs) -> torch.Tensor:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
885 |         edge_src, edge_dst = edge_index
886 |         edge_vec = pos.index_select(0, edge_src) - pos.index_select(0, edge_dst)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:884:102: ANN003 Missing type annotation for `**kwargs`
    |
882 |         return outputs
883 | 
884 |     def forward_with_gathered_index(self, pos, batch, node_atom, edge_index, periodic_index_mapping, **kwargs) -> torch.Tensor:
    |                                                                                                      ^^^^^^^^ ANN003
885 |         edge_src, edge_dst = edge_index
886 |         edge_vec = pos.index_select(0, edge_src) - pos.index_select(0, edge_dst)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:884:104: ARG002 Unused method argument: `kwargs`
    |
882 |         return outputs
883 | 
884 |     def forward_with_gathered_index(self, pos, batch, node_atom, edge_index, periodic_index_mapping, **kwargs) -> torch.Tensor:
    |                                                                                                        ^^^^^^ ARG002
885 |         edge_src, edge_dst = edge_index
886 |         edge_vec = pos.index_select(0, edge_src) - pos.index_select(0, edge_dst)
    |

src\stk_search\geom3d\models\Equiformer\equiformer_type_0_periodic.py:912:16: RET504 Unnecessary assignment to `outputs` before `return` statement
    |
910 |         outputs = self.scale_scatter(outputs, batch, dim=0)
911 | 
912 |         return outputs
    |                ^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:6:7: D101 Missing docstring in public class
  |
6 | class CosineCutoff(torch.nn.Module):
  |       ^^^^^^^^^^^^ D101
7 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
8 |         super(CosineCutoff, self).__init__()
  |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:7:9: ANN204 Missing return type annotation for special method `__init__`
  |
6 | class CosineCutoff(torch.nn.Module):
7 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
  |         ^^^^^^^^ ANN204
8 |         super(CosineCutoff, self).__init__()
9 |         self.cutoff_lower = cutoff_lower
  |
  = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:7:9: D107 Missing docstring in `__init__`
  |
6 | class CosineCutoff(torch.nn.Module):
7 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
  |         ^^^^^^^^ D107
8 |         super(CosineCutoff, self).__init__()
9 |         self.cutoff_lower = cutoff_lower
  |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:8:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
 6 | class CosineCutoff(torch.nn.Module):
 7 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0):
 8 |         super(CosineCutoff, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^ UP008
 9 |         self.cutoff_lower = cutoff_lower
10 |         self.cutoff_upper = cutoff_upper
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:12:9: D102 Missing docstring in public method
   |
10 |         self.cutoff_upper = cutoff_upper
11 | 
12 |     def forward(self, distances):
   |         ^^^^^^^ D102
13 |         if self.cutoff_lower > 0:
14 |             cutoffs = 0.5 * (
   |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:29:20: RET504 Unnecessary assignment to `cutoffs` before `return` statement
   |
27 |             cutoffs = cutoffs * (distances < self.cutoff_upper).float()
28 |             cutoffs = cutoffs * (distances > self.cutoff_lower).float()
29 |             return cutoffs
   |                    ^^^^^^^ RET504
30 |         else:
31 |             cutoffs = 0.5 * (torch.cos(distances * math.pi / self.cutoff_upper) + 1.0)
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:30:9: RET505 Unnecessary `else` after `return` statement
   |
28 |             cutoffs = cutoffs * (distances > self.cutoff_lower).float()
29 |             return cutoffs
30 |         else:
   |         ^^^^ RET505
31 |             cutoffs = 0.5 * (torch.cos(distances * math.pi / self.cutoff_upper) + 1.0)
32 |             # remove contributions beyond the cutoff radius
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:34:20: RET504 Unnecessary assignment to `cutoffs` before `return` statement
   |
32 |             # remove contributions beyond the cutoff radius
33 |             cutoffs = cutoffs * (distances < self.cutoff_upper).float()
34 |             return cutoffs
   |                    ^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:38:7: D101 Missing docstring in public class
   |
37 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
38 | class ExpNormalSmearing(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^ D101
39 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
40 |         super(ExpNormalSmearing, self).__init__()
   |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:39:9: ANN204 Missing return type annotation for special method `__init__`
   |
37 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
38 | class ExpNormalSmearing(torch.nn.Module):
39 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
   |         ^^^^^^^^ ANN204
40 |         super(ExpNormalSmearing, self).__init__()
41 |         self.cutoff_lower = cutoff_lower
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:39:9: D107 Missing docstring in `__init__`
   |
37 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
38 | class ExpNormalSmearing(torch.nn.Module):
39 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
   |         ^^^^^^^^ D107
40 |         super(ExpNormalSmearing, self).__init__()
41 |         self.cutoff_lower = cutoff_lower
   |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:39:72: FBT002 Boolean default positional argument in function definition
   |
37 | # https://github.com/torchmd/torchmd-net/blob/main/torchmdnet/models/utils.py#L111
38 | class ExpNormalSmearing(torch.nn.Module):
39 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
   |                                                                        ^^^^^^^^^ FBT002
40 |         super(ExpNormalSmearing, self).__init__()
41 |         self.cutoff_lower = cutoff_lower
   |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:40:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
38 | class ExpNormalSmearing(torch.nn.Module):
39 |     def __init__(self, cutoff_lower=0.0, cutoff_upper=5.0, num_rbf=50, trainable=False):
40 |         super(ExpNormalSmearing, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
41 |         self.cutoff_lower = cutoff_lower
42 |         self.cutoff_upper = cutoff_upper
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:51:46: F821 Undefined name `nn`
   |
49 |         means, betas = self._initial_params()
50 |         if trainable:
51 |             self.register_parameter("means", nn.Parameter(means))
   |                                              ^^ F821
52 |             self.register_parameter("betas", nn.Parameter(betas))
53 |         else:
   |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:52:46: F821 Undefined name `nn`
   |
50 |         if trainable:
51 |             self.register_parameter("means", nn.Parameter(means))
52 |             self.register_parameter("betas", nn.Parameter(betas))
   |                                              ^^ F821
53 |         else:
54 |             self.register_buffer("means", means)
   |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:57:9: ANN202 Missing return type annotation for private function `_initial_params`
   |
55 |             self.register_buffer("betas", betas)
56 | 
57 |     def _initial_params(self):
   |         ^^^^^^^^^^^^^^^ ANN202
58 |         # initialize means and betas according to the default values in PhysNet
59 |         # https://pubs.acs.org/doi/10.1021/acs.jctc.9b00181
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:69:9: D102 Missing docstring in public method
   |
67 |         return means, betas
68 | 
69 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
70 |         means, betas = self._initial_params()
71 |         self.means.data.copy_(means)
   |

src\stk_search\geom3d\models\Equiformer\expnorm_rbf.py:74:9: D102 Missing docstring in public method
   |
72 |         self.betas.data.copy_(betas)
73 | 
74 |     def forward(self, dist):
   |         ^^^^^^^ D102
75 |         dist = dist.unsqueeze(-1)
76 |         return self.cutoff_fn(dist) * torch.exp(
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:2:1: W293 Blank line contains whitespace
  |
1 | """Functions directly copied from e3nn library.
2 |     
  | ^^^^ W293
3 | Speed up some special cases used in GIN and GAT.
4 | """
  |
  = help: Remove whitespace from blank line

src\stk_search\geom3d\models\Equiformer\fast_activation.py:14:5: D200 One-line docstring should fit on one line
   |
12 |   @compile_mode("trace")
13 |   class Activation(torch.nn.Module):
14 |       """Directly apply activation when irreps is type-0.
   |  _____^
15 | |     """
   | |_______^ D200
16 |   
17 |       def __init__(self, irreps_in, acts):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\fast_activation.py:17:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 |     """
16 | 
17 |     def __init__(self, irreps_in, acts):
   |         ^^^^^^^^ ANN204
18 |         super().__init__()
19 |         irreps_in = o3.Irreps(irreps_in)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\fast_activation.py:17:9: D107 Missing docstring in `__init__`
   |
15 |     """
16 | 
17 |     def __init__(self, irreps_in, acts):
   |         ^^^^^^^^ D107
18 |         super().__init__()
19 |         irreps_in = o3.Irreps(irreps_in)
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:20:9: S101 Use of `assert` detected
   |
18 |         super().__init__()
19 |         irreps_in = o3.Irreps(irreps_in)
20 |         assert len(irreps_in) == len(acts), (irreps_in, acts)
   |         ^^^^^^ S101
21 | 
22 |         # normalize the second moment
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:31:27: TRY003 Avoid specifying long messages outside the exception class
   |
29 |             if act is not None:
30 |                 if l_in != 0:
31 |                     raise ValueError("Activation: cannot apply an activation function to a non-scalar input.")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
32 | 
33 |                 x = torch.linspace(0, 10, 256, device=_get_device(act))
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:31:38: EM101 Exception must not use a string literal, assign to variable first
   |
29 |             if act is not None:
30 |                 if l_in != 0:
31 |                     raise ValueError("Activation: cannot apply an activation function to a non-scalar input.")
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
32 | 
33 |                 x = torch.linspace(0, 10, 256, device=_get_device(act))
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\Equiformer\fast_activation.py:36:44: PLR2004 Magic value used in comparison, consider replacing `1e-5` with a constant variable
   |
35 |                 a1, a2 = act(x), act(-x)
36 |                 if (a1 - a2).abs().max() < 1e-5:
   |                                            ^^^^ PLR2004
37 |                     p_act = 1
38 |                 elif (a1 + a2).abs().max() < 1e-5:
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:38:46: PLR2004 Magic value used in comparison, consider replacing `1e-5` with a constant variable
   |
36 |                 if (a1 - a2).abs().max() < 1e-5:
37 |                     p_act = 1
38 |                 elif (a1 + a2).abs().max() < 1e-5:
   |                                              ^^^^ PLR2004
39 |                     p_act = -1
40 |                 else:
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:47:27: TRY003 Avoid specifying long messages outside the exception class
   |
46 |                 if p_out == 0:
47 |                     raise ValueError("Activation: the parity is violated! The input scalar is odd but the activation is neither even nor odd.")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
48 |             else:
49 |                 irreps_out.append((mul, (l_in, p_in)))
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:47:38: EM101 Exception must not use a string literal, assign to variable first
   |
46 |                 if p_out == 0:
47 |                     raise ValueError("Activation: the parity is violated! The input scalar is odd but the activation is neither even nor odd.")
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
48 |             else:
49 |                 irreps_out.append((mul, (l_in, p_in)))
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\Equiformer\fast_activation.py:54:9: S101 Use of `assert` detected
   |
52 |         self.irreps_out = o3.Irreps(irreps_out)
53 |         self.acts = torch.nn.ModuleList(acts)
54 |         assert len(self.irreps_in) == len(self.acts)
   |         ^^^^^^ S101
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:58:5: ERA001 Found commented-out code
   |
57 |     #def __repr__(self):
58 |     #    acts = "".join(["x" if a is not None else " " for a in self.acts])
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
59 |     #    return f"{self.__class__.__name__} [{self.acts}] ({self.irreps_in} -> {self.irreps_out})"
60 |     def extra_repr(self):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\fast_activation.py:59:5: ERA001 Found commented-out code
   |
57 |     #def __repr__(self):
58 |     #    acts = "".join(["x" if a is not None else " " for a in self.acts])
59 |     #    return f"{self.__class__.__name__} [{self.acts}] ({self.irreps_in} -> {self.irreps_out})"
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
60 |     def extra_repr(self):
61 |         output_str = super(Activation, self).extra_repr()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\fast_activation.py:60:9: D102 Missing docstring in public method
   |
58 |     #    acts = "".join(["x" if a is not None else " " for a in self.acts])
59 |     #    return f"{self.__class__.__name__} [{self.acts}] ({self.irreps_in} -> {self.irreps_out})"
60 |     def extra_repr(self):
   |         ^^^^^^^^^^ D102
61 |         output_str = super(Activation, self).extra_repr()
62 |         output_str = output_str + f"{self.irreps_in} -> {self.irreps_out}, "
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:61:27: UP008 Use `super()` instead of `super(__class__, self)`
   |
59 |     #    return f"{self.__class__.__name__} [{self.acts}] ({self.irreps_in} -> {self.irreps_out})"
60 |     def extra_repr(self):
61 |         output_str = super(Activation, self).extra_repr()
   |                           ^^^^^^^^^^^^^^^^^^ UP008
62 |         output_str = output_str + f"{self.irreps_in} -> {self.irreps_out}, "
63 |         return output_str
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Equiformer\fast_activation.py:63:16: RET504 Unnecessary assignment to `output_str` before `return` statement
   |
61 |         output_str = super(Activation, self).extra_repr()
62 |         output_str = output_str + f"{self.irreps_in} -> {self.irreps_out}, "
63 |         return output_str
   |                ^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\fast_activation.py:66:9: D102 Missing docstring in public method
   |
66 |     def forward(self, features, dim=-1):
   |         ^^^^^^^ D102
67 |         # directly apply activation without narrow
68 |         if len(self.acts) == 1:
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:82:9: RET505 Unnecessary `elif` after `return` statement
   |
80 |         if len(output) > 1:
81 |             return torch.cat(output, dim=dim)
82 |         elif len(output) == 1:
   |         ^^^^ RET505
83 |             return output[0]
84 |         else:
   |
   = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\Equiformer\fast_activation.py:90:5: D205 1 blank line required between summary line and description
   |
88 |   @compile_mode("script")
89 |   class Gate(torch.nn.Module):
90 |       """1. Use `narrow` to split tensor.
   |  _____^
91 | |     2. Use `Activation` in this file.
92 | |     """
   | |_______^ D205
93 |   
94 |       def __init__(self, irreps_scalars, act_scalars, irreps_gates, act_gates, irreps_gated):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\fast_activation.py:94:9: ANN204 Missing return type annotation for special method `__init__`
   |
92 |     """
93 | 
94 |     def __init__(self, irreps_scalars, act_scalars, irreps_gates, act_gates, irreps_gated):
   |         ^^^^^^^^ ANN204
95 |         super().__init__()
96 |         irreps_scalars = o3.Irreps(irreps_scalars)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\fast_activation.py:94:9: D107 Missing docstring in `__init__`
   |
92 |     """
93 | 
94 |     def __init__(self, irreps_scalars, act_scalars, irreps_gates, act_gates, irreps_gated):
   |         ^^^^^^^^ D107
95 |         super().__init__()
96 |         irreps_scalars = o3.Irreps(irreps_scalars)
   |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:101:19: TRY003 Avoid specifying long messages outside the exception class
    |
100 |         if len(irreps_gates) > 0 and irreps_gates.lmax > 0:
101 |             raise ValueError(f"Gate scalars must be scalars, instead got irreps_gates = {irreps_gates}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
102 |         if len(irreps_scalars) > 0 and irreps_scalars.lmax > 0:
103 |             raise ValueError(f"Scalars must be scalars, instead got irreps_scalars = {irreps_scalars}")
    |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:101:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
100 |         if len(irreps_gates) > 0 and irreps_gates.lmax > 0:
101 |             raise ValueError(f"Gate scalars must be scalars, instead got irreps_gates = {irreps_gates}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
102 |         if len(irreps_scalars) > 0 and irreps_scalars.lmax > 0:
103 |             raise ValueError(f"Scalars must be scalars, instead got irreps_scalars = {irreps_scalars}")
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\fast_activation.py:103:19: TRY003 Avoid specifying long messages outside the exception class
    |
101 |             raise ValueError(f"Gate scalars must be scalars, instead got irreps_gates = {irreps_gates}")
102 |         if len(irreps_scalars) > 0 and irreps_scalars.lmax > 0:
103 |             raise ValueError(f"Scalars must be scalars, instead got irreps_scalars = {irreps_scalars}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
104 |         if irreps_gates.num_irreps != irreps_gated.num_irreps:
105 |             raise ValueError(f"There are {irreps_gated.num_irreps} irreps in irreps_gated, but a different number ({irreps_gates.num_irreps}) of gate scalars in irreps_gates")
    |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:103:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
101 |             raise ValueError(f"Gate scalars must be scalars, instead got irreps_gates = {irreps_gates}")
102 |         if len(irreps_scalars) > 0 and irreps_scalars.lmax > 0:
103 |             raise ValueError(f"Scalars must be scalars, instead got irreps_scalars = {irreps_scalars}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
104 |         if irreps_gates.num_irreps != irreps_gated.num_irreps:
105 |             raise ValueError(f"There are {irreps_gated.num_irreps} irreps in irreps_gated, but a different number ({irreps_gates.num_irreps}) of gate scalars in irreps_gates")
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\fast_activation.py:105:19: TRY003 Avoid specifying long messages outside the exception class
    |
103 |             raise ValueError(f"Scalars must be scalars, instead got irreps_scalars = {irreps_scalars}")
104 |         if irreps_gates.num_irreps != irreps_gated.num_irreps:
105 |             raise ValueError(f"There are {irreps_gated.num_irreps} irreps in irreps_gated, but a different number ({irreps_gates.num_irreps}) of gate scalars in irreps_gates")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
106 |         #assert len(irreps_scalars) == 1
107 |         #assert len(irreps_gates) == 1
    |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:105:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
103 |             raise ValueError(f"Scalars must be scalars, instead got irreps_scalars = {irreps_scalars}")
104 |         if irreps_gates.num_irreps != irreps_gated.num_irreps:
105 |             raise ValueError(f"There are {irreps_gated.num_irreps} irreps in irreps_gated, but a different number ({irreps_gates.num_irreps}) of gate scalars in irreps_gates")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
106 |         #assert len(irreps_scalars) == 1
107 |         #assert len(irreps_gates) == 1
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\fast_activation.py:106:9: ERA001 Found commented-out code
    |
104 |         if irreps_gates.num_irreps != irreps_gated.num_irreps:
105 |             raise ValueError(f"There are {irreps_gated.num_irreps} irreps in irreps_gated, but a different number ({irreps_gates.num_irreps}) of gate scalars in irreps_gates")
106 |         #assert len(irreps_scalars) == 1
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
107 |         #assert len(irreps_gates) == 1
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\fast_activation.py:107:9: ERA001 Found commented-out code
    |
105 |             raise ValueError(f"There are {irreps_gated.num_irreps} irreps in irreps_gated, but a different number ({irreps_gates.num_irreps}) of gate scalars in irreps_gates")
106 |         #assert len(irreps_scalars) == 1
107 |         #assert len(irreps_gates) == 1
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
108 | 
109 |         self.irreps_scalars = irreps_scalars
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\fast_activation.py:126:9: ANN204 Missing return type annotation for special method `__repr__`
    |
126 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
127 |         return f"{self.__class__.__name__} ({self.irreps_in} -> {self.irreps_out})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\fast_activation.py:126:9: D105 Missing docstring in magic method
    |
126 |     def __repr__(self):
    |         ^^^^^^^^ D105
127 |         return f"{self.__class__.__name__} ({self.irreps_in} -> {self.irreps_out})"
    |

src\stk_search\geom3d\models\Equiformer\fast_activation.py:130:9: D102 Missing docstring in public method
    |
130 |     def forward(self, features):
    |         ^^^^^^^ D102
131 |         scalars_dim = self.irreps_scalars.dim
132 |         gates_dim = self.irreps_gates.dim
    |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | from e3nn.o3 import Irreps
4 | from torch import nn
  |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:7:7: D101 Missing docstring in public class
  |
7 | class EquivariantLayerNormFast(nn.Module):
  |       ^^^^^^^^^^^^^^^^^^^^^^^^ D101
8 | 
9 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
  |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:9:9: ANN204 Missing return type annotation for special method `__init__`
   |
 7 | class EquivariantLayerNormFast(nn.Module):
 8 | 
 9 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
   |         ^^^^^^^^ ANN204
10 |         super().__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:9:9: D107 Missing docstring in `__init__`
   |
 7 | class EquivariantLayerNormFast(nn.Module):
 8 | 
 9 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
   |         ^^^^^^^^ D107
10 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:9:42: FBT002 Boolean default positional argument in function definition
   |
 7 | class EquivariantLayerNormFast(nn.Module):
 8 | 
 9 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
   |                                          ^^^^^^ FBT002
10 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:26:9: S101 Use of `assert` detected
   |
24 |             self.register_parameter("affine_bias", None)
25 | 
26 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
   |         ^^^^^^ S101
27 |         self.normalization = normalization
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:30:9: ANN204 Missing return type annotation for special method `__repr__`
   |
30 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
31 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:30:9: D105 Missing docstring in magic method
   |
30 |     def __repr__(self):
   |         ^^^^^^^^ D105
31 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:34:35: ANN003 Missing type annotation for `**kwargs`
   |
34 |     def forward(self, node_input, **kwargs):
   |                                   ^^^^^^^^ ANN003
35 |         """Use torch layer norm for scalar features.
36 |         """
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:34:37: ARG002 Unused method argument: `kwargs`
   |
34 |     def forward(self, node_input, **kwargs):
   |                                     ^^^^^^ ARG002
35 |         """Use torch layer norm for scalar features.
36 |         """
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:35:9: D200 One-line docstring should fit on one line
   |
34 |       def forward(self, node_input, **kwargs):
35 |           """Use torch layer norm for scalar features.
   |  _________^
36 | |         """
   | |___________^ D200
37 |           dim = node_input.shape[-1]
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:54:45: C409 Unnecessary `tuple` literal passed to `tuple()` (remove the outer call to `tuple()`)
   |
52 |                 iw += mul
53 |                 ib += mul
54 |                 field = F.layer_norm(field, tuple((mul, )), weight, bias, self.eps)
   |                                             ^^^^^^^^^^^^^^ C409
55 |                 fields.append(field.reshape(-1, mul * d))  # [batch * sample, mul * repr]
56 |                 continue
   |
   = help: Remove outer `tuple` call

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:66:23: TRY003 Avoid specifying long messages outside the exception class
   |
64 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
65 |             else:
66 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
67 |             field_norm = torch.mean(field_norm, dim=1, keepdim=True)
68 |             field_norm = 1.0 / ((field_norm + self.eps).sqrt())  # [batch * sample, mul]
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:66:34: EM102 Exception must not use an f-string literal, assign to variable first
   |
64 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
65 |             else:
66 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
67 |             field_norm = torch.mean(field_norm, dim=1, keepdim=True)
68 |             field_norm = 1.0 / ((field_norm + self.eps).sqrt())  # [batch * sample, mul]
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:78:9: S101 Use of `assert` detected
   |
76 |             fields.append(field.reshape(-1, mul * d))  # [batch * sample, mul * repr]
77 | 
78 |         assert ix == dim
   |         ^^^^^^ S101
79 | 
80 |         output = torch.cat(fields, dim=-1)
   |

src\stk_search\geom3d\models\Equiformer\fast_layer_norm.py:81:16: RET504 Unnecessary assignment to `output` before `return` statement
   |
80 |         output = torch.cat(fields, dim=-1)
81 |         return output
   |                ^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:5:5: D103 Missing docstring in public function
  |
4 | @torch.jit.script
5 | def gaussian(x, mean, std):
  |     ^^^^^^^^ D103
6 |     pi = 3.14159
7 |     a = (2*pi) ** 0.5
  |

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:12:7: D101 Missing docstring in public class
   |
11 | # From Graphormer
12 | class GaussianRadialBasisLayer(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^ D101
13 |     def __init__(self, num_basis, cutoff):
14 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:13:9: ANN204 Missing return type annotation for special method `__init__`
   |
11 | # From Graphormer
12 | class GaussianRadialBasisLayer(torch.nn.Module):
13 |     def __init__(self, num_basis, cutoff):
   |         ^^^^^^^^ ANN204
14 |         super().__init__()
15 |         self.num_basis = num_basis
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:13:9: D107 Missing docstring in `__init__`
   |
11 | # From Graphormer
12 | class GaussianRadialBasisLayer(torch.nn.Module):
13 |     def __init__(self, num_basis, cutoff):
   |         ^^^^^^^^ D107
14 |         super().__init__()
15 |         self.num_basis = num_basis
   |

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:32:9: D102 Missing docstring in public method
   |
32 |     def forward(self, dist, node_atom=None, edge_src=None, edge_dst=None):
   |         ^^^^^^^ D102
33 |         x = dist / self.cutoff
34 |         x = x.unsqueeze(-1)
   |

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:32:29: ARG002 Unused method argument: `node_atom`
   |
32 |     def forward(self, dist, node_atom=None, edge_src=None, edge_dst=None):
   |                             ^^^^^^^^^ ARG002
33 |         x = dist / self.cutoff
34 |         x = x.unsqueeze(-1)
   |

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:32:45: ARG002 Unused method argument: `edge_src`
   |
32 |     def forward(self, dist, node_atom=None, edge_src=None, edge_dst=None):
   |                                             ^^^^^^^^ ARG002
33 |         x = dist / self.cutoff
34 |         x = x.unsqueeze(-1)
   |

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:32:60: ARG002 Unused method argument: `edge_dst`
   |
32 |     def forward(self, dist, node_atom=None, edge_src=None, edge_dst=None):
   |                                                            ^^^^^^^^ ARG002
33 |         x = dist / self.cutoff
34 |         x = x.unsqueeze(-1)
   |

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:40:16: RET504 Unnecessary assignment to `x` before `return` statement
   |
38 |         std = self.std.abs() + 1e-5
39 |         x = gaussian(x, mean, std)
40 |         return x
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\gaussian_rbf.py:43:9: D102 Missing docstring in public method
   |
43 |     def extra_repr(self):
   |         ^^^^^^^^^^ D102
44 |         return f"mean_init_max={self.mean_init_max}, mean_init_min={self.mean_init_min}, std_init_max={self.std_init_max}, std_init_min={self.std_init_min}"
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\graph_norm.py:9:5: D205 1 blank line required between summary line and description
   |
 7 |   # From "Geometric and Physical Quantities improve E(3) Equivariant Message Passing"
 8 |   class EquivariantGraphNorm(nn.Module):
 9 |       """Instance normalization for orthonormal representations
   |  _____^
10 | |     It normalizes by the norm of the representations.
11 | |     Note that the norm is invariant only for orthonormal representations.
12 | |     Irreducible representations `wigner_D` are orthonormal.
13 | | 
14 | |     Parameters
15 | |     ----------
16 | |     irreps : `Irreps`
17 | |         representation
18 | |     eps : float
19 | |         avoid division by zero when we normalize by the variance
20 | |     affine : bool
21 | |         do we have weight and bias parameters
22 | |     reduce : {'mean', 'max'}
23 | |         method used to reduce
24 | | 
25 | |     """
   | |_______^ D205
26 |   
27 |       def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\graph_norm.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |         ^^^^^^^^ ANN204
28 |         super().__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\graph_norm.py:27:9: D107 Missing docstring in `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |         ^^^^^^^^ D107
28 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:27:42: FBT002 Boolean default positional argument in function definition
   |
25 |     """
26 | 
27 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |                                          ^^^^^^ FBT002
28 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:45:9: S101 Use of `assert` detected
   |
43 |             self.register_parameter("affine_bias", None)
44 | 
45 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
   |         ^^^^^^ S101
46 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
47 |         self.reduce = reduce
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:46:9: S101 Use of `assert` detected
   |
45 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
46 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
   |         ^^^^^^ S101
47 |         self.reduce = reduce
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:49:9: S101 Use of `assert` detected
   |
47 |         self.reduce = reduce
48 | 
49 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
   |         ^^^^^^ S101
50 |         self.normalization = normalization
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:53:9: ANN204 Missing return type annotation for special method `__repr__`
   |
53 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
54 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\graph_norm.py:53:9: D105 Missing docstring in magic method
   |
53 |     def __repr__(self):
   |         ^^^^^^^^ D105
54 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:58:9: D417 Missing argument descriptions in the docstring for `forward`: `**kwargs`, `batch`
   |
57 |     #@torch.autocast(device_type='cuda', enabled=False)
58 |     def forward(self, node_input, batch, **kwargs):
   |         ^^^^^^^ D417
59 |         """evaluate
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:58:42: ANN003 Missing type annotation for `**kwargs`
   |
57 |     #@torch.autocast(device_type='cuda', enabled=False)
58 |     def forward(self, node_input, batch, **kwargs):
   |                                          ^^^^^^^^ ANN003
59 |         """evaluate
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:58:44: ARG002 Unused method argument: `kwargs`
   |
57 |     #@torch.autocast(device_type='cuda', enabled=False)
58 |     def forward(self, node_input, batch, **kwargs):
   |                                            ^^^^^^ ARG002
59 |         """evaluate
   |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:59:9: D400 First line should end with a period
   |
57 |       #@torch.autocast(device_type='cuda', enabled=False)
58 |       def forward(self, node_input, batch, **kwargs):
59 |           """evaluate
   |  _________^
60 | | 
61 | |         Parameters
62 | |         ----------
63 | |         node_input : `torch.Tensor`
64 | |             tensor of shape ``(batch, ..., irreps.dim)``
65 | | 
66 | |         Returns
67 | |         -------
68 | |         `torch.Tensor`
69 | |             tensor of shape ``(batch, ..., irreps.dim)``
70 | | 
71 | |         """
   | |___________^ D400
72 |           dim = node_input.shape[-1]
   |
   = help: Add period

src\stk_search\geom3d\models\Equiformer\graph_norm.py:59:9: D415 First line should end with a period, question mark, or exclamation point
   |
57 |       #@torch.autocast(device_type='cuda', enabled=False)
58 |       def forward(self, node_input, batch, **kwargs):
59 |           """evaluate
   |  _________^
60 | | 
61 | |         Parameters
62 | |         ----------
63 | |         node_input : `torch.Tensor`
64 | |             tensor of shape ``(batch, ..., irreps.dim)``
65 | | 
66 | |         Returns
67 | |         -------
68 | |         `torch.Tensor`
69 | |             tensor of shape ``(batch, ..., irreps.dim)``
70 | | 
71 | |         """
   | |___________^ D415
72 |           dim = node_input.shape[-1]
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\graph_norm.py:82:13: ERA001 Found commented-out code
   |
80 |         for mul, ir in self.irreps:  # mul is the multiplicity (number of copies) of some irrep type (ir)
81 |             d = ir.dim
82 |             #field = node_input[:, ix: ix + mul * d]  # [batch * sample, mul * repr]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
83 |             field = node_input.narrow(1, ix, mul*d)
84 |             ix += mul * d
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\graph_norm.py:86:13: ERA001 Found commented-out code
   |
84 |             ix += mul * d
85 | 
86 |             # [batch * sample, mul, repr]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
87 |             field = field.reshape(-1, mul, d)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\graph_norm.py:105:23: TRY003 Avoid specifying long messages outside the exception class
    |
103 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
104 |             else:
105 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
106 |             # Reduction method
107 |             if self.reduce == "mean":
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:105:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
103 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
104 |             else:
105 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
106 |             # Reduction method
107 |             if self.reduce == "mean":
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\graph_norm.py:112:23: TRY003 Avoid specifying long messages outside the exception class
    |
110 |                 field_norm = global_max_pool(field_norm, batch)  # [batch, mul]
111 |             else:
112 |                 raise ValueError(f"Invalid reduce option {self.reduce}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
113 | 
114 |             # Then apply the rescaling (divide by the sqrt of the squared_norm, i.e., divide by the norm
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:112:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
110 |                 field_norm = global_max_pool(field_norm, batch)  # [batch, mul]
111 |             else:
112 |                 raise ValueError(f"Invalid reduce option {self.reduce}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
113 | 
114 |             # Then apply the rescaling (divide by the sqrt of the squared_norm, i.e., divide by the norm
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\graph_norm.py:138:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
137 |         output = torch.cat(fields, dim=-1)  # [batch * sample, stacked features]
138 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\graph_norm.py:141:7: D101 Missing docstring in public class
    |
141 | class EquivariantGraphNormV2(nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^^^ D101
142 | 
143 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:143:9: ANN204 Missing return type annotation for special method `__init__`
    |
141 | class EquivariantGraphNormV2(nn.Module):
142 | 
143 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
    |         ^^^^^^^^ ANN204
144 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\graph_norm.py:143:9: D107 Missing docstring in `__init__`
    |
141 | class EquivariantGraphNormV2(nn.Module):
142 | 
143 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
    |         ^^^^^^^^ D107
144 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:143:42: FBT002 Boolean default positional argument in function definition
    |
141 | class EquivariantGraphNormV2(nn.Module):
142 | 
143 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
    |                                          ^^^^^^ FBT002
144 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:169:9: S101 Use of `assert` detected
    |
167 |             self.register_parameter("affine_bias", None)
168 | 
169 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
    |         ^^^^^^ S101
170 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
171 |         self.reduce = reduce
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:170:9: S101 Use of `assert` detected
    |
169 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
170 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
    |         ^^^^^^ S101
171 |         self.reduce = reduce
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:173:9: S101 Use of `assert` detected
    |
171 |         self.reduce = reduce
172 | 
173 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
    |         ^^^^^^ S101
174 |         self.normalization = normalization
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:177:9: ANN204 Missing return type annotation for special method `__repr__`
    |
177 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
178 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\graph_norm.py:177:9: D105 Missing docstring in magic method
    |
177 |     def __repr__(self):
    |         ^^^^^^^^ D105
178 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:182:9: D102 Missing docstring in public method
    |
181 |     #@torch.autocast(device_type='cuda', enabled=False)
182 |     def forward(self, node_input, batch, **kwargs):
    |         ^^^^^^^ D102
183 | 
184 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:182:42: ANN003 Missing type annotation for `**kwargs`
    |
181 |     #@torch.autocast(device_type='cuda', enabled=False)
182 |     def forward(self, node_input, batch, **kwargs):
    |                                          ^^^^^^^^ ANN003
183 | 
184 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:182:44: ARG002 Unused method argument: `kwargs`
    |
181 |     #@torch.autocast(device_type='cuda', enabled=False)
182 |     def forward(self, node_input, batch, **kwargs):
    |                                            ^^^^^^ ARG002
183 | 
184 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\graph_norm.py:199:13: ERA001 Found commented-out code
    |
197 |             field = field.reshape(-1, mul, d) # [batch * sample, mul, repr]
198 |             # centering
199 |             #field_mean = global_mean_pool(field, batch) # [batch, mul, repr]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
200 |             field_mean = node_input_mean.narrow(1, ix, mul * d)
201 |             field_mean = field_mean.reshape(-1, mul, d)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\graph_norm.py:242:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
241 |         output = torch.cat(fields, dim=-1)  # [batch * sample, stacked features]
242 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\instance_norm.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\instance_norm.py:9:5: D205 1 blank line required between summary line and description
   |
 7 |   # From "Geometric and Physical Quantities improve E(3) Equivariant Message Passing"
 8 |   class EquivariantInstanceNorm(nn.Module):
 9 |       """Instance normalization for orthonormal representations
   |  _____^
10 | |     It normalizes by the norm of the representations.
11 | |     Note that the norm is invariant only for orthonormal representations.
12 | |     Irreducible representations `wigner_D` are orthonormal.
13 | | 
14 | |     Parameters
15 | |     ----------
16 | |     irreps : `Irreps`
17 | |         representation
18 | |     eps : float
19 | |         avoid division by zero when we normalize by the variance
20 | |     affine : bool
21 | |         do we have weight and bias parameters
22 | |     reduce : {'mean', 'max'}
23 | |         method used to reduce
24 | | 
25 | |     """
   | |_______^ D205
26 |   
27 |       def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\instance_norm.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |         ^^^^^^^^ ANN204
28 |         super().__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\instance_norm.py:27:9: D107 Missing docstring in `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |         ^^^^^^^^ D107
28 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:27:42: FBT002 Boolean default positional argument in function definition
   |
25 |     """
26 | 
27 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |                                          ^^^^^^ FBT002
28 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:44:9: S101 Use of `assert` detected
   |
42 |             self.register_parameter("affine_bias", None)
43 | 
44 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
   |         ^^^^^^ S101
45 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
46 |         self.reduce = reduce
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:45:9: S101 Use of `assert` detected
   |
44 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
45 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
   |         ^^^^^^ S101
46 |         self.reduce = reduce
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:48:9: S101 Use of `assert` detected
   |
46 |         self.reduce = reduce
47 | 
48 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
   |         ^^^^^^ S101
49 |         self.normalization = normalization
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:52:9: ANN204 Missing return type annotation for special method `__repr__`
   |
52 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
53 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\instance_norm.py:52:9: D105 Missing docstring in magic method
   |
52 |     def __repr__(self):
   |         ^^^^^^^^ D105
53 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:57:9: D417 Missing argument descriptions in the docstring for `forward`: `**kwargs`, `batch`
   |
56 |     #@torch.autocast(device_type='cuda', enabled=False)
57 |     def forward(self, node_input, batch, **kwargs):
   |         ^^^^^^^ D417
58 |         """evaluate
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:57:42: ANN003 Missing type annotation for `**kwargs`
   |
56 |     #@torch.autocast(device_type='cuda', enabled=False)
57 |     def forward(self, node_input, batch, **kwargs):
   |                                          ^^^^^^^^ ANN003
58 |         """evaluate
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:57:44: ARG002 Unused method argument: `kwargs`
   |
56 |     #@torch.autocast(device_type='cuda', enabled=False)
57 |     def forward(self, node_input, batch, **kwargs):
   |                                            ^^^^^^ ARG002
58 |         """evaluate
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:58:9: D400 First line should end with a period
   |
56 |       #@torch.autocast(device_type='cuda', enabled=False)
57 |       def forward(self, node_input, batch, **kwargs):
58 |           """evaluate
   |  _________^
59 | | 
60 | |         Parameters
61 | |         ----------
62 | |         node_input : `torch.Tensor`
63 | |             tensor of shape ``(batch, ..., irreps.dim)``
64 | | 
65 | |         Returns
66 | |         -------
67 | |         `torch.Tensor`
68 | |             tensor of shape ``(batch, ..., irreps.dim)``
69 | | 
70 | |         """
   | |___________^ D400
71 |           # batch, *size, dim = node_input.shape  # TODO: deal with batch
72 |           # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |
   = help: Add period

src\stk_search\geom3d\models\Equiformer\instance_norm.py:58:9: D415 First line should end with a period, question mark, or exclamation point
   |
56 |       #@torch.autocast(device_type='cuda', enabled=False)
57 |       def forward(self, node_input, batch, **kwargs):
58 |           """evaluate
   |  _________^
59 | | 
60 | |         Parameters
61 | |         ----------
62 | |         node_input : `torch.Tensor`
63 | |             tensor of shape ``(batch, ..., irreps.dim)``
64 | | 
65 | |         Returns
66 | |         -------
67 | |         `torch.Tensor`
68 | |             tensor of shape ``(batch, ..., irreps.dim)``
69 | | 
70 | |         """
   | |___________^ D415
71 |           # batch, *size, dim = node_input.shape  # TODO: deal with batch
72 |           # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\instance_norm.py:71:9: ERA001 Found commented-out code
   |
70 |         """
71 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
72 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
73 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\instance_norm.py:71:51: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
70 |         """
71 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |                                                   ^^^^ TD002
72 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
73 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:71:51: TD003 Missing issue link on the line following this TODO
   |
70 |         """
71 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |                                                   ^^^^ TD003
72 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
73 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:71:51: FIX002 Line contains TODO, consider resolving the issue
   |
70 |         """
71 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |                                                   ^^^^ FIX002
72 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
73 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:72:9: ERA001 Found commented-out code
   |
70 |         """
71 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
72 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
73 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
74 |         # the node_input batch slices this into separate graphs
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\instance_norm.py:84:13: ERA001 Found commented-out code
   |
82 |         for mul, ir in self.irreps:  # mul is the multiplicity (number of copies) of some irrep type (ir)
83 |             d = ir.dim
84 |             #field = node_input[:, ix: ix + mul * d]  # [batch * sample, mul * repr]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
85 |             field = node_input.narrow(1, ix, mul*d)
86 |             ix += mul * d
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\instance_norm.py:88:13: ERA001 Found commented-out code
   |
86 |             ix += mul * d
87 | 
88 |             # [batch * sample, mul, repr]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
89 |             field = field.reshape(-1, mul, d)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\instance_norm.py:105:23: TRY003 Avoid specifying long messages outside the exception class
    |
103 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
104 |             else:
105 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
106 |             # Reduction method
107 |             if self.reduce == "mean":
    |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:105:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
103 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
104 |             else:
105 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
106 |             # Reduction method
107 |             if self.reduce == "mean":
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\instance_norm.py:112:23: TRY003 Avoid specifying long messages outside the exception class
    |
110 |                 field_norm = global_max_pool(field_norm, batch)  # [batch, mul]
111 |             else:
112 |                 raise ValueError(f"Invalid reduce option {self.reduce}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
113 | 
114 |             # Then apply the rescaling (divide by the sqrt of the squared_norm, i.e., divide by the norm
    |

src\stk_search\geom3d\models\Equiformer\instance_norm.py:112:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
110 |                 field_norm = global_max_pool(field_norm, batch)  # [batch, mul]
111 |             else:
112 |                 raise ValueError(f"Invalid reduce option {self.reduce}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
113 | 
114 |             # Then apply the rescaling (divide by the sqrt of the squared_norm, i.e., divide by the norm
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\instance_norm.py:138:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
137 |         output = torch.cat(fields, dim=-1)  # [batch * sample, stacked features]
138 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\layer_norm.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\layer_norm.py:12:7: D101 Missing docstring in public class
   |
10 | #   https://github.com/e3nn/e3nn/blob/main/e3nn/nn/_batchnorm.py
11 | @compile_mode("unsupported")
12 | class EquivariantLayerNorm(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^ D101
13 | 
14 |     NORM_CLAMP = 2 ** -24  # Minimum positive subnormal for FP16
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:16:9: ANN204 Missing return type annotation for special method `__init__`
   |
14 |     NORM_CLAMP = 2 ** -24  # Minimum positive subnormal for FP16
15 | 
16 |     def __init__(self, irreps_in, eps=1e-5):
   |         ^^^^^^^^ ANN204
17 |         super().__init__()
18 |         self.irreps_in = irreps_in
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:16:9: D107 Missing docstring in `__init__`
   |
14 |     NORM_CLAMP = 2 ** -24  # Minimum positive subnormal for FP16
15 | 
16 |     def __init__(self, irreps_in, eps=1e-5):
   |         ^^^^^^^^ D107
17 |         super().__init__()
18 |         self.irreps_in = irreps_in
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:22:13: B007 Loop control variable `idx` not used within loop body
   |
20 |         self.layer_norms = []
21 | 
22 |         for idx, (mul, ir) in enumerate(self.irreps_in):
   |             ^^^ B007
23 |             self.layer_norms.append(torch.nn.LayerNorm(mul, eps))
24 |         self.layer_norms = torch.nn.ModuleList(self.layer_norms)
   |
   = help: Rename unused `idx` to `_idx`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:22:24: B007 Loop control variable `ir` not used within loop body
   |
20 |         self.layer_norms = []
21 | 
22 |         for idx, (mul, ir) in enumerate(self.irreps_in):
   |                        ^^ B007
23 |             self.layer_norms.append(torch.nn.LayerNorm(mul, eps))
24 |         self.layer_norms = torch.nn.ModuleList(self.layer_norms)
   |
   = help: Rename unused `ir` to `_ir`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:26:9: ERA001 Found commented-out code
   |
24 |         self.layer_norms = torch.nn.ModuleList(self.layer_norms)
25 | 
26 |         #self.relu = torch.nn.ReLU()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\layer_norm.py:29:29: ANN003 Missing type annotation for `**kwargs`
   |
29 |     def forward(self, f_in, **kwargs):
   |                             ^^^^^^^^ ANN003
30 |         """Assume `f_in` is of shape [N, C].
31 |         """
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:29:31: ARG002 Unused method argument: `kwargs`
   |
29 |     def forward(self, f_in, **kwargs):
   |                               ^^^^^^ ARG002
30 |         """Assume `f_in` is of shape [N, C].
31 |         """
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:30:9: D200 One-line docstring should fit on one line
   |
29 |       def forward(self, f_in, **kwargs):
30 |           """Assume `f_in` is of shape [N, C].
   |  _________^
31 | |         """
   | |___________^ D200
32 |           f_out = []
33 |           channel_idx = 0
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\layer_norm.py:34:9: N806 Variable `N` in function should be lowercase
   |
32 |         f_out = []
33 |         channel_idx = 0
34 |         N = f_in.shape[0]
   |         ^ N806
35 |         for degree_idx, (mul, ir) in enumerate(self.irreps_in):
36 |             feat = f_in[:, channel_idx:(channel_idx+mul*ir.dim)]
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:42:13: ERA001 Found commented-out code
   |
41 |             #if not ir.is_scalar():
42 |             #    new_norm = self.relu(new_norm)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
43 | 
44 |             norm = norm.reshape(N, mul, 1)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\layer_norm.py:53:16: RET504 Unnecessary assignment to `f_out` before `return` statement
   |
52 |         f_out = torch.cat(f_out, dim=-1)
53 |         return f_out
   |                ^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\layer_norm.py:56:9: ANN204 Missing return type annotation for special method `__repr__`
   |
56 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
57 |         return f"{self.__class__.__name__}({self.irreps_in}, eps={self.eps})"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:56:9: D105 Missing docstring in magic method
   |
56 |     def __repr__(self):
   |         ^^^^^^^^ D105
57 |         return f"{self.__class__.__name__}({self.irreps_in}, eps={self.eps})"
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:60:7: D101 Missing docstring in public class
   |
60 | class EquivariantLayerNormV2(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^^^ D101
61 | 
62 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:62:9: ANN204 Missing return type annotation for special method `__init__`
   |
60 | class EquivariantLayerNormV2(nn.Module):
61 | 
62 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
   |         ^^^^^^^^ ANN204
63 |         super().__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:62:9: D107 Missing docstring in `__init__`
   |
60 | class EquivariantLayerNormV2(nn.Module):
61 | 
62 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
   |         ^^^^^^^^ D107
63 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:62:42: FBT002 Boolean default positional argument in function definition
   |
60 | class EquivariantLayerNormV2(nn.Module):
61 | 
62 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
   |                                          ^^^^^^ FBT002
63 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:79:9: S101 Use of `assert` detected
   |
77 |             self.register_parameter("affine_bias", None)
78 | 
79 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
   |         ^^^^^^ S101
80 |         self.normalization = normalization
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:83:9: ANN204 Missing return type annotation for special method `__repr__`
   |
83 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
84 |         return f"{self.__class__.__name__}({self.irreps}, eps={self.eps})"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:83:9: D105 Missing docstring in magic method
   |
83 |     def __repr__(self):
   |         ^^^^^^^^ D105
84 |         return f"{self.__class__.__name__}({self.irreps}, eps={self.eps})"
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:88:9: D102 Missing docstring in public method
   |
87 |     @torch.cuda.amp.autocast(enabled=False)
88 |     def forward(self, node_input, **kwargs):
   |         ^^^^^^^ D102
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:88:35: ANN003 Missing type annotation for `**kwargs`
   |
87 |     @torch.cuda.amp.autocast(enabled=False)
88 |     def forward(self, node_input, **kwargs):
   |                                   ^^^^^^^^ ANN003
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:88:37: ARG002 Unused method argument: `kwargs`
   |
87 |     @torch.cuda.amp.autocast(enabled=False)
88 |     def forward(self, node_input, **kwargs):
   |                                     ^^^^^^ ARG002
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:89:9: ERA001 Found commented-out code
   |
87 |     @torch.cuda.amp.autocast(enabled=False)
88 |     def forward(self, node_input, **kwargs):
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
91 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\layer_norm.py:89:51: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
87 |     @torch.cuda.amp.autocast(enabled=False)
88 |     def forward(self, node_input, **kwargs):
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |                                                   ^^^^ TD002
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
91 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:89:51: TD003 Missing issue link on the line following this TODO
   |
87 |     @torch.cuda.amp.autocast(enabled=False)
88 |     def forward(self, node_input, **kwargs):
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |                                                   ^^^^ TD003
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
91 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:89:51: FIX002 Line contains TODO, consider resolving the issue
   |
87 |     @torch.cuda.amp.autocast(enabled=False)
88 |     def forward(self, node_input, **kwargs):
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
   |                                                   ^^^^ FIX002
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
91 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:90:9: ERA001 Found commented-out code
   |
88 |     def forward(self, node_input, **kwargs):
89 |         # batch, *size, dim = node_input.shape  # TODO: deal with batch
90 |         # node_input = node_input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
91 |         # node_input has shape [batch * nodes, dim], but with variable nr of nodes.
92 |         # the node_input batch slices this into separate graphs
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\layer_norm.py:102:13: ERA001 Found commented-out code
    |
100 |         for mul, ir in self.irreps:  # mul is the multiplicity (number of copies) of some irrep type (ir)
101 |             d = ir.dim
102 |             #field = node_input[:, ix: ix + mul * d]  # [batch * sample, mul * repr]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
103 |             field = node_input.narrow(1, ix, mul*d)
104 |             ix += mul * d
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\layer_norm.py:106:13: ERA001 Found commented-out code
    |
104 |             ix += mul * d
105 | 
106 |             # [batch * sample, mul, repr]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
107 |             field = field.reshape(-1, mul, d)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\layer_norm.py:123:23: TRY003 Avoid specifying long messages outside the exception class
    |
121 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
122 |             else:
123 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
124 |             field_norm = torch.mean(field_norm, dim=1, keepdim=True)
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:123:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
121 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
122 |             else:
123 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
124 |             field_norm = torch.mean(field_norm, dim=1, keepdim=True)
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\layer_norm.py:150:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
149 |         output = torch.cat(fields, dim=-1)  # [batch * sample, stacked features]
150 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\layer_norm.py:154:5: D200 One-line docstring should fit on one line
    |
153 |   class EquivariantLayerNormV3(nn.Module):
154 |       """V2 + Centering for vectors of all degrees
    |  _____^
155 | |     """
    | |_______^ D200
156 |   
157 |       def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\layer_norm.py:154:5: D400 First line should end with a period
    |
153 |   class EquivariantLayerNormV3(nn.Module):
154 |       """V2 + Centering for vectors of all degrees
    |  _____^
155 | |     """
    | |_______^ D400
156 |   
157 |       def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\layer_norm.py:154:5: D415 First line should end with a period, question mark, or exclamation point
    |
153 |   class EquivariantLayerNormV3(nn.Module):
154 |       """V2 + Centering for vectors of all degrees
    |  _____^
155 | |     """
    | |_______^ D415
156 |   
157 |       def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\layer_norm.py:157:9: ANN204 Missing return type annotation for special method `__init__`
    |
155 |     """
156 | 
157 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |         ^^^^^^^^ ANN204
158 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:157:9: D107 Missing docstring in `__init__`
    |
155 |     """
156 | 
157 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |         ^^^^^^^^ D107
158 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:157:42: FBT002 Boolean default positional argument in function definition
    |
155 |     """
156 | 
157 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |                                          ^^^^^^ FBT002
158 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:174:9: S101 Use of `assert` detected
    |
172 |             self.register_parameter("affine_bias", None)
173 | 
174 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
    |         ^^^^^^ S101
175 |         self.normalization = normalization
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:178:9: ANN204 Missing return type annotation for special method `__repr__`
    |
178 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
179 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:178:9: D105 Missing docstring in magic method
    |
178 |     def __repr__(self):
    |         ^^^^^^^^ D105
179 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:183:9: D102 Missing docstring in public method
    |
182 |     #@torch.autocast(device_type='cuda', enabled=False)
183 |     def forward(self, node_input, **kwargs):
    |         ^^^^^^^ D102
184 | 
185 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:183:35: ANN003 Missing type annotation for `**kwargs`
    |
182 |     #@torch.autocast(device_type='cuda', enabled=False)
183 |     def forward(self, node_input, **kwargs):
    |                                   ^^^^^^^^ ANN003
184 | 
185 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:183:37: ARG002 Unused method argument: `kwargs`
    |
182 |     #@torch.autocast(device_type='cuda', enabled=False)
183 |     def forward(self, node_input, **kwargs):
    |                                     ^^^^^^ ARG002
184 | 
185 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:230:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
229 |         output = torch.cat(fields, dim=-1)  # [batch * sample, stacked features]
230 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\layer_norm.py:234:5: D200 One-line docstring should fit on one line
    |
233 |   class EquivariantLayerNormV4(nn.Module):
234 |       """V3 + Learnable mean shift
    |  _____^
235 | |     """
    | |_______^ D200
236 |   
237 |       def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\layer_norm.py:234:5: D400 First line should end with a period
    |
233 |   class EquivariantLayerNormV4(nn.Module):
234 |       """V3 + Learnable mean shift
    |  _____^
235 | |     """
    | |_______^ D400
236 |   
237 |       def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\layer_norm.py:234:5: D415 First line should end with a period, question mark, or exclamation point
    |
233 |   class EquivariantLayerNormV4(nn.Module):
234 |       """V3 + Learnable mean shift
    |  _____^
235 | |     """
    | |_______^ D415
236 |   
237 |       def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\layer_norm.py:237:9: ANN204 Missing return type annotation for special method `__init__`
    |
235 |     """
236 | 
237 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |         ^^^^^^^^ ANN204
238 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:237:9: D107 Missing docstring in `__init__`
    |
235 |     """
236 | 
237 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |         ^^^^^^^^ D107
238 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:237:42: FBT002 Boolean default positional argument in function definition
    |
235 |     """
236 | 
237 |     def __init__(self, irreps, eps=1e-5, affine=True, normalization="component"):
    |                                          ^^^^^^ FBT002
238 |         super().__init__()
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:263:9: S101 Use of `assert` detected
    |
261 |             self.register_parameter("affine_bias", None)
262 | 
263 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
    |         ^^^^^^ S101
264 |         self.normalization = normalization
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:267:9: ANN204 Missing return type annotation for special method `__repr__`
    |
267 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
268 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:267:9: D105 Missing docstring in magic method
    |
267 |     def __repr__(self):
    |         ^^^^^^^^ D105
268 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:272:9: D102 Missing docstring in public method
    |
271 |     #@torch.autocast(device_type='cuda', enabled=False)
272 |     def forward(self, node_input, **kwargs):
    |         ^^^^^^^ D102
273 | 
274 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:272:35: ANN003 Missing type annotation for `**kwargs`
    |
271 |     #@torch.autocast(device_type='cuda', enabled=False)
272 |     def forward(self, node_input, **kwargs):
    |                                   ^^^^^^^^ ANN003
273 | 
274 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:272:37: ARG002 Unused method argument: `kwargs`
    |
271 |     #@torch.autocast(device_type='cuda', enabled=False)
272 |     def forward(self, node_input, **kwargs):
    |                                     ^^^^^^ ARG002
273 | 
274 |         dim = node_input.shape[-1]
    |

src\stk_search\geom3d\models\Equiformer\layer_norm.py:323:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
322 |         output = torch.cat(fields, dim=-1)  # [batch * sample, stacked features]
323 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\layer_norm.py:332:5: T201 `print` found
    |
330 |     irreps_in = o3.Irreps("4x0e+2x1o+1x2e")
331 |     ln = EquivariantLayerNorm(irreps_in, eps=1e-5)
332 |     print(ln)
    |     ^^^^^ T201
333 | 
334 |     inputs = irreps_in.randn(10, -1)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\Equiformer\layer_norm.py:345:5: T201 `print` found
    |
343 |     outputs_after = ln(inputs) @ D.T
344 | 
345 |     print(torch.max(torch.abs(outputs_after - outputs_before)))
    |     ^^^^^ T201
346 | 
347 |     ln2 = EquivariantLayerNormV4(irreps_in)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\Equiformer\radial_basis.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\radial_basis.py:20:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 |     """
19 | 
20 |     def __init__(self, exponent):
   |         ^^^^^^^^ ANN204
21 |         super().__init__()
22 |         assert exponent > 0
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\radial_basis.py:20:9: D107 Missing docstring in `__init__`
   |
18 |     """
19 | 
20 |     def __init__(self, exponent):
   |         ^^^^^^^^ D107
21 |         super().__init__()
22 |         assert exponent > 0
   |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:22:9: S101 Use of `assert` detected
   |
20 |     def __init__(self, exponent):
21 |         super().__init__()
22 |         assert exponent > 0
   |         ^^^^^^ S101
23 |         self.p = exponent
24 |         self.a = -(self.p + 1) * (self.p + 2) / 2
   |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:28:9: D102 Missing docstring in public method
   |
26 |         self.c = -self.p * (self.p + 1) / 2
27 | 
28 |     def forward(self, d_scaled):
   |         ^^^^^^^ D102
29 |         env_val = (
30 |             1
   |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:39:5: D205 1 blank line required between summary line and description
   |
38 |   class ExponentialEnvelope(torch.nn.Module):
39 |       """Exponential envelope function that ensures a smooth cutoff,
   |  _____^
40 | |     as proposed in Unke, Chmiela, Gastegger, Schütt, Sauceda, Müller 2021.
41 | |     SpookyNet: Learning Force Fields with Electronic Degrees of Freedom
42 | |     and Nonlocal Effects
43 | |     """
   | |_______^ D205
44 |   
45 |       def __init__(self):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\radial_basis.py:39:5: D400 First line should end with a period
   |
38 |   class ExponentialEnvelope(torch.nn.Module):
39 |       """Exponential envelope function that ensures a smooth cutoff,
   |  _____^
40 | |     as proposed in Unke, Chmiela, Gastegger, Schütt, Sauceda, Müller 2021.
41 | |     SpookyNet: Learning Force Fields with Electronic Degrees of Freedom
42 | |     and Nonlocal Effects
43 | |     """
   | |_______^ D400
44 |   
45 |       def __init__(self):
   |
   = help: Add period

src\stk_search\geom3d\models\Equiformer\radial_basis.py:39:5: D415 First line should end with a period, question mark, or exclamation point
   |
38 |   class ExponentialEnvelope(torch.nn.Module):
39 |       """Exponential envelope function that ensures a smooth cutoff,
   |  _____^
40 | |     as proposed in Unke, Chmiela, Gastegger, Schütt, Sauceda, Müller 2021.
41 | |     SpookyNet: Learning Force Fields with Electronic Degrees of Freedom
42 | |     and Nonlocal Effects
43 | |     """
   | |_______^ D415
44 |   
45 |       def __init__(self):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\radial_basis.py:45:9: ANN204 Missing return type annotation for special method `__init__`
   |
43 |     """
44 | 
45 |     def __init__(self):
   |         ^^^^^^^^ ANN204
46 |         super().__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\radial_basis.py:45:9: D107 Missing docstring in `__init__`
   |
43 |     """
44 | 
45 |     def __init__(self):
   |         ^^^^^^^^ D107
46 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:48:9: D102 Missing docstring in public method
   |
46 |         super().__init__()
47 | 
48 |     def forward(self, d_scaled):
   |         ^^^^^^^ D102
49 |         env_val = torch.exp(
50 |             -(d_scaled ** 2) / ((1 - d_scaled) * (1 + d_scaled))
   |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:56:5: D400 First line should end with a period
   |
55 |   class SphericalBesselBasis(torch.nn.Module):
56 |       """1D spherical Bessel basis
   |  _____^
57 | | 
58 | |     Parameters
59 | |     ----------
60 | |     num_radial: int
61 | |         Controls maximum frequency.
62 | |     cutoff: float
63 | |         Cutoff distance in Angstrom.
64 | | 
65 | |     """
   | |_______^ D400
66 |   
67 |       def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\Equiformer\radial_basis.py:56:5: D415 First line should end with a period, question mark, or exclamation point
   |
55 |   class SphericalBesselBasis(torch.nn.Module):
56 |       """1D spherical Bessel basis
   |  _____^
57 | | 
58 | |     Parameters
59 | |     ----------
60 | |     num_radial: int
61 | |         Controls maximum frequency.
62 | |     cutoff: float
63 | |         Cutoff distance in Angstrom.
64 | | 
65 | |     """
   | |_______^ D415
66 |   
67 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\radial_basis.py:67:9: ANN204 Missing return type annotation for special method `__init__`
   |
65 |     """
66 | 
67 |     def __init__(
   |         ^^^^^^^^ ANN204
68 |         self,
69 |         num_radial: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\radial_basis.py:67:9: D107 Missing docstring in `__init__`
   |
65 |     """
66 | 
67 |     def __init__(
   |         ^^^^^^^^ D107
68 |         self,
69 |         num_radial: int,
   |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:84:9: D102 Missing docstring in public method
   |
82 |         )
83 | 
84 |     def forward(self, d_scaled):
   |         ^^^^^^^ D102
85 |         return (
86 |             self.norm_const
   |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:93:5: D205 1 blank line required between summary line and description
    |
 92 |   class BernsteinBasis(torch.nn.Module):
 93 |       """Bernstein polynomial basis,
    |  _____^
 94 | |     as proposed in Unke, Chmiela, Gastegger, Schütt, Sauceda, Müller 2021.
 95 | |     SpookyNet: Learning Force Fields with Electronic Degrees of Freedom
 96 | |     and Nonlocal Effects
 97 | | 
 98 | |     Parameters
 99 | |     ----------
100 | |     num_radial: int
101 | |         Controls maximum frequency.
102 | |     pregamma_initial: float
103 | |         Initial value of exponential coefficient gamma.
104 | |         Default: gamma = 0.5 * a_0**-1 = 0.94486,
105 | |         inverse softplus -> pregamma = log e**gamma - 1 = 0.45264
106 | | 
107 | |     """
    | |_______^ D205
108 |   
109 |       def __init__(
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\radial_basis.py:93:5: D400 First line should end with a period
    |
 92 |   class BernsteinBasis(torch.nn.Module):
 93 |       """Bernstein polynomial basis,
    |  _____^
 94 | |     as proposed in Unke, Chmiela, Gastegger, Schütt, Sauceda, Müller 2021.
 95 | |     SpookyNet: Learning Force Fields with Electronic Degrees of Freedom
 96 | |     and Nonlocal Effects
 97 | | 
 98 | |     Parameters
 99 | |     ----------
100 | |     num_radial: int
101 | |         Controls maximum frequency.
102 | |     pregamma_initial: float
103 | |         Initial value of exponential coefficient gamma.
104 | |         Default: gamma = 0.5 * a_0**-1 = 0.94486,
105 | |         inverse softplus -> pregamma = log e**gamma - 1 = 0.45264
106 | | 
107 | |     """
    | |_______^ D400
108 |   
109 |       def __init__(
    |
    = help: Add period

src\stk_search\geom3d\models\Equiformer\radial_basis.py:93:5: D415 First line should end with a period, question mark, or exclamation point
    |
 92 |   class BernsteinBasis(torch.nn.Module):
 93 |       """Bernstein polynomial basis,
    |  _____^
 94 | |     as proposed in Unke, Chmiela, Gastegger, Schütt, Sauceda, Müller 2021.
 95 | |     SpookyNet: Learning Force Fields with Electronic Degrees of Freedom
 96 | |     and Nonlocal Effects
 97 | | 
 98 | |     Parameters
 99 | |     ----------
100 | |     num_radial: int
101 | |         Controls maximum frequency.
102 | |     pregamma_initial: float
103 | |         Initial value of exponential coefficient gamma.
104 | |         Default: gamma = 0.5 * a_0**-1 = 0.94486,
105 | |         inverse softplus -> pregamma = log e**gamma - 1 = 0.45264
106 | | 
107 | |     """
    | |_______^ D415
108 |   
109 |       def __init__(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Equiformer\radial_basis.py:109:9: ANN204 Missing return type annotation for special method `__init__`
    |
107 |     """
108 | 
109 |     def __init__(
    |         ^^^^^^^^ ANN204
110 |         self,
111 |         num_radial: int,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\radial_basis.py:109:9: D107 Missing docstring in `__init__`
    |
107 |     """
108 | 
109 |     def __init__(
    |         ^^^^^^^^ D107
110 |         self,
111 |         num_radial: int,
    |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:133:9: D102 Missing docstring in public method
    |
131 |         self.register_buffer("exp2", exp2[None, :], persistent=False)
132 | 
133 |     def forward(self, d_scaled):
    |         ^^^^^^^ D102
134 |         gamma = self.softplus(self.pregamma)  # constrain to positive
135 |         exp_d = torch.exp(-gamma * d_scaled)[:, None]
    |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:142:5: D205 1 blank line required between summary line and description
    |
141 |   class RadialBasis(torch.nn.Module):
142 |       """Parameters
    |  _____^
143 | |     ----------
144 | |     num_radial: int
145 | |         Controls maximum frequency.
146 | |     cutoff: float
147 | |         Cutoff distance in Angstrom.
148 | |     rbf: dict = {"name": "gaussian"}
149 | |         Basis function and its hyperparameters.
150 | |     envelope: dict = {"name": "polynomial", "exponent": 5}
151 | |         Envelope function and its hyperparameters.
152 | | 
153 | |     """
    | |_______^ D205
154 |   
155 |       def __init__(
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Equiformer\radial_basis.py:155:9: ANN204 Missing return type annotation for special method `__init__`
    |
153 |     """
154 | 
155 |     def __init__(
    |         ^^^^^^^^ ANN204
156 |         self,
157 |         num_radial: int,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\radial_basis.py:155:9: D107 Missing docstring in `__init__`
    |
153 |     """
154 | 
155 |     def __init__(
    |         ^^^^^^^^ D107
156 |         self,
157 |         num_radial: int,
    |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:159:21: B006 Do not use mutable data structures for argument defaults
    |
157 |         num_radial: int,
158 |         cutoff: float,
159 |         rbf: dict = {"name": "gaussian"},
    |                     ^^^^^^^^^^^^^^^^^^^^ B006
160 |         envelope: dict = {"name": "polynomial", "exponent": 5},
161 |     ):
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Equiformer\radial_basis.py:160:26: B006 Do not use mutable data structures for argument defaults
    |
158 |         cutoff: float,
159 |         rbf: dict = {"name": "gaussian"},
160 |         envelope: dict = {"name": "polynomial", "exponent": 5},
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B006
161 |     ):
162 |         super().__init__()
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\Equiformer\radial_basis.py:174:19: TRY003 Avoid specifying long messages outside the exception class
    |
172 |             self.envelope = ExponentialEnvelope(**env_hparams)
173 |         else:
174 |             raise ValueError(f"Unknown envelope function '{env_name}'.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
175 | 
176 |         rbf_name = rbf["name"].lower()
    |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:174:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
172 |             self.envelope = ExponentialEnvelope(**env_hparams)
173 |         else:
174 |             raise ValueError(f"Unknown envelope function '{env_name}'.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
175 | 
176 |         rbf_name = rbf["name"].lower()
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\radial_basis.py:192:19: TRY003 Avoid specifying long messages outside the exception class
    |
190 |             self.rbf = BernsteinBasis(num_radial=num_radial, **rbf_hparams)
191 |         else:
192 |             raise ValueError(f"Unknown radial basis function '{rbf_name}'.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
193 | 
194 |     def forward(self, d):
    |

src\stk_search\geom3d\models\Equiformer\radial_basis.py:192:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
190 |             self.rbf = BernsteinBasis(num_radial=num_radial, **rbf_hparams)
191 |         else:
192 |             raise ValueError(f"Unknown radial basis function '{rbf_name}'.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
193 | 
194 |     def forward(self, d):
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\Equiformer\radial_basis.py:194:9: D102 Missing docstring in public method
    |
192 |             raise ValueError(f"Unknown radial basis function '{rbf_name}'.")
193 | 
194 |     def forward(self, d):
    |         ^^^^^^^ D102
195 |         d_scaled = d * self.inv_cutoff
    |

src\stk_search\geom3d\models\Equiformer\radial_func.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Equiformer\radial_func.py:8:7: D101 Missing docstring in public class
   |
 8 | class RadialProfile(nn.Module):
   |       ^^^^^^^^^^^^^ D101
 9 |     def __init__(self, ch_list, use_layer_norm=True, use_offset=True):
10 |         super().__init__()
   |

src\stk_search\geom3d\models\Equiformer\radial_func.py:9:9: ANN204 Missing return type annotation for special method `__init__`
   |
 8 | class RadialProfile(nn.Module):
 9 |     def __init__(self, ch_list, use_layer_norm=True, use_offset=True):
   |         ^^^^^^^^ ANN204
10 |         super().__init__()
11 |         modules = []
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\radial_func.py:9:9: D107 Missing docstring in `__init__`
   |
 8 | class RadialProfile(nn.Module):
 9 |     def __init__(self, ch_list, use_layer_norm=True, use_offset=True):
   |         ^^^^^^^^ D107
10 |         super().__init__()
11 |         modules = []
   |

src\stk_search\geom3d\models\Equiformer\radial_func.py:9:33: FBT002 Boolean default positional argument in function definition
   |
 8 | class RadialProfile(nn.Module):
 9 |     def __init__(self, ch_list, use_layer_norm=True, use_offset=True):
   |                                 ^^^^^^^^^^^^^^ FBT002
10 |         super().__init__()
11 |         modules = []
   |

src\stk_search\geom3d\models\Equiformer\radial_func.py:9:54: FBT002 Boolean default positional argument in function definition
   |
 8 | class RadialProfile(nn.Module):
 9 |     def __init__(self, ch_list, use_layer_norm=True, use_offset=True):
   |                                                      ^^^^^^^^^^ FBT002
10 |         super().__init__()
11 |         modules = []
   |

src\stk_search\geom3d\models\Equiformer\radial_func.py:28:13: ERA001 Found commented-out code
   |
26 |             if use_layer_norm:
27 |                 modules.append(nn.LayerNorm(ch_list[i]))
28 |             #modules.append(nn.ReLU())
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
29 |             #modules.append(Activation(o3.Irreps('{}x0e'.format(ch_list[i])),
30 |             #    acts=[torch.nn.functional.silu]))
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\radial_func.py:45:9: D102 Missing docstring in public method
   |
45 |     def forward(self, f_in):
   |         ^^^^^^^ D102
46 |         f_out = self.net(f_in)
47 |         if self.offset is not None:
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Rescale output and weights of tensor product.
2 | | """
  | |___^ D200
3 |   
4 |   import collections
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:12:7: D101 Missing docstring in public class
   |
12 | class TensorProductRescale(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^ D101
13 |     def __init__(self,
14 |         irreps_in1, irreps_in2, irreps_out,
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:13:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
12 | class TensorProductRescale(torch.nn.Module):
13 |     def __init__(self,
   |         ^^^^^^^^ PLR0913
14 |         irreps_in1, irreps_in2, irreps_out,
15 |         instructions,
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:13:9: ANN204 Missing return type annotation for special method `__init__`
   |
12 | class TensorProductRescale(torch.nn.Module):
13 |     def __init__(self,
   |         ^^^^^^^^ ANN204
14 |         irreps_in1, irreps_in2, irreps_out,
15 |         instructions,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:13:9: D107 Missing docstring in `__init__`
   |
12 | class TensorProductRescale(torch.nn.Module):
13 |     def __init__(self,
   |         ^^^^^^^^ D107
14 |         irreps_in1, irreps_in2, irreps_out,
15 |         instructions,
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:16:9: FBT002 Boolean default positional argument in function definition
   |
14 |         irreps_in1, irreps_in2, irreps_out,
15 |         instructions,
16 |         bias=True, rescale=True,
   |         ^^^^ FBT002
17 |         internal_weights=None, shared_weights=None,
18 |         normalization=None):
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:16:20: FBT002 Boolean default positional argument in function definition
   |
14 |         irreps_in1, irreps_in2, irreps_out,
15 |         instructions,
16 |         bias=True, rescale=True,
   |                    ^^^^^^^ FBT002
17 |         internal_weights=None, shared_weights=None,
18 |         normalization=None):
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:39:9: D102 Missing docstring in public method
   |
39 |     def calculate_fan_in(self, ins):
   |         ^^^^^^^^^^^^^^^^ D102
40 |         return {
41 |             "uvw": (self.irreps_in1[ins.i_in1].mul * self.irreps_in2[ins.i_in2].mul),
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:52:9: D102 Missing docstring in public method
   |
52 |     def init_rescale_bias(self) -> None:
   |         ^^^^^^^^^^^^^^^^^ D102
53 | 
54 |         irreps_out = self.irreps_out
   |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:108:21: ERA001 Found commented-out code
    |
106 |                         sqrt_k = 1 / slices_fan_in[slice_idx] ** 0.5
107 |                         weight.data.mul_(sqrt_k)
108 |                     #else:
    |                     ^^^^^^ ERA001
109 |                     #    sqrt_k = 1.
110 |                     #
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:109:21: ERA001 Found commented-out code
    |
107 |                         weight.data.mul_(sqrt_k)
108 |                     #else:
109 |                     #    sqrt_k = 1.
    |                     ^^^^^^^^^^^^^^^^ ERA001
110 |                     #
111 |                     #if self.rescale:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:112:25: ERA001 Found commented-out code
    |
110 |                     #
111 |                     #if self.rescale:
112 |                         #weight.data.uniform_(-sqrt_k, sqrt_k)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
113 |                     #    weight.data.mul_(sqrt_k)
114 |                     #self.slices_sqrt_k[slice_idx] = (self.irreps_out_slices[slice_idx], sqrt_k)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:113:21: ERA001 Found commented-out code
    |
111 |                     #if self.rescale:
112 |                         #weight.data.uniform_(-sqrt_k, sqrt_k)
113 |                     #    weight.data.mul_(sqrt_k)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
114 |                     #self.slices_sqrt_k[slice_idx] = (self.irreps_out_slices[slice_idx], sqrt_k)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:114:21: ERA001 Found commented-out code
    |
112 |                         #weight.data.uniform_(-sqrt_k, sqrt_k)
113 |                     #    weight.data.mul_(sqrt_k)
114 |                     #self.slices_sqrt_k[slice_idx] = (self.irreps_out_slices[slice_idx], sqrt_k)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
115 | 
116 |             # Initialize the biases
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:118:13: ERA001 Found commented-out code
    |
116 |             # Initialize the biases
117 |             #for (out_slice_idx, out_slice, out_bias) in zip(self.bias_slice_idx, self.bias_slices, self.bias):
118 |             #    sqrt_k = 1 / slices_fan_in[out_slice_idx] ** 0.5
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
119 |             #    out_bias.uniform_(-sqrt_k, sqrt_k)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:119:13: ERA001 Found commented-out code
    |
117 |             #for (out_slice_idx, out_slice, out_bias) in zip(self.bias_slice_idx, self.bias_slices, self.bias):
118 |             #    sqrt_k = 1 / slices_fan_in[out_slice_idx] ** 0.5
119 |             #    out_bias.uniform_(-sqrt_k, sqrt_k)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:122:9: D102 Missing docstring in public method
    |
122 |     def forward_tp_rescale_bias(self, x, y, weight=None):
    |         ^^^^^^^^^^^^^^^^^^^^^^^ D102
123 | 
124 |         out = self.tp(x, y, weight)
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:128:9: ERA001 Found commented-out code
    |
126 |         #if self.rescale and self.tp.internal_weights:
127 |         #    for (slice, slice_sqrt_k) in self.slices_sqrt_k.values():
128 |         #        out[:, slice] /= slice_sqrt_k
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
129 |         if self.use_bias:
130 |             for (_, slice, bias) in zip(self.bias_slice_idx, self.bias_slices, self.bias):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:130:21: A001 Variable `slice` is shadowing a Python builtin
    |
128 |         #        out[:, slice] /= slice_sqrt_k
129 |         if self.use_bias:
130 |             for (_, slice, bias) in zip(self.bias_slice_idx, self.bias_slices, self.bias):
    |                     ^^^^^ A001
131 |                 #out[:, slice] += bias
132 |                 out.narrow(1, slice.start, slice.stop - slice.start).add_(bias)
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:131:17: ERA001 Found commented-out code
    |
129 |         if self.use_bias:
130 |             for (_, slice, bias) in zip(self.bias_slice_idx, self.bias_slices, self.bias):
131 |                 #out[:, slice] += bias
    |                 ^^^^^^^^^^^^^^^^^^^^^^ ERA001
132 |                 out.narrow(1, slice.start, slice.stop - slice.start).add_(bias)
133 |         return out
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:136:9: D102 Missing docstring in public method
    |
136 |     def forward(self, x, y, weight=None):
    |         ^^^^^^^ D102
137 |         out = self.forward_tp_rescale_bias(x, y, weight)
138 |         return out
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:138:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
136 |     def forward(self, x, y, weight=None):
137 |         out = self.forward_tp_rescale_bias(x, y, weight)
138 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:141:7: D101 Missing docstring in public class
    |
141 | class FullyConnectedTensorProductRescale(TensorProductRescale):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
142 |     def __init__(self,
143 |         irreps_in1, irreps_in2, irreps_out,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:142:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
141 | class FullyConnectedTensorProductRescale(TensorProductRescale):
142 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
143 |         irreps_in1, irreps_in2, irreps_out,
144 |         bias=True, rescale=True,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:142:9: ANN204 Missing return type annotation for special method `__init__`
    |
141 | class FullyConnectedTensorProductRescale(TensorProductRescale):
142 |     def __init__(self,
    |         ^^^^^^^^ ANN204
143 |         irreps_in1, irreps_in2, irreps_out,
144 |         bias=True, rescale=True,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:142:9: D107 Missing docstring in `__init__`
    |
141 | class FullyConnectedTensorProductRescale(TensorProductRescale):
142 |     def __init__(self,
    |         ^^^^^^^^ D107
143 |         irreps_in1, irreps_in2, irreps_out,
144 |         bias=True, rescale=True,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:144:9: FBT002 Boolean default positional argument in function definition
    |
142 |     def __init__(self,
143 |         irreps_in1, irreps_in2, irreps_out,
144 |         bias=True, rescale=True,
    |         ^^^^ FBT002
145 |         internal_weights=None, shared_weights=None,
146 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:144:20: FBT002 Boolean default positional argument in function definition
    |
142 |     def __init__(self,
143 |         irreps_in1, irreps_in2, irreps_out,
144 |         bias=True, rescale=True,
    |                    ^^^^^^^ FBT002
145 |         internal_weights=None, shared_weights=None,
146 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:162:7: D101 Missing docstring in public class
    |
162 | class LinearRS(FullyConnectedTensorProductRescale):
    |       ^^^^^^^^ D101
163 |     def __init__(self, irreps_in, irreps_out, bias=True, rescale=True):
164 |         super().__init__(irreps_in, o3.Irreps("1x0e"), irreps_out,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:163:9: ANN204 Missing return type annotation for special method `__init__`
    |
162 | class LinearRS(FullyConnectedTensorProductRescale):
163 |     def __init__(self, irreps_in, irreps_out, bias=True, rescale=True):
    |         ^^^^^^^^ ANN204
164 |         super().__init__(irreps_in, o3.Irreps("1x0e"), irreps_out,
165 |             bias=bias, rescale=rescale, internal_weights=True,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:163:9: D107 Missing docstring in `__init__`
    |
162 | class LinearRS(FullyConnectedTensorProductRescale):
163 |     def __init__(self, irreps_in, irreps_out, bias=True, rescale=True):
    |         ^^^^^^^^ D107
164 |         super().__init__(irreps_in, o3.Irreps("1x0e"), irreps_out,
165 |             bias=bias, rescale=rescale, internal_weights=True,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:163:47: FBT002 Boolean default positional argument in function definition
    |
162 | class LinearRS(FullyConnectedTensorProductRescale):
163 |     def __init__(self, irreps_in, irreps_out, bias=True, rescale=True):
    |                                               ^^^^ FBT002
164 |         super().__init__(irreps_in, o3.Irreps("1x0e"), irreps_out,
165 |             bias=bias, rescale=rescale, internal_weights=True,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:163:58: FBT002 Boolean default positional argument in function definition
    |
162 | class LinearRS(FullyConnectedTensorProductRescale):
163 |     def __init__(self, irreps_in, irreps_out, bias=True, rescale=True):
    |                                                          ^^^^^^^ FBT002
164 |         super().__init__(irreps_in, o3.Irreps("1x0e"), irreps_out,
165 |             bias=bias, rescale=rescale, internal_weights=True,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:168:9: D102 Missing docstring in public method
    |
166 |             shared_weights=True, normalization=None)
167 | 
168 |     def forward(self, x):
    |         ^^^^^^^ D102
169 |         y = torch.ones_like(x[:, 0:1])
170 |         out = self.forward_tp_rescale_bias(x, y)
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:171:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
169 |         y = torch.ones_like(x[:, 0:1])
170 |         out = self.forward_tp_rescale_bias(x, y)
171 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:174:5: D103 Missing docstring in public function
    |
174 | def irreps2gate(irreps):
    |     ^^^^^^^^^^^ D103
175 |     irreps_scalars = []
176 |     irreps_gated = []
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:184:5: SIM108 Use ternary operator `ir = "0e" if irreps_gated.dim > 0 else None` instead of `if`-`else`-block
    |
182 |       irreps_scalars = o3.Irreps(irreps_scalars).simplify()
183 |       irreps_gated = o3.Irreps(irreps_gated).simplify()
184 |       if irreps_gated.dim > 0:
    |  _____^
185 | |         ir = "0e"
186 | |     else:
187 | |         ir = None
    | |_________________^ SIM108
188 |       irreps_gates = o3.Irreps([(mul, ir) for mul, _ in irreps_gated]).simplify()
189 |       return irreps_scalars, irreps_gates, irreps_gated
    |
    = help: Replace `if`-`else`-block with `ir = "0e" if irreps_gated.dim > 0 else None`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:192:7: D101 Missing docstring in public class
    |
192 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
193 |     def __init__(self,
194 |         irreps_in1, irreps_in2, irreps_out,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:193:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
192 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
193 |     def __init__(self,
    |         ^^^^^^^^ PLR0913
194 |         irreps_in1, irreps_in2, irreps_out,
195 |         bias=True, rescale=True,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:193:9: ANN204 Missing return type annotation for special method `__init__`
    |
192 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
193 |     def __init__(self,
    |         ^^^^^^^^ ANN204
194 |         irreps_in1, irreps_in2, irreps_out,
195 |         bias=True, rescale=True,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:193:9: D107 Missing docstring in `__init__`
    |
192 | class FullyConnectedTensorProductRescaleSwishGate(FullyConnectedTensorProductRescale):
193 |     def __init__(self,
    |         ^^^^^^^^ D107
194 |         irreps_in1, irreps_in2, irreps_out,
195 |         bias=True, rescale=True,
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:195:9: FBT002 Boolean default positional argument in function definition
    |
193 |     def __init__(self,
194 |         irreps_in1, irreps_in2, irreps_out,
195 |         bias=True, rescale=True,
    |         ^^^^ FBT002
196 |         internal_weights=None, shared_weights=None,
197 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:195:20: FBT002 Boolean default positional argument in function definition
    |
193 |     def __init__(self,
194 |         irreps_in1, irreps_in2, irreps_out,
195 |         bias=True, rescale=True,
    |                    ^^^^^^^ FBT002
196 |         internal_weights=None, shared_weights=None,
197 |         normalization=None):
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:215:9: D102 Missing docstring in public method
    |
215 |     def forward(self, x, y, weight=None):
    |         ^^^^^^^ D102
216 |         out = self.forward_tp_rescale_bias(x, y, weight)
217 |         out = self.gate(out)
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:218:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
216 |         out = self.forward_tp_rescale_bias(x, y, weight)
217 |         out = self.gate(out)
218 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:221:5: D103 Missing docstring in public function
    |
221 | def sort_irreps_even_first(irreps):
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
222 |     Ret = collections.namedtuple("sort", ["irreps", "p", "inv"])
223 |     out = [(ir.l, -ir.p, i, mul) for i, (mul, ir) in enumerate(irreps)]
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:222:11: PYI024 Use `typing.NamedTuple` instead of `collections.namedtuple`
    |
221 | def sort_irreps_even_first(irreps):
222 |     Ret = collections.namedtuple("sort", ["irreps", "p", "inv"])
    |           ^^^^^^^^^^^^^^^^^^^^^^ PYI024
223 |     out = [(ir.l, -ir.p, i, mul) for i, (mul, ir) in enumerate(irreps)]
224 |     out = sorted(out)
    |
    = help: Replace with `typing.NamedTuple`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:227:44: E741 Ambiguous variable name: `l`
    |
225 |     inv = tuple(i for _, _, i, _ in out)
226 |     p = perm.inverse(inv)
227 |     irreps = o3.Irreps([(mul, (l, -p)) for l, p, _, mul in out])
    |                                            ^ E741
228 |     return Ret(irreps, p, inv)
    |

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:267:5: T201 `print` found
    |
265 |     out_tp = tp.forward(inputs_1, inputs_2)
266 |     out_tp_rs = tp_rs.forward(inputs_1, inputs_2)
267 |     print(f"[TP] before rescaling difference: {torch.max(torch.abs(out_tp - out_tp_rs))}")
    |     ^^^^^ T201
268 | 
269 |     tp_rs.rescale = True
    |
    = help: Remove `print`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:272:5: T201 `print` found
    |
270 |     tp_rs.init_rescale_bias()
271 |     out_tp_rs = tp_rs.forward(inputs_1, inputs_2)
272 |     print(f"[TP] after rescaling difference: {torch.max(torch.abs(out_tp - out_tp_rs))}")
    |     ^^^^^ T201
273 | 
274 |     # FullyConnectedTensorProduct
    |
    = help: Remove `print`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:283:5: T201 `print` found
    |
281 |     out_fctp = fctp.forward(inputs_1, inputs_2)
282 |     out_fctp_rs = fctp_rs.forward(inputs_1, inputs_2)
283 |     print(f"[FCTP] before rescaling difference: {torch.max(torch.abs(out_fctp - out_fctp_rs))}")
    |     ^^^^^ T201
284 | 
285 |     fctp_rs.rescale = True
    |
    = help: Remove `print`

src\stk_search\geom3d\models\Equiformer\tensor_product_rescale.py:288:5: T201 `print` found
    |
286 |     fctp_rs.init_rescale_bias()
287 |     out_fctp_rs = fctp_rs.forward(inputs_1, inputs_2)
288 |     print(f"[FCTP] after rescaling difference: {torch.max(torch.abs(out_fctp - out_fctp_rs))}")
    |     ^^^^^ T201
    |
    = help: Remove `print`

src\stk_search\geom3d\models\GPS.py:1:1: N999 Invalid module name: 'GPS'
src\stk_search\geom3d\models\GPS.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GPS.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | from ogb.graphproppred.mol_encoder import AtomEncoder, BondEncoder
4 | from stk_search.geom3d.models.GPS_layer import GPSLayer
  |

src\stk_search\geom3d\models\GPS.py:9:7: D101 Missing docstring in public class
   |
 9 | class SANGraphHead(nn.Module):
   |       ^^^^^^^^^^^^ D101
10 |     def __init__(self, dim_in, dim_out, L=2):
11 |         super().__init__()
   |

src\stk_search\geom3d\models\GPS.py:10:9: ANN204 Missing return type annotation for special method `__init__`
   |
 9 | class SANGraphHead(nn.Module):
10 |     def __init__(self, dim_in, dim_out, L=2):
   |         ^^^^^^^^ ANN204
11 |         super().__init__()
12 |         self.pooling_fun = global_mean_pool
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GPS.py:10:9: D107 Missing docstring in `__init__`
   |
 9 | class SANGraphHead(nn.Module):
10 |     def __init__(self, dim_in, dim_out, L=2):
   |         ^^^^^^^^ D107
11 |         super().__init__()
12 |         self.pooling_fun = global_mean_pool
   |

src\stk_search\geom3d\models\GPS.py:10:41: N803 Argument name `L` should be lowercase
   |
 9 | class SANGraphHead(nn.Module):
10 |     def __init__(self, dim_in, dim_out, L=2):
   |                                         ^ N803
11 |         super().__init__()
12 |         self.pooling_fun = global_mean_pool
   |

src\stk_search\geom3d\models\GPS.py:13:9: N806 Variable `list_FC_layers` in function should be lowercase
   |
11 |         super().__init__()
12 |         self.pooling_fun = global_mean_pool
13 |         list_FC_layers = [
   |         ^^^^^^^^^^^^^^ N806
14 |             nn.Linear(dim_in // 2 ** l, dim_in // 2 ** (l + 1), bias=True)
15 |             for l in range(L)]
   |

src\stk_search\geom3d\models\GPS.py:15:17: E741 Ambiguous variable name: `l`
   |
13 |         list_FC_layers = [
14 |             nn.Linear(dim_in // 2 ** l, dim_in // 2 ** (l + 1), bias=True)
15 |             for l in range(L)]
   |                 ^ E741
16 |         list_FC_layers.append(
17 |             nn.Linear(dim_in // 2 ** L, dim_out, bias=True))
   |

src\stk_search\geom3d\models\GPS.py:21:9: ANN202 Missing return type annotation for private function `_apply_index`
   |
19 |         self.L = L
20 | 
21 |     def _apply_index(self, batch):
   |         ^^^^^^^^^^^^ ANN202
22 |         return batch.graph_feature, batch.y
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\GPS.py:24:9: D102 Missing docstring in public method
   |
22 |         return batch.graph_feature, batch.y
23 | 
24 |     def forward(self, batch):
   |         ^^^^^^^ D102
25 |         graph_emb = self.pooling_fun(batch.x, batch.batch)
26 |         for l in range(self.L):
   |

src\stk_search\geom3d\models\GPS.py:26:13: E741 Ambiguous variable name: `l`
   |
24 |     def forward(self, batch):
25 |         graph_emb = self.pooling_fun(batch.x, batch.batch)
26 |         for l in range(self.L):
   |             ^ E741
27 |             graph_emb = self.FC_layers[l](graph_emb)
28 |             graph_emb = F.relu(graph_emb)
   |

src\stk_search\geom3d\models\GPS.py:35:7: D101 Missing docstring in public class
   |
35 | class GPSModel(torch.nn.Module):
   |       ^^^^^^^^ D101
36 |     def __init__(
37 |         self, dim_in, num_tasks,
   |

src\stk_search\geom3d\models\GPS.py:36:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
35 | class GPSModel(torch.nn.Module):
36 |     def __init__(
   |         ^^^^^^^^ PLR0913
37 |         self, dim_in, num_tasks,
38 |         gt_layers=5, gt_dim_hidden=300, gt_n_heads=4, gt_dropout=0, gt_attn_dropout=0.5,
   |

src\stk_search\geom3d\models\GPS.py:36:9: ANN204 Missing return type annotation for special method `__init__`
   |
35 | class GPSModel(torch.nn.Module):
36 |     def __init__(
   |         ^^^^^^^^ ANN204
37 |         self, dim_in, num_tasks,
38 |         gt_layers=5, gt_dim_hidden=300, gt_n_heads=4, gt_dropout=0, gt_attn_dropout=0.5,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GPS.py:36:9: D107 Missing docstring in `__init__`
   |
35 | class GPSModel(torch.nn.Module):
36 |     def __init__(
   |         ^^^^^^^^ D107
37 |         self, dim_in, num_tasks,
38 |         gt_layers=5, gt_dim_hidden=300, gt_n_heads=4, gt_dropout=0, gt_attn_dropout=0.5,
   |

src\stk_search\geom3d\models\GPS.py:39:9: FBT002 Boolean default positional argument in function definition
   |
37 |         self, dim_in, num_tasks,
38 |         gt_layers=5, gt_dim_hidden=300, gt_n_heads=4, gt_dropout=0, gt_attn_dropout=0.5,
39 |         gt_layer_norm=False, gt_batch_norm=True
   |         ^^^^^^^^^^^^^ FBT002
40 |     ):
41 |         super().__init__()
   |

src\stk_search\geom3d\models\GPS.py:39:30: FBT002 Boolean default positional argument in function definition
   |
37 |         self, dim_in, num_tasks,
38 |         gt_layers=5, gt_dim_hidden=300, gt_n_heads=4, gt_dropout=0, gt_attn_dropout=0.5,
39 |         gt_layer_norm=False, gt_batch_norm=True
   |                              ^^^^^^^^^^^^^ FBT002
40 |     ):
41 |         super().__init__()
   |

src\stk_search\geom3d\models\GPS.py:50:13: PERF401 Use a list comprehension to create a transformed list
   |
48 |           layers = []
49 |           for _ in range(gt_layers):
50 |               layers.append(GPSLayer(
   |  _____________^
51 | |                 dim_h=gt_dim_hidden,
52 | |                 local_gnn_type=local_gnn_type,
53 | |                 global_model_type=global_model_type,
54 | |                 num_heads=gt_n_heads,
55 | |                 equivstable_pe=False,
56 | |                 dropout=gt_dropout,
57 | |                 attn_dropout=gt_attn_dropout,
58 | |                 layer_norm=gt_layer_norm,
59 | |                 batch_norm=gt_batch_norm,
60 | |             ))
   | |______________^ PERF401
61 |           self.layers = torch.nn.Sequential(*layers)
   |

src\stk_search\geom3d\models\GPS.py:65:9: D102 Missing docstring in public method
   |
63 |         self.post_mp = SANGraphHead(dim_in=dim_in, dim_out=num_tasks)
64 | 
65 |     def forward(self, batch):
   |         ^^^^^^^ D102
66 |         batch.x = self.atom_encoder(batch.x)
67 |         batch.edge_attr = self.bond_encoder(batch.edge_attr)
   |

src\stk_search\geom3d\models\GPS.py:70:16: RET504 Unnecessary assignment to `batch` before `return` statement
   |
68 |         batch = self.layers(batch)
69 |         batch = self.post_mp(batch)
70 |         return batch
   |                ^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GPS.py:75:5: T201 `print` found
   |
73 | if __name__ == "__main__":
74 |     model = GPSModel(dim_in=300, num_tasks=1)
75 |     print(model)
   |     ^^^^^ T201
   |
   = help: Remove `print`

src\stk_search\geom3d\models\GPS_layer.py:1:1: N999 Invalid module name: 'GPS_layer'
src\stk_search\geom3d\models\GPS_layer.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GPS_layer.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | import torch_geometric.nn as pygnn
4 | from torch import nn
  |

src\stk_search\geom3d\models\GPS_layer.py:11:7: D101 Missing docstring in public class
   |
 9 | Credit to https://github.com/rampasek/GraphGPS/blob/main/graphGPS/layer/GPS_layer.py
10 | """
11 | class GPSLayer(nn.Module):
   |       ^^^^^^^^ D101
12 |     def __init__(self, dim_h,
13 |                  local_gnn_type, global_model_type, num_heads,
   |

src\stk_search\geom3d\models\GPS_layer.py:12:9: C901 `__init__` is too complex (11 > 10)
   |
10 | """
11 | class GPSLayer(nn.Module):
12 |     def __init__(self, dim_h,
   |         ^^^^^^^^ C901
13 |                  local_gnn_type, global_model_type, num_heads,
14 |                  equivstable_pe=False, dropout=0.0,
   |

src\stk_search\geom3d\models\GPS_layer.py:12:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
10 | """
11 | class GPSLayer(nn.Module):
12 |     def __init__(self, dim_h,
   |         ^^^^^^^^ PLR0913
13 |                  local_gnn_type, global_model_type, num_heads,
14 |                  equivstable_pe=False, dropout=0.0,
   |

src\stk_search\geom3d\models\GPS_layer.py:12:9: ANN204 Missing return type annotation for special method `__init__`
   |
10 | """
11 | class GPSLayer(nn.Module):
12 |     def __init__(self, dim_h,
   |         ^^^^^^^^ ANN204
13 |                  local_gnn_type, global_model_type, num_heads,
14 |                  equivstable_pe=False, dropout=0.0,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GPS_layer.py:12:9: D107 Missing docstring in `__init__`
   |
10 | """
11 | class GPSLayer(nn.Module):
12 |     def __init__(self, dim_h,
   |         ^^^^^^^^ D107
13 |                  local_gnn_type, global_model_type, num_heads,
14 |                  equivstable_pe=False, dropout=0.0,
   |

src\stk_search\geom3d\models\GPS_layer.py:14:18: FBT002 Boolean default positional argument in function definition
   |
12 |     def __init__(self, dim_h,
13 |                  local_gnn_type, global_model_type, num_heads,
14 |                  equivstable_pe=False, dropout=0.0,
   |                  ^^^^^^^^^^^^^^ FBT002
15 |                  attn_dropout=0.0, layer_norm=False, batch_norm=True):
16 |         super().__init__()
   |

src\stk_search\geom3d\models\GPS_layer.py:15:36: FBT002 Boolean default positional argument in function definition
   |
13 |                  local_gnn_type, global_model_type, num_heads,
14 |                  equivstable_pe=False, dropout=0.0,
15 |                  attn_dropout=0.0, layer_norm=False, batch_norm=True):
   |                                    ^^^^^^^^^^ FBT002
16 |         super().__init__()
   |

src\stk_search\geom3d\models\GPS_layer.py:15:54: FBT002 Boolean default positional argument in function definition
   |
13 |                  local_gnn_type, global_model_type, num_heads,
14 |                  equivstable_pe=False, dropout=0.0,
15 |                  attn_dropout=0.0, layer_norm=False, batch_norm=True):
   |                                                      ^^^^^^^^^^ FBT002
16 |         super().__init__()
   |

src\stk_search\geom3d\models\GPS_layer.py:36:19: TRY003 Avoid specifying long messages outside the exception class
   |
34 |                                              edge_dim=dim_h)
35 |         else:
36 |             raise ValueError(f"Unsupported local GNN model: {local_gnn_type}")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
37 |         self.local_gnn_type = local_gnn_type
   |

src\stk_search\geom3d\models\GPS_layer.py:36:30: EM102 Exception must not use an f-string literal, assign to variable first
   |
34 |                                              edge_dim=dim_h)
35 |         else:
36 |             raise ValueError(f"Unsupported local GNN model: {local_gnn_type}")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
37 |         self.local_gnn_type = local_gnn_type
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GPS_layer.py:46:19: TRY003 Avoid specifying long messages outside the exception class
   |
44 |                   dim_h, num_heads, dropout=self.attn_dropout, batch_first=True)
45 |           else:
46 |               raise ValueError(f"Unsupported global x-former model: "
   |  ___________________^
47 | |                              f"{global_model_type}")
   | |____________________________________________________^ TRY003
48 |           self.global_model_type = global_model_type
   |

src\stk_search\geom3d\models\GPS_layer.py:46:30: EM102 Exception must not use an f-string literal, assign to variable first
   |
44 |                   dim_h, num_heads, dropout=self.attn_dropout, batch_first=True)
45 |           else:
46 |               raise ValueError(f"Unsupported global x-former model: "
   |  ______________________________^
47 | |                              f"{global_model_type}")
   | |___________________________________________________^ EM102
48 |           self.global_model_type = global_model_type
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GPS_layer.py:51:19: TRY003 Avoid specifying long messages outside the exception class
   |
50 |         if self.layer_norm and self.batch_norm:
51 |             raise ValueError("Cannot apply two types of normalization together")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
52 | 
53 |         # Normalization for MPNN and Self-Attention representations.
   |

src\stk_search\geom3d\models\GPS_layer.py:51:30: EM101 Exception must not use a string literal, assign to variable first
   |
50 |         if self.layer_norm and self.batch_norm:
51 |             raise ValueError("Cannot apply two types of normalization together")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
52 | 
53 |         # Normalization for MPNN and Self-Attention representations.
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\GPS_layer.py:55:13: ERA001 Found commented-out code
   |
53 |         # Normalization for MPNN and Self-Attention representations.
54 |         if self.layer_norm:
55 |             # self.norm1_local = pygnn.norm.LayerNorm(dim_h)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
56 |             # self.norm1_attn = pygnn.norm.LayerNorm(dim_h)
57 |             self.norm1_local = pygnn.norm.GraphNorm(dim_h)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GPS_layer.py:56:13: ERA001 Found commented-out code
   |
54 |         if self.layer_norm:
55 |             # self.norm1_local = pygnn.norm.LayerNorm(dim_h)
56 |             # self.norm1_attn = pygnn.norm.LayerNorm(dim_h)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
57 |             self.norm1_local = pygnn.norm.GraphNorm(dim_h)
58 |             self.norm1_attn = pygnn.norm.GraphNorm(dim_h)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GPS_layer.py:59:13: ERA001 Found commented-out code
   |
57 |             self.norm1_local = pygnn.norm.GraphNorm(dim_h)
58 |             self.norm1_attn = pygnn.norm.GraphNorm(dim_h)
59 |             # self.norm1_local = pygnn.norm.InstanceNorm(dim_h)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
60 |             # self.norm1_attn = pygnn.norm.InstanceNorm(dim_h)
61 |         if self.batch_norm:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GPS_layer.py:60:13: ERA001 Found commented-out code
   |
58 |             self.norm1_attn = pygnn.norm.GraphNorm(dim_h)
59 |             # self.norm1_local = pygnn.norm.InstanceNorm(dim_h)
60 |             # self.norm1_attn = pygnn.norm.InstanceNorm(dim_h)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
61 |         if self.batch_norm:
62 |             self.norm1_local = nn.BatchNorm1d(dim_h)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GPS_layer.py:72:13: ERA001 Found commented-out code
   |
70 |         self.ff_linear2 = nn.Linear(dim_h * 2, dim_h)
71 |         if self.layer_norm:
72 |             # self.norm2 = pygnn.norm.LayerNorm(dim_h)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
73 |             self.norm2 = pygnn.norm.GraphNorm(dim_h)
74 |             # self.norm2 = pygnn.norm.InstanceNorm(dim_h)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GPS_layer.py:74:13: ERA001 Found commented-out code
   |
72 |             # self.norm2 = pygnn.norm.LayerNorm(dim_h)
73 |             self.norm2 = pygnn.norm.GraphNorm(dim_h)
74 |             # self.norm2 = pygnn.norm.InstanceNorm(dim_h)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
75 |         if self.batch_norm:
76 |             self.norm2 = nn.BatchNorm1d(dim_h)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GPS_layer.py:80:9: C901 `forward` is too complex (13 > 10)
   |
78 |         self.ff_dropout2 = nn.Dropout(dropout)
79 | 
80 |     def forward(self, batch):
   |         ^^^^^^^ C901
81 |         h = batch.x
82 |         h_in1 = h  # for first residual connection
   |

src\stk_search\geom3d\models\GPS_layer.py:80:9: PLR0912 Too many branches (15 > 12)
   |
78 |         self.ff_dropout2 = nn.Dropout(dropout)
79 | 
80 |     def forward(self, batch):
   |         ^^^^^^^ PLR0912
81 |         h = batch.x
82 |         h_in1 = h  # for first residual connection
   |

src\stk_search\geom3d\models\GPS_layer.py:80:9: D102 Missing docstring in public method
   |
78 |         self.ff_dropout2 = nn.Dropout(dropout)
79 | 
80 |     def forward(self, batch):
   |         ^^^^^^^ D102
81 |         h = batch.x
82 |         h_in1 = h  # for first residual connection
   |

src\stk_search\geom3d\models\GPS_layer.py:121:23: TRY003 Avoid specifying long messages outside the exception class
    |
119 |                 h_attn = self._sa_block(h_dense, None, ~mask)[mask]
120 |             else:
121 |                 raise RuntimeError(f"Unexpected {self.global_model_type}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
122 | 
123 |             h_attn = self.dropout_attn(h_attn)
    |

src\stk_search\geom3d\models\GPS_layer.py:121:36: EM102 Exception must not use an f-string literal, assign to variable first
    |
119 |                 h_attn = self._sa_block(h_dense, None, ~mask)[mask]
120 |             else:
121 |                 raise RuntimeError(f"Unexpected {self.global_model_type}")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
122 | 
123 |             h_attn = self.dropout_attn(h_attn)
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GPS_layer.py:132:9: ERA001 Found commented-out code
    |
131 |         # Combine local and global outputs.
132 |         # h = torch.cat(h_out_list, dim=-1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
133 |         h = sum(h_out_list)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GPS_layer.py:145:9: ANN202 Missing return type annotation for private function `_sa_block`
    |
143 |         return batch
144 | 
145 |     def _sa_block(self, x, attn_mask, key_padding_mask):
    |         ^^^^^^^^^ ANN202
146 |         """Self-attention block.
147 |         """
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GPS_layer.py:146:9: D200 One-line docstring should fit on one line
    |
145 |       def _sa_block(self, x, attn_mask, key_padding_mask):
146 |           """Self-attention block.
    |  _________^
147 | |         """
    | |___________^ D200
148 |           x = self.self_attn(x, x, x,
149 |                              attn_mask=attn_mask,
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\GPS_layer.py:152:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
150 |                            key_padding_mask=key_padding_mask,
151 |                            need_weights=False)[0]
152 |         return x
    |                ^ RET504
153 | 
154 |     def _ff_block(self, x):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GPS_layer.py:154:9: ANN202 Missing return type annotation for private function `_ff_block`
    |
152 |         return x
153 | 
154 |     def _ff_block(self, x):
    |         ^^^^^^^^^ ANN202
155 |         """Feed Forward block.
156 |         """
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GPS_layer.py:155:9: D200 One-line docstring should fit on one line
    |
154 |       def _ff_block(self, x):
155 |           """Feed Forward block.
    |  _________^
156 | |         """
    | |___________^ D200
157 |           x = self.ff_dropout1(self.activation(self.ff_linear1(x)))
158 |           return self.ff_dropout2(self.ff_linear2(x))
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\GPS_layer.py:160:9: D102 Missing docstring in public method
    |
158 |         return self.ff_dropout2(self.ff_linear2(x))
159 | 
160 |     def extra_repr(self):
    |         ^^^^^^^^^^ D102
161 |         s = f"summary: dim_h={self.dim_h}, " \
162 |             f"local_gnn_type={self.local_gnn_type}, " \
    |

src\stk_search\geom3d\models\GPS_layer.py:161:13: ISC002 Implicitly concatenated string literals over multiple lines
    |
160 |       def extra_repr(self):
161 |           s = f"summary: dim_h={self.dim_h}, " \
    |  _____________^
162 | |             f"local_gnn_type={self.local_gnn_type}, " \
    | |_____________________________________________________^ ISC002
163 |               f"global_model_type={self.global_model_type}, " \
164 |               f"heads={self.num_heads}"
    |

src\stk_search\geom3d\models\GPS_layer.py:162:13: ISC002 Implicitly concatenated string literals over multiple lines
    |
160 |       def extra_repr(self):
161 |           s = f"summary: dim_h={self.dim_h}, " \
162 |               f"local_gnn_type={self.local_gnn_type}, " \
    |  _____________^
163 | |             f"global_model_type={self.global_model_type}, " \
    | |___________________________________________________________^ ISC002
164 |               f"heads={self.num_heads}"
165 |           return s
    |

src\stk_search\geom3d\models\GPS_layer.py:163:13: ISC002 Implicitly concatenated string literals over multiple lines
    |
161 |           s = f"summary: dim_h={self.dim_h}, " \
162 |               f"local_gnn_type={self.local_gnn_type}, " \
163 |               f"global_model_type={self.global_model_type}, " \
    |  _____________^
164 | |             f"heads={self.num_heads}"
    | |_____________________________________^ ISC002
165 |           return s
    |

src\stk_search\geom3d\models\GPS_layer.py:165:16: RET504 Unnecessary assignment to `s` before `return` statement
    |
163 |             f"global_model_type={self.global_model_type}, " \
164 |             f"heads={self.num_heads}"
165 |         return s
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GVP.py:1:1: N999 Invalid module name: 'GVP'
src\stk_search\geom3d\models\GVP.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GVP.py:6:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
5 | import torch
6 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
7 | import torch_scatter
8 | from torch import nn
  |

src\stk_search\geom3d\models\GVP.py:12:15: ANN002 Missing type annotation for `*args`
   |
12 | def tuple_sum(*args):
   |               ^^^^^ ANN002
13 |     """Sums any number of tuples (s, V) elementwise.
14 |     """
   |

src\stk_search\geom3d\models\GVP.py:13:5: D200 One-line docstring should fit on one line
   |
12 |   def tuple_sum(*args):
13 |       """Sums any number of tuples (s, V) elementwise.
   |  _____^
14 | |     """
   | |_______^ D200
15 |       return tuple(map(sum, zip(*args)))
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\GVP.py:13:5: D401 First line of docstring should be in imperative mood: "Sums any number of tuples (s, V) elementwise."
   |
12 |   def tuple_sum(*args):
13 |       """Sums any number of tuples (s, V) elementwise.
   |  _____^
14 | |     """
   | |_______^ D401
15 |       return tuple(map(sum, zip(*args)))
   |

src\stk_search\geom3d\models\GVP.py:17:15: ANN002 Missing type annotation for `*args`
   |
15 |     return tuple(map(sum, zip(*args)))
16 | 
17 | def tuple_cat(*args, dim=-1):
   |               ^^^^^ ANN002
18 |     """Concatenates any number of tuples (s, V) elementwise.
   |

src\stk_search\geom3d\models\GVP.py:19:1: W293 Blank line contains whitespace
   |
17 | def tuple_cat(*args, dim=-1):
18 |     """Concatenates any number of tuples (s, V) elementwise.
19 |     
   | ^^^^ W293
20 |     :param dim: dimension along which to concatenate when viewed
21 |                 as the `dim` index for the scalar-channel tensors.
   |
   = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:31:1: W293 Blank line contains whitespace
   |
29 | def tuple_index(x, idx):
30 |     """Indexes into a tuple (s, V) along the first dimension.
31 |     
   | ^^^^ W293
32 |     :param idx: any object which can be used to index into a `torch.Tensor`
33 |     """
   |
   = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:37:5: D401 First line of docstring should be in imperative mood: "Returns random tuples (s, V) drawn elementwise from a normal distribution."
   |
36 |   def randn(n, dims, device="cpu"):
37 |       """Returns random tuples (s, V) drawn elementwise from a normal distribution.
   |  _____^
38 | |     
39 | |     :param n: number of data points
40 | |     :param dims: tuple of dimensions (n_scalar, n_vector)
41 | |     
42 | |     :return: (s, V) with s.shape = (n, n_scalar) and
43 | |              V.shape = (n, n_vector, 3)
44 | |     """
   | |_______^ D401
45 |       return torch.randn(n, dims[0], device=device), \
46 |               torch.randn(n, dims[1], 3, device=device)
   |

src\stk_search\geom3d\models\GVP.py:38:1: W293 Blank line contains whitespace
   |
36 | def randn(n, dims, device="cpu"):
37 |     """Returns random tuples (s, V) drawn elementwise from a normal distribution.
38 |     
   | ^^^^ W293
39 |     :param n: number of data points
40 |     :param dims: tuple of dimensions (n_scalar, n_vector)
   |
   = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:41:1: W293 Blank line contains whitespace
   |
39 |     :param n: number of data points
40 |     :param dims: tuple of dimensions (n_scalar, n_vector)
41 |     
   | ^^^^ W293
42 |     :return: (s, V) with s.shape = (n, n_scalar) and
43 |              V.shape = (n, n_vector, 3)
   |
   = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:48:5: ANN202 Missing return type annotation for private function `_norm_no_nan`
   |
46 |             torch.randn(n, dims[1], 3, device=device)
47 | 
48 | def _norm_no_nan(x, axis=-1, keepdims=False, eps=1e-8, sqrt=True):
   |     ^^^^^^^^^^^^ ANN202
49 |     """L2 norm of tensor clamped above a minimum value `eps`.
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\GVP.py:48:30: FBT002 Boolean default positional argument in function definition
   |
46 |             torch.randn(n, dims[1], 3, device=device)
47 | 
48 | def _norm_no_nan(x, axis=-1, keepdims=False, eps=1e-8, sqrt=True):
   |                              ^^^^^^^^ FBT002
49 |     """L2 norm of tensor clamped above a minimum value `eps`.
   |

src\stk_search\geom3d\models\GVP.py:48:56: FBT002 Boolean default positional argument in function definition
   |
46 |             torch.randn(n, dims[1], 3, device=device)
47 | 
48 | def _norm_no_nan(x, axis=-1, keepdims=False, eps=1e-8, sqrt=True):
   |                                                        ^^^^ FBT002
49 |     """L2 norm of tensor clamped above a minimum value `eps`.
   |

src\stk_search\geom3d\models\GVP.py:50:1: W293 Blank line contains whitespace
   |
48 | def _norm_no_nan(x, axis=-1, keepdims=False, eps=1e-8, sqrt=True):
49 |     """L2 norm of tensor clamped above a minimum value `eps`.
50 |     
   | ^^^^ W293
51 |     :param sqrt: if `False`, returns the square of the L2 norm
52 |     """
   |
   = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:56:5: ANN202 Missing return type annotation for private function `_split`
   |
54 |     return torch.sqrt(out) if sqrt else out
55 | 
56 | def _split(x, nv):
   |     ^^^^^^ ANN202
57 |     """Splits a merged representation of (s, V) back into a tuple.
58 |     Should be used only with `_merge(s, V)` and only if the tuple 
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\GVP.py:57:5: D205 1 blank line required between summary line and description
   |
56 |   def _split(x, nv):
57 |       """Splits a merged representation of (s, V) back into a tuple.
   |  _____^
58 | |     Should be used only with `_merge(s, V)` and only if the tuple 
59 | |     representation cannot be used.
60 | |     
61 | |     :param x: the `torch.Tensor` returned from `_merge`
62 | |     :param nv: the number of vector channels in the input to `_merge`
63 | |     """
   | |_______^ D205
64 |       v = torch.reshape(x[..., -3*nv:], x.shape[:-1] + (nv, 3))
65 |       s = x[..., :-3*nv]
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:57:5: D401 First line of docstring should be in imperative mood: "Splits a merged representation of (s, V) back into a tuple."
   |
56 |   def _split(x, nv):
57 |       """Splits a merged representation of (s, V) back into a tuple.
   |  _____^
58 | |     Should be used only with `_merge(s, V)` and only if the tuple 
59 | |     representation cannot be used.
60 | |     
61 | |     :param x: the `torch.Tensor` returned from `_merge`
62 | |     :param nv: the number of vector channels in the input to `_merge`
63 | |     """
   | |_______^ D401
64 |       v = torch.reshape(x[..., -3*nv:], x.shape[:-1] + (nv, 3))
65 |       s = x[..., :-3*nv]
   |

src\stk_search\geom3d\models\GVP.py:58:66: W291 Trailing whitespace
   |
56 | def _split(x, nv):
57 |     """Splits a merged representation of (s, V) back into a tuple.
58 |     Should be used only with `_merge(s, V)` and only if the tuple 
   |                                                                  ^ W291
59 |     representation cannot be used.
   |
   = help: Remove trailing whitespace

src\stk_search\geom3d\models\GVP.py:60:1: W293 Blank line contains whitespace
   |
58 |     Should be used only with `_merge(s, V)` and only if the tuple 
59 |     representation cannot be used.
60 |     
   | ^^^^ W293
61 |     :param x: the `torch.Tensor` returned from `_merge`
62 |     :param nv: the number of vector channels in the input to `_merge`
   |
   = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:68:5: ANN202 Missing return type annotation for private function `_merge`
   |
66 |     return s, v
67 | 
68 | def _merge(s, v):
   |     ^^^^^^ ANN202
69 |     """Merges a tuple (s, V) into a single `torch.Tensor`, where the
70 |     vector channels are flattened and appended to the scalar channels.
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\GVP.py:69:5: D205 1 blank line required between summary line and description
   |
68 |   def _merge(s, v):
69 |       """Merges a tuple (s, V) into a single `torch.Tensor`, where the
   |  _____^
70 | |     vector channels are flattened and appended to the scalar channels.
71 | |     Should be used only if the tuple representation cannot be used.
72 | |     Use `_split(x, nv)` to reverse.
73 | |     """
   | |_______^ D205
74 |       v = torch.reshape(v, v.shape[:-2] + (3*v.shape[-2],))
75 |       return torch.cat([s, v], -1)
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:69:5: D401 First line of docstring should be in imperative mood: "Merges a tuple (s, V) into a single `torch.Tensor`, where the"
   |
68 |   def _merge(s, v):
69 |       """Merges a tuple (s, V) into a single `torch.Tensor`, where the
   |  _____^
70 | |     vector channels are flattened and appended to the scalar channels.
71 | |     Should be used only if the tuple representation cannot be used.
72 | |     Use `_split(x, nv)` to reverse.
73 | |     """
   | |_______^ D401
74 |       v = torch.reshape(v, v.shape[:-2] + (3*v.shape[-2],))
75 |       return torch.cat([s, v], -1)
   |

src\stk_search\geom3d\models\GVP.py:79:5: D205 1 blank line required between summary line and description
   |
78 |   class GVP(nn.Module):
79 |       """Geometric Vector Perceptron. See manuscript and README.md
   |  _____^
80 | |     for more details.
81 | |     
82 | |     :param in_dims: tuple (n_scalar, n_vector)
83 | |     :param out_dims: tuple (n_scalar, n_vector)
84 | |     :param h_dim: intermediate number of vector channels, optional
85 | |     :param activations: tuple of functions (scalar_act, vector_act)
86 | |     :param vector_gate: whether to use vector gating.
87 | |                         (vector_act will be used as sigma^+ in vector gating if `True`)
88 | |     """
   | |_______^ D205
89 |   
90 |       def __init__(self, in_dims, out_dims, h_dim=None,
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:81:1: W293 Blank line contains whitespace
   |
79 |     """Geometric Vector Perceptron. See manuscript and README.md
80 |     for more details.
81 |     
   | ^^^^ W293
82 |     :param in_dims: tuple (n_scalar, n_vector)
83 |     :param out_dims: tuple (n_scalar, n_vector)
   |
   = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:90:9: ANN204 Missing return type annotation for special method `__init__`
   |
88 |     """
89 | 
90 |     def __init__(self, in_dims, out_dims, h_dim=None,
   |         ^^^^^^^^ ANN204
91 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
92 |         super(GVP, self).__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GVP.py:90:9: D107 Missing docstring in `__init__`
   |
88 |     """
89 | 
90 |     def __init__(self, in_dims, out_dims, h_dim=None,
   |         ^^^^^^^^ D107
91 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
92 |         super(GVP, self).__init__()
   |

src\stk_search\geom3d\models\GVP.py:91:55: FBT002 Boolean default positional argument in function definition
   |
90 |     def __init__(self, in_dims, out_dims, h_dim=None,
91 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
   |                                                       ^^^^^^^^^^^ FBT002
92 |         super(GVP, self).__init__()
93 |         self.si, self.vi = in_dims
   |

src\stk_search\geom3d\models\GVP.py:92:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
90 |     def __init__(self, in_dims, out_dims, h_dim=None,
91 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
92 |         super(GVP, self).__init__()
   |              ^^^^^^^^^^^ UP008
93 |         self.si, self.vi = in_dims
94 |         self.so, self.vo = out_dims
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GVP.py:102:36: E701 Multiple statements on one line (colon)
    |
100 |             if self.vo:
101 |                 self.wv = nn.Linear(self.h_dim, self.vo, bias=False)
102 |                 if self.vector_gate: self.wsv = nn.Linear(self.so, self.vo)
    |                                    ^ E701
103 |         else:
104 |             self.ws = nn.Linear(self.si, self.so)
    |

src\stk_search\geom3d\models\GVP.py:110:9: D205 1 blank line required between summary line and description
    |
109 |       def forward(self, x):
110 |           """:param x: tuple (s, V) of `torch.Tensor`,
    |  _________^
111 | |                   or (if vectors_in is 0), a single `torch.Tensor`
112 | |         :return: tuple (s, V) of `torch.Tensor`,
113 | |                  or (if vectors_out is 0), a single `torch.Tensor`
114 | |         """
    | |___________^ D205
115 |           if self.vi:
116 |               s, v = x
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:144:5: D205 1 blank line required between summary line and description
    |
143 |   class _VDropout(nn.Module):
144 |       """Vector channel dropout where the elements of each
    |  _____^
145 | |     vector channel are dropped together.
146 | |     """
    | |_______^ D205
147 |   
148 |       def __init__(self, drop_rate):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:148:9: ANN204 Missing return type annotation for special method `__init__`
    |
146 |     """
147 | 
148 |     def __init__(self, drop_rate):
    |         ^^^^^^^^ ANN204
149 |         super(_VDropout, self).__init__()
150 |         self.drop_rate = drop_rate
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GVP.py:149:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
148 |     def __init__(self, drop_rate):
149 |         super(_VDropout, self).__init__()
    |              ^^^^^^^^^^^^^^^^^ UP008
150 |         self.drop_rate = drop_rate
151 |         self.dummy_param = nn.Parameter(torch.empty(0))
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GVP.py:153:9: ANN202 Missing return type annotation for private function `forward`
    |
151 |         self.dummy_param = nn.Parameter(torch.empty(0))
152 | 
153 |     def forward(self, x):
    |         ^^^^^^^ ANN202
154 |         """:param x: `torch.Tensor` corresponding to vector channels
155 |         """
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GVP.py:154:9: D200 One-line docstring should fit on one line
    |
153 |       def forward(self, x):
154 |           """:param x: `torch.Tensor` corresponding to vector channels
    |  _________^
155 | |         """
    | |___________^ D200
156 |           device = self.dummy_param.device
157 |           if not self.training:
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\GVP.py:163:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
161 |         ).unsqueeze(-1)
162 |         x = mask * x / (1 - self.drop_rate)
163 |         return x
    |                ^ RET504
164 | 
165 | class Dropout(nn.Module):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GVP.py:166:5: D205 1 blank line required between summary line and description
    |
165 |   class Dropout(nn.Module):
166 |       """Combined dropout for tuples (s, V).
    |  _____^
167 | |     Takes tuples (s, V) as input and as output.
168 | |     """
    | |_______^ D205
169 |   
170 |       def __init__(self, drop_rate):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:170:9: ANN204 Missing return type annotation for special method `__init__`
    |
168 |     """
169 | 
170 |     def __init__(self, drop_rate):
    |         ^^^^^^^^ ANN204
171 |         super(Dropout, self).__init__()
172 |         self.sdropout = nn.Dropout(drop_rate)
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GVP.py:170:9: D107 Missing docstring in `__init__`
    |
168 |     """
169 | 
170 |     def __init__(self, drop_rate):
    |         ^^^^^^^^ D107
171 |         super(Dropout, self).__init__()
172 |         self.sdropout = nn.Dropout(drop_rate)
    |

src\stk_search\geom3d\models\GVP.py:171:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
170 |     def __init__(self, drop_rate):
171 |         super(Dropout, self).__init__()
    |              ^^^^^^^^^^^^^^^ UP008
172 |         self.sdropout = nn.Dropout(drop_rate)
173 |         self.vdropout = _VDropout(drop_rate)
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GVP.py:176:9: D205 1 blank line required between summary line and description
    |
175 |       def forward(self, x):
176 |           """:param x: tuple (s, V) of `torch.Tensor`,
    |  _________^
177 | |         or single `torch.Tensor` 
178 | |         (will be assumed to be scalar channels)
179 | |         """
    | |___________^ D205
180 |           if type(x) is torch.Tensor:
181 |               return self.sdropout(x)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:177:33: W291 Trailing whitespace
    |
175 |     def forward(self, x):
176 |         """:param x: tuple (s, V) of `torch.Tensor`,
177 |         or single `torch.Tensor` 
    |                                 ^ W291
178 |         (will be assumed to be scalar channels)
179 |         """
    |
    = help: Remove trailing whitespace

src\stk_search\geom3d\models\GVP.py:186:5: D205 1 blank line required between summary line and description
    |
185 |   class LayerNorm(nn.Module):
186 |       """Combined LayerNorm for tuples (s, V).
    |  _____^
187 | |     Takes tuples (s, V) as input and as output.
188 | |     """
    | |_______^ D205
189 |   
190 |       def __init__(self, dims):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:190:9: ANN204 Missing return type annotation for special method `__init__`
    |
188 |     """
189 | 
190 |     def __init__(self, dims):
    |         ^^^^^^^^ ANN204
191 |         super(LayerNorm, self).__init__()
192 |         self.s, self.v = dims
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GVP.py:190:9: D107 Missing docstring in `__init__`
    |
188 |     """
189 | 
190 |     def __init__(self, dims):
    |         ^^^^^^^^ D107
191 |         super(LayerNorm, self).__init__()
192 |         self.s, self.v = dims
    |

src\stk_search\geom3d\models\GVP.py:191:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
190 |     def __init__(self, dims):
191 |         super(LayerNorm, self).__init__()
    |              ^^^^^^^^^^^^^^^^^ UP008
192 |         self.s, self.v = dims
193 |         self.scalar_norm = nn.LayerNorm(self.s)
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GVP.py:196:9: D205 1 blank line required between summary line and description
    |
195 |       def forward(self, x):
196 |           """:param x: tuple (s, V) of `torch.Tensor`,
    |  _________^
197 | |         or single `torch.Tensor` 
198 | |         (will be assumed to be scalar channels)
199 | |         """
    | |___________^ D205
200 |           if not self.v:
201 |               return self.scalar_norm(x)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:197:33: W291 Trailing whitespace
    |
195 |     def forward(self, x):
196 |         """:param x: tuple (s, V) of `torch.Tensor`,
197 |         or single `torch.Tensor` 
    |                                 ^ W291
198 |         (will be assumed to be scalar channels)
199 |         """
    |
    = help: Remove trailing whitespace

src\stk_search\geom3d\models\GVP.py:208:5: D205 1 blank line required between summary line and description
    |
207 |   class GVPConv(MessagePassing):
208 |       """Graph convolution / message passing with Geometric Vector Perceptrons.
    |  _____^
209 | |     Takes in a graph with node and edge embeddings,
210 | |     and returns new node embeddings.
211 | |     
212 | |     This does NOT do residual updates and pointwise feedforward layers
213 | |     ---see `GVPConvLayer`.
214 | |     
215 | |     :param in_dims: input node embedding dimensions (n_scalar, n_vector)
216 | |     :param out_dims: output node embedding dimensions (n_scalar, n_vector)
217 | |     :param edge_dims: input edge embedding dimensions (n_scalar, n_vector)
218 | |     :param n_layers: number of GVPs in the message function
219 | |     :param module_list: preconstructed message function, overrides n_layers
220 | |     :param aggr: should be "add" if some incoming edges are masked, as in
221 | |                  a masked autoregressive decoder architecture, otherwise "mean"
222 | |     :param activations: tuple of functions (scalar_act, vector_act) to use in GVPs
223 | |     :param vector_gate: whether to use vector gating.
224 | |                         (vector_act will be used as sigma^+ in vector gating if `True`)
225 | |     """
    | |_______^ D205
226 |   
227 |       def __init__(self, in_dims, out_dims, edge_dims,
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:211:1: W293 Blank line contains whitespace
    |
209 |     Takes in a graph with node and edge embeddings,
210 |     and returns new node embeddings.
211 |     
    | ^^^^ W293
212 |     This does NOT do residual updates and pointwise feedforward layers
213 |     ---see `GVPConvLayer`.
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:214:1: W293 Blank line contains whitespace
    |
212 |     This does NOT do residual updates and pointwise feedforward layers
213 |     ---see `GVPConvLayer`.
214 |     
    | ^^^^ W293
215 |     :param in_dims: input node embedding dimensions (n_scalar, n_vector)
216 |     :param out_dims: output node embedding dimensions (n_scalar, n_vector)
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:227:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
225 |     """
226 | 
227 |     def __init__(self, in_dims, out_dims, edge_dims,
    |         ^^^^^^^^ PLR0913
228 |                  n_layers=3, module_list=None, aggr="mean",
229 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
    |

src\stk_search\geom3d\models\GVP.py:227:9: ANN204 Missing return type annotation for special method `__init__`
    |
225 |     """
226 | 
227 |     def __init__(self, in_dims, out_dims, edge_dims,
    |         ^^^^^^^^ ANN204
228 |                  n_layers=3, module_list=None, aggr="mean",
229 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GVP.py:227:9: D107 Missing docstring in `__init__`
    |
225 |     """
226 | 
227 |     def __init__(self, in_dims, out_dims, edge_dims,
    |         ^^^^^^^^ D107
228 |                  n_layers=3, module_list=None, aggr="mean",
229 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
    |

src\stk_search\geom3d\models\GVP.py:229:55: FBT002 Boolean default positional argument in function definition
    |
227 |     def __init__(self, in_dims, out_dims, edge_dims,
228 |                  n_layers=3, module_list=None, aggr="mean",
229 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
    |                                                       ^^^^^^^^^^^ FBT002
230 |         super(GVPConv, self).__init__(aggr=aggr)
231 |         self.si, self.vi = in_dims
    |

src\stk_search\geom3d\models\GVP.py:230:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
228 |                  n_layers=3, module_list=None, aggr="mean",
229 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
230 |         super(GVPConv, self).__init__(aggr=aggr)
    |              ^^^^^^^^^^^^^^^ UP008
231 |         self.si, self.vi = in_dims
232 |         self.so, self.vo = out_dims
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GVP.py:235:9: N806 Variable `GVP_` in function should be lowercase
    |
233 |         self.se, self.ve = edge_dims
234 | 
235 |         GVP_ = functools.partial(GVP,
    |         ^^^^ N806
236 |                 activations=activations, vector_gate=vector_gate)
    |

src\stk_search\geom3d\models\GVP.py:248:21: B007 Loop control variable `i` not used within loop body
    |
246 |                     GVP_((2*self.si + self.se, 2*self.vi + self.ve), out_dims)
247 |                 )
248 |                 for i in range(n_layers - 2):
    |                     ^ B007
249 |                     module_list.append(GVP_(out_dims, out_dims))
250 |                 module_list.append(GVP_(out_dims, out_dims,
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GVP.py:255:9: D205 1 blank line required between summary line and description
    |
254 |       def forward(self, x, edge_index, edge_attr):
255 |           """:param x: tuple (s, V) of `torch.Tensor`
    |  _________^
256 | |         :param edge_index: array of shape [2, n_edges]
257 | |         :param edge_attr: tuple (s, V) of `torch.Tensor`
258 | |         """
    | |___________^ D205
259 |           x_s, x_v = x
260 |           message = self.propagate(edge_index,
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:265:9: D102 Missing docstring in public method
    |
263 |         return _split(message, self.vo)
264 | 
265 |     def message(self, s_i, v_i, s_j, v_j, edge_attr):
    |         ^^^^^^^ D102
266 |         v_j = v_j.view(v_j.shape[0], v_j.shape[1]//3, 3)
267 |         v_i = v_i.view(v_i.shape[0], v_i.shape[1]//3, 3)
    |

src\stk_search\geom3d\models\GVP.py:274:5: D205 1 blank line required between summary line and description
    |
273 |   class GVPConvLayer(nn.Module):
274 |       """Full graph convolution / message passing layer with
    |  _____^
275 | |     Geometric Vector Perceptrons. Residually updates node embeddings with
276 | |     aggregated incoming messages, applies a pointwise feedforward 
277 | |     network to node embeddings, and returns updated node embeddings.
278 | |     
279 | |     To only compute the aggregated messages, see `GVPConv`.
280 | |     
281 | |     :param node_dims: node embedding dimensions (n_scalar, n_vector)
282 | |     :param edge_dims: input edge embedding dimensions (n_scalar, n_vector)
283 | |     :param n_message: number of GVPs to use in message function
284 | |     :param n_feedforward: number of GVPs to use in feedforward function
285 | |     :param drop_rate: drop probability in all dropout layers
286 | |     :param autoregressive: if `True`, this `GVPConvLayer` will be used
287 | |            with a different set of input node embeddings for messages
288 | |            where src >= dst
289 | |     :param activations: tuple of functions (scalar_act, vector_act) to use in GVPs
290 | |     :param vector_gate: whether to use vector gating.
291 | |                         (vector_act will be used as sigma^+ in vector gating if `True`)
292 | |     """
    | |_______^ D205
293 |   
294 |       def __init__(self, node_dims, edge_dims,
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:276:66: W291 Trailing whitespace
    |
274 |     """Full graph convolution / message passing layer with
275 |     Geometric Vector Perceptrons. Residually updates node embeddings with
276 |     aggregated incoming messages, applies a pointwise feedforward 
    |                                                                  ^ W291
277 |     network to node embeddings, and returns updated node embeddings.
    |
    = help: Remove trailing whitespace

src\stk_search\geom3d\models\GVP.py:278:1: W293 Blank line contains whitespace
    |
276 |     aggregated incoming messages, applies a pointwise feedforward 
277 |     network to node embeddings, and returns updated node embeddings.
278 |     
    | ^^^^ W293
279 |     To only compute the aggregated messages, see `GVPConv`.
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:280:1: W293 Blank line contains whitespace
    |
279 |     To only compute the aggregated messages, see `GVPConv`.
280 |     
    | ^^^^ W293
281 |     :param node_dims: node embedding dimensions (n_scalar, n_vector)
282 |     :param edge_dims: input edge embedding dimensions (n_scalar, n_vector)
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:294:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
292 |     """
293 | 
294 |     def __init__(self, node_dims, edge_dims,
    |         ^^^^^^^^ PLR0913
295 |                  n_message=3, n_feedforward=2, drop_rate=.1,
296 |                  autoregressive=False,
    |

src\stk_search\geom3d\models\GVP.py:294:9: ANN204 Missing return type annotation for special method `__init__`
    |
292 |     """
293 | 
294 |     def __init__(self, node_dims, edge_dims,
    |         ^^^^^^^^ ANN204
295 |                  n_message=3, n_feedforward=2, drop_rate=.1,
296 |                  autoregressive=False,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GVP.py:294:9: D107 Missing docstring in `__init__`
    |
292 |     """
293 | 
294 |     def __init__(self, node_dims, edge_dims,
    |         ^^^^^^^^ D107
295 |                  n_message=3, n_feedforward=2, drop_rate=.1,
296 |                  autoregressive=False,
    |

src\stk_search\geom3d\models\GVP.py:296:18: FBT002 Boolean default positional argument in function definition
    |
294 |     def __init__(self, node_dims, edge_dims,
295 |                  n_message=3, n_feedforward=2, drop_rate=.1,
296 |                  autoregressive=False,
    |                  ^^^^^^^^^^^^^^ FBT002
297 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
    |

src\stk_search\geom3d\models\GVP.py:297:55: FBT002 Boolean default positional argument in function definition
    |
295 |                  n_message=3, n_feedforward=2, drop_rate=.1,
296 |                  autoregressive=False,
297 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
    |                                                       ^^^^^^^^^^^ FBT002
298 | 
299 |         super(GVPConvLayer, self).__init__()
    |

src\stk_search\geom3d\models\GVP.py:299:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
297 |                  activations=(F.relu, torch.sigmoid), vector_gate=False):
298 | 
299 |         super(GVPConvLayer, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^ UP008
300 |         self.conv = GVPConv(node_dims, node_dims, edge_dims, n_message,
301 |                            aggr="add" if autoregressive else "mean",
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GVP.py:303:9: N806 Variable `GVP_` in function should be lowercase
    |
301 |                            aggr="add" if autoregressive else "mean",
302 |                            activations=activations, vector_gate=vector_gate)
303 |         GVP_ = functools.partial(GVP,
    |         ^^^^ N806
304 |                 activations=activations, vector_gate=vector_gate)
305 |         self.norm = nn.ModuleList([LayerNorm(node_dims) for _ in range(2)])
    |

src\stk_search\geom3d\models\GVP.py:314:17: B007 Loop control variable `i` not used within loop body
    |
312 |             hid_dims = 4*node_dims[0], 2*node_dims[1]
313 |             ff_func.append(GVP_(node_dims, hid_dims))
314 |             for i in range(n_feedforward-2):
    |                 ^ B007
315 |                 ff_func.append(GVP_(hid_dims, hid_dims))
316 |             ff_func.append(GVP_(hid_dims, node_dims, activations=(None, None)))
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GVP.py:315:17: PERF401 Use a list comprehension to create a transformed list
    |
313 |             ff_func.append(GVP_(node_dims, hid_dims))
314 |             for i in range(n_feedforward-2):
315 |                 ff_func.append(GVP_(hid_dims, hid_dims))
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
316 |             ff_func.append(GVP_(hid_dims, node_dims, activations=(None, None)))
317 |         self.ff_func = nn.Sequential(*ff_func)
    |

src\stk_search\geom3d\models\GVP.py:321:9: D205 1 blank line required between summary line and description
    |
319 |       def forward(self, x, edge_index, edge_attr,
320 |                   autoregressive_x=None, node_mask=None):
321 |           """:param x: tuple (s, V) of `torch.Tensor`
    |  _________^
322 | |         :param edge_index: array of shape [2, n_edges]
323 | |         :param edge_attr: tuple (s, V) of `torch.Tensor`
324 | |         :param autoregressive_x: tuple (s, V) of `torch.Tensor`. 
325 | |                 If not `None`, will be used as src node embeddings
326 | |                 for forming messages where src >= dst. The corrent node 
327 | |                 embeddings `x` will still be the base of the update and the 
328 | |                 pointwise feedforward.
329 | |         :param node_mask: array of type `bool` to index into the first
330 | |                 dim of node embeddings (s, V). If not `None`, only
331 | |                 these nodes will be updated.
332 | |         """
    | |___________^ D205
333 |           if autoregressive_x is not None:
334 |               src, dst = edge_index
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:324:65: W291 Trailing whitespace
    |
322 |         :param edge_index: array of shape [2, n_edges]
323 |         :param edge_attr: tuple (s, V) of `torch.Tensor`
324 |         :param autoregressive_x: tuple (s, V) of `torch.Tensor`. 
    |                                                                 ^ W291
325 |                 If not `None`, will be used as src node embeddings
326 |                 for forming messages where src >= dst. The corrent node 
    |
    = help: Remove trailing whitespace

src\stk_search\geom3d\models\GVP.py:326:72: W291 Trailing whitespace
    |
324 |         :param autoregressive_x: tuple (s, V) of `torch.Tensor`. 
325 |                 If not `None`, will be used as src node embeddings
326 |                 for forming messages where src >= dst. The corrent node 
    |                                                                        ^ W291
327 |                 embeddings `x` will still be the base of the update and the 
328 |                 pointwise feedforward.
    |
    = help: Remove trailing whitespace

src\stk_search\geom3d\models\GVP.py:327:76: W291 Trailing whitespace
    |
325 |                 If not `None`, will be used as src node embeddings
326 |                 for forming messages where src >= dst. The corrent node 
327 |                 embeddings `x` will still be the base of the update and the 
    |                                                                            ^ W291
328 |                 pointwise feedforward.
329 |         :param node_mask: array of type `bool` to index into the first
    |
    = help: Remove trailing whitespace

src\stk_search\geom3d\models\GVP.py:373:1: E731 Do not assign a `lambda` expression, use a `def`
    |
372 |   _NUM_ATOM_TYPES = 9
373 | / _element_mapping = lambda x: {
374 | |     "H" : 0,
375 | |     "C" : 1,
376 | |     "N" : 2,
377 | |     "O" : 3,
378 | |     "F" : 4,
379 | |     "S" : 5,
380 | |     "Cl": 6, "CL": 6,
381 | |     "P" : 7
382 | | }.get(x, 8)
    | |___________^ E731
383 |   _amino_acids = lambda x: {
384 |       "ALA": 0,
    |
    = help: Rewrite `_element_mapping` as a `def`

src\stk_search\geom3d\models\GVP.py:383:1: E731 Do not assign a `lambda` expression, use a `def`
    |
381 |       "P" : 7
382 |   }.get(x, 8)
383 | / _amino_acids = lambda x: {
384 | |     "ALA": 0,
385 | |     "ARG": 1,
386 | |     "ASN": 2,
387 | |     "ASP": 3,
388 | |     "CYS": 4,
389 | |     "GLU": 5,
390 | |     "GLN": 6,
391 | |     "GLY": 7,
392 | |     "HIS": 8,
393 | |     "ILE": 9,
394 | |     "LEU": 10,
395 | |     "LYS": 11,
396 | |     "MET": 12,
397 | |     "PHE": 13,
398 | |     "PRO": 14,
399 | |     "SER": 15,
400 | |     "THR": 16,
401 | |     "TRP": 17,
402 | |     "TYR": 18,
403 | |     "VAL": 19
404 | | }.get(x, 20)
    | |____________^ E731
405 |   _DEFAULT_V_DIM = (100, 16)
406 |   _DEFAULT_E_DIM = (32, 1)
    |
    = help: Rewrite `_amino_acids` as a `def`

src\stk_search\geom3d\models\GVP.py:409:7: N801 Class name `GVP_GNN` should use CapWords convention
    |
409 | class GVP_GNN(nn.Module):
    |       ^^^^^^^ N801
410 |     """A base 5-layer GVP-GNN for all ATOM3D tasks, using GVPs with
411 |     vector gating as described in the manuscript. Takes in atomic-level
    |

src\stk_search\geom3d\models\GVP.py:410:5: D205 1 blank line required between summary line and description
    |
409 |   class GVP_GNN(nn.Module):
410 |       """A base 5-layer GVP-GNN for all ATOM3D tasks, using GVPs with
    |  _____^
411 | |     vector gating as described in the manuscript. Takes in atomic-level
412 | |     structure graphs of type `torch_geometric.data.Batch`
413 | |     and returns a single scalar.
414 | |     
415 | |     This class should not be used directly. Instead, please use the
416 | |     task-specific models which extend BaseModel. (Some of these classes
417 | |     may be aliases of BaseModel.)
418 | |     
419 | |     :param num_rbf: number of radial bases to use in the edge embedding
420 | |     """
    | |_______^ D205
421 |   
422 |       def __init__(self, num_rbf=16, out_channels=1195):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GVP.py:414:1: W293 Blank line contains whitespace
    |
412 |     structure graphs of type `torch_geometric.data.Batch`
413 |     and returns a single scalar.
414 |     
    | ^^^^ W293
415 |     This class should not be used directly. Instead, please use the
416 |     task-specific models which extend BaseModel. (Some of these classes
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:418:1: W293 Blank line contains whitespace
    |
416 |     task-specific models which extend BaseModel. (Some of these classes
417 |     may be aliases of BaseModel.)
418 |     
    | ^^^^ W293
419 |     :param num_rbf: number of radial bases to use in the edge embedding
420 |     """
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:422:9: ANN204 Missing return type annotation for special method `__init__`
    |
420 |     """
421 | 
422 |     def __init__(self, num_rbf=16, out_channels=1195):
    |         ^^^^^^^^ ANN204
423 | 
424 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GVP.py:422:9: D107 Missing docstring in `__init__`
    |
420 |     """
421 | 
422 |     def __init__(self, num_rbf=16, out_channels=1195):
    |         ^^^^^^^^ D107
423 | 
424 |         super().__init__()
    |

src\stk_search\geom3d\models\GVP.py:459:30: FBT002 Boolean default positional argument in function definition
    |
457 |         )
458 | 
459 |     def forward(self, batch, scatter_mean=True, dense=True):
    |                              ^^^^^^^^^^^^ FBT002
460 |         """Forward pass which can be adjusted based on task formulation.
    |

src\stk_search\geom3d\models\GVP.py:459:49: FBT002 Boolean default positional argument in function definition
    |
457 |         )
458 | 
459 |     def forward(self, batch, scatter_mean=True, dense=True):
    |                                                 ^^^^^ FBT002
460 |         """Forward pass which can be adjusted based on task formulation.
    |

src\stk_search\geom3d\models\GVP.py:461:1: W293 Blank line contains whitespace
    |
459 |     def forward(self, batch, scatter_mean=True, dense=True):
460 |         """Forward pass which can be adjusted based on task formulation.
461 |         
    | ^^^^^^^^ W293
462 |         :param batch: `torch_geometric.data.Batch` with data attributes
463 |                       as returned from a BaseTransform
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\GVP.py:469:9: N806 Variable `h_V` in function should be lowercase
    |
467 |                       to a single scalar; else, returns the embedding
468 |         """
469 |         h_V = self.embed(batch.atoms)
    |         ^^^ N806
470 |         h_E = (batch.edge_s, batch.edge_v)
471 |         h_V = self.W_v(h_V)
    |

src\stk_search\geom3d\models\GVP.py:470:9: N806 Variable `h_E` in function should be lowercase
    |
468 |         """
469 |         h_V = self.embed(batch.atoms)
470 |         h_E = (batch.edge_s, batch.edge_v)
    |         ^^^ N806
471 |         h_V = self.W_v(h_V)
472 |         h_E = self.W_e(h_E)
    |

src\stk_search\geom3d\models\GVP.py:471:9: N806 Variable `h_V` in function should be lowercase
    |
469 |         h_V = self.embed(batch.atoms)
470 |         h_E = (batch.edge_s, batch.edge_v)
471 |         h_V = self.W_v(h_V)
    |         ^^^ N806
472 |         h_E = self.W_e(h_E)
    |

src\stk_search\geom3d\models\GVP.py:472:9: N806 Variable `h_E` in function should be lowercase
    |
470 |         h_E = (batch.edge_s, batch.edge_v)
471 |         h_V = self.W_v(h_V)
472 |         h_E = self.W_e(h_E)
    |         ^^^ N806
473 | 
474 |         batch_id = batch.batch
    |

src\stk_search\geom3d\models\GVP.py:477:13: N806 Variable `h_V` in function should be lowercase
    |
476 |         for layer in self.layers:
477 |             h_V = layer(h_V, batch.edge_index, h_E)
    |             ^^^ N806
478 | 
479 |         out = self.W_out(h_V)
    |

src\stk_search\geom3d\models\GVP.py:480:24: E701 Multiple statements on one line (colon)
    |
479 |         out = self.W_out(h_V)
480 |         if scatter_mean: out = torch_scatter.scatter_mean(out, batch_id, dim=0)
    |                        ^ E701
481 |         if dense: out = self.dense(out).squeeze(-1)
482 |         return out
    |

src\stk_search\geom3d\models\GVP.py:481:17: E701 Multiple statements on one line (colon)
    |
479 |         out = self.W_out(h_V)
480 |         if scatter_mean: out = torch_scatter.scatter_mean(out, batch_id, dim=0)
481 |         if dense: out = self.dense(out).squeeze(-1)
    |                 ^ E701
482 |         return out
    |

src\stk_search\geom3d\models\GearNet.py:1:1: N999 Invalid module name: 'GearNet'
src\stk_search\geom3d\models\GearNet.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GearNet.py:11:7: D101 Missing docstring in public class
   |
11 | class GearNet(nn.Module):
   |       ^^^^^^^ D101
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
   |

src\stk_search\geom3d\models\GearNet.py:12:9: PLR0913 Too many arguments in function definition (10 > 5)
   |
11 | class GearNet(nn.Module):
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
   |         ^^^^^^^^ PLR0913
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
14 |         super(GearNet, self).__init__()
   |

src\stk_search\geom3d\models\GearNet.py:12:9: ANN204 Missing return type annotation for special method `__init__`
   |
11 | class GearNet(nn.Module):
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
   |         ^^^^^^^^ ANN204
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
14 |         super(GearNet, self).__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GearNet.py:12:9: D107 Missing docstring in `__init__`
   |
11 | class GearNet(nn.Module):
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
   |         ^^^^^^^^ D107
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
14 |         super(GearNet, self).__init__()
   |

src\stk_search\geom3d\models\GearNet.py:13:18: FBT002 Boolean default positional argument in function definition
   |
11 | class GearNet(nn.Module):
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
   |                  ^^^^^^^^^ FBT002
14 |         super(GearNet, self).__init__()
   |

src\stk_search\geom3d\models\GearNet.py:13:35: FBT002 Boolean default positional argument in function definition
   |
11 | class GearNet(nn.Module):
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
   |                                   ^^^^^^^^^^ FBT002
14 |         super(GearNet, self).__init__()
   |

src\stk_search\geom3d\models\GearNet.py:13:72: FBT002 Boolean default positional argument in function definition
   |
11 | class GearNet(nn.Module):
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
   |                                                                        ^^^^^^^^^^^^^ FBT002
14 |         super(GearNet, self).__init__()
   |

src\stk_search\geom3d\models\GearNet.py:14:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
12 |     def __init__(self, input_dim, hidden_dims, num_relation, edge_input_dim=None, num_angle_bin=None,
13 |                  short_cut=False, batch_norm=False, activation="relu", concat_hidden=False, readout="sum"):
14 |         super(GearNet, self).__init__()
   |              ^^^^^^^^^^^^^^^ UP008
15 | 
16 |         if not isinstance(hidden_dims, Sequence):
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GearNet.py:20:21: RUF005 Consider `[input_dim, *list(hidden_dims)]` instead of concatenation
   |
18 |         self.input_dim = input_dim
19 |         self.output_dim = sum(hidden_dims) if concat_hidden else hidden_dims[-1]
20 |         self.dims = [input_dim] + list(hidden_dims)
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
21 |         self.edge_dims = [edge_input_dim] + self.dims[:-1]
22 |         self.num_relation = num_relation
   |
   = help: Replace with `[input_dim, *list(hidden_dims)]`

src\stk_search\geom3d\models\GearNet.py:47:28: F821 Undefined name `scatter_mean`
   |
45 |             self.readout = scatter_add
46 |         elif readout == "mean":
47 |             self.readout = scatter_mean
   |                            ^^^^^^^^^^^^ F821
48 |         else:
49 |             raise ValueError("Unknown readout `%s`" % readout)
   |

src\stk_search\geom3d\models\GearNet.py:49:30: UP031 Use format specifiers instead of percent format
   |
47 |             self.readout = scatter_mean
48 |         else:
49 |             raise ValueError("Unknown readout `%s`" % readout)
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP031
50 | 
51 |     def forward(self, graph, input, all_loss=None, metric=None):
   |
   = help: Replace with format specifiers

src\stk_search\geom3d\models\GearNet.py:51:9: D102 Missing docstring in public method
   |
49 |             raise ValueError("Unknown readout `%s`" % readout)
50 | 
51 |     def forward(self, graph, input, all_loss=None, metric=None):
   |         ^^^^^^^ D102
52 |         hiddens = []
53 |         layer_input = input
   |

src\stk_search\geom3d\models\GearNet.py:51:30: A002 Argument `input` is shadowing a Python builtin
   |
49 |             raise ValueError("Unknown readout `%s`" % readout)
50 | 
51 |     def forward(self, graph, input, all_loss=None, metric=None):
   |                              ^^^^^ A002
52 |         hiddens = []
53 |         layer_input = input
   |

src\stk_search\geom3d\models\GearNet.py:51:37: ARG002 Unused method argument: `all_loss`
   |
49 |             raise ValueError("Unknown readout `%s`" % readout)
50 | 
51 |     def forward(self, graph, input, all_loss=None, metric=None):
   |                                     ^^^^^^^^ ARG002
52 |         hiddens = []
53 |         layer_input = input
   |

src\stk_search\geom3d\models\GearNet.py:51:52: ARG002 Unused method argument: `metric`
   |
49 |             raise ValueError("Unknown readout `%s`" % readout)
50 | 
51 |     def forward(self, graph, input, all_loss=None, metric=None):
   |                                                    ^^^^^^ ARG002
52 |         hiddens = []
53 |         layer_input = input
   |

src\stk_search\geom3d\models\GearNet_layer.py:1:1: N999 Invalid module name: 'GearNet_layer'
src\stk_search\geom3d\models\GearNet_layer.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GearNet_layer.py:5:22: N812 Lowercase `functional` imported as non-lowercase `F`
  |
3 | import torch
4 | from torch import nn
5 | from torch.nn import functional as F
  |                      ^^^^^^^^^^^^^^^ N812
6 | from torch_geometric.data import Data
7 | from torch_scatter import scatter_add
  |

src\stk_search\geom3d\models\GearNet_layer.py:10:7: D101 Missing docstring in public class
   |
10 | class MultiLayerPerceptron(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^ D101
11 |     def __init__(self, input_dim, hidden_dims, short_cut=False, batch_norm=False, activation="relu", dropout=0):
12 |         super(MultiLayerPerceptron, self).__init__()
   |

src\stk_search\geom3d\models\GearNet_layer.py:11:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
10 | class MultiLayerPerceptron(nn.Module):
11 |     def __init__(self, input_dim, hidden_dims, short_cut=False, batch_norm=False, activation="relu", dropout=0):
   |         ^^^^^^^^ PLR0913
12 |         super(MultiLayerPerceptron, self).__init__()
   |

src\stk_search\geom3d\models\GearNet_layer.py:11:9: ANN204 Missing return type annotation for special method `__init__`
   |
10 | class MultiLayerPerceptron(nn.Module):
11 |     def __init__(self, input_dim, hidden_dims, short_cut=False, batch_norm=False, activation="relu", dropout=0):
   |         ^^^^^^^^ ANN204
12 |         super(MultiLayerPerceptron, self).__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GearNet_layer.py:11:9: D107 Missing docstring in `__init__`
   |
10 | class MultiLayerPerceptron(nn.Module):
11 |     def __init__(self, input_dim, hidden_dims, short_cut=False, batch_norm=False, activation="relu", dropout=0):
   |         ^^^^^^^^ D107
12 |         super(MultiLayerPerceptron, self).__init__()
   |

src\stk_search\geom3d\models\GearNet_layer.py:11:48: FBT002 Boolean default positional argument in function definition
   |
10 | class MultiLayerPerceptron(nn.Module):
11 |     def __init__(self, input_dim, hidden_dims, short_cut=False, batch_norm=False, activation="relu", dropout=0):
   |                                                ^^^^^^^^^ FBT002
12 |         super(MultiLayerPerceptron, self).__init__()
   |

src\stk_search\geom3d\models\GearNet_layer.py:11:65: FBT002 Boolean default positional argument in function definition
   |
10 | class MultiLayerPerceptron(nn.Module):
11 |     def __init__(self, input_dim, hidden_dims, short_cut=False, batch_norm=False, activation="relu", dropout=0):
   |                                                                 ^^^^^^^^^^ FBT002
12 |         super(MultiLayerPerceptron, self).__init__()
   |

src\stk_search\geom3d\models\GearNet_layer.py:12:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
10 | class MultiLayerPerceptron(nn.Module):
11 |     def __init__(self, input_dim, hidden_dims, short_cut=False, batch_norm=False, activation="relu", dropout=0):
12 |         super(MultiLayerPerceptron, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
13 | 
14 |         if not isinstance(hidden_dims, Sequence):
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GearNet_layer.py:14:40: F821 Undefined name `Sequence`
   |
12 |         super(MultiLayerPerceptron, self).__init__()
13 | 
14 |         if not isinstance(hidden_dims, Sequence):
   |                                        ^^^^^^^^ F821
15 |             hidden_dims = [hidden_dims]
16 |         self.dims = [input_dim] + hidden_dims
   |

src\stk_search\geom3d\models\GearNet_layer.py:16:21: RUF005 Consider `[input_dim, *hidden_dims]` instead of concatenation
   |
14 |         if not isinstance(hidden_dims, Sequence):
15 |             hidden_dims = [hidden_dims]
16 |         self.dims = [input_dim] + hidden_dims
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
17 |         self.short_cut = short_cut
   |
   = help: Replace with `[input_dim, *hidden_dims]`

src\stk_search\geom3d\models\GearNet_layer.py:38:9: D102 Missing docstring in public method
   |
36 |             self.batch_norms = None
37 | 
38 |     def forward(self, input):
   |         ^^^^^^^ D102
39 |         layer_input = input
   |

src\stk_search\geom3d\models\GearNet_layer.py:38:23: A002 Argument `input` is shadowing a Python builtin
   |
36 |             self.batch_norms = None
37 | 
38 |     def forward(self, input):
   |                       ^^^^^ A002
39 |         layer_input = input
   |

src\stk_search\geom3d\models\GearNet_layer.py:57:7: D101 Missing docstring in public class
   |
57 | class IEConvLayer(nn.Module):
   |       ^^^^^^^^^^^ D101
58 |     eps = 1e-6
   |

src\stk_search\geom3d\models\GearNet_layer.py:60:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
58 |     eps = 1e-6
59 | 
60 |     def __init__(self, input_dim, hidden_dim, output_dim, edge_input_dim, kernel_hidden_dim=32,
   |         ^^^^^^^^ PLR0913
61 |                 dropout=0.05, dropout_before_conv=0.2, activation="relu", aggregate_func="sum"):
62 |         super(IEConvLayer, self).__init__()
   |

src\stk_search\geom3d\models\GearNet_layer.py:60:9: ANN204 Missing return type annotation for special method `__init__`
   |
58 |     eps = 1e-6
59 | 
60 |     def __init__(self, input_dim, hidden_dim, output_dim, edge_input_dim, kernel_hidden_dim=32,
   |         ^^^^^^^^ ANN204
61 |                 dropout=0.05, dropout_before_conv=0.2, activation="relu", aggregate_func="sum"):
62 |         super(IEConvLayer, self).__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GearNet_layer.py:60:9: D107 Missing docstring in `__init__`
   |
58 |     eps = 1e-6
59 | 
60 |     def __init__(self, input_dim, hidden_dim, output_dim, edge_input_dim, kernel_hidden_dim=32,
   |         ^^^^^^^^ D107
61 |                 dropout=0.05, dropout_before_conv=0.2, activation="relu", aggregate_func="sum"):
62 |         super(IEConvLayer, self).__init__()
   |

src\stk_search\geom3d\models\GearNet_layer.py:62:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
60 |     def __init__(self, input_dim, hidden_dim, output_dim, edge_input_dim, kernel_hidden_dim=32,
61 |                 dropout=0.05, dropout_before_conv=0.2, activation="relu", aggregate_func="sum"):
62 |         super(IEConvLayer, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^ UP008
63 |         self.input_dim = input_dim
64 |         self.hidden_dim = hidden_dim
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GearNet_layer.py:87:9: D102 Missing docstring in public method
   |
85 |             self.activation = activation
86 | 
87 |     def message(self, graph, input, edge_input):
   |         ^^^^^^^ D102
88 |         node_in = graph.edge_list[:, 0]
89 |         message = self.linear1(input[node_in])
   |

src\stk_search\geom3d\models\GearNet_layer.py:87:30: A002 Argument `input` is shadowing a Python builtin
   |
85 |             self.activation = activation
86 | 
87 |     def message(self, graph, input, edge_input):
   |                              ^^^^^ A002
88 |         node_in = graph.edge_list[:, 0]
89 |         message = self.linear1(input[node_in])
   |

src\stk_search\geom3d\models\GearNet_layer.py:95:16: RET504 Unnecessary assignment to `message` before `return` statement
   |
93 |         message = torch.einsum("ijk, ik->ij", kernel[:, 1:, :], message) + kernel[:, 0, :]
94 | 
95 |         return message
   |                ^^^^^^^ RET504
96 | 
97 |     def aggregate(self, graph, message):
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GearNet_layer.py:97:9: D102 Missing docstring in public method
   |
95 |         return message
96 | 
97 |     def aggregate(self, graph, message):
   |         ^^^^^^^^^ D102
98 |         node_in, node_out = graph.edge_list.t()[:2]
99 |         edge_weight = graph.edge_weight.unsqueeze(-1)
   |

src\stk_search\geom3d\models\GearNet_layer.py:104:30: UP031 Use format specifiers instead of percent format
    |
102 |             update = scatter_add(message * edge_weight, node_out, dim=0, dim_size=graph.num_node)
103 |         else:
104 |             raise ValueError("Unknown aggregation function `%s`" % self.aggregate_func)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP031
105 |         return update
    |
    = help: Replace with format specifiers

src\stk_search\geom3d\models\GearNet_layer.py:107:9: D102 Missing docstring in public method
    |
105 |         return update
106 | 
107 |     def combine(self, input, update):
    |         ^^^^^^^ D102
108 |         output = self.linear2(update)
109 |         return output
    |

src\stk_search\geom3d\models\GearNet_layer.py:107:23: A002 Argument `input` is shadowing a Python builtin
    |
105 |         return update
106 | 
107 |     def combine(self, input, update):
    |                       ^^^^^ A002
108 |         output = self.linear2(update)
109 |         return output
    |

src\stk_search\geom3d\models\GearNet_layer.py:107:23: ARG002 Unused method argument: `input`
    |
105 |         return update
106 | 
107 |     def combine(self, input, update):
    |                       ^^^^^ ARG002
108 |         output = self.linear2(update)
109 |         return output
    |

src\stk_search\geom3d\models\GearNet_layer.py:109:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
107 |     def combine(self, input, update):
108 |         output = self.linear2(update)
109 |         return output
    |                ^^^^^^ RET504
110 | 
111 |     def forward(self, graph, input, edge_input):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GearNet_layer.py:111:9: D102 Missing docstring in public method
    |
109 |         return output
110 | 
111 |     def forward(self, graph, input, edge_input):
    |         ^^^^^^^ D102
112 |         input = self.input_batch_norm(input)
113 |         layer_input = self.dropout(self.activation(input))
    |

src\stk_search\geom3d\models\GearNet_layer.py:111:30: A002 Argument `input` is shadowing a Python builtin
    |
109 |         return output
110 | 
111 |     def forward(self, graph, input, edge_input):
    |                              ^^^^^ A002
112 |         input = self.input_batch_norm(input)
113 |         layer_input = self.dropout(self.activation(input))
    |

src\stk_search\geom3d\models\GearNet_layer.py:112:9: A001 Variable `input` is shadowing a Python builtin
    |
111 |     def forward(self, graph, input, edge_input):
112 |         input = self.input_batch_norm(input)
    |         ^^^^^ A001
113 |         layer_input = self.dropout(self.activation(input))
    |

src\stk_search\geom3d\models\GearNet_layer.py:121:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
119 |         output = self.combine(input, update)
120 |         output = self.output_batch_norm(output)
121 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GearNet_layer.py:124:7: D101 Missing docstring in public class
    |
124 | class GeometricRelationalGraphConv(nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
125 |     eps = 1e-6
    |

src\stk_search\geom3d\models\GearNet_layer.py:127:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
125 |     eps = 1e-6
126 | 
127 |     def __init__(self, input_dim, output_dim, num_relation, edge_input_dim=None,
    |         ^^^^^^^^ PLR0913
128 |                 batch_norm=False, activation="relu"):
129 |         super(GeometricRelationalGraphConv, self).__init__()
    |

src\stk_search\geom3d\models\GearNet_layer.py:127:9: ANN204 Missing return type annotation for special method `__init__`
    |
125 |     eps = 1e-6
126 | 
127 |     def __init__(self, input_dim, output_dim, num_relation, edge_input_dim=None,
    |         ^^^^^^^^ ANN204
128 |                 batch_norm=False, activation="relu"):
129 |         super(GeometricRelationalGraphConv, self).__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GearNet_layer.py:127:9: D107 Missing docstring in `__init__`
    |
125 |     eps = 1e-6
126 | 
127 |     def __init__(self, input_dim, output_dim, num_relation, edge_input_dim=None,
    |         ^^^^^^^^ D107
128 |                 batch_norm=False, activation="relu"):
129 |         super(GeometricRelationalGraphConv, self).__init__()
    |

src\stk_search\geom3d\models\GearNet_layer.py:128:17: FBT002 Boolean default positional argument in function definition
    |
127 |     def __init__(self, input_dim, output_dim, num_relation, edge_input_dim=None,
128 |                 batch_norm=False, activation="relu"):
    |                 ^^^^^^^^^^ FBT002
129 |         super(GeometricRelationalGraphConv, self).__init__()
130 |         self.input_dim = input_dim
    |

src\stk_search\geom3d\models\GearNet_layer.py:129:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
127 |     def __init__(self, input_dim, output_dim, num_relation, edge_input_dim=None,
128 |                 batch_norm=False, activation="relu"):
129 |         super(GeometricRelationalGraphConv, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
130 |         self.input_dim = input_dim
131 |         self.output_dim = output_dim
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GearNet_layer.py:150:9: D102 Missing docstring in public method
    |
148 |             self.edge_linear = None
149 | 
150 |     def message(self, graph, input, edge_input=None):
    |         ^^^^^^^ D102
151 |         node_in = graph.edge_list[:, 0]
152 |         message = input[node_in]
    |

src\stk_search\geom3d\models\GearNet_layer.py:150:30: A002 Argument `input` is shadowing a Python builtin
    |
148 |             self.edge_linear = None
149 | 
150 |     def message(self, graph, input, edge_input=None):
    |                              ^^^^^ A002
151 |         node_in = graph.edge_list[:, 0]
152 |         message = input[node_in]
    |

src\stk_search\geom3d\models\GearNet_layer.py:156:13: S101 Use of `assert` detected
    |
154 |             message += self.edge_linear(graph.edge_feature.float())
155 |         if edge_input is not None:
156 |             assert edge_input.shape == message.shape
    |             ^^^^^^ S101
157 |             message += edge_input
158 |         return message
    |

src\stk_search\geom3d\models\GearNet_layer.py:160:9: D102 Missing docstring in public method
    |
158 |         return message
159 | 
160 |     def aggregate(self, graph, message):
    |         ^^^^^^^^^ D102
161 |         assert graph.num_relation == self.num_relation
    |

src\stk_search\geom3d\models\GearNet_layer.py:161:9: S101 Use of `assert` detected
    |
160 |     def aggregate(self, graph, message):
161 |         assert graph.num_relation == self.num_relation
    |         ^^^^^^ S101
162 | 
163 |         node_out = graph.edge_list[:, 1] * self.num_relation + graph.edge_list[:, 2]
    |

src\stk_search\geom3d\models\GearNet_layer.py:168:16: RET504 Unnecessary assignment to `update` before `return` statement
    |
166 |         update = update.view(graph.num_node, self.num_relation * self.input_dim)
167 | 
168 |         return update
    |                ^^^^^^ RET504
169 | 
170 |     def combine(self, input, update):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GearNet_layer.py:170:9: D102 Missing docstring in public method
    |
168 |         return update
169 | 
170 |     def combine(self, input, update):
    |         ^^^^^^^ D102
171 |         output = self.linear(update)
172 |         if self.batch_norm:
    |

src\stk_search\geom3d\models\GearNet_layer.py:170:23: A002 Argument `input` is shadowing a Python builtin
    |
168 |         return update
169 | 
170 |     def combine(self, input, update):
    |                       ^^^^^ A002
171 |         output = self.linear(update)
172 |         if self.batch_norm:
    |

src\stk_search\geom3d\models\GearNet_layer.py:170:23: ARG002 Unused method argument: `input`
    |
168 |         return update
169 | 
170 |     def combine(self, input, update):
    |                       ^^^^^ ARG002
171 |         output = self.linear(update)
172 |         if self.batch_norm:
    |

src\stk_search\geom3d\models\GearNet_layer.py:178:9: D102 Missing docstring in public method
    |
176 |         return output
177 | 
178 |     def forward(self, graph, input, edge_input=None):
    |         ^^^^^^^ D102
179 |         message = self.message(graph, input, edge_input)
180 |         update = self.aggregate(graph, message)
    |

src\stk_search\geom3d\models\GearNet_layer.py:178:30: A002 Argument `input` is shadowing a Python builtin
    |
176 |         return output
177 | 
178 |     def forward(self, graph, input, edge_input=None):
    |                              ^^^^^ A002
179 |         message = self.message(graph, input, edge_input)
180 |         update = self.aggregate(graph, message)
    |

src\stk_search\geom3d\models\GearNet_layer.py:182:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
180 |         update = self.aggregate(graph, message)
181 |         output = self.combine(input, update)
182 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GearNet_layer.py:185:7: D101 Missing docstring in public class
    |
185 | class SpatialLineGraph(nn.Module):
    |       ^^^^^^^^^^^^^^^^ D101
186 |     def __init__(self, num_angle_bin=8):
187 |         super(SpatialLineGraph, self).__init__()
    |

src\stk_search\geom3d\models\GearNet_layer.py:186:9: ANN204 Missing return type annotation for special method `__init__`
    |
185 | class SpatialLineGraph(nn.Module):
186 |     def __init__(self, num_angle_bin=8):
    |         ^^^^^^^^ ANN204
187 |         super(SpatialLineGraph, self).__init__()
188 |         self.num_angle_bin = num_angle_bin
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GearNet_layer.py:186:9: D107 Missing docstring in `__init__`
    |
185 | class SpatialLineGraph(nn.Module):
186 |     def __init__(self, num_angle_bin=8):
    |         ^^^^^^^^ D107
187 |         super(SpatialLineGraph, self).__init__()
188 |         self.num_angle_bin = num_angle_bin
    |

src\stk_search\geom3d\models\GearNet_layer.py:187:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
185 | class SpatialLineGraph(nn.Module):
186 |     def __init__(self, num_angle_bin=8):
187 |         super(SpatialLineGraph, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
188 |         self.num_angle_bin = num_angle_bin
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GearNet_layer.py:190:9: D417 Missing argument description in the docstring for `forward`: `graph`
    |
188 |         self.num_angle_bin = num_angle_bin
189 | 
190 |     def forward(self, graph):
    |         ^^^^^^^ D417
191 |         """Generate the spatial line graph of the input graph.
192 |         The edge types are decided by the angles between two adjacent edges in the input graph.
    |

src\stk_search\geom3d\models\GearNet_layer.py:191:9: D205 1 blank line required between summary line and description
    |
190 |       def forward(self, graph):
191 |           """Generate the spatial line graph of the input graph.
    |  _________^
192 | |         The edge types are decided by the angles between two adjacent edges in the input graph.
193 | | 
194 | |         Parameters
195 | |         ----------
196 | |             graph (PackedGraph): :math:`n` graph(s)
197 | | 
198 | |         Returns
199 | |         -------
200 | |             graph (PackedGraph): the spatial line graph
201 | | 
202 | |         """
    | |___________^ D205
203 |           line_graph = construct_line_graph(graph)
204 |           node_in, node_out = graph.edge_list[:, :2].t()
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GearNet_layer.py:224:5: ANN202 Missing return type annotation for private function `_get_offsets`
    |
224 | def _get_offsets(graph, num_nodes=None, num_edges=None, num_cum_nodes=None, num_cum_edges=None):
    |     ^^^^^^^^^^^^ ANN202
225 |     if num_nodes is None:
226 |         prepend = torch.tensor([0], device=graph.node_feature.device)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GearNet_layer.py:237:5: D205 1 blank line required between summary line and description
    |
236 |   def construct_line_graph(graph):
237 |       """Construct a packed line graph of this packed graph.
    |  _____^
238 | |     The node features of the line graphs are inherited from the edge features of the original graphs.
239 | | 
240 | |     In the line graph, each node corresponds to an edge in the original graph.
241 | |     For a pair of edges (a, b) and (b, c) that share the same intermediate node in the original graph,
242 | |     there is a directed edge (a, b) -> (b, c) in the line graph.
243 | | 
244 | |     Returns
245 | |     -------
246 | |         PackedGraph
247 | | 
248 | |     """
    | |_______^ D205
249 |       node_in, node_out = graph.edge_list.t()[:2]
250 |       edge_index = torch.arange(graph.num_edge, device=graph.node_feature.device)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GearNet_layer.py:258:5: A001 Variable `range` is shadowing a Python builtin
    |
256 |     size = degree_out * degree_in
257 |     starts = (size.cumsum(0) - size).repeat_interleave(size)
258 |     range = torch.arange(size.sum(), device=graph.node_feature.device)
    |     ^^^^^ A001
259 |     # each node u has degree_out[u] * degree_in[u] local edges
260 |     local_index = range - starts
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:1:1: N999 Invalid module name: 'GemNet'
src\stk_search\geom3d\models\GemNet\GemNet.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\GemNet.py:32:5: D205 1 blank line required between summary line and description
   |
31 |   class GemNet(torch.nn.Module):
32 |       """Parameters
   |  _____^
33 | |     ----------
34 | |         num_spherical: int
35 | |             Controls maximum frequency.
36 | |         num_radial: int
37 | |             Controls maximum frequency.
38 | |         num_blocks: int
39 | |             Number of building blocks to be stacked.
40 | |         emb_size_atom: int
41 | |             Embedding size of the atoms.
42 | |         emb_size_edge: int
43 | |             Embedding size of the edges.
44 | |         emb_size_trip: int
45 | |             (Down-projected) Embedding size in the triplet message passing block.
46 | |         emb_size_quad: int
47 | |             (Down-projected) Embedding size in the quadruplet message passing block.
48 | |         emb_size_rbf: int
49 | |             Embedding size of the radial basis transformation.
50 | |         emb_size_cbf: int
51 | |             Embedding size of the circular basis transformation (one angle).
52 | |         emb_size_sbf: int
53 | |             Embedding size of the spherical basis transformation (two angles).
54 | |         emb_size_bil_trip: int
55 | |             Embedding size of the edge embeddings in the triplet-based message passing block after the bilinear layer.
56 | |         emb_size_bil_quad: int
57 | |             Embedding size of the edge embeddings in the quadruplet-based message passing block after the bilinear layer.
58 | |         num_before_skip: int
59 | |             Number of residual blocks before the first skip connection.
60 | |         num_after_skip: int
61 | |             Number of residual blocks after the first skip connection.
62 | |         num_concat: int
63 | |             Number of residual blocks after the concatenation.
64 | |         num_atom: int
65 | |             Number of residual blocks in the atom embedding blocks.
66 | |         direct_forces: bool
67 | |             If True predict forces based on aggregation of interatomic directions.
68 | |             If False predict forces based on negative gradient of energy potential.
69 | |         triplets_only: bool
70 | |             If True use GemNet-T or GemNet-dT.No quadruplet based message passing.
71 | |         num_targets: int
72 | |             Number of prediction targets.
73 | |         cutoff: float
74 | |             Embedding cutoff for interactomic directions in Angstrom.
75 | |         int_cutoff: float
76 | |             Interaction cutoff for interactomic directions in Angstrom. No effect for GemNet-(d)T
77 | |         envelope_exponent: int
78 | |             Exponent of the envelope function. Determines the shape of the smooth cutoff.
79 | |         extensive: bool
80 | |             Whether the output should be extensive (proportional to the number of atoms)
81 | |         forces_coupled: bool
82 | |             No effect if direct_forces is False. If True enforce that |F_ac| = |F_ca|
83 | |         output_init: str
84 | |             Initialization method for the final dense layer.
85 | |         activation: str
86 | |             Name of the activation function.
87 | |         scale_file: str
88 | |             Path to the json file containing the scaling factors.
89 | | 
90 | |     """
   | |_______^ D205
91 |   
92 |       def __init__(
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\GemNet.py:92:9: PLR0913 Too many arguments in function definition (29 > 5)
   |
90 |     """
91 | 
92 |     def __init__(
   |         ^^^^^^^^ PLR0913
93 |         self,
94 |         node_class: int,
   |

src\stk_search\geom3d\models\GemNet\GemNet.py:92:9: ANN204 Missing return type annotation for special method `__init__`
   |
90 |     """
91 | 
92 |     def __init__(
   |         ^^^^^^^^ ANN204
93 |         self,
94 |         node_class: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\GemNet.py:92:9: D107 Missing docstring in `__init__`
   |
90 |     """
91 | 
92 |     def __init__(
   |         ^^^^^^^^ D107
93 |         self,
94 |         node_class: int,
   |

src\stk_search\geom3d\models\GemNet\GemNet.py:111:9: FBT001 Boolean-typed positional argument in function definition
    |
109 |         num_concat: int,
110 |         num_atom: int,
111 |         triplets_only: bool,
    |         ^^^^^^^^^^^^^ FBT001
112 |         num_targets: int = 1,
113 |         direct_forces: bool = False,
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:113:9: FBT001 Boolean-typed positional argument in function definition
    |
111 |         triplets_only: bool,
112 |         num_targets: int = 1,
113 |         direct_forces: bool = False,
    |         ^^^^^^^^^^^^^ FBT001
114 |         cutoff: float = 5.0,
115 |         int_cutoff: float = 10.0,  # no effect for GemNet-(d)T
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:113:9: FBT002 Boolean default positional argument in function definition
    |
111 |         triplets_only: bool,
112 |         num_targets: int = 1,
113 |         direct_forces: bool = False,
    |         ^^^^^^^^^^^^^ FBT002
114 |         cutoff: float = 5.0,
115 |         int_cutoff: float = 10.0,  # no effect for GemNet-(d)T
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:117:9: FBT002 Boolean default positional argument in function definition
    |
115 |         int_cutoff: float = 10.0,  # no effect for GemNet-(d)T
116 |         envelope_exponent: int = 5,
117 |         extensive=True,
    |         ^^^^^^^^^ FBT002
118 |         forces_coupled: bool = False,
119 |         output_init="HeOrthogonal",
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:118:9: FBT001 Boolean-typed positional argument in function definition
    |
116 |         envelope_exponent: int = 5,
117 |         extensive=True,
118 |         forces_coupled: bool = False,
    |         ^^^^^^^^^^^^^^ FBT001
119 |         output_init="HeOrthogonal",
120 |         activation: str = "swish",
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:118:9: FBT002 Boolean default positional argument in function definition
    |
116 |         envelope_exponent: int = 5,
117 |         extensive=True,
118 |         forces_coupled: bool = False,
    |         ^^^^^^^^^^^^^^ FBT002
119 |         output_init="HeOrthogonal",
120 |         activation: str = "swish",
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:122:9: ARG002 Unused method argument: `name`
    |
120 |         activation: str = "swish",
121 |         scale_file=None,
122 |         name="GemNet",
    |         ^^^^ ARG002
123 |         **kwargs,
124 |         ):
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:123:9: ANN003 Missing type annotation for `**kwargs`
    |
121 |         scale_file=None,
122 |         name="GemNet",
123 |         **kwargs,
    |         ^^^^^^^^ ANN003
124 |         ):
125 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:123:11: ARG002 Unused method argument: `kwargs`
    |
121 |         scale_file=None,
122 |         name="GemNet",
123 |         **kwargs,
    |           ^^^^^^ ARG002
124 |         ):
125 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:126:9: S101 Use of `assert` detected
    |
124 |         ):
125 |         super().__init__()
126 |         assert num_blocks > 0
    |         ^^^^^^ S101
127 |         self.num_targets = num_targets
128 |         self.num_blocks = num_blocks
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:232:13: PERF401 Use a list comprehension to create a transformed list
    |
230 |           )  # GemNet-(d)Q or -(d)T
231 |           for i in range(num_blocks):
232 |               int_blocks.append(
    |  _____________^
233 | |                 interaction_block(
234 | |                     emb_size_atom=emb_size_atom,
235 | |                     emb_size_edge=emb_size_edge,
236 | |                     emb_size_trip=emb_size_trip,
237 | |                     emb_size_quad=emb_size_quad,
238 | |                     emb_size_rbf=emb_size_rbf,
239 | |                     emb_size_cbf=emb_size_cbf,
240 | |                     emb_size_sbf=emb_size_sbf,
241 | |                     emb_size_bil_trip=emb_size_bil_trip,
242 | |                     emb_size_bil_quad=emb_size_bil_quad,
243 | |                     num_before_skip=num_before_skip,
244 | |                     num_after_skip=num_after_skip,
245 | |                     num_concat=num_concat,
246 | |                     num_atom=num_atom,
247 | |                     activation=activation,
248 | |                     scale_file=scale_file,
249 | |                     name=f"IntBlock_{i+1}",
250 | |                 )
251 | |             )
    | |_____________^ PERF401
252 |   
253 |           for i in range(num_blocks + 1):
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:254:13: PERF401 Use a list comprehension to create a transformed list
    |
253 |           for i in range(num_blocks + 1):
254 |               out_blocks.append(
    |  _____________^
255 | |                 OutputBlock(
256 | |                     emb_size_atom=emb_size_atom,
257 | |                     emb_size_edge=emb_size_edge,
258 | |                     emb_size_rbf=emb_size_rbf,
259 | |                     nHidden=num_atom,
260 | |                     num_targets=num_targets,
261 | |                     activation=activation,
262 | |                     output_init=output_init,
263 | |                     direct_forces=direct_forces,
264 | |                     scale_file=scale_file,
265 | |                     name=f"OutBlock_{i}",
266 | |                 )
267 | |             )
    | |_____________^ PERF401
268 |   
269 |           self.out_blocks = torch.nn.ModuleList(out_blocks)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:273:9: ANN205 Missing return type annotation for staticmethod `calculate_interatomic_vectors`
    |
272 |     @staticmethod
273 |     def calculate_interatomic_vectors(R, id_s, id_t):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN205
274 |         """Parameters
275 |         ----------
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GemNet\GemNet.py:273:39: N803 Argument name `R` should be lowercase
    |
272 |     @staticmethod
273 |     def calculate_interatomic_vectors(R, id_s, id_t):
    |                                       ^ N803
274 |         """Parameters
275 |         ----------
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:274:9: D205 1 blank line required between summary line and description
    |
272 |       @staticmethod
273 |       def calculate_interatomic_vectors(R, id_s, id_t):
274 |           """Parameters
    |  _________^
275 | |         ----------
276 | |             R: Tensor, shape = (nAtoms,3)
277 | |                 Atom positions.
278 | |             id_s: Tensor, shape = (nEdges,)
279 | |                 Indices of the source atom of the edges.
280 | |             id_t: Tensor, shape = (nEdges,)
281 | |                 Indices of the target atom of the edges.
282 | | 
283 | |         Returns
284 | |         -------
285 | |             (D_st, V_st): tuple
286 | |                 D_st: Tensor, shape = (nEdges,)
287 | |                     Distance from atom t to s.
288 | |                 V_st: Tensor, shape = (nEdges,)
289 | |                     Unit direction from atom t to s.
290 | | 
291 | |         """
    | |___________^ D205
292 |           Rt = R[id_t]
293 |           Rs = R[id_s]
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\GemNet.py:292:9: N806 Variable `Rt` in function should be lowercase
    |
291 |         """
292 |         Rt = R[id_t]
    |         ^^ N806
293 |         Rs = R[id_s]
294 |         V_st = Rt - Rs  # s -> t
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:293:9: N806 Variable `Rs` in function should be lowercase
    |
291 |         """
292 |         Rt = R[id_t]
293 |         Rs = R[id_s]
    |         ^^ N806
294 |         V_st = Rt - Rs  # s -> t
295 |         D_st = torch.sqrt(torch.sum(V_st ** 2, dim=1))
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:294:9: N806 Variable `V_st` in function should be lowercase
    |
292 |         Rt = R[id_t]
293 |         Rs = R[id_s]
294 |         V_st = Rt - Rs  # s -> t
    |         ^^^^ N806
295 |         D_st = torch.sqrt(torch.sum(V_st ** 2, dim=1))
296 |         V_st = V_st / D_st[..., None]
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:295:9: N806 Variable `D_st` in function should be lowercase
    |
293 |         Rs = R[id_s]
294 |         V_st = Rt - Rs  # s -> t
295 |         D_st = torch.sqrt(torch.sum(V_st ** 2, dim=1))
    |         ^^^^ N806
296 |         V_st = V_st / D_st[..., None]
297 |         return D_st, V_st
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:296:9: N806 Variable `V_st` in function should be lowercase
    |
294 |         V_st = Rt - Rs  # s -> t
295 |         D_st = torch.sqrt(torch.sum(V_st ** 2, dim=1))
296 |         V_st = V_st / D_st[..., None]
    |         ^^^^ N806
297 |         return D_st, V_st
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:300:9: ANN205 Missing return type annotation for staticmethod `calculate_neighbor_angles`
    |
299 |     @staticmethod
300 |     def calculate_neighbor_angles(R_ac, R_ab):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN205
301 |         """Calculate angles between atoms c <- a -> b.
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GemNet\GemNet.py:300:9: D417 Missing argument descriptions in the docstring for `calculate_neighbor_angles`: `R_ab`, `R_ac`
    |
299 |     @staticmethod
300 |     def calculate_neighbor_angles(R_ac, R_ab):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ D417
301 |         """Calculate angles between atoms c <- a -> b.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:300:35: N803 Argument name `R_ac` should be lowercase
    |
299 |     @staticmethod
300 |     def calculate_neighbor_angles(R_ac, R_ab):
    |                                   ^^^^ N803
301 |         """Calculate angles between atoms c <- a -> b.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:300:41: N803 Argument name `R_ab` should be lowercase
    |
299 |     @staticmethod
300 |     def calculate_neighbor_angles(R_ac, R_ab):
    |                                         ^^^^ N803
301 |         """Calculate angles between atoms c <- a -> b.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:323:16: RET504 Unnecessary assignment to `angle` before `return` statement
    |
321 |         y = torch.max(y, torch.tensor(1e-9))
322 |         angle = torch.atan2(y, x)
323 |         return angle
    |                ^^^^^ RET504
324 | 
325 |     @staticmethod
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\GemNet.py:326:9: ANN205 Missing return type annotation for staticmethod `vector_rejection`
    |
325 |     @staticmethod
326 |     def vector_rejection(R_ab, P_n):
    |         ^^^^^^^^^^^^^^^^ ANN205
327 |         """Project the vector R_ab onto a plane with normal vector P_n.
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GemNet\GemNet.py:326:9: D417 Missing argument descriptions in the docstring for `vector_rejection`: `P_n`, `R_ab`
    |
325 |     @staticmethod
326 |     def vector_rejection(R_ab, P_n):
    |         ^^^^^^^^^^^^^^^^ D417
327 |         """Project the vector R_ab onto a plane with normal vector P_n.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:326:26: N803 Argument name `R_ab` should be lowercase
    |
325 |     @staticmethod
326 |     def vector_rejection(R_ab, P_n):
    |                          ^^^^ N803
327 |         """Project the vector R_ab onto a plane with normal vector P_n.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:326:32: N803 Argument name `P_n` should be lowercase
    |
325 |     @staticmethod
326 |     def vector_rejection(R_ab, P_n):
    |                                ^^^ N803
327 |         """Project the vector R_ab onto a plane with normal vector P_n.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:347:9: PLR0913 Too many arguments in function definition (11 > 5)
    |
346 |     @staticmethod
347 |     def calculate_angles(
    |         ^^^^^^^^^^^^^^^^ PLR0913
348 |         R,
349 |         id_c,
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:347:9: ANN205 Missing return type annotation for staticmethod `calculate_angles`
    |
346 |     @staticmethod
347 |     def calculate_angles(
    |         ^^^^^^^^^^^^^^^^ ANN205
348 |         R,
349 |         id_c,
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GemNet\GemNet.py:347:9: D417 Missing argument descriptions in the docstring for `calculate_angles`: `R`, `id4_expand_abd`, `id4_expand_intm_ab`, `id4_expand_intm_db`, `id4_int_a`, `id4_int_b`, `id4_reduce_cab`, `id4_reduce_intm_ab`, `id4_reduce_intm_ca`, `id_a`, `id_c`
    |
346 |     @staticmethod
347 |     def calculate_angles(
    |         ^^^^^^^^^^^^^^^^ D417
348 |         R,
349 |         id_c,
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:348:9: N803 Argument name `R` should be lowercase
    |
346 |     @staticmethod
347 |     def calculate_angles(
348 |         R,
    |         ^ N803
349 |         id_c,
350 |         id_a,
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:398:9: N806 Variable `Ra` in function should be lowercase
    |
396 |         """
397 |         # ---------------------------------- a - b <- d ---------------------------------- #
398 |         Ra = R[id4_int_a[id4_expand_intm_ab]]  # a       (intmTriplets,3)
    |         ^^ N806
399 |         Rb = R[id4_int_b[id4_expand_intm_ab]]  # b       (intmTriplets,3)
400 |         # Rb = R[id_a[id4_expand_intm_db]      # d       (intmTriplets,3)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:399:9: N806 Variable `Rb` in function should be lowercase
    |
397 |         # ---------------------------------- a - b <- d ---------------------------------- #
398 |         Ra = R[id4_int_a[id4_expand_intm_ab]]  # a       (intmTriplets,3)
399 |         Rb = R[id4_int_b[id4_expand_intm_ab]]  # b       (intmTriplets,3)
    |         ^^ N806
400 |         # Rb = R[id_a[id4_expand_intm_db]      # d       (intmTriplets,3)
401 |         Rd = R[id_c[id4_expand_intm_db]]  # d       (intmTriplets,3)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:401:9: N806 Variable `Rd` in function should be lowercase
    |
399 |         Rb = R[id4_int_b[id4_expand_intm_ab]]  # b       (intmTriplets,3)
400 |         # Rb = R[id_a[id4_expand_intm_db]      # d       (intmTriplets,3)
401 |         Rd = R[id_c[id4_expand_intm_db]]  # d       (intmTriplets,3)
    |         ^^ N806
402 | 
403 |         R_ba = Ra - Rb  # (intmTriplets,3)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:403:9: N806 Variable `R_ba` in function should be lowercase
    |
401 |         Rd = R[id_c[id4_expand_intm_db]]  # d       (intmTriplets,3)
402 | 
403 |         R_ba = Ra - Rb  # (intmTriplets,3)
    |         ^^^^ N806
404 |         R_bd = Rd - Rb  # (intmTriplets,3)
405 |         angle_abd = GemNet.calculate_neighbor_angles(R_ba, R_bd)  # (intmTriplets,)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:404:9: N806 Variable `R_bd` in function should be lowercase
    |
403 |         R_ba = Ra - Rb  # (intmTriplets,3)
404 |         R_bd = Rd - Rb  # (intmTriplets,3)
    |         ^^^^ N806
405 |         angle_abd = GemNet.calculate_neighbor_angles(R_ba, R_bd)  # (intmTriplets,)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:408:9: N806 Variable `R_bd_proj` in function should be lowercase
    |
407 |         # project for calculating gamma
408 |         R_bd_proj = GemNet.vector_rejection(R_bd, R_ba)  # a - b -| d
    |         ^^^^^^^^^ N806
409 |         R_bd_proj = R_bd_proj[id4_expand_abd]  # (nQuadruplets,)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:409:9: N806 Variable `R_bd_proj` in function should be lowercase
    |
407 |         # project for calculating gamma
408 |         R_bd_proj = GemNet.vector_rejection(R_bd, R_ba)  # a - b -| d
409 |         R_bd_proj = R_bd_proj[id4_expand_abd]  # (nQuadruplets,)
    |         ^^^^^^^^^ N806
410 | 
411 |         # --------------------------------- c -> a <- b ---------------------------------- #
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:412:9: N806 Variable `Rc` in function should be lowercase
    |
411 |         # --------------------------------- c -> a <- b ---------------------------------- #
412 |         Rc = R[id_c[id4_reduce_intm_ca]]  # c      (intmTriplets,3)
    |         ^^ N806
413 |         Ra = R[id_a[id4_reduce_intm_ca]]  # a      (intmTriplets,3)
414 |         # Ra = R[id4_int_a[id4_reduce_intm_ab]] # a      (intmTriplets,3)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:413:9: N806 Variable `Ra` in function should be lowercase
    |
411 |         # --------------------------------- c -> a <- b ---------------------------------- #
412 |         Rc = R[id_c[id4_reduce_intm_ca]]  # c      (intmTriplets,3)
413 |         Ra = R[id_a[id4_reduce_intm_ca]]  # a      (intmTriplets,3)
    |         ^^ N806
414 |         # Ra = R[id4_int_a[id4_reduce_intm_ab]] # a      (intmTriplets,3)
415 |         Rb = R[id4_int_b[id4_reduce_intm_ab]]  # b      (intmTriplets,3)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:414:9: ERA001 Found commented-out code
    |
412 |         Rc = R[id_c[id4_reduce_intm_ca]]  # c      (intmTriplets,3)
413 |         Ra = R[id_a[id4_reduce_intm_ca]]  # a      (intmTriplets,3)
414 |         # Ra = R[id4_int_a[id4_reduce_intm_ab]] # a      (intmTriplets,3)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
415 |         Rb = R[id4_int_b[id4_reduce_intm_ab]]  # b      (intmTriplets,3)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:415:9: N806 Variable `Rb` in function should be lowercase
    |
413 |         Ra = R[id_a[id4_reduce_intm_ca]]  # a      (intmTriplets,3)
414 |         # Ra = R[id4_int_a[id4_reduce_intm_ab]] # a      (intmTriplets,3)
415 |         Rb = R[id4_int_b[id4_reduce_intm_ab]]  # b      (intmTriplets,3)
    |         ^^ N806
416 | 
417 |         R_ac = Rc - Ra  # (intmTriplets,3)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:417:9: N806 Variable `R_ac` in function should be lowercase
    |
415 |         Rb = R[id4_int_b[id4_reduce_intm_ab]]  # b      (intmTriplets,3)
416 | 
417 |         R_ac = Rc - Ra  # (intmTriplets,3)
    |         ^^^^ N806
418 |         R_ab = Rb - Ra  # (intmTriplets,3)
419 |         angle_cab = GemNet.calculate_neighbor_angles(R_ab, R_ac)  # (intmTriplets,)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:418:9: N806 Variable `R_ab` in function should be lowercase
    |
417 |         R_ac = Rc - Ra  # (intmTriplets,3)
418 |         R_ab = Rb - Ra  # (intmTriplets,3)
    |         ^^^^ N806
419 |         angle_cab = GemNet.calculate_neighbor_angles(R_ab, R_ac)  # (intmTriplets,)
420 |         angle_cab = angle_cab[id4_reduce_cab]  # (nQuadruplets,)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:423:9: N806 Variable `R_ac_proj` in function should be lowercase
    |
422 |         # project for calculating gamma
423 |         R_ac_proj = GemNet.vector_rejection(R_ac, R_ab)  # c |- a - b
    |         ^^^^^^^^^ N806
424 |         R_ac_proj = R_ac_proj[id4_reduce_cab]  # (nQuadruplets,)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:424:9: N806 Variable `R_ac_proj` in function should be lowercase
    |
422 |         # project for calculating gamma
423 |         R_ac_proj = GemNet.vector_rejection(R_ac, R_ab)  # c |- a - b
424 |         R_ac_proj = R_ac_proj[id4_reduce_cab]  # (nQuadruplets,)
    |         ^^^^^^^^^ N806
425 | 
426 |         # -------------------------------- c -> a - b <- d -------------------------------- #
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:434:9: ANN205 Missing return type annotation for staticmethod `calculate_angles3`
    |
433 |     @staticmethod
434 |     def calculate_angles3(R, id_c, id_a, id3_reduce_ca, id3_expand_ba):
    |         ^^^^^^^^^^^^^^^^^ ANN205
435 |         """Calculate angles for triplet-based message passing.
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\GemNet\GemNet.py:434:9: D417 Missing argument descriptions in the docstring for `calculate_angles3`: `R`, `id3_expand_ba`, `id3_reduce_ca`, `id_a`, `id_c`
    |
433 |     @staticmethod
434 |     def calculate_angles3(R, id_c, id_a, id3_reduce_ca, id3_expand_ba):
    |         ^^^^^^^^^^^^^^^^^ D417
435 |         """Calculate angles for triplet-based message passing.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:434:27: N803 Argument name `R` should be lowercase
    |
433 |     @staticmethod
434 |     def calculate_angles3(R, id_c, id_a, id3_reduce_ca, id3_expand_ba):
    |                           ^ N803
435 |         """Calculate angles for triplet-based message passing.
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:456:9: N806 Variable `Rc` in function should be lowercase
    |
455 |         """
456 |         Rc = R[id_c[id3_reduce_ca]]
    |         ^^ N806
457 |         Ra = R[id_a[id3_reduce_ca]]
458 |         Rb = R[id_c[id3_expand_ba]]
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:457:9: N806 Variable `Ra` in function should be lowercase
    |
455 |         """
456 |         Rc = R[id_c[id3_reduce_ca]]
457 |         Ra = R[id_a[id3_reduce_ca]]
    |         ^^ N806
458 |         Rb = R[id_c[id3_expand_ba]]
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:458:9: N806 Variable `Rb` in function should be lowercase
    |
456 |         Rc = R[id_c[id3_reduce_ca]]
457 |         Ra = R[id_a[id3_reduce_ca]]
458 |         Rb = R[id_c[id3_expand_ba]]
    |         ^^ N806
459 | 
460 |         # difference vectors
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:461:9: N806 Variable `R_ac` in function should be lowercase
    |
460 |         # difference vectors
461 |         R_ac = Rc - Ra  # shape = (nTriplets,3)
    |         ^^^^ N806
462 |         R_ab = Rb - Ra  # shape = (nTriplets,3)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:462:9: N806 Variable `R_ab` in function should be lowercase
    |
460 |         # difference vectors
461 |         R_ac = Rc - Ra  # shape = (nTriplets,3)
462 |         R_ab = Rb - Ra  # shape = (nTriplets,3)
    |         ^^^^ N806
463 | 
464 |         # angle in triplets
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:467:9: D102 Missing docstring in public method
    |
465 |         return GemNet.calculate_neighbor_angles(R_ac, R_ab)  # (nTriplets,)
466 | 
467 |     def forward(self, z, positions, inputs):
    |         ^^^^^^^ D102
468 |         Z, R = z, positions
469 |         id_a, id_c, id_undir, id_swap = (
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:468:9: N806 Variable `Z` in function should be lowercase
    |
467 |     def forward(self, z, positions, inputs):
468 |         Z, R = z, positions
    |         ^ N806
469 |         id_a, id_c, id_undir, id_swap = (
470 |             inputs["id_a"],
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:468:12: N806 Variable `R` in function should be lowercase
    |
467 |     def forward(self, z, positions, inputs):
468 |         Z, R = z, positions
    |            ^ N806
469 |         id_a, id_c, id_undir, id_swap = (
470 |             inputs["id_a"],
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:469:21: F841 Local variable `id_undir` is assigned to but never used
    |
467 |     def forward(self, z, positions, inputs):
468 |         Z, R = z, positions
469 |         id_a, id_c, id_undir, id_swap = (
    |                     ^^^^^^^^ F841
470 |             inputs["id_a"],
471 |             inputs["id_c"],
    |
    = help: Remove assignment to unused variable `id_undir`

src\stk_search\geom3d\models\GemNet\GemNet.py:477:20: N806 Variable `Kidx4` in function should be lowercase
    |
475 |         id3_expand_ba, id3_reduce_ca = inputs["id3_expand_ba"], inputs["id3_reduce_ca"]
476 |         if not self.triplets_only:
477 |             batch, Kidx4, Kidx3 = (
    |                    ^^^^^ N806
478 |                 inputs["batch"],
479 |                 inputs["Kidx4"],
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:477:27: N806 Variable `Kidx3` in function should be lowercase
    |
475 |         id3_expand_ba, id3_reduce_ca = inputs["id3_expand_ba"], inputs["id3_reduce_ca"]
476 |         if not self.triplets_only:
477 |             batch, Kidx4, Kidx3 = (
    |                           ^^^^^ N806
478 |                 inputs["batch"],
479 |                 inputs["Kidx4"],
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:500:20: N806 Variable `Kidx4` in function should be lowercase
    |
498 |             )
499 |         else:
500 |             batch, Kidx4, Kidx3 = inputs["batch"], None, inputs["Kidx3"]
    |                    ^^^^^ N806
501 |             id4_int_b, id4_int_a = None, None
502 |             id4_reduce_ca, id4_expand_db = None, None
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:500:27: N806 Variable `Kidx3` in function should be lowercase
    |
498 |             )
499 |         else:
500 |             batch, Kidx4, Kidx3 = inputs["batch"], None, inputs["Kidx3"]
    |                           ^^^^^ N806
501 |             id4_int_b, id4_int_a = None, None
502 |             id4_reduce_ca, id4_expand_db = None, None
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:502:28: F841 Local variable `id4_expand_db` is assigned to but never used
    |
500 |             batch, Kidx4, Kidx3 = inputs["batch"], None, inputs["Kidx3"]
501 |             id4_int_b, id4_int_a = None, None
502 |             id4_reduce_ca, id4_expand_db = None, None
    |                            ^^^^^^^^^^^^^ F841
503 |             id4_reduce_cab, id4_expand_abd = None, None
504 |             id4_reduce_intm_ca, id4_expand_intm_db = None, None
    |
    = help: Remove assignment to unused variable `id4_expand_db`

src\stk_search\geom3d\models\GemNet\GemNet.py:508:9: N806 Variable `D_ca` in function should be lowercase
    |
507 |         # Calculate distances
508 |         D_ca, V_ca = self.calculate_interatomic_vectors(R, id_c, id_a)
    |         ^^^^ N806
509 | 
510 |         if not self.triplets_only:
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:508:15: N806 Variable `V_ca` in function should be lowercase
    |
507 |         # Calculate distances
508 |         D_ca, V_ca = self.calculate_interatomic_vectors(R, id_c, id_a)
    |               ^^^^ N806
509 | 
510 |         if not self.triplets_only:
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:511:13: N806 Variable `D_ab` in function should be lowercase
    |
510 |         if not self.triplets_only:
511 |             D_ab, _ = self.calculate_interatomic_vectors(R, id4_int_b, id4_int_a)
    |             ^^^^ N806
512 | 
513 |             # Calculate angles
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:514:13: N806 Variable `Phi_cab` in function should be lowercase
    |
513 |             # Calculate angles
514 |             Phi_cab, Phi_abd, Theta_cabd = self.calculate_angles(
    |             ^^^^^^^ N806
515 |                 R,
516 |                 id_c,
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:514:22: N806 Variable `Phi_abd` in function should be lowercase
    |
513 |             # Calculate angles
514 |             Phi_cab, Phi_abd, Theta_cabd = self.calculate_angles(
    |                      ^^^^^^^ N806
515 |                 R,
516 |                 id_c,
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:514:31: N806 Variable `Theta_cabd` in function should be lowercase
    |
513 |             # Calculate angles
514 |             Phi_cab, Phi_abd, Theta_cabd = self.calculate_angles(
    |                               ^^^^^^^^^^ N806
515 |                 R,
516 |                 id_c,
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:533:9: N806 Variable `Angles3_cab` in function should be lowercase
    |
531 |         rbf = self.rbf_basis(D_ca)
532 |         # Triplet Interaction
533 |         Angles3_cab = self.calculate_angles3(
    |         ^^^^^^^^^^^ N806
534 |             R, id_c, id_a, id3_reduce_ca, id3_expand_ba
535 |         )
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:558:9: N806 Variable `E_a` in function should be lowercase
    |
556 |         rbf_out = self.mlp_rbf_out(rbf)
557 | 
558 |         E_a, F_ca = self.out_blocks[0](h, m, rbf_out, id_a)
    |         ^^^ N806
559 |         # (nAtoms, num_targets), (nEdges, num_targets)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:558:14: N806 Variable `F_ca` in function should be lowercase
    |
556 |         rbf_out = self.mlp_rbf_out(rbf)
557 | 
558 |         E_a, F_ca = self.out_blocks[0](h, m, rbf_out, id_a)
    |              ^^^^ N806
559 |         # (nAtoms, num_targets), (nEdges, num_targets)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:559:9: ERA001 Found commented-out code
    |
558 |         E_a, F_ca = self.out_blocks[0](h, m, rbf_out, id_a)
559 |         # (nAtoms, num_targets), (nEdges, num_targets)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
560 | 
561 |         for i in range(self.num_blocks):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:584:13: N806 Variable `E` in function should be lowercase
    |
582 |             )  # (nAtoms, emb_size_atom), (nEdges, emb_size_edge)
583 | 
584 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
    |             ^ N806
585 |             # (nAtoms, num_targets), (nEdges, num_targets)
586 |             F_ca += F
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:584:16: N806 Variable `F` in function should be lowercase
    |
582 |             )  # (nAtoms, emb_size_atom), (nEdges, emb_size_edge)
583 | 
584 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
    |                ^ N806
585 |             # (nAtoms, num_targets), (nEdges, num_targets)
586 |             F_ca += F
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:585:13: ERA001 Found commented-out code
    |
584 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
585 |             # (nAtoms, num_targets), (nEdges, num_targets)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
586 |             F_ca += F
587 |             E_a += E
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:586:13: N806 Variable `F_ca` in function should be lowercase
    |
584 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
585 |             # (nAtoms, num_targets), (nEdges, num_targets)
586 |             F_ca += F
    |             ^^^^ N806
587 |             E_a += E
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:587:13: N806 Variable `E_a` in function should be lowercase
    |
585 |             # (nAtoms, num_targets), (nEdges, num_targets)
586 |             F_ca += F
587 |             E_a += E
    |             ^^^ N806
588 | 
589 |         nMolecules = torch.max(batch) + 1
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:589:9: N806 Variable `nMolecules` in function should be lowercase
    |
587 |             E_a += E
588 | 
589 |         nMolecules = torch.max(batch) + 1
    |         ^^^^^^^^^^ N806
590 |         if self.extensive:
591 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="add")
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:591:13: N806 Variable `E_a` in function should be lowercase
    |
589 |         nMolecules = torch.max(batch) + 1
590 |         if self.extensive:
591 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="add")
    |             ^^^ N806
592 |             # (nMolecules, num_targets)
593 |         else:
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:592:13: ERA001 Found commented-out code
    |
590 |         if self.extensive:
591 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="add")
592 |             # (nMolecules, num_targets)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
593 |         else:
594 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="mean")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:594:13: N806 Variable `E_a` in function should be lowercase
    |
592 |             # (nMolecules, num_targets)
593 |         else:
594 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="mean")
    |             ^^^ N806
595 |             # (nMolecules, num_targets)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:595:13: ERA001 Found commented-out code
    |
593 |         else:
594 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="mean")
595 |             # (nMolecules, num_targets)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
596 | 
597 |         return E_a
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:599:9: D102 Missing docstring in public method
    |
597 |         return E_a
598 | 
599 |     def forward_with_gathered_index(self, z, positions, inputs, batch, periodic_index_mapping):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
600 |         Z, R = z, positions
601 |         id_a, id_c, id_undir, id_swap = (
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:600:9: N806 Variable `Z` in function should be lowercase
    |
599 |     def forward_with_gathered_index(self, z, positions, inputs, batch, periodic_index_mapping):
600 |         Z, R = z, positions
    |         ^ N806
601 |         id_a, id_c, id_undir, id_swap = (
602 |             inputs["id_a"],
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:600:12: N806 Variable `R` in function should be lowercase
    |
599 |     def forward_with_gathered_index(self, z, positions, inputs, batch, periodic_index_mapping):
600 |         Z, R = z, positions
    |            ^ N806
601 |         id_a, id_c, id_undir, id_swap = (
602 |             inputs["id_a"],
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:601:21: F841 Local variable `id_undir` is assigned to but never used
    |
599 |     def forward_with_gathered_index(self, z, positions, inputs, batch, periodic_index_mapping):
600 |         Z, R = z, positions
601 |         id_a, id_c, id_undir, id_swap = (
    |                     ^^^^^^^^ F841
602 |             inputs["id_a"],
603 |             inputs["id_c"],
    |
    = help: Remove assignment to unused variable `id_undir`

src\stk_search\geom3d\models\GemNet\GemNet.py:610:9: ERA001 Found commented-out code
    |
609 |         # if not self.triplets_only:
610 |         #     batch, Kidx4, Kidx3 = (
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
611 |         #         inputs["batch"],
612 |         #         inputs["Kidx4"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:611:9: ERA001 Found commented-out code
    |
609 |         # if not self.triplets_only:
610 |         #     batch, Kidx4, Kidx3 = (
611 |         #         inputs["batch"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
612 |         #         inputs["Kidx4"],
613 |         #         inputs["Kidx3"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:612:9: ERA001 Found commented-out code
    |
610 |         #     batch, Kidx4, Kidx3 = (
611 |         #         inputs["batch"],
612 |         #         inputs["Kidx4"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
613 |         #         inputs["Kidx3"],
614 |         #     )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:613:9: ERA001 Found commented-out code
    |
611 |         #         inputs["batch"],
612 |         #         inputs["Kidx4"],
613 |         #         inputs["Kidx3"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
614 |         #     )
615 |         #     id4_int_b, id4_int_a = inputs["id4_int_b"], inputs["id4_int_a"]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:614:9: ERA001 Found commented-out code
    |
612 |         #         inputs["Kidx4"],
613 |         #         inputs["Kidx3"],
614 |         #     )
    |         ^^^^^^^ ERA001
615 |         #     id4_int_b, id4_int_a = inputs["id4_int_b"], inputs["id4_int_a"]
616 |         #     id4_reduce_ca, id4_expand_db = (
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:615:9: ERA001 Found commented-out code
    |
613 |         #         inputs["Kidx3"],
614 |         #     )
615 |         #     id4_int_b, id4_int_a = inputs["id4_int_b"], inputs["id4_int_a"]
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
616 |         #     id4_reduce_ca, id4_expand_db = (
617 |         #         inputs["id4_reduce_ca"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:616:9: ERA001 Found commented-out code
    |
614 |         #     )
615 |         #     id4_int_b, id4_int_a = inputs["id4_int_b"], inputs["id4_int_a"]
616 |         #     id4_reduce_ca, id4_expand_db = (
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
617 |         #         inputs["id4_reduce_ca"],
618 |         #         inputs["id4_expand_db"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:617:9: ERA001 Found commented-out code
    |
615 |         #     id4_int_b, id4_int_a = inputs["id4_int_b"], inputs["id4_int_a"]
616 |         #     id4_reduce_ca, id4_expand_db = (
617 |         #         inputs["id4_reduce_ca"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
618 |         #         inputs["id4_expand_db"],
619 |         #     )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:618:9: ERA001 Found commented-out code
    |
616 |         #     id4_reduce_ca, id4_expand_db = (
617 |         #         inputs["id4_reduce_ca"],
618 |         #         inputs["id4_expand_db"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
619 |         #     )
620 |         #     id4_reduce_cab, id4_expand_abd = (
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:619:9: ERA001 Found commented-out code
    |
617 |         #         inputs["id4_reduce_ca"],
618 |         #         inputs["id4_expand_db"],
619 |         #     )
    |         ^^^^^^^ ERA001
620 |         #     id4_reduce_cab, id4_expand_abd = (
621 |         #         inputs["id4_reduce_cab"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:620:9: ERA001 Found commented-out code
    |
618 |         #         inputs["id4_expand_db"],
619 |         #     )
620 |         #     id4_reduce_cab, id4_expand_abd = (
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
621 |         #         inputs["id4_reduce_cab"],
622 |         #         inputs["id4_expand_abd"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:621:9: ERA001 Found commented-out code
    |
619 |         #     )
620 |         #     id4_reduce_cab, id4_expand_abd = (
621 |         #         inputs["id4_reduce_cab"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
622 |         #         inputs["id4_expand_abd"],
623 |         #     )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:622:9: ERA001 Found commented-out code
    |
620 |         #     id4_reduce_cab, id4_expand_abd = (
621 |         #         inputs["id4_reduce_cab"],
622 |         #         inputs["id4_expand_abd"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
623 |         #     )
624 |         #     id4_reduce_intm_ca, id4_expand_intm_db = (
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:623:9: ERA001 Found commented-out code
    |
621 |         #         inputs["id4_reduce_cab"],
622 |         #         inputs["id4_expand_abd"],
623 |         #     )
    |         ^^^^^^^ ERA001
624 |         #     id4_reduce_intm_ca, id4_expand_intm_db = (
625 |         #         inputs["id4_reduce_intm_ca"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:624:9: ERA001 Found commented-out code
    |
622 |         #         inputs["id4_expand_abd"],
623 |         #     )
624 |         #     id4_reduce_intm_ca, id4_expand_intm_db = (
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
625 |         #         inputs["id4_reduce_intm_ca"],
626 |         #         inputs["id4_expand_intm_db"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:625:9: ERA001 Found commented-out code
    |
623 |         #     )
624 |         #     id4_reduce_intm_ca, id4_expand_intm_db = (
625 |         #         inputs["id4_reduce_intm_ca"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
626 |         #         inputs["id4_expand_intm_db"],
627 |         #     )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:626:9: ERA001 Found commented-out code
    |
624 |         #     id4_reduce_intm_ca, id4_expand_intm_db = (
625 |         #         inputs["id4_reduce_intm_ca"],
626 |         #         inputs["id4_expand_intm_db"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
627 |         #     )
628 |         #     id4_reduce_intm_ab, id4_expand_intm_ab = (
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:627:9: ERA001 Found commented-out code
    |
625 |         #         inputs["id4_reduce_intm_ca"],
626 |         #         inputs["id4_expand_intm_db"],
627 |         #     )
    |         ^^^^^^^ ERA001
628 |         #     id4_reduce_intm_ab, id4_expand_intm_ab = (
629 |         #         inputs["id4_reduce_intm_ab"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:628:9: ERA001 Found commented-out code
    |
626 |         #         inputs["id4_expand_intm_db"],
627 |         #     )
628 |         #     id4_reduce_intm_ab, id4_expand_intm_ab = (
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
629 |         #         inputs["id4_reduce_intm_ab"],
630 |         #         inputs["id4_expand_intm_ab"],
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:629:9: ERA001 Found commented-out code
    |
627 |         #     )
628 |         #     id4_reduce_intm_ab, id4_expand_intm_ab = (
629 |         #         inputs["id4_reduce_intm_ab"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
630 |         #         inputs["id4_expand_intm_ab"],
631 |         #     )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:630:9: ERA001 Found commented-out code
    |
628 |         #     id4_reduce_intm_ab, id4_expand_intm_ab = (
629 |         #         inputs["id4_reduce_intm_ab"],
630 |         #         inputs["id4_expand_intm_ab"],
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
631 |         #     )
632 |         # else:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:631:9: ERA001 Found commented-out code
    |
629 |         #         inputs["id4_reduce_intm_ab"],
630 |         #         inputs["id4_expand_intm_ab"],
631 |         #     )
    |         ^^^^^^^ ERA001
632 |         # else:
633 |         Kidx4, Kidx3 = None, inputs["Kidx3"]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:632:9: ERA001 Found commented-out code
    |
630 |         #         inputs["id4_expand_intm_ab"],
631 |         #     )
632 |         # else:
    |         ^^^^^^^ ERA001
633 |         Kidx4, Kidx3 = None, inputs["Kidx3"]
634 |         id4_int_b, id4_int_a = None, None
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:633:9: N806 Variable `Kidx4` in function should be lowercase
    |
631 |         #     )
632 |         # else:
633 |         Kidx4, Kidx3 = None, inputs["Kidx3"]
    |         ^^^^^ N806
634 |         id4_int_b, id4_int_a = None, None
635 |         id4_reduce_ca, id4_expand_db = None, None
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:633:16: N806 Variable `Kidx3` in function should be lowercase
    |
631 |         #     )
632 |         # else:
633 |         Kidx4, Kidx3 = None, inputs["Kidx3"]
    |                ^^^^^ N806
634 |         id4_int_b, id4_int_a = None, None
635 |         id4_reduce_ca, id4_expand_db = None, None
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:634:9: F841 Local variable `id4_int_b` is assigned to but never used
    |
632 |         # else:
633 |         Kidx4, Kidx3 = None, inputs["Kidx3"]
634 |         id4_int_b, id4_int_a = None, None
    |         ^^^^^^^^^ F841
635 |         id4_reduce_ca, id4_expand_db = None, None
636 |         id4_reduce_cab, id4_expand_abd = None, None
    |
    = help: Remove assignment to unused variable `id4_int_b`

src\stk_search\geom3d\models\GemNet\GemNet.py:634:20: F841 Local variable `id4_int_a` is assigned to but never used
    |
632 |         # else:
633 |         Kidx4, Kidx3 = None, inputs["Kidx3"]
634 |         id4_int_b, id4_int_a = None, None
    |                    ^^^^^^^^^ F841
635 |         id4_reduce_ca, id4_expand_db = None, None
636 |         id4_reduce_cab, id4_expand_abd = None, None
    |
    = help: Remove assignment to unused variable `id4_int_a`

src\stk_search\geom3d\models\GemNet\GemNet.py:635:24: F841 Local variable `id4_expand_db` is assigned to but never used
    |
633 |         Kidx4, Kidx3 = None, inputs["Kidx3"]
634 |         id4_int_b, id4_int_a = None, None
635 |         id4_reduce_ca, id4_expand_db = None, None
    |                        ^^^^^^^^^^^^^ F841
636 |         id4_reduce_cab, id4_expand_abd = None, None
637 |         id4_reduce_intm_ca, id4_expand_intm_db = None, None
    |
    = help: Remove assignment to unused variable `id4_expand_db`

src\stk_search\geom3d\models\GemNet\GemNet.py:636:9: F841 Local variable `id4_reduce_cab` is assigned to but never used
    |
634 |         id4_int_b, id4_int_a = None, None
635 |         id4_reduce_ca, id4_expand_db = None, None
636 |         id4_reduce_cab, id4_expand_abd = None, None
    |         ^^^^^^^^^^^^^^ F841
637 |         id4_reduce_intm_ca, id4_expand_intm_db = None, None
638 |         id4_reduce_intm_ab, id4_expand_intm_ab = None, None
    |
    = help: Remove assignment to unused variable `id4_reduce_cab`

src\stk_search\geom3d\models\GemNet\GemNet.py:637:9: F841 Local variable `id4_reduce_intm_ca` is assigned to but never used
    |
635 |         id4_reduce_ca, id4_expand_db = None, None
636 |         id4_reduce_cab, id4_expand_abd = None, None
637 |         id4_reduce_intm_ca, id4_expand_intm_db = None, None
    |         ^^^^^^^^^^^^^^^^^^ F841
638 |         id4_reduce_intm_ab, id4_expand_intm_ab = None, None
    |
    = help: Remove assignment to unused variable `id4_reduce_intm_ca`

src\stk_search\geom3d\models\GemNet\GemNet.py:638:9: F841 Local variable `id4_reduce_intm_ab` is assigned to but never used
    |
636 |         id4_reduce_cab, id4_expand_abd = None, None
637 |         id4_reduce_intm_ca, id4_expand_intm_db = None, None
638 |         id4_reduce_intm_ab, id4_expand_intm_ab = None, None
    |         ^^^^^^^^^^^^^^^^^^ F841
639 | 
640 |         # Calculate distances
    |
    = help: Remove assignment to unused variable `id4_reduce_intm_ab`

src\stk_search\geom3d\models\GemNet\GemNet.py:638:29: F841 Local variable `id4_expand_intm_ab` is assigned to but never used
    |
636 |         id4_reduce_cab, id4_expand_abd = None, None
637 |         id4_reduce_intm_ca, id4_expand_intm_db = None, None
638 |         id4_reduce_intm_ab, id4_expand_intm_ab = None, None
    |                             ^^^^^^^^^^^^^^^^^^ F841
639 | 
640 |         # Calculate distances
    |
    = help: Remove assignment to unused variable `id4_expand_intm_ab`

src\stk_search\geom3d\models\GemNet\GemNet.py:641:9: N806 Variable `D_ca` in function should be lowercase
    |
640 |         # Calculate distances
641 |         D_ca, V_ca = self.calculate_interatomic_vectors(R, id_c, id_a)
    |         ^^^^ N806
642 | 
643 |         # if not self.triplets_only:
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:641:15: N806 Variable `V_ca` in function should be lowercase
    |
640 |         # Calculate distances
641 |         D_ca, V_ca = self.calculate_interatomic_vectors(R, id_c, id_a)
    |               ^^^^ N806
642 | 
643 |         # if not self.triplets_only:
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:644:9: ERA001 Found commented-out code
    |
643 |         # if not self.triplets_only:
644 |         #     D_ab, _ = self.calculate_interatomic_vectors(R, id4_int_b, id4_int_a)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
645 | 
646 |         #     # Calculate angles
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:647:9: ERA001 Found commented-out code
    |
646 |         #     # Calculate angles
647 |         #     Phi_cab, Phi_abd, Theta_cabd = self.calculate_angles(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
648 |         #         R,
649 |         #         id_c,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:659:9: ERA001 Found commented-out code
    |
657 |         #         id4_expand_intm_ab,
658 |         #         id4_reduce_intm_ab,
659 |         #     )
    |         ^^^^^^^ ERA001
660 | 
661 |         #     cbf4 = self.cbf_basis(D_ab, Phi_abd, id4_expand_intm_ab, None)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:661:9: ERA001 Found commented-out code
    |
659 |         #     )
660 | 
661 |         #     cbf4 = self.cbf_basis(D_ab, Phi_abd, id4_expand_intm_ab, None)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
662 |         #     sbf4 = self.sbf_basis(D_ca, Phi_cab, Theta_cabd, id4_reduce_ca, Kidx4)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:662:9: ERA001 Found commented-out code
    |
661 |         #     cbf4 = self.cbf_basis(D_ab, Phi_abd, id4_expand_intm_ab, None)
662 |         #     sbf4 = self.sbf_basis(D_ca, Phi_cab, Theta_cabd, id4_reduce_ca, Kidx4)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
663 | 
664 |         rbf = self.rbf_basis(D_ca)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:666:9: N806 Variable `Angles3_cab` in function should be lowercase
    |
664 |         rbf = self.rbf_basis(D_ca)
665 |         # Triplet Interaction
666 |         Angles3_cab = self.calculate_angles3(
    |         ^^^^^^^^^^^ N806
667 |             R, id_c, id_a, id3_reduce_ca, id3_expand_ba
668 |         )
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:688:9: N806 Variable `E_a` in function should be lowercase
    |
686 |         rbf_out = self.mlp_rbf_out(rbf)
687 | 
688 |         E_a, F_ca = self.out_blocks[0](h, m, rbf_out, id_a)
    |         ^^^ N806
689 |         # (nAtoms, num_targets), (nEdges, num_targets)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:688:14: N806 Variable `F_ca` in function should be lowercase
    |
686 |         rbf_out = self.mlp_rbf_out(rbf)
687 | 
688 |         E_a, F_ca = self.out_blocks[0](h, m, rbf_out, id_a)
    |              ^^^^ N806
689 |         # (nAtoms, num_targets), (nEdges, num_targets)
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:689:9: ERA001 Found commented-out code
    |
688 |         E_a, F_ca = self.out_blocks[0](h, m, rbf_out, id_a)
689 |         # (nAtoms, num_targets), (nEdges, num_targets)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
690 | 
691 |         for i in range(self.num_blocks):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:714:13: N806 Variable `E` in function should be lowercase
    |
712 |             )  # (nAtoms, emb_size_atom), (nEdges, emb_size_edge)
713 | 
714 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
    |             ^ N806
715 |             # (nAtoms, num_targets), (nEdges, num_targets)
716 |             F_ca += F
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:714:16: N806 Variable `F` in function should be lowercase
    |
712 |             )  # (nAtoms, emb_size_atom), (nEdges, emb_size_edge)
713 | 
714 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
    |                ^ N806
715 |             # (nAtoms, num_targets), (nEdges, num_targets)
716 |             F_ca += F
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:715:13: ERA001 Found commented-out code
    |
714 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
715 |             # (nAtoms, num_targets), (nEdges, num_targets)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
716 |             F_ca += F
717 |             E_a += E
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\GemNet.py:716:13: N806 Variable `F_ca` in function should be lowercase
    |
714 |             E, F = self.out_blocks[i + 1](h, m, rbf_out, id_a)
715 |             # (nAtoms, num_targets), (nEdges, num_targets)
716 |             F_ca += F
    |             ^^^^ N806
717 |             E_a += E
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:717:13: N806 Variable `E_a` in function should be lowercase
    |
715 |             # (nAtoms, num_targets), (nEdges, num_targets)
716 |             F_ca += F
717 |             E_a += E
    |             ^^^ N806
718 | 
719 |         nMolecules = torch.max(batch) + 1
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:719:9: N806 Variable `nMolecules` in function should be lowercase
    |
717 |             E_a += E
718 | 
719 |         nMolecules = torch.max(batch) + 1
    |         ^^^^^^^^^^ N806
720 |         if self.extensive:
721 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="add")
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:721:13: N806 Variable `E_a` in function should be lowercase
    |
719 |         nMolecules = torch.max(batch) + 1
720 |         if self.extensive:
721 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="add")
    |             ^^^ N806
722 |         else:
723 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="mean")
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:723:13: N806 Variable `E_a` in function should be lowercase
    |
721 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="add")
722 |         else:
723 |             E_a = scatter(E_a, batch, dim=0, dim_size=nMolecules, reduce="mean")
    |             ^^^ N806
724 | 
725 |         return E_a
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:727:9: D102 Missing docstring in public method
    |
725 |         return E_a
726 | 
727 |     def predict(self, inputs):
    |         ^^^^^^^ D102
728 |         E, F = self(inputs)
729 |         E = E.detach().cpu()
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:728:9: N806 Variable `E` in function should be lowercase
    |
727 |     def predict(self, inputs):
728 |         E, F = self(inputs)
    |         ^ N806
729 |         E = E.detach().cpu()
730 |         F = F.detach().cpu()
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:728:12: N806 Variable `F` in function should be lowercase
    |
727 |     def predict(self, inputs):
728 |         E, F = self(inputs)
    |            ^ N806
729 |         E = E.detach().cpu()
730 |         F = F.detach().cpu()
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:729:9: N806 Variable `E` in function should be lowercase
    |
727 |     def predict(self, inputs):
728 |         E, F = self(inputs)
729 |         E = E.detach().cpu()
    |         ^ N806
730 |         F = F.detach().cpu()
731 |         return E, F
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:730:9: N806 Variable `F` in function should be lowercase
    |
728 |         E, F = self(inputs)
729 |         E = E.detach().cpu()
730 |         F = F.detach().cpu()
    |         ^ N806
731 |         return E, F
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:733:9: D102 Missing docstring in public method
    |
731 |         return E, F
732 | 
733 |     def load_weights(self, path):
    |         ^^^^^^^^^^^^ D102
734 |         self.load_state_dict(torch.load(path))
    |

src\stk_search\geom3d\models\GemNet\GemNet.py:736:9: D102 Missing docstring in public method
    |
734 |         self.load_state_dict(torch.load(path))
735 | 
736 |     def save_weights(self, path):
    |         ^^^^^^^^^^^^ D102
737 |         torch.save(self.state_dict(), path)
    |

src\stk_search\geom3d\models\GemNet\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\GemNet\__init__.py:1:21: F401 `.GemNet.GemNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .GemNet import GemNet
  |                     ^^^^^^ F401
  |
  = help: Use an explicit re-export: `GemNet as GemNet`

src\stk_search\geom3d\models\GemNet\initializers.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\initializers.py:4:5: ANN202 Missing return type annotation for private function `_standardize`
  |
4 | def _standardize(kernel):
  |     ^^^^^^^^^^^^ ANN202
5 |     """Makes sure that Var(W) = 1 and E[W] = 0
6 |     """
  |
  = help: Add return type annotation

src\stk_search\geom3d\models\GemNet\initializers.py:5:5: D200 One-line docstring should fit on one line
  |
4 |   def _standardize(kernel):
5 |       """Makes sure that Var(W) = 1 and E[W] = 0
  |  _____^
6 | |     """
  | |_______^ D200
7 |       eps = 1e-6
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\initializers.py:5:5: D400 First line should end with a period
  |
4 |   def _standardize(kernel):
5 |       """Makes sure that Var(W) = 1 and E[W] = 0
  |  _____^
6 | |     """
  | |_______^ D400
7 |       eps = 1e-6
  |
  = help: Add period

src\stk_search\geom3d\models\GemNet\initializers.py:5:5: D401 First line of docstring should be in imperative mood: "Makes sure that Var(W) = 1 and E[W] = 0"
  |
4 |   def _standardize(kernel):
5 |       """Makes sure that Var(W) = 1 and E[W] = 0
  |  _____^
6 | |     """
  | |_______^ D401
7 |       eps = 1e-6
  |

src\stk_search\geom3d\models\GemNet\initializers.py:5:5: D415 First line should end with a period, question mark, or exclamation point
  |
4 |   def _standardize(kernel):
5 |       """Makes sure that Var(W) = 1 and E[W] = 0
  |  _____^
6 | |     """
  | |_______^ D415
7 |       eps = 1e-6
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\initializers.py:9:5: SIM108 Use ternary operator `axis = [0, 1] if len(kernel.shape) == 3 else 1` instead of `if`-`else`-block
   |
 7 |       eps = 1e-6
 8 |   
 9 |       if len(kernel.shape) == 3:
   |  _____^
10 | |         axis = [0, 1]  # last dimension is output dimension
11 | |     else:
12 | |         axis = 1
   | |________________^ SIM108
13 |   
14 |       var, mean = torch.var_mean(kernel, dim=axis, unbiased=True, keepdim=True)
   |
   = help: Replace `if`-`else`-block with `axis = [0, 1] if len(kernel.shape) == 3 else 1`

src\stk_search\geom3d\models\GemNet\initializers.py:9:29: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
 7 |     eps = 1e-6
 8 | 
 9 |     if len(kernel.shape) == 3:
   |                             ^ PLR2004
10 |         axis = [0, 1]  # last dimension is output dimension
11 |     else:
   |

src\stk_search\geom3d\models\GemNet\initializers.py:16:12: RET504 Unnecessary assignment to `kernel` before `return` statement
   |
14 |     var, mean = torch.var_mean(kernel, dim=axis, unbiased=True, keepdim=True)
15 |     kernel = (kernel - mean) / (var + eps) ** 0.5
16 |     return kernel
   |            ^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\initializers.py:20:5: D205 1 blank line required between summary line and description
   |
19 |   def he_orthogonal_init(tensor):
20 |       """Generate a weight matrix with variance according to He initialization.
   |  _____^
21 | |     Based on a random (semi-)orthogonal matrix neural networks
22 | |     are expected to learn better when features are decorrelated
23 | |     (stated by eg. "Reducing overfitting in deep networks by decorrelating representations",
24 | |     "Dropout: a simple way to prevent neural networks from overfitting",
25 | |     "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks")
26 | |     """
   | |_______^ D205
27 |       tensor = torch.nn.init.orthogonal_(tensor)
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\initializers.py:20:5: D400 First line should end with a period
   |
19 |   def he_orthogonal_init(tensor):
20 |       """Generate a weight matrix with variance according to He initialization.
   |  _____^
21 | |     Based on a random (semi-)orthogonal matrix neural networks
22 | |     are expected to learn better when features are decorrelated
23 | |     (stated by eg. "Reducing overfitting in deep networks by decorrelating representations",
24 | |     "Dropout: a simple way to prevent neural networks from overfitting",
25 | |     "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks")
26 | |     """
   | |_______^ D400
27 |       tensor = torch.nn.init.orthogonal_(tensor)
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\initializers.py:20:5: D415 First line should end with a period, question mark, or exclamation point
   |
19 |   def he_orthogonal_init(tensor):
20 |       """Generate a weight matrix with variance according to He initialization.
   |  _____^
21 | |     Based on a random (semi-)orthogonal matrix neural networks
22 | |     are expected to learn better when features are decorrelated
23 | |     (stated by eg. "Reducing overfitting in deep networks by decorrelating representations",
24 | |     "Dropout: a simple way to prevent neural networks from overfitting",
25 | |     "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks")
26 | |     """
   | |_______^ D415
27 |       tensor = torch.nn.init.orthogonal_(tensor)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\initializers.py:29:29: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
27 |     tensor = torch.nn.init.orthogonal_(tensor)
28 | 
29 |     if len(tensor.shape) == 3:
   |                             ^ PLR2004
30 |         fan_in = tensor.shape[:-1].numel()
31 |     else:
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:4:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
2 | from torch_geometric.utils import scatter
3 | 
4 | from ..initializers import he_orthogonal_init
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
5 | from .base_layers import Dense, ResidualLayer
6 | from .scaling import ScalingFactor
  |
  = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:10:5: D400 First line should end with a period
   |
 9 |   class AtomUpdateBlock(torch.nn.Module):
10 |       """Aggregate the message embeddings of the atoms
   |  _____^
11 | | 
12 | |     Parameters
13 | |     ----------
14 | |         emb_size_atom: int
15 | |             Embedding size of the atoms.
16 | |         emb_size_edge: int
17 | |             Embedding size of the edge embeddings.
18 | |         nHidden: int
19 | |             Number of residual blocks.
20 | |         activation: callable/str
21 | |             Activation function to use in the dense layers.
22 | |         scale_file: str
23 | |             Path to the json file containing the scaling factors.
24 | | 
25 | |     """
   | |_______^ D400
26 |   
27 |       def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:10:5: D415 First line should end with a period, question mark, or exclamation point
   |
 9 |   class AtomUpdateBlock(torch.nn.Module):
10 |       """Aggregate the message embeddings of the atoms
   |  _____^
11 | | 
12 | |     Parameters
13 | |     ----------
14 | |         emb_size_atom: int
15 | |             Embedding size of the atoms.
16 | |         emb_size_edge: int
17 | |             Embedding size of the edge embeddings.
18 | |         nHidden: int
19 | |             Number of residual blocks.
20 | |         activation: callable/str
21 | |             Activation function to use in the dense layers.
22 | |         scale_file: str
23 | |             Path to the json file containing the scaling factors.
24 | | 
25 | |     """
   | |_______^ D415
26 |   
27 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:27:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
25 |     """
26 | 
27 |     def __init__(
   |         ^^^^^^^^ PLR0913
28 |         self,
29 |         emb_size_atom: int,
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 |     """
26 | 
27 |     def __init__(
   |         ^^^^^^^^ ANN204
28 |         self,
29 |         emb_size_atom: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:27:9: D107 Missing docstring in `__init__`
   |
25 |     """
26 | 
27 |     def __init__(
   |         ^^^^^^^^ D107
28 |         self,
29 |         emb_size_atom: int,
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:32:9: N803 Argument name `nHidden` should be lowercase
   |
30 |         emb_size_edge: int,
31 |         emb_size_rbf: int,
32 |         nHidden: int,
   |         ^^^^^^^^^^^^ N803
33 |         activation=None,
34 |         scale_file=None,
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:46:9: D102 Missing docstring in public method
   |
44 |         self.layers = self.get_mlp(emb_size_atom, nHidden, activation)
45 | 
46 |     def get_mlp(self, units, nHidden, activation):
   |         ^^^^^^^ D102
47 |         dense1 = Dense(self.emb_size_edge, units, activation=activation, bias=False)
48 |         res = [
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:46:30: N803 Argument name `nHidden` should be lowercase
   |
44 |         self.layers = self.get_mlp(emb_size_atom, nHidden, activation)
45 | 
46 |     def get_mlp(self, units, nHidden, activation):
   |                              ^^^^^^^ N803
47 |         dense1 = Dense(self.emb_size_edge, units, activation=activation, bias=False)
48 |         res = [
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:52:15: RUF005 Consider `[dense1, *res]` instead of concatenation
   |
50 |             for i in range(nHidden)
51 |         ]
52 |         mlp = [dense1] + res
   |               ^^^^^^^^^^^^^^ RUF005
53 |         return torch.nn.ModuleList(mlp)
   |
   = help: Replace with `[dense1, *res]`

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:56:9: D205 1 blank line required between summary line and description
   |
55 |       def forward(self, h, m, rbf, id_j):
56 |           """Returns
   |  _________^
57 | |         -------
58 | |             h: Tensor, shape=(nAtoms, emb_size_atom)
59 | |                 Atom embedding.
60 | | 
61 | |         """
   | |___________^ D205
62 |           nAtoms = h.shape[0]
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:56:9: D401 First line of docstring should be in imperative mood: "Returns"
   |
55 |       def forward(self, h, m, rbf, id_j):
56 |           """Returns
   |  _________^
57 | |         -------
58 | |             h: Tensor, shape=(nAtoms, emb_size_atom)
59 | |                 Atom embedding.
60 | | 
61 | |         """
   | |___________^ D401
62 |           nAtoms = h.shape[0]
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:62:9: N806 Variable `nAtoms` in function should be lowercase
   |
61 |         """
62 |         nAtoms = h.shape[0]
   |         ^^^^^^ N806
63 | 
64 |         mlp_rbf = self.dense_rbf(rbf)  # (nEdges, emb_size_edge)
   |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:70:13: B007 Loop control variable `i` not used within loop body
   |
68 |         x = self.scale_sum(m, x2) # (nAtoms, emb_size_edge)
69 | 
70 |         for i, layer in enumerate(self.layers):
   |             ^ B007
71 |             x = layer(x)  # (nAtoms, emb_size_atom)
72 |         return x
   |
   = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:99:9: PLR0913 Too many arguments in function definition (10 > 5)
    |
 97 |     """
 98 | 
 99 |     def __init__(
    |         ^^^^^^^^ PLR0913
100 |         self,
101 |         emb_size_atom: int,
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:99:9: ANN204 Missing return type annotation for special method `__init__`
    |
 97 |     """
 98 | 
 99 |     def __init__(
    |         ^^^^^^^^ ANN204
100 |         self,
101 |         emb_size_atom: int,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:99:9: D107 Missing docstring in `__init__`
    |
 97 |     """
 98 | 
 99 |     def __init__(
    |         ^^^^^^^^ D107
100 |         self,
101 |         emb_size_atom: int,
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:104:9: N803 Argument name `nHidden` should be lowercase
    |
102 |         emb_size_edge: int,
103 |         emb_size_rbf: int,
104 |         nHidden: int,
    |         ^^^^^^^^^^^^ N803
105 |         num_targets: int,
106 |         activation=None,
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:107:9: FBT002 Boolean default positional argument in function definition
    |
105 |         num_targets: int,
106 |         activation=None,
107 |         direct_forces=True,
    |         ^^^^^^^^^^^^^ FBT002
108 |         output_init="HeOrthogonal",
109 |         scale_file=None,
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:111:9: ANN003 Missing type annotation for `**kwargs`
    |
109 |         scale_file=None,
110 |         name: str = "output",
111 |         **kwargs,
    |         ^^^^^^^^ ANN003
112 |     ):
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:125:9: S101 Use of `assert` detected
    |
123 |         )
124 | 
125 |         assert isinstance(output_init, str)
    |         ^^^^^^ S101
126 |         self.output_init = output_init
127 |         self.direct_forces = direct_forces
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:145:9: D102 Missing docstring in public method
    |
143 |         self.reset_parameters()
144 | 
145 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
146 |         if self.output_init.lower() == "heorthogonal":
147 |             he_orthogonal_init(self.out_energy.weight)
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:155:19: TRY003 Avoid specifying long messages outside the exception class
    |
153 |                 torch.nn.init.zeros_(self.out_forces.weight)
154 |         else:
155 |             raise UserWarning(f"Unknown output_init: {self.output_init}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
156 | 
157 |     def forward(self, h, m, rbf, id_j):
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:155:31: EM102 Exception must not use an f-string literal, assign to variable first
    |
153 |                 torch.nn.init.zeros_(self.out_forces.weight)
154 |         else:
155 |             raise UserWarning(f"Unknown output_init: {self.output_init}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
156 | 
157 |     def forward(self, h, m, rbf, id_j):
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:158:9: D205 1 blank line required between summary line and description
    |
157 |       def forward(self, h, m, rbf, id_j):
158 |           """Returns
    |  _________^
159 | |         -------
160 | |             (E, F): tuple
161 | |             - E: Tensor, shape=(nAtoms, num_targets)
162 | |             - F: Tensor, shape=(nEdges, num_targets)
163 | |             Energy and force prediction
164 | | 
165 | |         """
    | |___________^ D205
166 |           nAtoms = h.shape[0]
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:158:9: D401 First line of docstring should be in imperative mood: "Returns"
    |
157 |       def forward(self, h, m, rbf, id_j):
158 |           """Returns
    |  _________^
159 | |         -------
160 | |             (E, F): tuple
161 | |             - E: Tensor, shape=(nAtoms, num_targets)
162 | |             - F: Tensor, shape=(nEdges, num_targets)
163 | |             Energy and force prediction
164 | | 
165 | |         """
    | |___________^ D401
166 |           nAtoms = h.shape[0]
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:166:9: N806 Variable `nAtoms` in function should be lowercase
    |
165 |         """
166 |         nAtoms = h.shape[0]
    |         ^^^^^^ N806
167 | 
168 |         rbf_mlp = self.dense_rbf(rbf)  # (nEdges, emb_size_edge)
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:172:9: N806 Variable `x_E` in function should be lowercase
    |
171 |         # -------------------------------------- Energy Prediction -------------------------------------- #
172 |         x_E = scatter(x, id_j, dim=0, dim_size=nAtoms, reduce="add")  # (nAtoms, emb_size_edge)
    |         ^^^ N806
173 |         x_E = self.scale_sum(m, x_E)
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:173:9: N806 Variable `x_E` in function should be lowercase
    |
171 |         # -------------------------------------- Energy Prediction -------------------------------------- #
172 |         x_E = scatter(x, id_j, dim=0, dim_size=nAtoms, reduce="add")  # (nAtoms, emb_size_edge)
173 |         x_E = self.scale_sum(m, x_E)
    |         ^^^ N806
174 | 
175 |         for i, layer in enumerate(self.seq_energy):
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:175:13: B007 Loop control variable `i` not used within loop body
    |
173 |         x_E = self.scale_sum(m, x_E)
174 | 
175 |         for i, layer in enumerate(self.seq_energy):
    |             ^ B007
176 |             x_E = layer(x_E)  # (nAtoms, emb_size_atom)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:176:13: N806 Variable `x_E` in function should be lowercase
    |
175 |         for i, layer in enumerate(self.seq_energy):
176 |             x_E = layer(x_E)  # (nAtoms, emb_size_atom)
    |             ^^^ N806
177 | 
178 |         x_E = self.out_energy(x_E)  # (nAtoms, num_targets)
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:178:9: N806 Variable `x_E` in function should be lowercase
    |
176 |             x_E = layer(x_E)  # (nAtoms, emb_size_atom)
177 | 
178 |         x_E = self.out_energy(x_E)  # (nAtoms, num_targets)
    |         ^^^ N806
179 | 
180 |         # --------------------------------------- Force Prediction -------------------------------------- #
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:183:13: N806 Variable `x_F` in function should be lowercase
    |
181 |         if self.direct_forces:
182 | 
183 |             x_F = self.scale_rbf(m, x)
    |             ^^^ N806
184 | 
185 |             for i, layer in enumerate(self.seq_forces):
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:185:17: B007 Loop control variable `i` not used within loop body
    |
183 |             x_F = self.scale_rbf(m, x)
184 | 
185 |             for i, layer in enumerate(self.seq_forces):
    |                 ^ B007
186 |                 x_F = layer(x_F)  # (nEdges, emb_size_edge)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:186:17: N806 Variable `x_F` in function should be lowercase
    |
185 |             for i, layer in enumerate(self.seq_forces):
186 |                 x_F = layer(x_F)  # (nEdges, emb_size_edge)
    |                 ^^^ N806
187 | 
188 |             x_F = self.out_forces(x_F)  # (nEdges, num_targets)
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:188:13: N806 Variable `x_F` in function should be lowercase
    |
186 |                 x_F = layer(x_F)  # (nEdges, emb_size_edge)
187 | 
188 |             x_F = self.out_forces(x_F)  # (nEdges, num_targets)
    |             ^^^ N806
189 |         else:
190 |             x_F = 0
    |

src\stk_search\geom3d\models\GemNet\layers\atom_update_block.py:190:13: N806 Variable `x_F` in function should be lowercase
    |
188 |             x_F = self.out_forces(x_F)  # (nEdges, num_targets)
189 |         else:
190 |             x_F = 0
    |             ^^^ N806
191 |         # ----------------------------------------------------------------------------------------------- #
    |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\base_layers.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\base_layers.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\base_layers.py:3:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
1 | import torch
2 | 
3 | from ..initializers import he_orthogonal_init
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:20:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 |     """
19 | 
20 |     def __init__(
   |         ^^^^^^^^ ANN204
21 |         self, in_features, out_features, bias=False, activation=None, name=None
22 |     ):
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:20:9: D107 Missing docstring in `__init__`
   |
18 |     """
19 | 
20 |     def __init__(
   |         ^^^^^^^^ D107
21 |         self, in_features, out_features, bias=False, activation=None, name=None
22 |     ):
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:21:42: FBT002 Boolean default positional argument in function definition
   |
20 |     def __init__(
21 |         self, in_features, out_features, bias=False, activation=None, name=None
   |                                          ^^^^ FBT002
22 |     ):
23 |         super().__init__()
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:21:71: ARG002 Unused method argument: `name`
   |
20 |     def __init__(
21 |         self, in_features, out_features, bias=False, activation=None, name=None
   |                                                                       ^^^^ ARG002
22 |     ):
23 |         super().__init__()
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:38:17: EM101 Exception must not use a string literal, assign to variable first
   |
36 |         else:
37 |             raise NotImplementedError(
38 |                 "Activation function not implemented for GemNet (yet)."
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
39 |             )
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:41:9: D102 Missing docstring in public method
   |
39 |             )
40 | 
41 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
42 |         he_orthogonal_init(self.linear.weight)
43 |         if self.linear.bias is not None:
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:46:9: D102 Missing docstring in public method
   |
44 |             self.linear.bias.data.fill_(0)
45 | 
46 |     def forward(self, x):
   |         ^^^^^^^ D102
47 |         x = self.linear(x)
48 |         x = self._activation(x)
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:49:16: RET504 Unnecessary assignment to `x` before `return` statement
   |
47 |         x = self.linear(x)
48 |         x = self._activation(x)
49 |         return x
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:52:7: D101 Missing docstring in public class
   |
52 | class ScaledSiLU(torch.nn.Module):
   |       ^^^^^^^^^^ D101
53 |     def __init__(self):
54 |         super().__init__()
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:53:9: ANN204 Missing return type annotation for special method `__init__`
   |
52 | class ScaledSiLU(torch.nn.Module):
53 |     def __init__(self):
   |         ^^^^^^^^ ANN204
54 |         super().__init__()
55 |         self.scale_factor = 1 / 0.6
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:53:9: D107 Missing docstring in `__init__`
   |
52 | class ScaledSiLU(torch.nn.Module):
53 |     def __init__(self):
   |         ^^^^^^^^ D107
54 |         super().__init__()
55 |         self.scale_factor = 1 / 0.6
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:58:9: D102 Missing docstring in public method
   |
56 |         self._activation = torch.nn.SiLU()
57 | 
58 |     def forward(self, x):
   |         ^^^^^^^ D102
59 |         return self._activation(x) * self.scale_factor
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:76:9: ANN204 Missing return type annotation for special method `__init__`
   |
74 |     """
75 | 
76 |     def __init__(self, units: int, nLayers: int = 2, activation=None, name=None):
   |         ^^^^^^^^ ANN204
77 |         super().__init__()
78 |         self.dense_mlp = torch.nn.Sequential(
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:76:9: D107 Missing docstring in `__init__`
   |
74 |     """
75 | 
76 |     def __init__(self, units: int, nLayers: int = 2, activation=None, name=None):
   |         ^^^^^^^^ D107
77 |         super().__init__()
78 |         self.dense_mlp = torch.nn.Sequential(
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:76:36: N803 Argument name `nLayers` should be lowercase
   |
74 |     """
75 | 
76 |     def __init__(self, units: int, nLayers: int = 2, activation=None, name=None):
   |                                    ^^^^^^^^^^^^ N803
77 |         super().__init__()
78 |         self.dense_mlp = torch.nn.Sequential(
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:76:71: ARG002 Unused method argument: `name`
   |
74 |     """
75 | 
76 |     def __init__(self, units: int, nLayers: int = 2, activation=None, name=None):
   |                                                                       ^^^^ ARG002
77 |         super().__init__()
78 |         self.dense_mlp = torch.nn.Sequential(
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:86:9: D102 Missing docstring in public method
   |
84 |         self.inv_sqrt_2 = 1 / (2.0 ** 0.5)
85 | 
86 |     def forward(self, inputs):
   |         ^^^^^^^ D102
87 |         x = self.dense_mlp(inputs)
88 |         x = inputs + x
   |

src\stk_search\geom3d\models\GemNet\layers\base_layers.py:90:16: RET504 Unnecessary assignment to `x` before `return` statement
   |
88 |         x = inputs + x
89 |         x = x * self.inv_sqrt_2
90 |         return x
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\basis_layers.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:10:5: D400 First line should end with a period
   |
 9 |   class BesselBasisLayer(torch.nn.Module):
10 |       """1D Bessel Basis
   |  _____^
11 | | 
12 | |     Parameters
13 | |     ----------
14 | |     num_radial: int
15 | |         Controls maximum frequency.
16 | |     cutoff: float
17 | |         Cutoff distance in Angstrom.
18 | |     envelope_exponent: int = 5
19 | |         Exponent of the envelope function.
20 | | 
21 | |     """
   | |_______^ D400
22 |   
23 |       def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:10:5: D415 First line should end with a period, question mark, or exclamation point
   |
 9 |   class BesselBasisLayer(torch.nn.Module):
10 |       """1D Bessel Basis
   |  _____^
11 | | 
12 | |     Parameters
13 | |     ----------
14 | |     num_radial: int
15 | |         Controls maximum frequency.
16 | |     cutoff: float
17 | |         Cutoff distance in Angstrom.
18 | |     envelope_exponent: int = 5
19 | |         Exponent of the envelope function.
20 | | 
21 | |     """
   | |_______^ D415
22 |   
23 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:23:9: ANN204 Missing return type annotation for special method `__init__`
   |
21 |     """
22 | 
23 |     def __init__(
   |         ^^^^^^^^ ANN204
24 |         self,
25 |         num_radial: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:23:9: D107 Missing docstring in `__init__`
   |
21 |     """
22 | 
23 |     def __init__(
   |         ^^^^^^^^ D107
24 |         self,
25 |         num_radial: int,
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:28:9: ARG002 Unused method argument: `name`
   |
26 |         cutoff: float,
27 |         envelope_exponent: int = 5,
28 |         name="bessel_basis",
   |         ^^^^ ARG002
29 |     ):
30 |         super().__init__()
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:45:9: D102 Missing docstring in public method
   |
43 |         )
44 | 
45 |     def forward(self, d):
   |         ^^^^^^^ D102
46 |         d = d[:, None]  # (nEdges,1)
47 |         d_scaled = d * self.inv_cutoff
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:53:5: D400 First line should end with a period
   |
52 |   class SphericalBasisLayer(torch.nn.Module):
53 |       """2D Fourier Bessel Basis
   |  _____^
54 | | 
55 | |     Parameters
56 | |     ----------
57 | |     num_spherical: int
58 | |         Controls maximum frequency.
59 | |     num_radial: int
60 | |         Controls maximum frequency.
61 | |     cutoff: float
62 | |         Cutoff distance in Angstrom.
63 | |     envelope_exponent: int = 5
64 | |         Exponent of the envelope function.
65 | |     efficient: bool
66 | |         Whether to use the (memory) efficient implementation or not.
67 | | 
68 | |     """
   | |_______^ D400
69 |   
70 |       def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:53:5: D415 First line should end with a period, question mark, or exclamation point
   |
52 |   class SphericalBasisLayer(torch.nn.Module):
53 |       """2D Fourier Bessel Basis
   |  _____^
54 | | 
55 | |     Parameters
56 | |     ----------
57 | |     num_spherical: int
58 | |         Controls maximum frequency.
59 | |     num_radial: int
60 | |         Controls maximum frequency.
61 | |     cutoff: float
62 | |         Cutoff distance in Angstrom.
63 | |     envelope_exponent: int = 5
64 | |         Exponent of the envelope function.
65 | |     efficient: bool
66 | |         Whether to use the (memory) efficient implementation or not.
67 | | 
68 | |     """
   | |_______^ D415
69 |   
70 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:70:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
68 |     """
69 | 
70 |     def __init__(
   |         ^^^^^^^^ PLR0913
71 |         self,
72 |         num_spherical: int,
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:70:9: ANN204 Missing return type annotation for special method `__init__`
   |
68 |     """
69 | 
70 |     def __init__(
   |         ^^^^^^^^ ANN204
71 |         self,
72 |         num_spherical: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:70:9: D107 Missing docstring in `__init__`
   |
68 |     """
69 | 
70 |     def __init__(
   |         ^^^^^^^^ D107
71 |         self,
72 |         num_spherical: int,
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:76:9: FBT001 Boolean-typed positional argument in function definition
   |
74 |         cutoff: float,
75 |         envelope_exponent: int = 5,
76 |         efficient: bool = False,
   |         ^^^^^^^^^ FBT001
77 |         name: str = "spherical_basis",
78 |     ):
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:76:9: FBT002 Boolean default positional argument in function definition
   |
74 |         cutoff: float,
75 |         envelope_exponent: int = 5,
76 |         efficient: bool = False,
   |         ^^^^^^^^^ FBT002
77 |         name: str = "spherical_basis",
78 |     ):
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:77:9: ARG002 Unused method argument: `name`
   |
75 |         envelope_exponent: int = 5,
76 |         efficient: bool = False,
77 |         name: str = "spherical_basis",
   |         ^^^^ ARG002
78 |     ):
79 |         super().__init__()
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:81:9: S101 Use of `assert` detected
   |
79 |         super().__init__()
80 | 
81 |         assert num_radial <= 64
   |         ^^^^^^ S101
82 |         self.efficient = efficient
83 |         self.num_radial = num_radial
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:81:30: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
   |
79 |         super().__init__()
80 | 
81 |         assert num_radial <= 64
   |                              ^^ PLR2004
82 |         self.efficient = efficient
83 |         self.num_radial = num_radial
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:90:9: N806 Variable `Y_lm` in function should be lowercase
   |
88 |         # retrieve formulas
89 |         bessel_formulas = bessel_basis(num_spherical, num_radial)
90 |         Y_lm = real_sph_harm(
   |         ^^^^ N806
91 |             num_spherical, spherical_coordinates=True, zero_m_only=True
92 |         )
   |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:105:13: E741 Ambiguous variable name: `l`
    |
103 |         modules = {"sin": torch.sin, "cos": torch.cos, "sqrt": torch.sqrt}
104 |         m = 0  # only single angle
105 |         for l in range(len(Y_lm)):  # num_spherical
    |             ^ E741
106 |             if l == 0:
107 |                 # Y_00 is only a constant -> function returns value and not tensor
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:110:61: B023 Function definition does not bind loop variable `first_sph`
    |
108 |                 first_sph = sym.lambdify([theta], Y_lm[l][m], modules)
109 |                 self.sph_funcs.append(
110 |                     lambda theta: torch.zeros_like(theta) + first_sph(theta)
    |                                                             ^^^^^^^^^ B023
111 |                 )
112 |             else:
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:119:9: D102 Missing docstring in public method
    |
117 |                 )
118 | 
119 |     def forward(self, D_ca, Angle_cab, id3_reduce_ca, Kidx):
    |         ^^^^^^^ D102
120 | 
121 |         d_scaled = D_ca * self.inv_cutoff  # (nEdges,)
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:119:23: N803 Argument name `D_ca` should be lowercase
    |
117 |                 )
118 | 
119 |     def forward(self, D_ca, Angle_cab, id3_reduce_ca, Kidx):
    |                       ^^^^ N803
120 | 
121 |         d_scaled = D_ca * self.inv_cutoff  # (nEdges,)
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:119:29: N803 Argument name `Angle_cab` should be lowercase
    |
117 |                 )
118 | 
119 |     def forward(self, D_ca, Angle_cab, id3_reduce_ca, Kidx):
    |                             ^^^^^^^^^ N803
120 | 
121 |         d_scaled = D_ca * self.inv_cutoff  # (nEdges,)
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:119:55: N803 Argument name `Kidx` should be lowercase
    |
117 |                 )
118 | 
119 |     def forward(self, D_ca, Angle_cab, id3_reduce_ca, Kidx):
    |                                                       ^^^^ N803
120 | 
121 |         d_scaled = D_ca * self.inv_cutoff  # (nEdges,)
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:144:20: RET504 Unnecessary assignment to `out` before `return` statement
    |
142 |             #       m: 0 0  0 0  0 0
143 |             out = (rbf_env * sph).view(-1, self.num_spherical * self.num_radial)
144 |             return out  # (nTriplets, num_spherical * num_radial)
    |                    ^^^ RET504
145 |         else:
146 |             rbf_env = rbf_env.view(-1, self.num_spherical, self.num_radial)
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:145:9: RET505 Unnecessary `else` after `return` statement
    |
143 |             out = (rbf_env * sph).view(-1, self.num_spherical * self.num_radial)
144 |             return out  # (nTriplets, num_spherical * num_radial)
145 |         else:
    |         ^^^^ RET505
146 |             rbf_env = rbf_env.view(-1, self.num_spherical, self.num_radial)
147 |             rbf_env = torch.transpose(
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:153:13: N806 Variable `Kmax` in function should be lowercase
    |
151 |             # Zero padded dense matrix
152 |             # maximum number of neighbors, catch empty id_reduce_ji with maximum
153 |             Kmax = 0 if sph.shape[0]==0 else torch.max(torch.max(Kidx + 1), torch.tensor(0))
    |             ^^^^ N806
154 |             nEdges = d_scaled.shape[0]
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:154:13: N806 Variable `nEdges` in function should be lowercase
    |
152 |             # maximum number of neighbors, catch empty id_reduce_ji with maximum
153 |             Kmax = 0 if sph.shape[0]==0 else torch.max(torch.max(Kidx + 1), torch.tensor(0))
154 |             nEdges = d_scaled.shape[0]
    |             ^^^^^^ N806
155 | 
156 |             sph2 = torch.zeros(
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:161:13: ERA001 Found commented-out code
    |
159 |             sph2[id3_reduce_ca, Kidx] = sph
160 | 
161 |             # (num_spherical, nEdges, num_radial), (nEdges, Kmax, num_spherical)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
162 |             return rbf_env, sph2
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:166:5: D400 First line should end with a period
    |
165 |   class TensorBasisLayer(torch.nn.Module):
166 |       """3D Fourier Bessel Basis
    |  _____^
167 | | 
168 | |     Parameters
169 | |     ----------
170 | |     num_spherical: int
171 | |         Controls maximum frequency.
172 | |     num_radial: int
173 | |         Controls maximum frequency.
174 | |     cutoff: float
175 | |         Cutoff distance in Angstrom.
176 | |     envelope_exponent: int = 5
177 | |         Exponent of the envelope function.
178 | |     efficient: bool
179 | |         Whether to use the (memory) efficient implementation or not.
180 | | 
181 | |     """
    | |_______^ D400
182 |   
183 |       def __init__(
    |
    = help: Add period

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:166:5: D415 First line should end with a period, question mark, or exclamation point
    |
165 |   class TensorBasisLayer(torch.nn.Module):
166 |       """3D Fourier Bessel Basis
    |  _____^
167 | | 
168 | |     Parameters
169 | |     ----------
170 | |     num_spherical: int
171 | |         Controls maximum frequency.
172 | |     num_radial: int
173 | |         Controls maximum frequency.
174 | |     cutoff: float
175 | |         Cutoff distance in Angstrom.
176 | |     envelope_exponent: int = 5
177 | |         Exponent of the envelope function.
178 | |     efficient: bool
179 | |         Whether to use the (memory) efficient implementation or not.
180 | | 
181 | |     """
    | |_______^ D415
182 |   
183 |       def __init__(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:183:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
181 |     """
182 | 
183 |     def __init__(
    |         ^^^^^^^^ PLR0913
184 |         self,
185 |         num_spherical: int,
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:183:9: ANN204 Missing return type annotation for special method `__init__`
    |
181 |     """
182 | 
183 |     def __init__(
    |         ^^^^^^^^ ANN204
184 |         self,
185 |         num_spherical: int,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:183:9: D107 Missing docstring in `__init__`
    |
181 |     """
182 | 
183 |     def __init__(
    |         ^^^^^^^^ D107
184 |         self,
185 |         num_spherical: int,
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:189:9: FBT002 Boolean default positional argument in function definition
    |
187 |         cutoff: float,
188 |         envelope_exponent: int = 5,
189 |         efficient=False,
    |         ^^^^^^^^^ FBT002
190 |         name: str = "tensor_basis",
191 |     ):
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:190:9: ARG002 Unused method argument: `name`
    |
188 |         envelope_exponent: int = 5,
189 |         efficient=False,
190 |         name: str = "tensor_basis",
    |         ^^^^ ARG002
191 |     ):
192 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:194:9: S101 Use of `assert` detected
    |
192 |         super().__init__()
193 | 
194 |         assert num_radial <= 64
    |         ^^^^^^ S101
195 |         self.num_radial = num_radial
196 |         self.num_spherical = num_spherical
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:194:30: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
    |
192 |         super().__init__()
193 | 
194 |         assert num_radial <= 64
    |                              ^^ PLR2004
195 |         self.num_radial = num_radial
196 |         self.num_spherical = num_spherical
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:204:9: N806 Variable `Y_lm` in function should be lowercase
    |
202 |         # retrieve formulas
203 |         bessel_formulas = bessel_basis(num_spherical, num_radial)
204 |         Y_lm = real_sph_harm(
    |         ^^^^ N806
205 |             num_spherical, spherical_coordinates=True, zero_m_only=False
206 |         )
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:216:13: E741 Ambiguous variable name: `l`
    |
214 |         phi = sym.symbols("phi")
215 |         modules = {"sin": torch.sin, "cos": torch.cos, "sqrt": torch.sqrt}
216 |         for l in range(len(Y_lm)):  # num_spherical
    |             ^ E741
217 |             for m in range(len(Y_lm[l])):
218 |                 if (
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:224:27: B023 Function definition does not bind loop variable `first_sph`
    |
222 |                     self.sph_funcs.append(
223 |                         lambda theta, phi: torch.zeros_like(theta)
224 |                         + first_sph(theta, phi)
    |                           ^^^^^^^^^ B023
225 |                     )
226 |                 else:
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:239:9: D102 Missing docstring in public method
    |
237 |         )
238 | 
239 |     def forward(self, D_ca, Alpha_cab, Theta_cabd, id4_reduce_ca, Kidx):
    |         ^^^^^^^ D102
240 | 
241 |         d_scaled = D_ca * self.inv_cutoff
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:239:23: N803 Argument name `D_ca` should be lowercase
    |
237 |         )
238 | 
239 |     def forward(self, D_ca, Alpha_cab, Theta_cabd, id4_reduce_ca, Kidx):
    |                       ^^^^ N803
240 | 
241 |         d_scaled = D_ca * self.inv_cutoff
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:239:29: N803 Argument name `Alpha_cab` should be lowercase
    |
237 |         )
238 | 
239 |     def forward(self, D_ca, Alpha_cab, Theta_cabd, id4_reduce_ca, Kidx):
    |                             ^^^^^^^^^ N803
240 | 
241 |         d_scaled = D_ca * self.inv_cutoff
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:239:40: N803 Argument name `Theta_cabd` should be lowercase
    |
237 |         )
238 | 
239 |     def forward(self, D_ca, Alpha_cab, Theta_cabd, id4_reduce_ca, Kidx):
    |                                        ^^^^^^^^^^ N803
240 | 
241 |         d_scaled = D_ca * self.inv_cutoff
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:239:67: N803 Argument name `Kidx` should be lowercase
    |
237 |         )
238 | 
239 |     def forward(self, D_ca, Alpha_cab, Theta_cabd, id4_reduce_ca, Kidx):
    |                                                                   ^^^^ N803
240 | 
241 |         d_scaled = D_ca * self.inv_cutoff
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:281:9: RET505 Unnecessary `else` after `return` statement
    |
279 |             return rbf_env * sph  # (nQuadruplets, num_spherical**2 * num_radial)
280 | 
281 |         else:
    |         ^^^^ RET505
282 |             rbf_env = torch.transpose(rbf_env, 0, 1)  # (num_spherical**2, nEdges, num_radial)
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:286:13: N806 Variable `Kmax` in function should be lowercase
    |
284 |             # Zero padded dense matrix
285 |             # maximum number of neighbors, catch empty id_reduce_ji with maximum
286 |             Kmax = 0 if sph.shape[0]==0 else torch.max(torch.max(Kidx + 1), torch.tensor(0))
    |             ^^^^ N806
287 |             nEdges = d_scaled.shape[0]
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:287:13: N806 Variable `nEdges` in function should be lowercase
    |
285 |             # maximum number of neighbors, catch empty id_reduce_ji with maximum
286 |             Kmax = 0 if sph.shape[0]==0 else torch.max(torch.max(Kidx + 1), torch.tensor(0))
287 |             nEdges = d_scaled.shape[0]
    |             ^^^^^^ N806
288 | 
289 |             sph2 = torch.zeros(
    |

src\stk_search\geom3d\models\GemNet\layers\basis_layers.py:294:13: ERA001 Found commented-out code
    |
292 |             sph2[id4_reduce_ca, Kidx] = sph
293 | 
294 |             # (num_spherical**2, nEdges, num_radial), (nEdges, Kmax, num_spherical**2)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
295 |             return rbf_env, sph2
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\basis_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:7:5: N802 Function name `Jn` should be lowercase
  |
7 | def Jn(r, n):
  |     ^^ N802
8 |     """Numerical spherical bessel functions of order n
9 |     """
  |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:8:5: D200 One-line docstring should fit on one line
   |
 7 |   def Jn(r, n):
 8 |       """Numerical spherical bessel functions of order n
   |  _____^
 9 | |     """
   | |_______^ D200
10 |       return sp.spherical_jn(n, r)
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:8:5: D400 First line should end with a period
   |
 7 |   def Jn(r, n):
 8 |       """Numerical spherical bessel functions of order n
   |  _____^
 9 | |     """
   | |_______^ D400
10 |       return sp.spherical_jn(n, r)
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:8:5: D415 First line should end with a period, question mark, or exclamation point
   |
 7 |   def Jn(r, n):
 8 |       """Numerical spherical bessel functions of order n
   |  _____^
 9 | |     """
   | |_______^ D415
10 |       return sp.spherical_jn(n, r)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:13:5: N802 Function name `Jn_zeros` should be lowercase
   |
13 | def Jn_zeros(n, k):
   |     ^^^^^^^^ N802
14 |     """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
15 |     """
   |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:14:5: D200 One-line docstring should fit on one line
   |
13 |   def Jn_zeros(n, k):
14 |       """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
   |  _____^
15 | |     """
   | |_______^ D200
16 |       zerosj = np.zeros((n, k), dtype="float32")
17 |       zerosj[0] = np.arange(1, k + 1) * np.pi
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:14:5: D400 First line should end with a period
   |
13 |   def Jn_zeros(n, k):
14 |       """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
   |  _____^
15 | |     """
   | |_______^ D400
16 |       zerosj = np.zeros((n, k), dtype="float32")
17 |       zerosj[0] = np.arange(1, k + 1) * np.pi
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:14:5: D415 First line should end with a period, question mark, or exclamation point
   |
13 |   def Jn_zeros(n, k):
14 |       """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
   |  _____^
15 | |     """
   | |_______^ D415
16 |       zerosj = np.zeros((n, k), dtype="float32")
17 |       zerosj[0] = np.arange(1, k + 1) * np.pi
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:31:5: D200 One-line docstring should fit on one line
   |
30 |   def spherical_bessel_formulas(n):
31 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
32 | |     """
   | |_______^ D200
33 |       x = sym.symbols("x")
34 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:31:5: D400 First line should end with a period
   |
30 |   def spherical_bessel_formulas(n):
31 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
32 | |     """
   | |_______^ D400
33 |       x = sym.symbols("x")
34 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:31:5: D401 First line of docstring should be in imperative mood: "Computes the sympy formulas for the spherical bessel functions up to order n (excluded)"
   |
30 |   def spherical_bessel_formulas(n):
31 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
32 | |     """
   | |_______^ D401
33 |       x = sym.symbols("x")
34 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:31:5: D415 First line should end with a period, question mark, or exclamation point
   |
30 |   def spherical_bessel_formulas(n):
31 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
32 | |     """
   | |_______^ D415
33 |       x = sym.symbols("x")
34 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:34:5: ERA001 Found commented-out code
   |
32 |     """
33 |     x = sym.symbols("x")
34 |     # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
35 |     j = [sym.sin(x) / x]  # j_0
36 |     a = sym.sin(x) / x
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:45:5: D205 1 blank line required between summary line and description
   |
44 |   def bessel_basis(n, k):
45 |       """Compute the sympy formulas for the normalized and rescaled spherical bessel functions up to
   |  _____^
46 | |     order n (excluded) and maximum frequency k (excluded).
47 | | 
48 | |     Returns
49 | |     -------
50 | |         bess_basis: list
51 | |             Bessel basis formulas taking in a single argument x.
52 | |             Has length n where each element has length k. -> In total n*k many.
53 | | 
54 | |     """
   | |_______^ D205
55 |       zeros = Jn_zeros(n, k)
56 |       normalizer = []
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:81:5: D417 Missing argument descriptions in the docstring for `sph_harm_prefactor`: `l`, `m`
   |
81 | def sph_harm_prefactor(l, m):
   |     ^^^^^^^^^^^^^^^^^^ D417
82 |     """Computes the constant pre-factor for the spherical harmonic of degree l and order m.
   |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:81:24: E741 Ambiguous variable name: `l`
   |
81 | def sph_harm_prefactor(l, m):
   |                        ^ E741
82 |     """Computes the constant pre-factor for the spherical harmonic of degree l and order m.
   |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:82:5: D401 First line of docstring should be in imperative mood: "Computes the constant pre-factor for the spherical harmonic of degree l and order m."
   |
81 |   def sph_harm_prefactor(l, m):
82 |       """Computes the constant pre-factor for the spherical harmonic of degree l and order m.
   |  _____^
83 | | 
84 | |     Parameters
85 | |     ----------
86 | |         l: int
87 | |             Degree of the spherical harmonic. l >= 0
88 | |         m: int
89 | |             Order of the spherical harmonic. -l <= m <= l
90 | | 
91 | |     Returns
92 | |     -------
93 | |         factor: float
94 | | 
95 | |     """
   | |_______^ D401
96 |       # sqrt((2*l+1)/4*pi * (l-m)!/(l+m)! )
97 |       return (
   |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:105:5: C901 `associated_legendre_polynomials` is too complex (11 > 10)
    |
105 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
106 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:105:5: D417 Missing argument descriptions in the docstring for `associated_legendre_polynomials`: `L`, `pos_m_only`, `zero_m_only`
    |
105 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
106 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:105:37: N803 Argument name `L` should be lowercase
    |
105 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |                                     ^ N803
106 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:105:40: FBT002 Boolean default positional argument in function definition
    |
105 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |                                        ^^^^^^^^^^^ FBT002
106 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:105:58: FBT002 Boolean default positional argument in function definition
    |
105 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |                                                          ^^^^^^^^^^ FBT002
106 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:106:5: D401 First line of docstring should be in imperative mood: "Computes string formulas of the associated legendre polynomials up to degree L (excluded)."
    |
105 |   def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
106 |       """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |  _____^
107 | | 
108 | |     Parameters
109 | |     ----------
110 | |         L: int
111 | |             Degree up to which to calculate the associated legendre polynomials (degree L is excluded).
112 | |         zero_m_only: bool
113 | |             If True only calculate the polynomials for the polynomials where m=0.
114 | |         pos_m_only: bool
115 | |             If True only calculate the polynomials for the polynomials where m>=0. Overwritten by zero_m_only.
116 | | 
117 | |     Returns
118 | |     -------
119 | |         polynomials: list
120 | |             Contains the sympy functions of the polynomials (in total L many if zero_m_only is True else L^2 many).
121 | | 
122 | |     """
    | |_______^ D401
123 |       # calculations from http://web.cmb.usc.edu/people/alber/Software/tomominer/docs/cpp/group__legendre__polynomials.html
124 |       z = sym.symbols("z")
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:125:5: N806 Variable `P_l_m` in function should be lowercase
    |
123 |     # calculations from http://web.cmb.usc.edu/people/alber/Software/tomominer/docs/cpp/group__legendre__polynomials.html
124 |     z = sym.symbols("z")
125 |     P_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |     ^^^^^ N806
126 | 
127 |     P_l_m[0][0] = 1
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:125:36: E741 Ambiguous variable name: `l`
    |
123 |     # calculations from http://web.cmb.usc.edu/people/alber/Software/tomominer/docs/cpp/group__legendre__polynomials.html
124 |     z = sym.symbols("z")
125 |     P_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |                                    ^ E741
126 | 
127 |     P_l_m[0][0] = 1
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:128:5: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
127 |       P_l_m[0][0] = 1
128 |       if L > 0:
    |  _____^
129 | |         if zero_m_only:
130 | |             # m = 0
131 | |             P_l_m[1][0] = z
132 | |             for l in range(2, L):
133 | |                 P_l_m[l][0] = sym.simplify(
134 | |                     ((2 * l - 1) * z * P_l_m[l - 1][0] - (l - 1) * P_l_m[l - 2][0]) / l
135 | |                 )
136 | |             return P_l_m
137 | |         else:
138 | |             # for m >= 0
139 | |             for l in range(1, L):
140 | |                 P_l_m[l][l] = sym.simplify(
141 | |                     (1 - 2 * l) * (1 - z ** 2) ** 0.5 * P_l_m[l - 1][l - 1]
142 | |                 )  # P_00, P_11, P_22, P_33
143 | | 
144 | |             for m in range(L - 1):
145 | |                 P_l_m[m + 1][m] = sym.simplify(
146 | |                     (2 * m + 1) * z * P_l_m[m][m]
147 | |                 )  # P_10, P_21, P_32, P_43
148 | | 
149 | |             for l in range(2, L):
150 | |                 for m in range(l - 1):  # P_20, P_30, P_31
151 | |                     P_l_m[l][m] = sym.simplify(
152 | |                         (
153 | |                             (2 * l - 1) * z * P_l_m[l - 1][m]
154 | |                             - (l + m - 1) * P_l_m[l - 2][m]
155 | |                         )
156 | |                         / (l - m)
157 | |                     )
158 | | 
159 | |             if not pos_m_only:
160 | |                 # for m < 0: P_l(-m) = (-1)^m * (l-m)!/(l+m)! * P_lm
161 | |                 for l in range(1, L):
162 | |                     for m in range(1, l + 1):  # P_1(-1), P_2(-1) P_2(-2)
163 | |                         P_l_m[l][-m] = sym.simplify(
164 | |                             (-1) ** m
165 | |                             * np.math.factorial(l - m)
166 | |                             / np.math.factorial(l + m)
167 | |                             * P_l_m[l][m]
168 | |                         )
169 | | 
170 | |             return P_l_m
    | |________________________^ RET503
    |
    = help: Add explicit `return` statement

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:130:13: ERA001 Found commented-out code
    |
128 |     if L > 0:
129 |         if zero_m_only:
130 |             # m = 0
    |             ^^^^^^^ ERA001
131 |             P_l_m[1][0] = z
132 |             for l in range(2, L):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:132:17: E741 Ambiguous variable name: `l`
    |
130 |             # m = 0
131 |             P_l_m[1][0] = z
132 |             for l in range(2, L):
    |                 ^ E741
133 |                 P_l_m[l][0] = sym.simplify(
134 |                     ((2 * l - 1) * z * P_l_m[l - 1][0] - (l - 1) * P_l_m[l - 2][0]) / l
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:137:9: RET505 Unnecessary `else` after `return` statement
    |
135 |                 )
136 |             return P_l_m
137 |         else:
    |         ^^^^ RET505
138 |             # for m >= 0
139 |             for l in range(1, L):
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:139:17: E741 Ambiguous variable name: `l`
    |
137 |         else:
138 |             # for m >= 0
139 |             for l in range(1, L):
    |                 ^ E741
140 |                 P_l_m[l][l] = sym.simplify(
141 |                     (1 - 2 * l) * (1 - z ** 2) ** 0.5 * P_l_m[l - 1][l - 1]
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:149:17: E741 Ambiguous variable name: `l`
    |
147 |                 )  # P_10, P_21, P_32, P_43
148 | 
149 |             for l in range(2, L):
    |                 ^ E741
150 |                 for m in range(l - 1):  # P_20, P_30, P_31
151 |                     P_l_m[l][m] = sym.simplify(
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:161:21: E741 Ambiguous variable name: `l`
    |
159 |             if not pos_m_only:
160 |                 # for m < 0: P_l(-m) = (-1)^m * (l-m)!/(l+m)! * P_lm
161 |                 for l in range(1, L):
    |                     ^ E741
162 |                     for m in range(1, l + 1):  # P_1(-1), P_2(-1) P_2(-2)
163 |                         P_l_m[l][-m] = sym.simplify(
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:173:5: C901 `real_sph_harm` is too complex (14 > 10)
    |
173 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |     ^^^^^^^^^^^^^ C901
174 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
175 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:173:5: PLR0912 Too many branches (14 > 12)
    |
173 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |     ^^^^^^^^^^^^^ PLR0912
174 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
175 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:173:5: D417 Missing argument descriptions in the docstring for `real_sph_harm`: `L`, `spherical_coordinates`, `zero_m_only`
    |
173 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |     ^^^^^^^^^^^^^ D417
174 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
175 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:173:19: N803 Argument name `L` should be lowercase
    |
173 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |                   ^ N803
174 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
175 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:173:45: FBT002 Boolean default positional argument in function definition
    |
173 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |                                             ^^^^^^^^^^^ FBT002
174 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
175 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:174:5: D205 1 blank line required between summary line and description
    |
173 |   def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
174 |       """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
    |  _____^
175 | |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
176 | | 
177 | |     Parameters
178 | |     ----------
179 | |         L: int
180 | |             Degree up to which to calculate the spherical harmonics (degree L is excluded).
181 | |         spherical_coordinates: bool
182 | |             - True: Expects the input of the formula strings to be phi and theta.
183 | |             - False: Expects the input of the formula strings to be x, y and z.
184 | |         zero_m_only: bool
185 | |             If True only calculate the harmonics where m=0.
186 | | 
187 | |     Returns
188 | |     -------
189 | |         Y_lm_real: list
190 | |             Computes formula strings of the the real part of the spherical harmonics up
191 | |             to degree L (where degree L is not excluded).
192 | |             In total L^2 many sph harm exist up to degree L (excluded). However, if zero_m_only only is True then
193 | |             the total count is reduced to be only L many.
194 | | 
195 | |     """
    | |_______^ D205
196 |       z = sym.symbols("z")
197 |       P_l_m = associated_legendre_polynomials(L, zero_m_only)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:174:5: D401 First line of docstring should be in imperative mood: "Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded)."
    |
173 |   def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
174 |       """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
    |  _____^
175 | |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
176 | | 
177 | |     Parameters
178 | |     ----------
179 | |         L: int
180 | |             Degree up to which to calculate the spherical harmonics (degree L is excluded).
181 | |         spherical_coordinates: bool
182 | |             - True: Expects the input of the formula strings to be phi and theta.
183 | |             - False: Expects the input of the formula strings to be x, y and z.
184 | |         zero_m_only: bool
185 | |             If True only calculate the harmonics where m=0.
186 | | 
187 | |     Returns
188 | |     -------
189 | |         Y_lm_real: list
190 | |             Computes formula strings of the the real part of the spherical harmonics up
191 | |             to degree L (where degree L is not excluded).
192 | |             In total L^2 many sph harm exist up to degree L (excluded). However, if zero_m_only only is True then
193 | |             the total count is reduced to be only L many.
194 | | 
195 | |     """
    | |_______^ D401
196 |       z = sym.symbols("z")
197 |       P_l_m = associated_legendre_polynomials(L, zero_m_only)
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:197:5: N806 Variable `P_l_m` in function should be lowercase
    |
195 |     """
196 |     z = sym.symbols("z")
197 |     P_l_m = associated_legendre_polynomials(L, zero_m_only)
    |     ^^^^^ N806
198 |     if zero_m_only:
199 |         # for all m != 0: Y_lm = 0
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:200:9: N806 Variable `Y_l_m` in function should be lowercase
    |
198 |     if zero_m_only:
199 |         # for all m != 0: Y_lm = 0
200 |         Y_l_m = [[0] for l in range(L)]
    |         ^^^^^ N806
201 |     else:
202 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:200:26: E741 Ambiguous variable name: `l`
    |
198 |     if zero_m_only:
199 |         # for all m != 0: Y_lm = 0
200 |         Y_l_m = [[0] for l in range(L)]
    |                          ^ E741
201 |     else:
202 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:202:9: N806 Variable `Y_l_m` in function should be lowercase
    |
200 |         Y_l_m = [[0] for l in range(L)]
201 |     else:
202 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |         ^^^^^ N806
203 | 
204 |     # convert expressions to spherical coordiantes
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:202:40: E741 Ambiguous variable name: `l`
    |
200 |         Y_l_m = [[0] for l in range(L)]
201 |     else:
202 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |                                        ^ E741
203 | 
204 |     # convert expressions to spherical coordiantes
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:208:13: E741 Ambiguous variable name: `l`
    |
206 |         # replace z by cos(theta)
207 |         theta = sym.symbols("theta")
208 |         for l in range(L):
    |             ^ E741
209 |             for m in range(len(P_l_m[l])):
210 |                 if not isinstance(P_l_m[l][m], int):
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:214:5: ERA001 Found commented-out code
    |
213 |     ## calculate Y_lm
214 |     # Y_lm = N * P_lm(cos(theta)) * exp(i*m*phi)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
215 |     #             { sqrt(2) * (-1)^m * N * P_l|m| * sin(|m|*phi)   if m < 0
216 |     # Y_lm_real = { Y_lm                                           if m = 0
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:219:9: E741 Ambiguous variable name: `l`
    |
217 |     #             { sqrt(2) * (-1)^m * N * P_lm * cos(m*phi)       if m > 0
218 | 
219 |     for l in range(L):
    |         ^ E741
220 |         Y_l_m[l][0] = sym.simplify(sph_harm_prefactor(l, 0) * P_l_m[l][0])  # Y_l0
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:224:13: E741 Ambiguous variable name: `l`
    |
222 |     if not zero_m_only:
223 |         phi = sym.symbols("phi")
224 |         for l in range(1, L):
    |             ^ E741
225 |             # m > 0
226 |             for m in range(1, l + 1):
    |

src\stk_search\geom3d\models\GemNet\layers\basis_utils.py:249:17: E741 Ambiguous variable name: `l`
    |
247 |             x = sym.symbols("x")
248 |             y = sym.symbols("y")
249 |             for l in range(L):
    |                 ^ E741
250 |                 for m in range(len(Y_l_m[l])):
251 |                     Y_l_m[l][m] = sym.simplify(Y_l_m[l][m].subs(phi, sym.atan2(y, x)))
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\efficient.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\efficient.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\efficient.py:3:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
1 | import torch
2 | 
3 | from ..initializers import he_orthogonal_init
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\GemNet\layers\efficient.py:20:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 |     """
19 | 
20 |     def __init__(
   |         ^^^^^^^^ ANN204
21 |         self,
22 |         num_spherical: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\efficient.py:20:9: D107 Missing docstring in `__init__`
   |
18 |     """
19 | 
20 |     def __init__(
   |         ^^^^^^^^ D107
21 |         self,
22 |         num_spherical: int,
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:25:9: ARG002 Unused method argument: `name`
   |
23 |         num_radial: int,
24 |         emb_size_interm: int,
25 |         name="EfficientDownProj",
   |         ^^^^ ARG002
26 |     ):
27 |         super().__init__()
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:35:9: D102 Missing docstring in public method
   |
33 |         self.reset_parameters()
34 | 
35 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
36 |         self.weight = torch.nn.Parameter(
37 |             torch.empty((self.num_spherical, self.num_radial, self.emb_size_interm)),
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:43:9: D205 1 blank line required between summary line and description
   |
42 |       def forward(self, tbf):
43 |           """Returns
   |  _________^
44 | |         -------
45 | |             (rbf_W1, sph): tuple
46 | |             - rbf_W1: Tensor, shape=(nEdges, emb_size_interm, num_spherical)
47 | |             - sph: Tensor, shape=(nEdges, Kmax, num_spherical)
48 | | 
49 | |         """
   | |___________^ D205
50 |           rbf_env, sph = tbf
51 |           # (num_spherical, nEdges, num_radial), (nEdges, Kmax, num_spherical) ;  Kmax = maximum number of neighbors of the edges
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\efficient.py:43:9: D401 First line of docstring should be in imperative mood: "Returns"
   |
42 |       def forward(self, tbf):
43 |           """Returns
   |  _________^
44 | |         -------
45 | |             (rbf_W1, sph): tuple
46 | |             - rbf_W1: Tensor, shape=(nEdges, emb_size_interm, num_spherical)
47 | |             - sph: Tensor, shape=(nEdges, Kmax, num_spherical)
48 | | 
49 | |         """
   | |___________^ D401
50 |           rbf_env, sph = tbf
51 |           # (num_spherical, nEdges, num_radial), (nEdges, Kmax, num_spherical) ;  Kmax = maximum number of neighbors of the edges
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:54:9: N806 Variable `rbf_W1` in function should be lowercase
   |
53 |         # MatMul: mul + sum over num_radial
54 |         rbf_W1 = torch.matmul(rbf_env, self.weight)  # (num_spherical, nEdges , emb_size_interm)
   |         ^^^^^^ N806
55 |         rbf_W1 = rbf_W1.permute(1, 2, 0)  # (nEdges, emb_size_interm, num_spherical)
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:55:9: N806 Variable `rbf_W1` in function should be lowercase
   |
53 |         # MatMul: mul + sum over num_radial
54 |         rbf_W1 = torch.matmul(rbf_env, self.weight)  # (num_spherical, nEdges , emb_size_interm)
55 |         rbf_W1 = rbf_W1.permute(1, 2, 0)  # (nEdges, emb_size_interm, num_spherical)
   |         ^^^^^^ N806
56 | 
57 |         sph = torch.transpose(sph, 1, 2)  # (nEdges, num_spherical, Kmax)
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:73:9: ANN204 Missing return type annotation for special method `__init__`
   |
71 |     """
72 | 
73 |     def __init__(self, emb_size_interm: int, emb_size: int, name="EfficientHadamard"):
   |         ^^^^^^^^ ANN204
74 |         super().__init__()
75 |         self.emb_size_interm = emb_size_interm
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\efficient.py:73:9: D107 Missing docstring in `__init__`
   |
71 |     """
72 | 
73 |     def __init__(self, emb_size_interm: int, emb_size: int, name="EfficientHadamard"):
   |         ^^^^^^^^ D107
74 |         super().__init__()
75 |         self.emb_size_interm = emb_size_interm
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:73:61: ARG002 Unused method argument: `name`
   |
71 |     """
72 | 
73 |     def __init__(self, emb_size_interm: int, emb_size: int, name="EfficientHadamard"):
   |                                                             ^^^^ ARG002
74 |         super().__init__()
75 |         self.emb_size_interm = emb_size_interm
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:80:9: D102 Missing docstring in public method
   |
78 |         self.reset_parameters()
79 | 
80 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
81 |         self.weight = torch.nn.Parameter(
82 |             torch.empty((self.emb_size, 1, self.emb_size_interm), requires_grad=True)
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:86:44: N803 Argument name `Kidx` should be lowercase
   |
84 |         he_orthogonal_init(self.weight)
85 | 
86 |     def forward(self, basis, m, id_reduce, Kidx):
   |                                            ^^^^ N803
87 |         """Returns
88 |         -------
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:87:9: D205 1 blank line required between summary line and description
   |
86 |       def forward(self, basis, m, id_reduce, Kidx):
87 |           """Returns
   |  _________^
88 | |         -------
89 | |             m_ca: Tensor, shape=(nEdges, emb_size)
90 | |                 Edge embeddings.
91 | | 
92 | |         """
   | |___________^ D205
93 |           # quadruplets: m = m_db , triplets: m = m_ba
94 |           # num_spherical is actually num_spherical**2 for quadruplets
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\efficient.py:87:9: D401 First line of docstring should be in imperative mood: "Returns"
   |
86 |       def forward(self, basis, m, id_reduce, Kidx):
87 |           """Returns
   |  _________^
88 | |         -------
89 | |             m_ca: Tensor, shape=(nEdges, emb_size)
90 | |                 Edge embeddings.
91 | | 
92 | |         """
   | |___________^ D401
93 |           # quadruplets: m = m_db , triplets: m = m_ba
94 |           # num_spherical is actually num_spherical**2 for quadruplets
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:95:9: N806 Variable `rbf_W1` in function should be lowercase
   |
93 |         # quadruplets: m = m_db , triplets: m = m_ba
94 |         # num_spherical is actually num_spherical**2 for quadruplets
95 |         rbf_W1, sph = basis  # (nEdges, emb_size_interm, num_spherical) ,  (nEdges, num_spherical, Kmax)
   |         ^^^^^^ N806
96 |         nEdges = rbf_W1.shape[0]
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:96:9: N806 Variable `nEdges` in function should be lowercase
   |
94 |         # num_spherical is actually num_spherical**2 for quadruplets
95 |         rbf_W1, sph = basis  # (nEdges, emb_size_interm, num_spherical) ,  (nEdges, num_spherical, Kmax)
96 |         nEdges = rbf_W1.shape[0]
   |         ^^^^^^ N806
97 | 
98 |         # Create (zero-padded) dense matrix of the neighboring edge embeddings.
   |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:101:13: N806 Variable `Kmax` in function should be lowercase
    |
 99 |         # maximum number of neighbors, catch empty id_reduce_ji with maximum
100 |         if sph.shape[2]==0:
101 |             Kmax = 0
    |             ^^^^ N806
102 |         else:
103 |             Kmax = torch.max(torch.max(Kidx + 1), torch.tensor(0))
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:103:13: N806 Variable `Kmax` in function should be lowercase
    |
101 |             Kmax = 0
102 |         else:
103 |             Kmax = torch.max(torch.max(Kidx + 1), torch.tensor(0))
    |             ^^^^ N806
104 |         m2 = torch.zeros(nEdges, Kmax, self.emb_size, device=self.weight.device, dtype=m.dtype)
105 |         m2[id_reduce, Kidx] = m  # (nQuadruplets or nTriplets, emb_size) -> (nEdges, Kmax, emb_size)
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:110:9: N806 Variable `rbf_W1_sum_k` in function should be lowercase
    |
109 |         # MatMul: mul + sum over num_spherical
110 |         rbf_W1_sum_k = torch.matmul(
    |         ^^^^^^^^^^^^ N806
111 |             rbf_W1, sum_k
112 |         )  # (nEdges, emb_size_interm, emb_size)
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:118:16: RET504 Unnecessary assignment to `m_ca` before `return` statement
    |
116 |         m_ca = torch.transpose(m_ca, 0, 1)  # (nEdges, emb_size)
117 | 
118 |         return m_ca
    |                ^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\efficient.py:137:9: ANN204 Missing return type annotation for special method `__init__`
    |
135 |     """
136 | 
137 |     def __init__(
    |         ^^^^^^^^ ANN204
138 |         self,
139 |         emb_size: int,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\efficient.py:137:9: D107 Missing docstring in `__init__`
    |
135 |     """
136 | 
137 |     def __init__(
    |         ^^^^^^^^ D107
138 |         self,
139 |         emb_size: int,
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:142:9: ARG002 Unused method argument: `name`
    |
140 |         emb_size_interm: int,
141 |         units_out: int,
142 |         name="EfficientBilinear",
    |         ^^^^ ARG002
143 |     ):
144 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:151:9: D102 Missing docstring in public method
    |
149 |         self.reset_parameters()
150 | 
151 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
152 |         self.weight = torch.nn.Parameter(
153 |             torch.empty(
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:160:44: N803 Argument name `Kidx` should be lowercase
    |
158 |         he_orthogonal_init(self.weight)
159 | 
160 |     def forward(self, basis, m, id_reduce, Kidx):
    |                                            ^^^^ N803
161 |         """Returns
162 |         -------
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:161:9: D205 1 blank line required between summary line and description
    |
160 |       def forward(self, basis, m, id_reduce, Kidx):
161 |           """Returns
    |  _________^
162 | |         -------
163 | |             m_ca: Tensor, shape=(nEdges, units_out)
164 | |                 Edge embeddings.
165 | | 
166 | |         """
    | |___________^ D205
167 |           # quadruplets: m = m_db , triplets: m = m_ba
168 |           # num_spherical is actually num_spherical**2 for quadruplets
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\efficient.py:161:9: D401 First line of docstring should be in imperative mood: "Returns"
    |
160 |       def forward(self, basis, m, id_reduce, Kidx):
161 |           """Returns
    |  _________^
162 | |         -------
163 | |             m_ca: Tensor, shape=(nEdges, units_out)
164 | |                 Edge embeddings.
165 | | 
166 | |         """
    | |___________^ D401
167 |           # quadruplets: m = m_db , triplets: m = m_ba
168 |           # num_spherical is actually num_spherical**2 for quadruplets
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:169:9: N806 Variable `rbf_W1` in function should be lowercase
    |
167 |         # quadruplets: m = m_db , triplets: m = m_ba
168 |         # num_spherical is actually num_spherical**2 for quadruplets
169 |         rbf_W1, sph = basis  # (nEdges, emb_size_interm, num_spherical) ,  (nEdges, num_spherical, Kmax)
    |         ^^^^^^ N806
170 |         nEdges = rbf_W1.shape[0]
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:170:9: N806 Variable `nEdges` in function should be lowercase
    |
168 |         # num_spherical is actually num_spherical**2 for quadruplets
169 |         rbf_W1, sph = basis  # (nEdges, emb_size_interm, num_spherical) ,  (nEdges, num_spherical, Kmax)
170 |         nEdges = rbf_W1.shape[0]
    |         ^^^^^^ N806
171 | 
172 |         # Create (zero-padded) dense matrix of the neighboring edge embeddings.
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:174:9: N806 Variable `Kmax` in function should be lowercase
    |
172 |         # Create (zero-padded) dense matrix of the neighboring edge embeddings.
173 |         # maximum number of neighbors, catch empty id_reduce_ji with maximum
174 |         Kmax = 0 if sph.shape[2]==0 else torch.max(torch.max(Kidx + 1), torch.tensor(0))
    |         ^^^^ N806
175 |         m2 = torch.zeros(nEdges, Kmax, self.emb_size, device=self.weight.device, dtype=m.dtype)
176 |         m2[id_reduce, Kidx] = m  # (nQuadruplets or nTriplets, emb_size) -> (nEdges, Kmax, emb_size)
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:181:9: N806 Variable `rbf_W1_sum_k` in function should be lowercase
    |
180 |         # MatMul: mul + sum over num_spherical
181 |         rbf_W1_sum_k = torch.matmul(
    |         ^^^^^^^^^^^^ N806
182 |             rbf_W1, sum_k
183 |         )  # (nEdges, emb_size_interm, emb_size)
    |

src\stk_search\geom3d\models\GemNet\layers\efficient.py:190:16: RET504 Unnecessary assignment to `m_ca` before `return` statement
    |
188 |         )  # (emb_size, nEdges, units_out)
189 |         m_ca = torch.sum(m_ca, dim=0)  # (nEdges, units_out)
190 |         return m_ca
    |                ^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\embedding_block.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:8:5: D400 First line should end with a period
   |
 7 |   class AtomEmbedding(torch.nn.Module):
 8 |       """Initial atom embeddings based on the atom type
   |  _____^
 9 | | 
10 | |     Parameters
11 | |     ----------
12 | |         emb_size: int
13 | |             Atom embeddings size
14 | | 
15 | |     """
   | |_______^ D400
16 |   
17 |       def __init__(self, node_class, emb_size, name=None):
   |
   = help: Add period

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:8:5: D415 First line should end with a period, question mark, or exclamation point
   |
 7 |   class AtomEmbedding(torch.nn.Module):
 8 |       """Initial atom embeddings based on the atom type
   |  _____^
 9 | | 
10 | |     Parameters
11 | |     ----------
12 | |         emb_size: int
13 | |             Atom embeddings size
14 | | 
15 | |     """
   | |_______^ D415
16 |   
17 |       def __init__(self, node_class, emb_size, name=None):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:17:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 |     """
16 | 
17 |     def __init__(self, node_class, emb_size, name=None):
   |         ^^^^^^^^ ANN204
18 |         super().__init__()
19 |         self.node_class = node_class
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:17:9: D107 Missing docstring in `__init__`
   |
15 |     """
16 | 
17 |     def __init__(self, node_class, emb_size, name=None):
   |         ^^^^^^^^ D107
18 |         super().__init__()
19 |         self.node_class = node_class
   |

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:17:46: ARG002 Unused method argument: `name`
   |
15 |     """
16 | 
17 |     def __init__(self, node_class, emb_size, name=None):
   |                                              ^^^^ ARG002
18 |         super().__init__()
19 |         self.node_class = node_class
   |

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:27:23: N803 Argument name `Z` should be lowercase
   |
25 |         torch.nn.init.uniform_(self.embeddings.weight, a=-np.sqrt(3), b=np.sqrt(3))
26 | 
27 |     def forward(self, Z):
   |                       ^ N803
28 |         """Returns
29 |         -------
   |

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:28:9: D205 1 blank line required between summary line and description
   |
27 |       def forward(self, Z):
28 |           """Returns
   |  _________^
29 | |         -------
30 | |             h: Tensor, shape=(nAtoms, emb_size)
31 | |                 Atom embeddings.
32 | | 
33 | |         """
   | |___________^ D205
34 |           h = self.embeddings(Z)  # -1 because Z.min()=1 (==Hydrogen)
35 |           return h
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:28:9: D401 First line of docstring should be in imperative mood: "Returns"
   |
27 |       def forward(self, Z):
28 |           """Returns
   |  _________^
29 | |         -------
30 | |             h: Tensor, shape=(nAtoms, emb_size)
31 | |                 Atom embeddings.
32 | | 
33 | |         """
   | |___________^ D401
34 |           h = self.embeddings(Z)  # -1 because Z.min()=1 (==Hydrogen)
35 |           return h
   |

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:35:16: RET504 Unnecessary assignment to `h` before `return` statement
   |
33 |         """
34 |         h = self.embeddings(Z)  # -1 because Z.min()=1 (==Hydrogen)
35 |         return h
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:54:9: ANN204 Missing return type annotation for special method `__init__`
   |
52 |     """
53 | 
54 |     def __init__(
   |         ^^^^^^^^ ANN204
55 |         self, atom_features, edge_features, out_features, activation=None, name=None
56 |     ):
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:54:9: D107 Missing docstring in `__init__`
   |
52 |     """
53 | 
54 |     def __init__(
   |         ^^^^^^^^ D107
55 |         self, atom_features, edge_features, out_features, activation=None, name=None
56 |     ):
   |

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:55:76: ARG002 Unused method argument: `name`
   |
54 |     def __init__(
55 |         self, atom_features, edge_features, out_features, activation=None, name=None
   |                                                                            ^^^^ ARG002
56 |     ):
57 |         super().__init__()
   |

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:62:9: D205 1 blank line required between summary line and description
   |
61 |       def forward(self, h, m_rbf, idnb_a, idnb_c):
62 |           """Returns
   |  _________^
63 | |         -------
64 | |             m_ca: Tensor, shape=(nEdges, emb_size)
65 | |                 Edge embeddings.
66 | | 
67 | |         """
   | |___________^ D205
68 |           # m_rbf: shape (nEdges, nFeatures)
69 |           # in embedding block: m_rbf = rbf ; In interaction block: m_rbf = m_ca
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:62:9: D401 First line of docstring should be in imperative mood: "Returns"
   |
61 |       def forward(self, h, m_rbf, idnb_a, idnb_c):
62 |           """Returns
   |  _________^
63 | |         -------
64 | |             m_ca: Tensor, shape=(nEdges, emb_size)
65 | |                 Edge embeddings.
66 | | 
67 | |         """
   | |___________^ D401
68 |           # m_rbf: shape (nEdges, nFeatures)
69 |           # in embedding block: m_rbf = rbf ; In interaction block: m_rbf = m_ca
   |

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:68:9: ERA001 Found commented-out code
   |
67 |         """
68 |         # m_rbf: shape (nEdges, nFeatures)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
69 |         # in embedding block: m_rbf = rbf ; In interaction block: m_rbf = m_ca
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\embedding_block.py:76:16: RET504 Unnecessary assignment to `m_ca` before `return` statement
   |
74 |         m_ca = torch.cat([h_a, h_c, m_rbf], dim=-1)  # (nEdges, 2*emb_size+nFeatures)
75 |         m_ca = self.dense(m_ca)  # (nEdges, emb_size)
76 |         return m_ca
   |                ^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\envelope.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\envelope.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\envelope.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\envelope.py:14:9: ANN204 Missing return type annotation for special method `__init__`
   |
12 |     """
13 | 
14 |     def __init__(self, p, name="envelope"):
   |         ^^^^^^^^ ANN204
15 |         super().__init__()
16 |         assert p > 0
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\envelope.py:14:9: D107 Missing docstring in `__init__`
   |
12 |     """
13 | 
14 |     def __init__(self, p, name="envelope"):
   |         ^^^^^^^^ D107
15 |         super().__init__()
16 |         assert p > 0
   |

src\stk_search\geom3d\models\GemNet\layers\envelope.py:14:27: ARG002 Unused method argument: `name`
   |
12 |     """
13 | 
14 |     def __init__(self, p, name="envelope"):
   |                           ^^^^ ARG002
15 |         super().__init__()
16 |         assert p > 0
   |

src\stk_search\geom3d\models\GemNet\layers\envelope.py:16:9: S101 Use of `assert` detected
   |
14 |     def __init__(self, p, name="envelope"):
15 |         super().__init__()
16 |         assert p > 0
   |         ^^^^^^ S101
17 |         self.p = p
18 |         self.a = -(self.p + 1) * (self.p + 2) / 2
   |

src\stk_search\geom3d\models\GemNet\layers\envelope.py:22:9: D102 Missing docstring in public method
   |
20 |         self.c = -self.p * (self.p + 1) / 2
21 | 
22 |     def forward(self, d_scaled):
   |         ^^^^^^^ D102
23 |         env_val = (
24 |             1
   |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\interaction_block.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:50:9: PLR0913 Too many arguments in function definition (16 > 5)
   |
48 |     """
49 | 
50 |     def __init__(
   |         ^^^^^^^^ PLR0913
51 |         self,
52 |         emb_size_atom,
   |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:50:9: ANN204 Missing return type annotation for special method `__init__`
   |
48 |     """
49 | 
50 |     def __init__(
   |         ^^^^^^^^ ANN204
51 |         self,
52 |         emb_size_atom,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:50:9: D107 Missing docstring in `__init__`
   |
48 |     """
49 | 
50 |     def __init__(
   |         ^^^^^^^^ D107
51 |         self,
52 |         emb_size_atom,
   |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:159:9: PLR0913 Too many arguments in function definition (18 > 5)
    |
157 |         self.inv_sqrt_3 = 1 / (3.0 ** 0.5)
158 | 
159 |     def forward(self,
    |         ^^^^^^^ PLR0913
160 |             h,
161 |             m,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:165:13: N803 Argument name `Kidx4` should be lowercase
    |
163 |             cbf4,
164 |             sbf4,
165 |             Kidx4,
    |             ^^^^^ N803
166 |             rbf3,
167 |             cbf3,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:168:13: N803 Argument name `Kidx3` should be lowercase
    |
166 |             rbf3,
167 |             cbf3,
168 |             Kidx3,
    |             ^^^^^ N803
169 |             id_swap,
170 |             id3_expand_ba,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:178:9: D205 1 blank line required between summary line and description
    |
176 |               id_c,
177 |               id_a):
178 |           """Returns
    |  _________^
179 | |         -------
180 | |             h: Tensor, shape=(nEdges, emb_size_atom)
181 | |                 Atom embeddings.
182 | |             m: Tensor, shape=(nEdges, emb_size_edge)
183 | |                 Edge embeddings (c->a).
184 | | 
185 | |         """
    | |___________^ D205
186 |           # Initial transformation
187 |           x_ca_skip = self.dense_ca(m)  # (nEdges, emb_size_edge)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:178:9: D401 First line of docstring should be in imperative mood: "Returns"
    |
176 |               id_c,
177 |               id_a):
178 |           """Returns
    |  _________^
179 | |         -------
180 | |             h: Tensor, shape=(nEdges, emb_size_atom)
181 | |                 Atom embeddings.
182 | |             m: Tensor, shape=(nEdges, emb_size_edge)
183 | |                 Edge embeddings (c->a).
184 | | 
185 | |         """
    | |___________^ D401
186 |           # Initial transformation
187 |           x_ca_skip = self.dense_ca(m)  # (nEdges, emb_size_edge)
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:208:13: B007 Loop control variable `i` not used within loop body
    |
206 |         ## --------------------------------------- Update Edge Embeddings ---------------------------------------- ##
207 |         # Transformations before skip connection
208 |         for i, layer in enumerate(self.layers_before_skip):
    |             ^ B007
209 |             x = layer(x)  # (nEdges, emb_size_edge)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:216:13: B007 Loop control variable `i` not used within loop body
    |
215 |         # Transformations after skip connection
216 |         for i, layer in enumerate(self.layers_after_skip):
    |             ^ B007
217 |             m = layer(m)  # (nEdges, emb_size_edge)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:229:13: B007 Loop control variable `i` not used within loop body
    |
227 |         m2 = self.concat_layer(h, m, id_c, id_a)  # (nEdges, emb_size_edge)
228 | 
229 |         for i, layer in enumerate(self.residual_m):
    |             ^ B007
230 |             m2 = layer(m2)  # (nEdges, emb_size_edge)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:270:9: PLR0913 Too many arguments in function definition (14 > 5)
    |
268 |     """
269 | 
270 |     def __init__(
    |         ^^^^^^^^ PLR0913
271 |         self,
272 |         emb_size_atom,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:270:9: ANN204 Missing return type annotation for special method `__init__`
    |
268 |     """
269 | 
270 |     def __init__(
    |         ^^^^^^^^ ANN204
271 |         self,
272 |         emb_size_atom,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:270:9: D107 Missing docstring in `__init__`
    |
268 |     """
269 | 
270 |     def __init__(
    |         ^^^^^^^^ D107
271 |         self,
272 |         emb_size_atom,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:275:9: ARG002 Unused method argument: `emb_size_quad`
    |
273 |         emb_size_edge,
274 |         emb_size_trip,
275 |         emb_size_quad,
    |         ^^^^^^^^^^^^^ ARG002
276 |         emb_size_rbf,
277 |         emb_size_cbf,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:286:9: ANN003 Missing type annotation for `**kwargs`
    |
284 |         scale_file=None,
285 |         name="Interaction",
286 |         **kwargs,
    |         ^^^^^^^^ ANN003
287 |     ):
288 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:286:11: ARG002 Unused method argument: `kwargs`
    |
284 |         scale_file=None,
285 |         name="Interaction",
286 |         **kwargs,
    |           ^^^^^^ ARG002
287 |     ):
288 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:364:9: PLR0913 Too many arguments in function definition (11 > 5)
    |
362 |         self.inv_sqrt_2 = 1 / (2.0 ** 0.5)
363 | 
364 |     def forward(self,
    |         ^^^^^^^ PLR0913
365 |             h,
366 |             m,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:369:13: N803 Argument name `Kidx3` should be lowercase
    |
367 |             rbf3,
368 |             cbf3,
369 |             Kidx3,
    |             ^^^^^ N803
370 |             id_swap,
371 |             id3_expand_ba,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:376:13: ANN003 Missing type annotation for `**kwargs`
    |
374 |             id_c,
375 |             id_a,
376 |             **kwargs):
    |             ^^^^^^^^ ANN003
377 |         """Returns
378 |         -------
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:376:15: ARG002 Unused method argument: `kwargs`
    |
374 |             id_c,
375 |             id_a,
376 |             **kwargs):
    |               ^^^^^^ ARG002
377 |         """Returns
378 |         -------
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:377:9: D205 1 blank line required between summary line and description
    |
375 |               id_a,
376 |               **kwargs):
377 |           """Returns
    |  _________^
378 | |         -------
379 | |             h: Tensor, shape=(nEdges, emb_size_atom)
380 | |                 Atom embeddings.
381 | |             m: Tensor, shape=(nEdges, emb_size_edge)
382 | |                 Edge embeddings (c->a).
383 | | 
384 | |         """
    | |___________^ D205
385 |           # Initial transformation
386 |           x_ca_skip = self.dense_ca(m)  # (nEdges, emb_size_edge)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:377:9: D401 First line of docstring should be in imperative mood: "Returns"
    |
375 |               id_a,
376 |               **kwargs):
377 |           """Returns
    |  _________^
378 | |         -------
379 | |             h: Tensor, shape=(nEdges, emb_size_atom)
380 | |                 Atom embeddings.
381 | |             m: Tensor, shape=(nEdges, emb_size_edge)
382 | |                 Edge embeddings (c->a).
383 | | 
384 | |         """
    | |___________^ D401
385 |           # Initial transformation
386 |           x_ca_skip = self.dense_ca(m)  # (nEdges, emb_size_edge)
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:396:13: B007 Loop control variable `i` not used within loop body
    |
394 |         ## ---------------------------------------- Update Edge Embeddings --------------------------------------- ##
395 |         # Transformations before skip connection
396 |         for i, layer in enumerate(self.layers_before_skip):
    |             ^ B007
397 |             x = layer(x)  # (nEdges, emb_size_edge)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:404:13: B007 Loop control variable `i` not used within loop body
    |
403 |         # Transformations after skip connection
404 |         for i, layer in enumerate(self.layers_after_skip):
    |             ^ B007
405 |             m = layer(m)  # (nEdges, emb_size_edge)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:417:13: B007 Loop control variable `i` not used within loop body
    |
415 |         m2 = self.concat_layer(h, m, id_c, id_a)  # (nEdges, emb_size_edge)
416 | 
417 |         for i, layer in enumerate(self.residual_m):
    |             ^ B007
418 |             m2 = layer(m2)  # (nEdges, emb_size_edge)
    |
    = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:450:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
448 |     """
449 | 
450 |     def __init__(
    |         ^^^^^^^^ PLR0913
451 |         self,
452 |         emb_size_edge,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:450:9: ANN204 Missing return type annotation for special method `__init__`
    |
448 |     """
449 | 
450 |     def __init__(
    |         ^^^^^^^^ ANN204
451 |         self,
452 |         emb_size_edge,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:450:9: D107 Missing docstring in `__init__`
    |
448 |     """
449 | 
450 |     def __init__(
    |         ^^^^^^^^ D107
451 |         self,
452 |         emb_size_edge,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:461:9: ANN003 Missing type annotation for `**kwargs`
    |
459 |         scale_file=None,
460 |         name="QuadrupletInteraction",
461 |         **kwargs,
    |         ^^^^^^^^ ANN003
462 |     ):
463 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:461:11: ARG002 Unused method argument: `kwargs`
    |
459 |         scale_file=None,
460 |         name="QuadrupletInteraction",
461 |         **kwargs,
    |           ^^^^^^ ARG002
462 |     ):
463 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:518:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
516 |         self.inv_sqrt_2 = 1 / (2.0 ** 0.5)
517 | 
518 |     def forward(self,
    |         ^^^^^^^ PLR0913
519 |             m,
520 |             rbf,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:523:13: N803 Argument name `Kidx4` should be lowercase
    |
521 |             cbf,
522 |             sbf,
523 |             Kidx4,
    |             ^^^^^ N803
524 |             id_swap,
525 |             id4_reduce_ca,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:528:9: D205 1 blank line required between summary line and description
    |
526 |               id4_expand_intm_db,
527 |               id4_expand_abd):
528 |           """Returns
    |  _________^
529 | |         -------
530 | |             m: Tensor, shape=(nEdges, emb_size_edge)
531 | |                 Edge embeddings (c->a).
532 | | 
533 | |         """
    | |___________^ D205
534 |           x_db = self.dense_db(m)  # (nEdges, emb_size_edge)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:528:9: D401 First line of docstring should be in imperative mood: "Returns"
    |
526 |               id4_expand_intm_db,
527 |               id4_expand_abd):
528 |           """Returns
    |  _________^
529 | |         -------
530 | |             m: Tensor, shape=(nEdges, emb_size_edge)
531 | |                 Edge embeddings (c->a).
532 | | 
533 | |         """
    | |___________^ D401
534 |           x_db = self.dense_db(m)  # (nEdges, emb_size_edge)
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:554:9: ERA001 Found commented-out code
    |
553 |         # Basis representation:
554 |         # rbf(d_db)
    |         ^^^^^^^^^^^ ERA001
555 |         # cbf(d_ba, angle_abd)
556 |         # sbf(d_ca, angle_cab, angle_cabd)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:555:9: ERA001 Found commented-out code
    |
553 |         # Basis representation:
554 |         # rbf(d_db)
555 |         # cbf(d_ba, angle_abd)
    |         ^^^^^^^^^^^^^^^^^^^^^^ ERA001
556 |         # sbf(d_ca, angle_cab, angle_cabd)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:556:9: ERA001 Found commented-out code
    |
554 |         # rbf(d_db)
555 |         # cbf(d_ba, angle_abd)
556 |         # sbf(d_ca, angle_cab, angle_cabd)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
557 | 
558 |         # Upproject embeddings
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:567:16: RET504 Unnecessary assignment to `x4` before `return` statement
    |
565 |         x4 = x4 * self.inv_sqrt_2
566 | 
567 |         return x4
    |                ^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:592:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
590 |     """
591 | 
592 |     def __init__(
    |         ^^^^^^^^ PLR0913
593 |         self,
594 |         emb_size_edge,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:592:9: ANN204 Missing return type annotation for special method `__init__`
    |
590 |     """
591 | 
592 |     def __init__(
    |         ^^^^^^^^ ANN204
593 |         self,
594 |         emb_size_edge,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:592:9: D107 Missing docstring in `__init__`
    |
590 |     """
591 | 
592 |     def __init__(
    |         ^^^^^^^^ D107
593 |         self,
594 |         emb_size_edge,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:602:9: ANN003 Missing type annotation for `**kwargs`
    |
600 |         scale_file=None,
601 |         name="TripletInteraction",
602 |         **kwargs,
    |         ^^^^^^^^ ANN003
603 |     ):
604 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:602:11: ARG002 Unused method argument: `kwargs`
    |
600 |         scale_file=None,
601 |         name="TripletInteraction",
602 |         **kwargs,
    |           ^^^^^^ ARG002
603 |     ):
604 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:654:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
652 |         self.inv_sqrt_2 = 1 / (2.0) ** 0.5
653 | 
654 |     def forward(self,
    |         ^^^^^^^ PLR0913
655 |             m,
656 |             rbf3,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:658:13: N803 Argument name `Kidx3` should be lowercase
    |
656 |             rbf3,
657 |             cbf3,
658 |             Kidx3,
    |             ^^^^^ N803
659 |             id_swap,
660 |             id3_expand_ba,
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:662:9: D205 1 blank line required between summary line and description
    |
660 |               id3_expand_ba,
661 |               id3_reduce_ca):
662 |           """Returns
    |  _________^
663 | |         -------
664 | |             m: Tensor, shape=(nEdges, emb_size_edge)
665 | |                 Edge embeddings (c->a).
666 | | 
667 | |         """
    | |___________^ D205
668 |           # Dense transformation
669 |           x_ba = self.dense_ba(m)  # (nEdges, emb_size_edge)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:662:9: D401 First line of docstring should be in imperative mood: "Returns"
    |
660 |               id3_expand_ba,
661 |               id3_reduce_ca):
662 |           """Returns
    |  _________^
663 | |         -------
664 | |             m: Tensor, shape=(nEdges, emb_size_edge)
665 | |                 Edge embeddings (c->a).
666 | | 
667 | |         """
    | |___________^ D401
668 |           # Dense transformation
669 |           x_ba = self.dense_ba(m)  # (nEdges, emb_size_edge)
    |

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:686:9: ERA001 Found commented-out code
    |
685 |         # Basis representation:
686 |         # rbf(d_ba)
    |         ^^^^^^^^^^^ ERA001
687 |         # cbf(d_ca, angle_cab)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:687:9: ERA001 Found commented-out code
    |
685 |         # Basis representation:
686 |         # rbf(d_ba)
687 |         # cbf(d_ca, angle_cab)
    |         ^^^^^^^^^^^^^^^^^^^^^^ ERA001
688 | 
689 |         # Up project embeddings
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\layers\interaction_block.py:697:16: RET504 Unnecessary assignment to `x3` before `return` statement
    |
695 |         x3 = x_ca + x_ac
696 |         x3 = x3 * self.inv_sqrt_2
697 |         return x3
    |                ^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\layers\scaling.py:1:1: INP001 File `src\stk_search\geom3d\models\GemNet\layers\scaling.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\models\GemNet\layers\scaling.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\layers\scaling.py:6:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
4 | import torch
5 | 
6 | from ..utils import read_value_json, update_json
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\GemNet\layers\scaling.py:6:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
4 | import torch
5 | 
6 | from ..utils import read_value_json, update_json
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\GemNet\layers\scaling.py:10:5: D200 One-line docstring should fit on one line
   |
 9 |   class AutomaticFit:
10 |       """All added variables are processed in the order of creation.
   |  _____^
11 | |     """
   | |_______^ D200
12 |   
13 |       activeVar = None
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\layers\scaling.py:13:5: N815 Variable `activeVar` in class scope should not be mixedCase
   |
11 |     """
12 | 
13 |     activeVar = None
   |     ^^^^^^^^^ N815
14 |     queue = None
15 |     fitting_mode = False
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:17:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 |     fitting_mode = False
16 | 
17 |     def __init__(self, variable, scale_file, name):
   |         ^^^^^^^^ ANN204
18 |         self.variable = variable  # variable to find value for
19 |         self.scale_file = scale_file
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\scaling.py:17:9: D107 Missing docstring in `__init__`
   |
15 |     fitting_mode = False
16 | 
17 |     def __init__(self, variable, scale_file, name):
   |         ^^^^^^^^ D107
18 |         self.variable = variable  # variable to find value for
19 |         self.scale_file = scale_file
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:36:9: D102 Missing docstring in public method
   |
34 |                 self._add2queue()
35 | 
36 |     def reset():
   |         ^^^^^ D102
37 |         AutomaticFit.activeVar = None
38 |         AutomaticFit.all_processed = False
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:40:9: D102 Missing docstring in public method
   |
38 |         AutomaticFit.all_processed = False
39 | 
40 |     def fitting_completed():
   |         ^^^^^^^^^^^^^^^^^ D102
41 |         return AutomaticFit.queue is None
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:43:9: D102 Missing docstring in public method
   |
41 |         return AutomaticFit.queue is None
42 | 
43 |     def set2fitmode():
   |         ^^^^^^^^^^^ D102
44 |         AutomaticFit.reset()
45 |         AutomaticFit.fitting_mode = True
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:47:9: ANN202 Missing return type annotation for private function `_add2queue`
   |
45 |         AutomaticFit.fitting_mode = True
46 | 
47 |     def _add2queue(self):
   |         ^^^^^^^^^^ ANN202
48 |         logging.debug(f"Add {self._name} to queue.")
49 |         # check that same variable is not added twice
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\scaling.py:48:23: G004 Logging statement uses f-string
   |
47 |     def _add2queue(self):
48 |         logging.debug(f"Add {self._name} to queue.")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
49 |         # check that same variable is not added twice
50 |         for var in AutomaticFit.queue:
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:51:30: SLF001 Private member accessed: `_name`
   |
49 |         # check that same variable is not added twice
50 |         for var in AutomaticFit.queue:
51 |             if self._name == var._name:
   |                              ^^^^^^^^^ SLF001
52 |                 raise ValueError(
53 |                     f"Variable with the same name ({self._name}) was already added to queue!"
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:52:23: TRY003 Avoid specifying long messages outside the exception class
   |
50 |           for var in AutomaticFit.queue:
51 |               if self._name == var._name:
52 |                   raise ValueError(
   |  _______________________^
53 | |                     f"Variable with the same name ({self._name}) was already added to queue!"
54 | |                 )
   | |_________________^ TRY003
55 |           AutomaticFit.queue += [self]
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:53:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
51 |             if self._name == var._name:
52 |                 raise ValueError(
53 |                     f"Variable with the same name ({self._name}) was already added to queue!"
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
54 |                 )
55 |         AutomaticFit.queue += [self]
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GemNet\layers\scaling.py:58:9: D200 One-line docstring should fit on one line
   |
57 |       def set_next_active(self):
58 |           """Set the next variable in the queue that should be fitted.
   |  _________^
59 | |         """
   | |___________^ D200
60 |           queue = AutomaticFit.queue
61 |           if len(queue) == 0:
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\layers\scaling.py:69:9: D200 One-line docstring should fit on one line
   |
68 |       def load_maybe(self):
69 |           """Load variable from file or set to initial value of the variable.
   |  _________^
70 | |         """
   | |___________^ D200
71 |           value = read_value_json(self.scale_file, self._name)
72 |           if value is None:
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\layers\scaling.py:74:17: G004 Logging statement uses f-string
   |
72 |         if value is None:
73 |             logging.info(
74 |                 f"Initialize variable {self._name}' to {self.variable.numpy():.3f}"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
75 |             )
76 |         else:
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:78:27: G004 Logging statement uses f-string
   |
76 |         else:
77 |             self._fitted = True
78 |             logging.debug(f"Set scale factor {self._name} : {value}")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
79 |             with torch.no_grad():
80 |                 self.variable.copy_(torch.tensor(value))
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:95:9: ANN204 Missing return type annotation for special method `__init__`
   |
93 |     """
94 | 
95 |     def __init__(self, variable, scale_file, name):
   |         ^^^^^^^^ ANN204
96 |         super().__init__(variable, scale_file, name)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\scaling.py:95:9: D107 Missing docstring in `__init__`
   |
93 |     """
94 | 
95 |     def __init__(self, variable, scale_file, name):
   |         ^^^^^^^^ D107
96 |         super().__init__(variable, scale_file, name)
   |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:101:9: ANN202 Missing return type annotation for private function `_init_stats`
    |
 99 |             self._init_stats()
100 | 
101 |     def _init_stats(self):
    |         ^^^^^^^^^^^ ANN202
102 |         self.variance_in = 0
103 |         self.variance_out = 0
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\scaling.py:107:9: D205 1 blank line required between summary line and description
    |
106 |       def observe(self, x, y):
107 |           """Observe variances for inut x and output y.
    |  _________^
108 | |         The scaling factor alpha is calculated s.t. Var(alpha * y) ~ Var(x)
109 | |         """
    | |___________^ D205
110 |           if self._fitted:
111 |               return
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\GemNet\layers\scaling.py:107:9: D400 First line should end with a period
    |
106 |       def observe(self, x, y):
107 |           """Observe variances for inut x and output y.
    |  _________^
108 | |         The scaling factor alpha is calculated s.t. Var(alpha * y) ~ Var(x)
109 | |         """
    | |___________^ D400
110 |           if self._fitted:
111 |               return
    |
    = help: Add period

src\stk_search\geom3d\models\GemNet\layers\scaling.py:107:9: D415 First line should end with a period, question mark, or exclamation point
    |
106 |       def observe(self, x, y):
107 |           """Observe variances for inut x and output y.
    |  _________^
108 | |         The scaling factor alpha is calculated s.t. Var(alpha * y) ~ Var(x)
109 | |         """
    | |___________^ D415
110 |           if self._fitted:
111 |               return
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\GemNet\layers\scaling.py:115:13: N806 Variable `nSamples` in function should be lowercase
    |
113 |         # only track stats for current variable
114 |         if AutomaticFit.activeVar == self:
115 |             nSamples = y.shape[0]
    |             ^^^^^^^^ N806
116 |             self.variance_in += torch.mean(torch.var(x, dim=0)) * nSamples
117 |             self.variance_out += torch.mean(torch.var(y, dim=0)) * nSamples
    |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:121:9: D200 One-line docstring should fit on one line
    |
120 |       def fit(self):
121 |           """Fit the scaling factor based on the observed variances.
    |  _________^
122 | |         """
    | |___________^ D200
123 |           if AutomaticFit.activeVar == self:
124 |               if self.variance_in == 0:
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\GemNet\layers\scaling.py:125:23: TRY003 Avoid specifying long messages outside the exception class
    |
123 |           if AutomaticFit.activeVar == self:
124 |               if self.variance_in == 0:
125 |                   raise ValueError(
    |  _______________________^
126 | |                     f"Did not track the variable {self._name}. Add observe calls to track the variance before and after."
127 | |                 )
    | |_________________^ TRY003
128 |   
129 |               # calculate variance preserving scaling factor
    |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:126:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
124 |             if self.variance_in == 0:
125 |                 raise ValueError(
126 |                     f"Did not track the variable {self._name}. Add observe calls to track the variance before and after."
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
127 |                 )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GemNet\layers\scaling.py:136:17: ISC003 Explicitly concatenated string should be implicitly concatenated
    |
134 |               value = np.sqrt(1 / ratio, dtype="float32")
135 |               logging.info(
136 |                   f"Variable: {self._name}, Var_in: {self.variance_in.numpy():.3f}, Var_out: {self.variance_out.numpy():.3f}, "
    |  _________________^
137 | |                 + f"Ratio: {ratio:.3f} => Scaling factor: {value:.3f}"
    | |______________________________________________________________________^ ISC003
138 |               )
    |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:136:17: G003 Logging statement uses `+`
    |
134 |               value = np.sqrt(1 / ratio, dtype="float32")
135 |               logging.info(
136 |                   f"Variable: {self._name}, Var_in: {self.variance_in.numpy():.3f}, Var_out: {self.variance_out.numpy():.3f}, "
    |  _________________^
137 | |                 + f"Ratio: {ratio:.3f} => Scaling factor: {value:.3f}"
    | |______________________________________________________________________^ G003
138 |               )
    |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:159:9: ANN204 Missing return type annotation for special method `__init__`
    |
157 |     """
158 | 
159 |     def __init__(self, scale_file, name, device=None):
    |         ^^^^^^^^ ANN204
160 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GemNet\layers\scaling.py:159:9: D107 Missing docstring in `__init__`
    |
157 |     """
158 | 
159 |     def __init__(self, scale_file, name, device=None):
    |         ^^^^^^^^ D107
160 |         super().__init__()
    |

src\stk_search\geom3d\models\GemNet\layers\scaling.py:167:9: D102 Missing docstring in public method
    |
165 |         self.autofit = AutoScaleFit(self.scale_factor, scale_file, name)
166 | 
167 |     def forward(self, x_ref, y):
    |         ^^^^^^^ D102
168 |         y = y * self.scale_factor
169 |         self.autofit.observe(x_ref, y)
    |

src\stk_search\geom3d\models\GemNet\utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GemNet\utils.py:7:5: ERA001 Found commented-out code
  |
5 |     # """ """
6 |     # if not path.endswith(".json"):
7 |     #     raise UserWarning(f"Path {path} is not a json-path.")
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
8 | 
9 |     # with open(path, "r") as f:
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\utils.py:10:5: ERA001 Found commented-out code
   |
 9 |     # with open(path, "r") as f:
10 |     #    content = json.load(f)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
11 |     # return content
12 |     """ """
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\utils.py:11:5: ERA001 Found commented-out code
   |
 9 |     # with open(path, "r") as f:
10 |     #    content = json.load(f)
11 |     # return content
   |     ^^^^^^^^^^^^^^^^ ERA001
12 |     """ """
13 |     if path is None:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\utils.py:12:5: D419 Docstring is empty
   |
10 |     #    content = json.load(f)
11 |     # return content
12 |     """ """
   |     ^^^^^^^ D419
13 |     if path is None:
14 |         return None  # or raise an error, depending on your requirements
   |

src\stk_search\geom3d\models\GemNet\utils.py:16:15: TRY003 Avoid specifying long messages outside the exception class
   |
14 |         return None  # or raise an error, depending on your requirements
15 |     if not path.endswith(".json"):
16 |         raise UserWarning(f"Path {path} is not a json-path.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
17 |     try:
18 |         with open(path) as f:
   |

src\stk_search\geom3d\models\GemNet\utils.py:16:27: EM102 Exception must not use an f-string literal, assign to variable first
   |
14 |         return None  # or raise an error, depending on your requirements
15 |     if not path.endswith(".json"):
16 |         raise UserWarning(f"Path {path} is not a json-path.")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
17 |     try:
18 |         with open(path) as f:
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GemNet\utils.py:18:14: PTH123 `open()` should be replaced by `Path.open()`
   |
16 |         raise UserWarning(f"Path {path} is not a json-path.")
17 |     try:
18 |         with open(path) as f:
   |              ^^^^ PTH123
19 |             content = json.load(f)
20 |         return content
   |

src\stk_search\geom3d\models\GemNet\utils.py:20:9: TRY300 Consider moving this statement to an `else` block
   |
18 |         with open(path) as f:
19 |             content = json.load(f)
20 |         return content
   |         ^^^^^^^^^^^^^^ TRY300
21 |     except FileNotFoundError:
22 |         return None  # or handle the absence of the file in an appropriate way
   |

src\stk_search\geom3d\models\GemNet\utils.py:20:16: RET504 Unnecessary assignment to `content` before `return` statement
   |
18 |         with open(path) as f:
19 |             content = json.load(f)
20 |         return content
   |                ^^^^^^^ RET504
21 |     except FileNotFoundError:
22 |         return None  # or handle the absence of the file in an appropriate way
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GemNet\utils.py:27:5: D419 Docstring is empty
   |
26 | def update_json(path, data):
27 |     """ """
   |     ^^^^^^^ D419
28 |     if not path.endswith(".json"):
29 |         raise UserWarning(f"Path {path} is not a json-path.")
   |

src\stk_search\geom3d\models\GemNet\utils.py:29:15: TRY003 Avoid specifying long messages outside the exception class
   |
27 |     """ """
28 |     if not path.endswith(".json"):
29 |         raise UserWarning(f"Path {path} is not a json-path.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
30 | 
31 |     content = read_json(path)
   |

src\stk_search\geom3d\models\GemNet\utils.py:29:27: EM102 Exception must not use an f-string literal, assign to variable first
   |
27 |     """ """
28 |     if not path.endswith(".json"):
29 |         raise UserWarning(f"Path {path} is not a json-path.")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
30 | 
31 |     content = read_json(path)
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GemNet\utils.py:37:5: D419 Docstring is empty
   |
36 | def write_json(path, data):
37 |     """ """
   |     ^^^^^^^ D419
38 |     if not path.endswith(".json"):
39 |         raise UserWarning(f"Path {path} is not a json-path.")
   |

src\stk_search\geom3d\models\GemNet\utils.py:39:15: TRY003 Avoid specifying long messages outside the exception class
   |
37 |     """ """
38 |     if not path.endswith(".json"):
39 |         raise UserWarning(f"Path {path} is not a json-path.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
40 | 
41 |     with open(path, "w", encoding="utf-8") as f:
   |

src\stk_search\geom3d\models\GemNet\utils.py:39:27: EM102 Exception must not use an f-string literal, assign to variable first
   |
37 |     """ """
38 |     if not path.endswith(".json"):
39 |         raise UserWarning(f"Path {path} is not a json-path.")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
40 | 
41 |     with open(path, "w", encoding="utf-8") as f:
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\GemNet\utils.py:41:10: PTH123 `open()` should be replaced by `Path.open()`
   |
39 |         raise UserWarning(f"Path {path} is not a json-path.")
40 | 
41 |     with open(path, "w", encoding="utf-8") as f:
   |          ^^^^ PTH123
42 |         json.dump(data, f, ensure_ascii=False, indent=4)
   |

src\stk_search\geom3d\models\GemNet\utils.py:46:5: D419 Docstring is empty
   |
45 | def read_value_json(path, key):
46 |     """ """
   |     ^^^^^^^ D419
47 |     content = read_json(path)
   |

src\stk_search\geom3d\models\GemNet\utils.py:50:5: ERA001 Found commented-out code
   |
49 |     # if key in content.keys():
50 |     #     return content[key]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
51 |     # else:
52 |     #     return None
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\utils.py:51:5: ERA001 Found commented-out code
   |
49 |     # if key in content.keys():
50 |     #     return content[key]
51 |     # else:
   |     ^^^^^^^ ERA001
52 |     #     return None
53 |     if content is not None:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\utils.py:52:5: ERA001 Found commented-out code
   |
50 |     #     return content[key]
51 |     # else:
52 |     #     return None
   |     ^^^^^^^^^^^^^^^^^ ERA001
53 |     if content is not None:
54 |         if key in content.keys():
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GemNet\utils.py:54:12: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
52 |     #     return None
53 |     if content is not None:
54 |         if key in content.keys():
   |            ^^^^^^^^^^^^^^^^^^^^^ SIM118
55 |             return content[key]
56 |         else:
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\models\GemNet\utils.py:56:9: RET505 Unnecessary `else` after `return` statement
   |
54 |         if key in content.keys():
55 |             return content[key]
56 |         else:
   |         ^^^^ RET505
57 |             return None
58 |     else:
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\GeoSSL_DDM.py:1:1: N999 Invalid module name: 'GeoSSL_DDM'
src\stk_search\geom3d\models\GeoSSL_DDM.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\GeoSSL_DDM.py:3:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import numpy as np
2 | import torch
3 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
4 | from torch import nn
5 | from torch_scatter import scatter_add
  |

src\stk_search\geom3d\models\GeoSSL_DDM.py:8:7: D101 Missing docstring in public class
   |
 8 | class MultiLayerPerceptron(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^ D101
 9 |     def __init__(self, input_dim, hidden_dims, activation="relu", dropout=0):
10 |         super(MultiLayerPerceptron, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:9:9: ANN204 Missing return type annotation for special method `__init__`
   |
 8 | class MultiLayerPerceptron(nn.Module):
 9 |     def __init__(self, input_dim, hidden_dims, activation="relu", dropout=0):
   |         ^^^^^^^^ ANN204
10 |         super(MultiLayerPerceptron, self).__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GeoSSL_DDM.py:9:9: D107 Missing docstring in `__init__`
   |
 8 | class MultiLayerPerceptron(nn.Module):
 9 |     def __init__(self, input_dim, hidden_dims, activation="relu", dropout=0):
   |         ^^^^^^^^ D107
10 |         super(MultiLayerPerceptron, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:10:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
 8 | class MultiLayerPerceptron(nn.Module):
 9 |     def __init__(self, input_dim, hidden_dims, activation="relu", dropout=0):
10 |         super(MultiLayerPerceptron, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
11 | 
12 |         self.dims = [input_dim] + hidden_dims
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GeoSSL_DDM.py:12:21: RUF005 Consider `[input_dim, *hidden_dims]` instead of concatenation
   |
10 |         super(MultiLayerPerceptron, self).__init__()
11 | 
12 |         self.dims = [input_dim] + hidden_dims
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
13 |         if isinstance(activation, str):
14 |             self.activation = getattr(F, activation)
   |
   = help: Replace with `[input_dim, *hidden_dims]`

src\stk_search\geom3d\models\GeoSSL_DDM.py:28:9: D102 Missing docstring in public method
   |
26 |         self.reset_parameters()
27 | 
28 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
29 |         for i, layer in enumerate(self.layers):
30 |             nn.init.xavier_uniform_(layer.weight)
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:29:13: B007 Loop control variable `i` not used within loop body
   |
28 |     def reset_parameters(self):
29 |         for i, layer in enumerate(self.layers):
   |             ^ B007
30 |             nn.init.xavier_uniform_(layer.weight)
31 |             nn.init.constant_(layer.bias, 0.)
   |
   = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\GeoSSL_DDM.py:33:9: D102 Missing docstring in public method
   |
31 |             nn.init.constant_(layer.bias, 0.)
32 | 
33 |     def forward(self, input):
   |         ^^^^^^^ D102
34 |         x = input
35 |         for i, layer in enumerate(self.layers):
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:33:23: A002 Argument `input` is shadowing a Python builtin
   |
31 |             nn.init.constant_(layer.bias, 0.)
32 | 
33 |     def forward(self, input):
   |                       ^^^^^ A002
34 |         x = input
35 |         for i, layer in enumerate(self.layers):
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:45:7: N801 Class name `GeoSSL_DDM` should use CapWords convention
   |
45 | class GeoSSL_DDM(torch.nn.Module):
   |       ^^^^^^^^^^ N801
46 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
47 |         super(GeoSSL_DDM, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:45:7: D101 Missing docstring in public class
   |
45 | class GeoSSL_DDM(torch.nn.Module):
   |       ^^^^^^^^^^ D101
46 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
47 |         super(GeoSSL_DDM, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:46:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
45 | class GeoSSL_DDM(torch.nn.Module):
46 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
   |         ^^^^^^^^ PLR0913
47 |         super(GeoSSL_DDM, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:46:9: ANN204 Missing return type annotation for special method `__init__`
   |
45 | class GeoSSL_DDM(torch.nn.Module):
46 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
   |         ^^^^^^^^ ANN204
47 |         super(GeoSSL_DDM, self).__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GeoSSL_DDM.py:46:9: D107 Missing docstring in `__init__`
   |
45 | class GeoSSL_DDM(torch.nn.Module):
46 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
   |         ^^^^^^^^ D107
47 |         super(GeoSSL_DDM, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:47:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
45 | class GeoSSL_DDM(torch.nn.Module):
46 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
47 |         super(GeoSSL_DDM, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^ UP008
48 | 
49 |         self.anneal_power = anneal_power
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GeoSSL_DDM.py:59:9: D102 Missing docstring in public method
   |
59 |     def forward(self, data, node_feature, distance):
   |         ^^^^^^^ D102
60 |         self.device = self.sigmas.device
   |

src\stk_search\geom3d\models\GeoSSL_DDM.py:89:16: RET504 Unnecessary assignment to `loss` before `return` statement
   |
88 |         loss = loss.mean()
89 |         return loss
   |                ^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GeoSSL_PDM.py:1:1: N999 Invalid module name: 'GeoSSL_PDM'
src\stk_search\geom3d\models\GeoSSL_PDM.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """credit to https://github.com/jiaor17/3D-EMGP/blob/main/mgp/models/denoise_prednoise.py
2 | | We modify the pipeline to better fit the NCSN pipeline
3 | | """
  | |___^ D205
4 |   
5 |   import numpy as np
  |
  = help: Insert single blank line

src\stk_search\geom3d\models\GeoSSL_PDM.py:1:1: D400 First line should end with a period
  |
1 | / """credit to https://github.com/jiaor17/3D-EMGP/blob/main/mgp/models/denoise_prednoise.py
2 | | We modify the pipeline to better fit the NCSN pipeline
3 | | """
  | |___^ D400
4 |   
5 |   import numpy as np
  |
  = help: Add period

src\stk_search\geom3d\models\GeoSSL_PDM.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """credit to https://github.com/jiaor17/3D-EMGP/blob/main/mgp/models/denoise_prednoise.py
2 | | We modify the pipeline to better fit the NCSN pipeline
3 | | """
  | |___^ D415
4 |   
5 |   import numpy as np
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\GeoSSL_PDM.py:18:7: N801 Class name `GeoSSL_PDM` should use CapWords convention
   |
18 | class GeoSSL_PDM(torch.nn.Module):
   |       ^^^^^^^^^^ N801
19 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
20 |         super(GeoSSL_PDM, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:18:7: D101 Missing docstring in public class
   |
18 | class GeoSSL_PDM(torch.nn.Module):
   |       ^^^^^^^^^^ D101
19 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
20 |         super(GeoSSL_PDM, self).__init__()
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:19:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
18 | class GeoSSL_PDM(torch.nn.Module):
19 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
   |         ^^^^^^^^ PLR0913
20 |         super(GeoSSL_PDM, self).__init__()
21 |         self.emb_dim = emb_dim
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:19:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 | class GeoSSL_PDM(torch.nn.Module):
19 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
   |         ^^^^^^^^ ANN204
20 |         super(GeoSSL_PDM, self).__init__()
21 |         self.emb_dim = emb_dim
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\GeoSSL_PDM.py:19:9: D107 Missing docstring in `__init__`
   |
18 | class GeoSSL_PDM(torch.nn.Module):
19 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
   |         ^^^^^^^^ D107
20 |         super(GeoSSL_PDM, self).__init__()
21 |         self.emb_dim = emb_dim
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:20:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
18 | class GeoSSL_PDM(torch.nn.Module):
19 |     def __init__(self, emb_dim, sigma_begin, sigma_end, num_noise_level, noise_type, anneal_power):
20 |         super(GeoSSL_PDM, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^ UP008
21 |         self.emb_dim = emb_dim
22 |         self.noise_type = noise_type
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\GeoSSL_PDM.py:35:9: ANN205 Missing return type annotation for staticmethod `get_score_target`
   |
33 |     @staticmethod
34 |     @torch.no_grad()
35 |     def get_score_target(pos_perturbed, pos_target, node2graph, noise_type):
   |         ^^^^^^^^^^^^^^^^ ANN205
36 |         # s = - (pos_perturbed @ (pos_perturbed.T @ pos_perturbed) - pos_target @ (pos_target.T @ pos_perturbed)) / (torch.norm(pos_perturbed.T @ pos_perturbed) + torch.norm(pos_target.T @ pos_perturbed))
37 |         if noise_type == "riemann":
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\GeoSSL_PDM.py:35:9: D102 Missing docstring in public method
   |
33 |     @staticmethod
34 |     @torch.no_grad()
35 |     def get_score_target(pos_perturbed, pos_target, node2graph, noise_type):
   |         ^^^^^^^^^^^^^^^^ D102
36 |         # s = - (pos_perturbed @ (pos_perturbed.T @ pos_perturbed) - pos_target @ (pos_target.T @ pos_perturbed)) / (torch.norm(pos_perturbed.T @ pos_perturbed) + torch.norm(pos_target.T @ pos_perturbed))
37 |         if noise_type == "riemann":
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:36:9: ERA001 Found commented-out code
   |
34 |     @torch.no_grad()
35 |     def get_score_target(pos_perturbed, pos_target, node2graph, noise_type):
36 |         # s = - (pos_perturbed @ (pos_perturbed.T @ pos_perturbed) - pos_target @ (pos_target.T @ pos_perturbed)) / (torch.norm(pos_perturbed.T @ pos_perturbed) + torch.norm(pos_target.T @ pos_perturbed))
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
37 |         if noise_type == "riemann":
38 |             v = pos_target.shape[-1]
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\GeoSSL_PDM.py:51:20: RET504 Unnecessary assignment to `tar_force` before `return` statement
   |
49 |             otp = otp[node2graph]
50 |             tar_force = - 2 * (pos_perturbed_c.unsqueeze(1) @ ptp - pos_c.unsqueeze(1) @ otp).squeeze(1) / (torch.norm(ptp,dim=(1,2)) + torch.norm(otp,dim=(1,2))).unsqueeze(-1).repeat([1,3])
51 |             return tar_force
   |                    ^^^^^^^^^ RET504
52 |         else:
53 |             return pos_target - pos_perturbed
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\GeoSSL_PDM.py:52:9: RET505 Unnecessary `else` after `return` statement
   |
50 |             tar_force = - 2 * (pos_perturbed_c.unsqueeze(1) @ ptp - pos_c.unsqueeze(1) @ otp).squeeze(1) / (torch.norm(ptp,dim=(1,2)) + torch.norm(otp,dim=(1,2))).unsqueeze(-1).repeat([1,3])
51 |             return tar_force
52 |         else:
   |         ^^^^ RET505
53 |             return pos_target - pos_perturbed
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\GeoSSL_PDM.py:55:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
53 |             return pos_target - pos_perturbed
54 | 
55 |     def forward(self, data, energy, molecule_repr, pos_noise_pred, pos_perturbed, pos_target, debug=False):
   |         ^^^^^^^ PLR0913
56 |         self.device = self.sigmas.device
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:55:9: D102 Missing docstring in public method
   |
53 |             return pos_target - pos_perturbed
54 | 
55 |     def forward(self, data, energy, molecule_repr, pos_noise_pred, pos_perturbed, pos_target, debug=False):
   |         ^^^^^^^ D102
56 |         self.device = self.sigmas.device
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:55:29: ARG002 Unused method argument: `energy`
   |
53 |             return pos_target - pos_perturbed
54 | 
55 |     def forward(self, data, energy, molecule_repr, pos_noise_pred, pos_perturbed, pos_target, debug=False):
   |                             ^^^^^^ ARG002
56 |         self.device = self.sigmas.device
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:55:95: FBT002 Boolean default positional argument in function definition
   |
53 |             return pos_target - pos_perturbed
54 | 
55 |     def forward(self, data, energy, molecule_repr, pos_noise_pred, pos_perturbed, pos_target, debug=False):
   |                                                                                               ^^^^^ FBT002
56 |         self.device = self.sigmas.device
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:55:95: ARG002 Unused method argument: `debug`
   |
53 |             return pos_target - pos_perturbed
54 | 
55 |     def forward(self, data, energy, molecule_repr, pos_noise_pred, pos_perturbed, pos_target, debug=False):
   |                                                                                               ^^^^^ ARG002
56 |         self.device = self.sigmas.device
   |

src\stk_search\geom3d\models\GeoSSL_PDM.py:59:9: F841 Local variable `edge2graph` is assigned to but never used
   |
58 |         node2graph = data.batch
59 |         edge2graph = node2graph[data.edge_index[0]]
   |         ^^^^^^^^^^ F841
60 | 
61 |         noise_level = torch.randint(0, self.sigmas.size(0), (data.num_graphs,), device=self.device) # (num_graph)
   |
   = help: Remove assignment to unused variable `edge2graph`

src\stk_search\geom3d\models\GeoSSL_PDM.py:78:9: F841 Local variable `pred_scale_` is assigned to but never used
   |
76 |         pred_scale = self.noise_pred(molecule_repr)
77 |         loss_pred_noise = loss_func["CrossEntropy"](pred_scale, noise_level)
78 |         pred_scale_ = pred_scale.argmax(dim=1)
   |         ^^^^^^^^^^^ F841
79 | 
80 |         return pos_denoise, loss_pred_noise.mean()
   |
   = help: Remove assignment to unused variable `pred_scale_`

src\stk_search\geom3d\models\Graphormer\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\Graphormer\__init__.py:4:46: F401 `.graphormer.GraphormerEncoder` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | # Licensed under the MIT License.
3 | 
4 | from .graphormer import GraphormerEncoder as Graphormer
  |                                              ^^^^^^^^^^ F401
5 | from .graphormer_graph_encoder import (
6 |     GraphormerGraphEncoder,
  |
  = help: Use an explicit re-export: `GraphormerEncoder as GraphormerEncoder`

src\stk_search\geom3d\models\Graphormer\__init__.py:6:5: F401 `.graphormer_graph_encoder.GraphormerGraphEncoder` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
4 | from .graphormer import GraphormerEncoder as Graphormer
5 | from .graphormer_graph_encoder import (
6 |     GraphormerGraphEncoder,
  |     ^^^^^^^^^^^^^^^^^^^^^^ F401
7 |     init_graphormer_params,
8 | )
  |
  = help: Use an explicit re-export: `GraphormerGraphEncoder as GraphormerGraphEncoder`

src\stk_search\geom3d\models\Graphormer\__init__.py:7:5: F401 `.graphormer_graph_encoder.init_graphormer_params` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
5 | from .graphormer_graph_encoder import (
6 |     GraphormerGraphEncoder,
7 |     init_graphormer_params,
  |     ^^^^^^^^^^^^^^^^^^^^^^ F401
8 | )
  |
  = help: Use an explicit re-export: `init_graphormer_params as init_graphormer_params`

src\stk_search\geom3d\models\Graphormer\graphormer.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\graphormer.py:10:8: N812 Lowercase `functional` imported as non-lowercase `F`
   |
 9 | import torch
10 | import torch.nn.functional as F
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
11 | from torch import nn
   |

src\stk_search\geom3d\models\Graphormer\graphormer.py:17:7: D101 Missing docstring in public class
   |
17 | class GraphormerEncoder(nn.Module):
   |       ^^^^^^^^^^^^^^^^^ D101
18 |     def __init__(self, args):
19 |         super().__init__()
   |

src\stk_search\geom3d\models\Graphormer\graphormer.py:18:9: ANN204 Missing return type annotation for special method `__init__`
   |
17 | class GraphormerEncoder(nn.Module):
18 |     def __init__(self, args):
   |         ^^^^^^^^ ANN204
19 |         super().__init__()
20 |         self.max_nodes = args.max_nodes
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\graphormer.py:18:9: D107 Missing docstring in `__init__`
   |
17 | class GraphormerEncoder(nn.Module):
18 |     def __init__(self, args):
   |         ^^^^^^^^ D107
19 |         super().__init__()
20 |         self.max_nodes = args.max_nodes
   |

src\stk_search\geom3d\models\Graphormer\graphormer.py:74:9: D102 Missing docstring in public method
   |
72 |                 raise NotImplementedError
73 | 
74 |     def reset_output_layer_parameters(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
75 |         self.lm_output_learned_bias = nn.Parameter(torch.zeros(1))
76 |         if self.embed_out is not None:
   |

src\stk_search\geom3d\models\Graphormer\graphormer.py:79:9: D102 Missing docstring in public method
   |
77 |             self.embed_out.reset_parameters()
78 | 
79 |     def forward(self, batched_data, perturb=None, masked_tokens=None, **unused):
   |         ^^^^^^^ D102
80 |         inner_states, graph_rep = self.graph_encoder(
81 |             batched_data,
   |

src\stk_search\geom3d\models\Graphormer\graphormer.py:79:71: ANN003 Missing type annotation for `**unused`
   |
77 |             self.embed_out.reset_parameters()
78 | 
79 |     def forward(self, batched_data, perturb=None, masked_tokens=None, **unused):
   |                                                                       ^^^^^^^^ ANN003
80 |         inner_states, graph_rep = self.graph_encoder(
81 |             batched_data,
   |

src\stk_search\geom3d\models\Graphormer\graphormer.py:79:73: ARG002 Unused method argument: `unused`
   |
77 |             self.embed_out.reset_parameters()
78 | 
79 |     def forward(self, batched_data, perturb=None, masked_tokens=None, **unused):
   |                                                                         ^^^^^^ ARG002
80 |         inner_states, graph_rep = self.graph_encoder(
81 |             batched_data,
   |

src\stk_search\geom3d\models\Graphormer\graphormer.py:109:9: D102 Missing docstring in public method
    |
107 |         return self.max_nodes
108 | 
109 |     def upgrade_state_dict_named(self, state_dict, name):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
110 |         if not self.load_softmax:
111 |             for k in list(state_dict.keys()):
    |

src\stk_search\geom3d\models\Graphormer\graphormer.py:109:52: ARG002 Unused method argument: `name`
    |
107 |         return self.max_nodes
108 | 
109 |     def upgrade_state_dict_named(self, state_dict, name):
    |                                                    ^^^^ ARG002
110 |         if not self.load_softmax:
111 |             for k in list(state_dict.keys()):
    |

src\stk_search\geom3d\models\Graphormer\graphormer.py:118:5: D103 Missing docstring in public function
    |
117 | # only for reference
118 | def base_architecture(args):
    |     ^^^^^^^^^^^^^^^^^ D103
119 |     args.dropout = getattr(args, "dropout", 0.1)
120 |     args.attention_dropout = getattr(args, "attention_dropout", 0.1)
    |

src\stk_search\geom3d\models\Graphormer\graphormer.py:139:5: D103 Missing docstring in public function
    |
138 | # only for reference
139 | def graphormer_base_architecture(args):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
140 |     if args.pretrained_model_name == "pcqm4mv1_graphormer_base" or \
141 |        args.pretrained_model_name == "pcqm4mv2_graphormer_base" or \
    |

src\stk_search\geom3d\models\Graphormer\graphormer.py:140:8: PLR1714 Consider merging multiple comparisons. Use a `set` if the elements are hashable.
    |
138 |   # only for reference
139 |   def graphormer_base_architecture(args):
140 |       if args.pretrained_model_name == "pcqm4mv1_graphormer_base" or \
    |  ________^
141 | |        args.pretrained_model_name == "pcqm4mv2_graphormer_base" or \
142 | |        args.pretrained_model_name == "pcqm4mv1_graphormer_base_for_molhiv":
    | |__________________________________________________________________________^ PLR1714
143 |           args.encoder_layers = 12
144 |           args.encoder_attention_heads = 32
    |
    = help: Merge multiple comparisons

src\stk_search\geom3d\models\Graphormer\graphormer.py:170:5: D103 Missing docstring in public function
    |
169 | # only for reference
170 | def graphormer_slim_architecture(args):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
171 |     args.encoder_embed_dim = getattr(args, "encoder_embed_dim", 80)
    |

src\stk_search\geom3d\models\Graphormer\graphormer.py:189:5: D103 Missing docstring in public function
    |
188 | # only for reference
189 | def graphormer_large_architecture(args):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
190 |     args.encoder_embed_dim = getattr(args, "encoder_embed_dim", 1024)
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:22:5: D200 One-line docstring should fit on one line
   |
21 |   def init_graphormer_params(module):
22 |       """Initialize the weights specific to the Graphormer Model.
   |  _____^
23 | |     """
   | |_______^ D200
24 |   
25 |       def normal_(data):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:25:9: ANN202 Missing return type annotation for private function `normal_`
   |
23 |     """
24 | 
25 |     def normal_(data):
   |         ^^^^^^^ ANN202
26 |         # with FSDP, module params will be on CUDA, so we cast them back to CPU
27 |         # so that the RNG is consistent with and without FSDP
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:44:7: D101 Missing docstring in public class
   |
44 | class GraphormerGraphEncoder(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^^^ D101
45 |     def __init__(
46 |         self,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:45:9: C901 `__init__` is too complex (11 > 10)
   |
44 | class GraphormerGraphEncoder(nn.Module):
45 |     def __init__(
   |         ^^^^^^^^ C901
46 |         self,
47 |         num_atoms: int,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:45:9: PLR0913 Too many arguments in function definition (27 > 5)
   |
44 | class GraphormerGraphEncoder(nn.Module):
45 |     def __init__(
   |         ^^^^^^^^ PLR0913
46 |         self,
47 |         num_atoms: int,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:45:9: D107 Missing docstring in `__init__`
   |
44 | class GraphormerGraphEncoder(nn.Module):
45 |     def __init__(
   |         ^^^^^^^^ D107
46 |         self,
47 |         num_atoms: int,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:63:9: FBT001 Boolean-typed positional argument in function definition
   |
61 |         activation_dropout: float = 0.1,
62 |         layerdrop: float = 0.0,
63 |         encoder_normalize_before: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ FBT001
64 |         pre_layernorm: bool = False,
65 |         apply_init: bool = False,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:63:9: FBT002 Boolean default positional argument in function definition
   |
61 |         activation_dropout: float = 0.1,
62 |         layerdrop: float = 0.0,
63 |         encoder_normalize_before: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ FBT002
64 |         pre_layernorm: bool = False,
65 |         apply_init: bool = False,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:64:9: FBT001 Boolean-typed positional argument in function definition
   |
62 |         layerdrop: float = 0.0,
63 |         encoder_normalize_before: bool = False,
64 |         pre_layernorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT001
65 |         apply_init: bool = False,
66 |         activation_fn: str = "gelu",
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:64:9: FBT002 Boolean default positional argument in function definition
   |
62 |         layerdrop: float = 0.0,
63 |         encoder_normalize_before: bool = False,
64 |         pre_layernorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT002
65 |         apply_init: bool = False,
66 |         activation_fn: str = "gelu",
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:65:9: FBT001 Boolean-typed positional argument in function definition
   |
63 |         encoder_normalize_before: bool = False,
64 |         pre_layernorm: bool = False,
65 |         apply_init: bool = False,
   |         ^^^^^^^^^^ FBT001
66 |         activation_fn: str = "gelu",
67 |         embed_scale: float = None,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:65:9: FBT002 Boolean default positional argument in function definition
   |
63 |         encoder_normalize_before: bool = False,
64 |         pre_layernorm: bool = False,
65 |         apply_init: bool = False,
   |         ^^^^^^^^^^ FBT002
66 |         activation_fn: str = "gelu",
67 |         embed_scale: float = None,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:67:22: RUF013 PEP 484 prohibits implicit `Optional`
   |
65 |         apply_init: bool = False,
66 |         activation_fn: str = "gelu",
67 |         embed_scale: float = None,
   |                      ^^^^^ RUF013
68 |         freeze_embeddings: bool = False,
69 |         n_trans_layers_to_freeze: int = 0,
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:68:9: FBT001 Boolean-typed positional argument in function definition
   |
66 |         activation_fn: str = "gelu",
67 |         embed_scale: float = None,
68 |         freeze_embeddings: bool = False,
   |         ^^^^^^^^^^^^^^^^^ FBT001
69 |         n_trans_layers_to_freeze: int = 0,
70 |         export: bool = False,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:68:9: FBT002 Boolean default positional argument in function definition
   |
66 |         activation_fn: str = "gelu",
67 |         embed_scale: float = None,
68 |         freeze_embeddings: bool = False,
   |         ^^^^^^^^^^^^^^^^^ FBT002
69 |         n_trans_layers_to_freeze: int = 0,
70 |         export: bool = False,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:70:9: FBT001 Boolean-typed positional argument in function definition
   |
68 |         freeze_embeddings: bool = False,
69 |         n_trans_layers_to_freeze: int = 0,
70 |         export: bool = False,
   |         ^^^^^^ FBT001
71 |         traceable: bool = False,
72 |         q_noise: float = 0.0,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:70:9: FBT002 Boolean default positional argument in function definition
   |
68 |         freeze_embeddings: bool = False,
69 |         n_trans_layers_to_freeze: int = 0,
70 |         export: bool = False,
   |         ^^^^^^ FBT002
71 |         traceable: bool = False,
72 |         q_noise: float = 0.0,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:71:9: FBT001 Boolean-typed positional argument in function definition
   |
69 |         n_trans_layers_to_freeze: int = 0,
70 |         export: bool = False,
71 |         traceable: bool = False,
   |         ^^^^^^^^^ FBT001
72 |         q_noise: float = 0.0,
73 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:71:9: FBT002 Boolean default positional argument in function definition
   |
69 |         n_trans_layers_to_freeze: int = 0,
70 |         export: bool = False,
71 |         traceable: bool = False,
   |         ^^^^^^^^^ FBT002
72 |         q_noise: float = 0.0,
73 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:152:13: ANN202 Missing return type annotation for private function `freeze_module_params`
    |
150 |             self.apply(init_graphormer_params)
151 | 
152 |         def freeze_module_params(m):
    |             ^^^^^^^^^^^^^^^^^^^^ ANN202
153 |             if m is not None:
154 |                 for p in m.parameters():
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:158:39: EM101 Exception must not use a string literal, assign to variable first
    |
157 |         if freeze_embeddings:
158 |             raise NotImplementedError("Freezing embeddings is not implemented yet.")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
159 | 
160 |         for layer in range(n_trans_layers_to_freeze):
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:163:9: PLR0913 Too many arguments in function definition (11 > 5)
    |
161 |             freeze_module_params(self.layers[layer])
162 | 
163 |     def build_graphormer_graph_encoder_layer(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
164 |         self,
165 |         embedding_dim,
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:163:9: D102 Missing docstring in public method
    |
161 |             freeze_module_params(self.layers[layer])
162 | 
163 |     def build_graphormer_graph_encoder_layer(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
164 |         self,
165 |         embedding_dim,
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:191:9: C901 `forward` is too complex (11 > 10)
    |
189 |         )
190 | 
191 |     def forward(
    |         ^^^^^^^ C901
192 |         self,
193 |         batched_data,
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:191:9: D102 Missing docstring in public method
    |
189 |         )
190 | 
191 |     def forward(
    |         ^^^^^^^ D102
192 |         self,
193 |         batched_data,
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:195:9: FBT001 Boolean-typed positional argument in function definition
    |
193 |         batched_data,
194 |         perturb=None,
195 |         last_state_only: bool = False,
    |         ^^^^^^^^^^^^^^^ FBT001
196 |         token_embeddings: Optional[torch.Tensor] = None,
197 |         attn_mask: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:195:9: FBT002 Boolean default positional argument in function definition
    |
193 |         batched_data,
194 |         perturb=None,
195 |         last_state_only: bool = False,
    |         ^^^^^^^^^^^^^^^ FBT002
196 |         token_embeddings: Optional[torch.Tensor] = None,
197 |         attn_mask: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:196:27: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
194 |         perturb=None,
195 |         last_state_only: bool = False,
196 |         token_embeddings: Optional[torch.Tensor] = None,
    |                           ^^^^^^^^ FA100
197 |         attn_mask: Optional[torch.Tensor] = None,
198 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:197:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
195 |         last_state_only: bool = False,
196 |         token_embeddings: Optional[torch.Tensor] = None,
197 |         attn_mask: Optional[torch.Tensor] = None,
    |                    ^^^^^^^^ FA100
198 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
199 |         is_tpu = False
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:198:10: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
196 |         token_embeddings: Optional[torch.Tensor] = None,
197 |         attn_mask: Optional[torch.Tensor] = None,
198 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
    |          ^^^^^ FA100
199 |         is_tpu = False
200 |         # compute padding mask. This is needed for multi-head attention
    |

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:199:9: F841 Local variable `is_tpu` is assigned to but never used
    |
197 |         attn_mask: Optional[torch.Tensor] = None,
198 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
199 |         is_tpu = False
    |         ^^^^^^ F841
200 |         # compute padding mask. This is needed for multi-head attention
201 |         data_x = batched_data["x"]
    |
    = help: Remove assignment to unused variable `is_tpu`

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:216:13: ERA001 Found commented-out code
    |
215 |         if perturb is not None:
216 |             #ic(torch.mean(torch.abs(x[:, 1, :])))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
217 |             #ic(torch.mean(torch.abs(perturb)))
218 |             x[:, 1:, :] += perturb
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:217:13: ERA001 Found commented-out code
    |
215 |         if perturb is not None:
216 |             #ic(torch.mean(torch.abs(x[:, 1, :])))
217 |             #ic(torch.mean(torch.abs(perturb)))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
218 |             x[:, 1:, :] += perturb
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\graphormer_graph_encoder.py:261:9: RET505 Unnecessary `else` after `return` statement
    |
259 |         if self.traceable:
260 |             return torch.stack(inner_states), graph_rep
261 |         else:
    |         ^^^^ RET505
262 |             return inner_states, graph_rep
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\Graphormer\layers\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\Graphormer\layers\__init__.py:4:45: F401 `.graphormer_graph_encoder_layer.GraphormerGraphEncoderLayer` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | # Licensed under the MIT License.
3 | 
4 | from .graphormer_graph_encoder_layer import GraphormerGraphEncoderLayer
  |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ F401
5 | from .graphormer_layers import GraphAttnBias, GraphNodeFeature
6 | from .multihead_attention import MultiheadAttention
  |
  = help: Use an explicit re-export: `GraphormerGraphEncoderLayer as GraphormerGraphEncoderLayer`

src\stk_search\geom3d\models\Graphormer\layers\__init__.py:5:32: F401 `.graphormer_layers.GraphAttnBias` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
4 | from .graphormer_graph_encoder_layer import GraphormerGraphEncoderLayer
5 | from .graphormer_layers import GraphAttnBias, GraphNodeFeature
  |                                ^^^^^^^^^^^^^ F401
6 | from .multihead_attention import MultiheadAttention
  |
  = help: Use an explicit re-export: `GraphAttnBias as GraphAttnBias`

src\stk_search\geom3d\models\Graphormer\layers\__init__.py:5:47: F401 `.graphormer_layers.GraphNodeFeature` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
4 | from .graphormer_graph_encoder_layer import GraphormerGraphEncoderLayer
5 | from .graphormer_layers import GraphAttnBias, GraphNodeFeature
  |                                               ^^^^^^^^^^^^^^^^ F401
6 | from .multihead_attention import MultiheadAttention
  |
  = help: Use an explicit re-export: `GraphNodeFeature as GraphNodeFeature`

src\stk_search\geom3d\models\Graphormer\layers\__init__.py:6:34: F401 `.multihead_attention.MultiheadAttention` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
4 | from .graphormer_graph_encoder_layer import GraphormerGraphEncoderLayer
5 | from .graphormer_layers import GraphAttnBias, GraphNodeFeature
6 | from .multihead_attention import MultiheadAttention
  |                                  ^^^^^^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `MultiheadAttention as MultiheadAttention`

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:23:7: D101 Missing docstring in public class
   |
23 | class GraphormerGraphEncoderLayer(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D101
24 |     def __init__(
25 |         self,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:24:9: PLR0913 Too many arguments in function definition (12 > 5)
   |
23 | class GraphormerGraphEncoderLayer(nn.Module):
24 |     def __init__(
   |         ^^^^^^^^ PLR0913
25 |         self,
26 |         embedding_dim: int = 768,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:24:9: D107 Missing docstring in `__init__`
   |
23 | class GraphormerGraphEncoderLayer(nn.Module):
24 |     def __init__(
   |         ^^^^^^^^ D107
25 |         self,
26 |         embedding_dim: int = 768,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:33:9: FBT001 Boolean-typed positional argument in function definition
   |
31 |         activation_dropout: float = 0.1,
32 |         activation_fn: str = "relu",
33 |         export: bool = False,
   |         ^^^^^^ FBT001
34 |         q_noise: float = 0.0,
35 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:33:9: FBT002 Boolean default positional argument in function definition
   |
31 |         activation_dropout: float = 0.1,
32 |         activation_fn: str = "relu",
33 |         export: bool = False,
   |         ^^^^^^ FBT002
34 |         q_noise: float = 0.0,
35 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:36:18: RUF013 PEP 484 prohibits implicit `Optional`
   |
34 |         q_noise: float = 0.0,
35 |         qn_block_size: int = 8,
36 |         init_fn: Callable = None,
   |                  ^^^^^^^^ RUF013
37 |         pre_layernorm: bool = False,
38 |     ) -> None:
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:37:9: FBT001 Boolean-typed positional argument in function definition
   |
35 |         qn_block_size: int = 8,
36 |         init_fn: Callable = None,
37 |         pre_layernorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT001
38 |     ) -> None:
39 |         super().__init__()
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:37:9: FBT002 Boolean default positional argument in function definition
   |
35 |         qn_block_size: int = 8,
36 |         init_fn: Callable = None,
37 |         pre_layernorm: bool = False,
   |         ^^^^^^^^^^^^^ FBT002
38 |     ) -> None:
39 |         super().__init__()
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:89:9: D102 Missing docstring in public method
   |
87 |         self.final_layer_norm = LayerNorm(self.embedding_dim, export=export)
88 | 
89 |     def build_fc1(self, input_dim, output_dim, q_noise, qn_block_size):
   |         ^^^^^^^^^ D102
90 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:92:9: D102 Missing docstring in public method
   |
90 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
91 | 
92 |     def build_fc2(self, input_dim, output_dim, q_noise, qn_block_size):
   |         ^^^^^^^^^ D102
93 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:95:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
93 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
94 | 
95 |     def build_self_attention(
   |         ^^^^^^^^^^^^^^^^^^^^ PLR0913
96 |         self,
97 |         embed_dim,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:95:9: D102 Missing docstring in public method
   |
93 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
94 | 
95 |     def build_self_attention(
   |         ^^^^^^^^^^^^^^^^^^^^ D102
96 |         self,
97 |         embed_dim,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:100:9: ARG002 Unused method argument: `self_attention`
    |
 98 |         num_attention_heads,
 99 |         dropout,
100 |         self_attention,
    |         ^^^^^^^^^^^^^^ ARG002
101 |         q_noise,
102 |         qn_block_size,
    |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:116:25: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
114 |         self,
115 |         x: torch.Tensor,
116 |         self_attn_bias: Optional[torch.Tensor] = None,
    |                         ^^^^^^^^ FA100
117 |         self_attn_mask: Optional[torch.Tensor] = None,
118 |         self_attn_padding_mask: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:117:25: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
115 |         x: torch.Tensor,
116 |         self_attn_bias: Optional[torch.Tensor] = None,
117 |         self_attn_mask: Optional[torch.Tensor] = None,
    |                         ^^^^^^^^ FA100
118 |         self_attn_padding_mask: Optional[torch.Tensor] = None,
119 |     ):
    |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:118:33: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
116 |         self_attn_bias: Optional[torch.Tensor] = None,
117 |         self_attn_mask: Optional[torch.Tensor] = None,
118 |         self_attn_padding_mask: Optional[torch.Tensor] = None,
    |                                 ^^^^^^^^ FA100
119 |     ):
120 |         """LayerNorm is applied either before or after the self-attention/ffn
    |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_graph_encoder_layer.py:120:9: D205 1 blank line required between summary line and description
    |
118 |           self_attn_padding_mask: Optional[torch.Tensor] = None,
119 |       ):
120 |           """LayerNorm is applied either before or after the self-attention/ffn
    |  _________^
121 | |         modules similar to the original Transformer implementation.
122 | |         """
    | |___________^ D205
123 |           # x: T x B x C
124 |           residual = x
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:15:5: D103 Missing docstring in public function
   |
15 | def init_params(module, n_layers):
   |     ^^^^^^^^^^^ D103
16 |     if isinstance(module, nn.Linear):
17 |         module.weight.data.normal_(mean=0.0, std=0.02 / math.sqrt(n_layers))
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:25:5: D200 One-line docstring should fit on one line
   |
24 |   class GraphNodeFeature(nn.Module):
25 |       """Compute node features for each node in the graph.
   |  _____^
26 | |     """
   | |_______^ D200
27 |   
28 |       def __init__(
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:28:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
26 |     """
27 | 
28 |     def __init__(
   |         ^^^^^^^^ PLR0913
29 |         self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers
30 |     ):
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:28:9: ANN204 Missing return type annotation for special method `__init__`
   |
26 |     """
27 | 
28 |     def __init__(
   |         ^^^^^^^^ ANN204
29 |         self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers
30 |     ):
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:28:9: D107 Missing docstring in `__init__`
   |
26 |     """
27 | 
28 |     def __init__(
   |         ^^^^^^^^ D107
29 |         self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers
30 |     ):
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:31:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
29 |         self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers
30 |     ):
31 |         super(GraphNodeFeature, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
32 |         self.num_heads = num_heads
33 |         self.num_atoms = num_atoms
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:46:9: D102 Missing docstring in public method
   |
44 |         self.apply(lambda module: init_params(module, n_layers=n_layers))
45 | 
46 |     def forward(self, batched_data):
   |         ^^^^^^^ D102
47 |         x, in_degree, out_degree = (
48 |             batched_data["x"],
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:58:9: ERA001 Found commented-out code
   |
57 |         # if self.flag and perturb is not None:
58 |         #     node_feature += perturb
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
59 | 
60 |         node_feature = (
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:70:16: RET504 Unnecessary assignment to `graph_node_feature` before `return` statement
   |
68 |         graph_node_feature = torch.cat([graph_token_feature, node_feature], dim=1)
69 | 
70 |         return graph_node_feature
   |                ^^^^^^^^^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:74:5: D200 One-line docstring should fit on one line
   |
73 |   class GraphAttnBias(nn.Module):
74 |       """Compute attention bias for each head.
   |  _____^
75 | |     """
   | |_______^ D200
76 |   
77 |       def __init__(
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:77:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
75 |     """
76 | 
77 |     def __init__(
   |         ^^^^^^^^ PLR0913
78 |         self,
79 |         num_heads,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:77:9: ANN204 Missing return type annotation for special method `__init__`
   |
75 |     """
76 | 
77 |     def __init__(
   |         ^^^^^^^^ ANN204
78 |         self,
79 |         num_heads,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:77:9: D107 Missing docstring in `__init__`
   |
75 |     """
76 | 
77 |     def __init__(
   |         ^^^^^^^^ D107
78 |         self,
79 |         num_heads,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:80:9: ARG002 Unused method argument: `num_atoms`
   |
78 |         self,
79 |         num_heads,
80 |         num_atoms,
   |         ^^^^^^^^^ ARG002
81 |         num_edges,
82 |         num_spatial,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:84:9: ARG002 Unused method argument: `hidden_dim`
   |
82 |         num_spatial,
83 |         num_edge_dis,
84 |         hidden_dim,
   |         ^^^^^^^^^^ ARG002
85 |         edge_type,
86 |         multi_hop_max_dist,
   |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:89:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
87 |         n_layers,
88 |     ):
89 |         super(GraphAttnBias, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^ UP008
90 |         self.num_heads = num_heads
91 |         self.multi_hop_max_dist = multi_hop_max_dist
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:105:9: D102 Missing docstring in public method
    |
103 |         self.apply(lambda module: init_params(module, n_layers=n_layers))
104 | 
105 |     def forward(self, batched_data):
    |         ^^^^^^^ D102
106 |         attn_bias, spatial_pos, x = batched_data["attn_bias"], batched_data["spatial_pos"], batched_data["x"]
107 |         edge_input, attn_edge_type = batched_data["edge_input"], batched_data["attn_edge_type"]
    |

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:132:13: ERA001 Found commented-out code
    |
130 |                 spatial_pos_ = spatial_pos_.clamp(0, self.multi_hop_max_dist)
131 |                 edge_input = edge_input[:, :, :, :self.multi_hop_max_dist, :]
132 |             # [n_graph, n_node, n_node, max_dist, n_head]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
133 |             edge_input = self.edge_encoder(edge_input).mean(-2)
134 |             max_dist = edge_input.size(-2)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\layers\graphormer_layers.py:153:16: RET504 Unnecessary assignment to `graph_attn_bias` before `return` statement
    |
151 |         graph_attn_bias = graph_attn_bias + attn_bias.unsqueeze(1)  # reset
152 | 
153 |         return graph_attn_bias
    |                ^^^^^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:27:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
25 |     """
26 | 
27 |     def __init__(
   |         ^^^^^^^^ PLR0913
28 |         self,
29 |         embed_dim,
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 |     """
26 | 
27 |     def __init__(
   |         ^^^^^^^^ ANN204
28 |         self,
29 |         embed_dim,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:27:9: D107 Missing docstring in `__init__`
   |
25 |     """
26 | 
27 |     def __init__(
   |         ^^^^^^^^ D107
28 |         self,
29 |         embed_dim,
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:34:9: FBT002 Boolean default positional argument in function definition
   |
32 |         vdim=None,
33 |         dropout=0.0,
34 |         bias=True,
   |         ^^^^ FBT002
35 |         self_attention=False,
36 |         q_noise=0.0,
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:35:9: FBT002 Boolean default positional argument in function definition
   |
33 |         dropout=0.0,
34 |         bias=True,
35 |         self_attention=False,
   |         ^^^^^^^^^^^^^^ FBT002
36 |         q_noise=0.0,
37 |         qn_block_size=8,
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:51:9: S101 Use of `assert` detected
   |
50 |         self.head_dim = embed_dim // num_heads
51 |         assert (
   |         ^^^^^^ S101
52 |             self.head_dim * num_heads == self.embed_dim
53 |         ), "embed_dim must be divisible by num_heads"
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:58:9: S101 Use of `assert` detected
   |
56 |         self.self_attention = self_attention
57 | 
58 |         assert self.self_attention, "Only support self attention"
   |         ^^^^^^ S101
59 | 
60 |         assert not self.self_attention or self.qkv_same_dim, (
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:60:9: S101 Use of `assert` detected
   |
58 |         assert self.self_attention, "Only support self attention"
59 | 
60 |         assert not self.self_attention or self.qkv_same_dim, (
   |         ^^^^^^ S101
61 |             "Self-attention requires query, key and " "value to be of the same size"
62 |         )
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:82:9: D102 Missing docstring in public method
   |
80 |         self.onnx_trace = False
81 | 
82 |     def prepare_for_onnx_export_(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
83 |         raise NotImplementedError
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:85:9: D102 Missing docstring in public method
   |
83 |         raise NotImplementedError
84 | 
85 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
86 |         if self.qkv_same_dim:
87 |             # Empirically observed the convergence to be much better with
   |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:101:9: C901 `forward` is too complex (14 > 10)
    |
 99 |             nn.init.constant_(self.out_proj.bias, 0.0)
100 | 
101 |     def forward(
    |         ^^^^^^^ C901
102 |         self,
103 |         query,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:101:9: PLR0913 Too many arguments in function definition (9 > 5)
    |
 99 |             nn.init.constant_(self.out_proj.bias, 0.0)
100 | 
101 |     def forward(
    |         ^^^^^^^ PLR0913
102 |         self,
103 |         query,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:101:9: PLR0912 Too many branches (13 > 12)
    |
 99 |             nn.init.constant_(self.out_proj.bias, 0.0)
100 | 
101 |     def forward(
    |         ^^^^^^^ PLR0912
102 |         self,
103 |         query,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:101:9: PLR0915 Too many statements (55 > 50)
    |
 99 |             nn.init.constant_(self.out_proj.bias, 0.0)
100 | 
101 |     def forward(
    |         ^^^^^^^ PLR0915
102 |         self,
103 |         query,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:101:9: D417 Missing argument descriptions in the docstring for `forward`: `attn_bias`, `key`, `query`, `value`
    |
 99 |             nn.init.constant_(self.out_proj.bias, 0.0)
100 | 
101 |     def forward(
    |         ^^^^^^^ D417
102 |         self,
103 |         query,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:104:14: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
102 |         self,
103 |         query,
104 |         key: Optional[Tensor],
    |              ^^^^^^^^ FA100
105 |         value: Optional[Tensor],
106 |         attn_bias: Optional[Tensor],
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:105:16: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
103 |         query,
104 |         key: Optional[Tensor],
105 |         value: Optional[Tensor],
    |                ^^^^^^^^ FA100
106 |         attn_bias: Optional[Tensor],
107 |         key_padding_mask: Optional[Tensor] = None,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:106:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
104 |         key: Optional[Tensor],
105 |         value: Optional[Tensor],
106 |         attn_bias: Optional[Tensor],
    |                    ^^^^^^^^ FA100
107 |         key_padding_mask: Optional[Tensor] = None,
108 |         need_weights: bool = True,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:107:27: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
105 |         value: Optional[Tensor],
106 |         attn_bias: Optional[Tensor],
107 |         key_padding_mask: Optional[Tensor] = None,
    |                           ^^^^^^^^ FA100
108 |         need_weights: bool = True,
109 |         attn_mask: Optional[Tensor] = None,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:108:9: FBT001 Boolean-typed positional argument in function definition
    |
106 |         attn_bias: Optional[Tensor],
107 |         key_padding_mask: Optional[Tensor] = None,
108 |         need_weights: bool = True,
    |         ^^^^^^^^^^^^ FBT001
109 |         attn_mask: Optional[Tensor] = None,
110 |         before_softmax: bool = False,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:108:9: FBT002 Boolean default positional argument in function definition
    |
106 |         attn_bias: Optional[Tensor],
107 |         key_padding_mask: Optional[Tensor] = None,
108 |         need_weights: bool = True,
    |         ^^^^^^^^^^^^ FBT002
109 |         attn_mask: Optional[Tensor] = None,
110 |         before_softmax: bool = False,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:109:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
107 |         key_padding_mask: Optional[Tensor] = None,
108 |         need_weights: bool = True,
109 |         attn_mask: Optional[Tensor] = None,
    |                    ^^^^^^^^ FA100
110 |         before_softmax: bool = False,
111 |         need_head_weights: bool = False,
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:110:9: FBT001 Boolean-typed positional argument in function definition
    |
108 |         need_weights: bool = True,
109 |         attn_mask: Optional[Tensor] = None,
110 |         before_softmax: bool = False,
    |         ^^^^^^^^^^^^^^ FBT001
111 |         need_head_weights: bool = False,
112 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:110:9: FBT002 Boolean default positional argument in function definition
    |
108 |         need_weights: bool = True,
109 |         attn_mask: Optional[Tensor] = None,
110 |         before_softmax: bool = False,
    |         ^^^^^^^^^^^^^^ FBT002
111 |         need_head_weights: bool = False,
112 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:111:9: FBT001 Boolean-typed positional argument in function definition
    |
109 |         attn_mask: Optional[Tensor] = None,
110 |         before_softmax: bool = False,
111 |         need_head_weights: bool = False,
    |         ^^^^^^^^^^^^^^^^^ FBT001
112 |     ) -> Tuple[Tensor, Optional[Tensor]]:
113 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:111:9: FBT002 Boolean default positional argument in function definition
    |
109 |         attn_mask: Optional[Tensor] = None,
110 |         before_softmax: bool = False,
111 |         need_head_weights: bool = False,
    |         ^^^^^^^^^^^^^^^^^ FBT002
112 |     ) -> Tuple[Tensor, Optional[Tensor]]:
113 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:112:10: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
110 |         before_softmax: bool = False,
111 |         need_head_weights: bool = False,
112 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |          ^^^^^ FA100
113 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:112:24: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
110 |         before_softmax: bool = False,
111 |         need_head_weights: bool = False,
112 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |                        ^^^^^^^^ FA100
113 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:113:9: D400 First line should end with a period
    |
111 |           need_head_weights: bool = False,
112 |       ) -> Tuple[Tensor, Optional[Tensor]]:
113 |           """Input shape: Time x Batch x Channel
    |  _________^
114 | | 
115 | |         Args:
116 | |         ----
117 | |             key_padding_mask (ByteTensor, optional): mask to exclude
118 | |                 keys that are pads, of shape `(batch, src_len)`, where
119 | |                 padding elements are indicated by 1s.
120 | |             need_weights (bool, optional): return the attention weights,
121 | |                 averaged over heads (default: False).
122 | |             attn_mask (ByteTensor, optional): typically used to
123 | |                 implement causal attention, where the mask prevents the
124 | |                 attention from looking forward in time (default: None).
125 | |             before_softmax (bool, optional): return the raw attention
126 | |                 weights and values before the attention softmax.
127 | |             need_head_weights (bool, optional): return the attention
128 | |                 weights for each head. Implies *need_weights*. Default:
129 | |                 return the average attention weights over all heads.
130 | | 
131 | |         """
    | |___________^ D400
132 |           if need_head_weights:
133 |               need_weights = True
    |
    = help: Add period

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:113:9: D415 First line should end with a period, question mark, or exclamation point
    |
111 |           need_head_weights: bool = False,
112 |       ) -> Tuple[Tensor, Optional[Tensor]]:
113 |           """Input shape: Time x Batch x Channel
    |  _________^
114 | | 
115 | |         Args:
116 | |         ----
117 | |             key_padding_mask (ByteTensor, optional): mask to exclude
118 | |                 keys that are pads, of shape `(batch, src_len)`, where
119 | |                 padding elements are indicated by 1s.
120 | |             need_weights (bool, optional): return the attention weights,
121 | |                 averaged over heads (default: False).
122 | |             attn_mask (ByteTensor, optional): typically used to
123 | |                 implement causal attention, where the mask prevents the
124 | |                 attention from looking forward in time (default: None).
125 | |             before_softmax (bool, optional): return the raw attention
126 | |                 weights and values before the attention softmax.
127 | |             need_head_weights (bool, optional): return the attention
128 | |                 weights for each head. Implies *need_weights*. Default:
129 | |                 return the average attention weights over all heads.
130 | | 
131 | |         """
    | |___________^ D415
132 |           if need_head_weights:
133 |               need_weights = True
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:137:9: S101 Use of `assert` detected
    |
135 |         tgt_len, bsz, embed_dim = query.size()
136 |         src_len = tgt_len
137 |         assert embed_dim == self.embed_dim, f"query dim {embed_dim} != {self.embed_dim}"
    |         ^^^^^^ S101
138 |         assert list(query.size()) == [tgt_len, bsz, embed_dim]
139 |         if key is not None:
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:138:9: S101 Use of `assert` detected
    |
136 |         src_len = tgt_len
137 |         assert embed_dim == self.embed_dim, f"query dim {embed_dim} != {self.embed_dim}"
138 |         assert list(query.size()) == [tgt_len, bsz, embed_dim]
    |         ^^^^^^ S101
139 |         if key is not None:
140 |             src_len, key_bsz, _ = key.size()
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:142:17: S101 Use of `assert` detected
    |
140 |             src_len, key_bsz, _ = key.size()
141 |             if not torch.jit.is_scripting():
142 |                 assert key_bsz == bsz
    |                 ^^^^^^ S101
143 |                 assert value is not None
144 |                 assert src_len, bsz == value.shape[:2]
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:143:17: S101 Use of `assert` detected
    |
141 |             if not torch.jit.is_scripting():
142 |                 assert key_bsz == bsz
143 |                 assert value is not None
    |                 ^^^^^^ S101
144 |                 assert src_len, bsz == value.shape[:2]
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:144:17: S101 Use of `assert` detected
    |
142 |                 assert key_bsz == bsz
143 |                 assert value is not None
144 |                 assert src_len, bsz == value.shape[:2]
    |                 ^^^^^^ S101
145 | 
146 |         q = self.q_proj(query)
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:169:9: S101 Use of `assert` detected
    |
167 |             )
168 | 
169 |         assert k is not None
    |         ^^^^^^ S101
170 |         assert k.size(1) == src_len
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:170:9: S101 Use of `assert` detected
    |
169 |         assert k is not None
170 |         assert k.size(1) == src_len
    |         ^^^^^^ S101
171 | 
172 |         # This is part of a workaround to get around fork/join parallelism
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:178:13: S101 Use of `assert` detected
    |
177 |         if key_padding_mask is not None:
178 |             assert key_padding_mask.size(0) == bsz
    |             ^^^^^^ S101
179 |             assert key_padding_mask.size(1) == src_len
180 |         attn_weights = torch.bmm(q, k.transpose(1, 2))
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:179:13: S101 Use of `assert` detected
    |
177 |         if key_padding_mask is not None:
178 |             assert key_padding_mask.size(0) == bsz
179 |             assert key_padding_mask.size(1) == src_len
    |             ^^^^^^ S101
180 |         attn_weights = torch.bmm(q, k.transpose(1, 2))
181 |         attn_weights = self.apply_sparse_mask(attn_weights, tgt_len, src_len, bsz)
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:183:9: S101 Use of `assert` detected
    |
181 |         attn_weights = self.apply_sparse_mask(attn_weights, tgt_len, src_len, bsz)
182 | 
183 |         assert list(attn_weights.size()) == [bsz * self.num_heads, tgt_len, src_len]
    |         ^^^^^^ S101
184 | 
185 |         if attn_bias is not None:
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:210:9: S101 Use of `assert` detected
    |
208 |         attn_probs = self.dropout_module(attn_weights)
209 | 
210 |         assert v is not None
    |         ^^^^^^ S101
211 |         attn = torch.bmm(attn_probs, v)
212 |         assert list(attn.size()) == [bsz * self.num_heads, tgt_len, self.head_dim]
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:212:9: S101 Use of `assert` detected
    |
210 |         assert v is not None
211 |         attn = torch.bmm(attn_probs, v)
212 |         assert list(attn.size()) == [bsz * self.num_heads, tgt_len, self.head_dim]
    |         ^^^^^^ S101
213 | 
214 |         attn = attn.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:217:23: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
215 |         attn = self.out_proj(attn)
216 | 
217 |         attn_weights: Optional[Tensor] = None
    |                       ^^^^^^^^ FA100
218 |         if need_weights:
219 |             attn_weights = attn_weights_float.view(
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:228:9: D102 Missing docstring in public method
    |
226 |         return attn, attn_weights
227 | 
228 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |         ^^^^^^^^^^^^^^^^^ D102
229 |         return attn_weights
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:228:47: ARG002 Unused method argument: `tgt_len`
    |
226 |         return attn, attn_weights
227 | 
228 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |                                               ^^^^^^^ ARG002
229 |         return attn_weights
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:228:61: ARG002 Unused method argument: `src_len`
    |
226 |         return attn, attn_weights
227 | 
228 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |                                                             ^^^^^^^ ARG002
229 |         return attn_weights
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:228:75: ARG002 Unused method argument: `bsz`
    |
226 |         return attn, attn_weights
227 | 
228 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |                                                                           ^^^ ARG002
229 |         return attn_weights
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:231:9: D102 Missing docstring in public method
    |
229 |         return attn_weights
230 | 
231 |     def upgrade_state_dict_named(self, state_dict, name):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
232 |         prefix = name + "." if name != "" else ""
233 |         items_to_add = {}
    |

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:235:13: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
233 |         items_to_add = {}
234 |         keys_to_remove = []
235 |         for k in state_dict.keys():
    |             ^^^^^^^^^^^^^^^^^^^^^^ SIM118
236 |             if k.endswith(prefix + "in_proj_weight"):
237 |                 # in_proj_weight used to be q + k + v with same dimensions
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\models\Graphormer\layers\multihead_attention.py:246:20: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
245 |                 k_bias = prefix + "in_proj_bias"
246 |                 if k_bias in state_dict.keys():
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
247 |                     dim = int(state_dict[k].shape[0] / 3)
248 |                     items_to_add[prefix + "q_proj.bias"] = state_dict[k_bias][:dim]
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\models\Graphormer\modules\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\Graphormer\modules\__init__.py:1:30: F401 `.fairseq_dropout.FairseqDropout` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .fairseq_dropout import FairseqDropout
  |                              ^^^^^^^^^^^^^^ F401
2 | from .layer_drop import LayerDropModuleList
3 | from .layer_norm import LayerNorm
  |
  = help: Use an explicit re-export: `FairseqDropout as FairseqDropout`

src\stk_search\geom3d\models\Graphormer\modules\__init__.py:2:25: F401 `.layer_drop.LayerDropModuleList` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .fairseq_dropout import FairseqDropout
2 | from .layer_drop import LayerDropModuleList
  |                         ^^^^^^^^^^^^^^^^^^^ F401
3 | from .layer_norm import LayerNorm
4 | from .quant_noise import quant_noise
  |
  = help: Use an explicit re-export: `LayerDropModuleList as LayerDropModuleList`

src\stk_search\geom3d\models\Graphormer\modules\__init__.py:3:25: F401 `.layer_norm.LayerNorm` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .fairseq_dropout import FairseqDropout
2 | from .layer_drop import LayerDropModuleList
3 | from .layer_norm import LayerNorm
  |                         ^^^^^^^^^ F401
4 | from .quant_noise import quant_noise
  |
  = help: Use an explicit re-export: `LayerNorm as LayerNorm`

src\stk_search\geom3d\models\Graphormer\modules\__init__.py:4:26: F401 `.quant_noise.quant_noise` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | from .layer_drop import LayerDropModuleList
3 | from .layer_norm import LayerNorm
4 | from .quant_noise import quant_noise
  |                          ^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `quant_noise as quant_noise`

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:3:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | from typing import List, Optional
2 | 
3 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
4 | from torch import nn
  |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:7:7: D101 Missing docstring in public class
  |
7 | class FairseqDropout(nn.Module):
  |       ^^^^^^^^^^^^^^ D101
8 |     def __init__(self, p, module_name=None):
9 |         super().__init__()
  |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:8:9: ANN204 Missing return type annotation for special method `__init__`
   |
 7 | class FairseqDropout(nn.Module):
 8 |     def __init__(self, p, module_name=None):
   |         ^^^^^^^^ ANN204
 9 |         super().__init__()
10 |         self.p = p
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:8:9: D107 Missing docstring in `__init__`
   |
 7 | class FairseqDropout(nn.Module):
 8 |     def __init__(self, p, module_name=None):
   |         ^^^^^^^^ D107
 9 |         super().__init__()
10 |         self.p = p
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:14:9: D102 Missing docstring in public method
   |
12 |         self.apply_during_inference = False
13 | 
14 |     def forward(self, x, inplace: bool = False):
   |         ^^^^^^^ D102
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:14:26: FBT001 Boolean-typed positional argument in function definition
   |
12 |         self.apply_during_inference = False
13 | 
14 |     def forward(self, x, inplace: bool = False):
   |                          ^^^^^^^ FBT001
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:14:26: FBT002 Boolean default positional argument in function definition
   |
12 |         self.apply_during_inference = False
13 | 
14 |     def forward(self, x, inplace: bool = False):
   |                          ^^^^^^^ FBT002
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:17:9: RET505 Unnecessary `else` after `return` statement
   |
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
17 |         else:
   |         ^^^^ RET505
18 |             return x
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:20:9: D102 Missing docstring in public method
   |
18 |             return x
19 | 
20 |     def make_generation_fast_(
   |         ^^^^^^^^^^^^^^^^^^^^^ D102
21 |         self,
22 |         name: str,
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:22:9: ARG002 Unused method argument: `name`
   |
20 |     def make_generation_fast_(
21 |         self,
22 |         name: str,
   |         ^^^^ ARG002
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:23:9: FBT001 Boolean-typed positional argument in function definition
   |
21 |         self,
22 |         name: str,
23 |         retain_dropout: bool = False,
   |         ^^^^^^^^^^^^^^ FBT001
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:23:9: FBT002 Boolean default positional argument in function definition
   |
21 |         self,
22 |         name: str,
23 |         retain_dropout: bool = False,
   |         ^^^^^^^^^^^^^^ FBT002
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:24:33: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
22 |         name: str,
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
   |                                 ^^^^^^^^ FA100
25 |         **kwargs
26 |     ):
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:24:42: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
22 |         name: str,
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
   |                                          ^^^^ FA100
25 |         **kwargs
26 |     ):
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:25:9: ANN003 Missing type annotation for `**kwargs`
   |
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |         ^^^^^^^^ ANN003
26 |     ):
27 |         if retain_dropout:
   |

src\stk_search\geom3d\models\Graphormer\modules\fairseq_dropout.py:25:11: ARG002 Unused method argument: `kwargs`
   |
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |           ^^^^^^ ARG002
26 |     ):
27 |         if retain_dropout:
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:7:5: D205 1 blank line required between summary line and description
   |
 6 |   class LayerDropModuleList(nn.ModuleList):
 7 |       """A LayerDrop implementation based on :class:`torch.nn.ModuleList`.
   |  _____^
 8 | |     We refresh the choice of which layers to drop every time we iterate
 9 | |     over the LayerDropModuleList instance. During evaluation we always
10 | |     iterate over all layers.
11 | |     Usage::
12 | |         layers = LayerDropList(p=0.5, modules=[layer1, layer2, layer3])
13 | |         for layer in layers:  # this might iterate over layers 1 and 3
14 | |             x = layer(x)
15 | |         for layer in layers:  # this might iterate over all layers
16 | |             x = layer(x)
17 | |         for layer in layers:  # this might not iterate over any layers
18 | |             x = layer(x)
19 | | 
20 | |     Args:
21 | |     ----
22 | |         p (float): probability of dropping out each layer
23 | |         modules (iterable, optional): an iterable of modules to add
24 | | 
25 | |     """
   | |_______^ D205
26 |   
27 |       def __init__(self, p, modules=None):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:7:5: D400 First line should end with a period
   |
 6 |   class LayerDropModuleList(nn.ModuleList):
 7 |       """A LayerDrop implementation based on :class:`torch.nn.ModuleList`.
   |  _____^
 8 | |     We refresh the choice of which layers to drop every time we iterate
 9 | |     over the LayerDropModuleList instance. During evaluation we always
10 | |     iterate over all layers.
11 | |     Usage::
12 | |         layers = LayerDropList(p=0.5, modules=[layer1, layer2, layer3])
13 | |         for layer in layers:  # this might iterate over layers 1 and 3
14 | |             x = layer(x)
15 | |         for layer in layers:  # this might iterate over all layers
16 | |             x = layer(x)
17 | |         for layer in layers:  # this might not iterate over any layers
18 | |             x = layer(x)
19 | | 
20 | |     Args:
21 | |     ----
22 | |         p (float): probability of dropping out each layer
23 | |         modules (iterable, optional): an iterable of modules to add
24 | | 
25 | |     """
   | |_______^ D400
26 |   
27 |       def __init__(self, p, modules=None):
   |
   = help: Add period

src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:7:5: D415 First line should end with a period, question mark, or exclamation point
   |
 6 |   class LayerDropModuleList(nn.ModuleList):
 7 |       """A LayerDrop implementation based on :class:`torch.nn.ModuleList`.
   |  _____^
 8 | |     We refresh the choice of which layers to drop every time we iterate
 9 | |     over the LayerDropModuleList instance. During evaluation we always
10 | |     iterate over all layers.
11 | |     Usage::
12 | |         layers = LayerDropList(p=0.5, modules=[layer1, layer2, layer3])
13 | |         for layer in layers:  # this might iterate over layers 1 and 3
14 | |             x = layer(x)
15 | |         for layer in layers:  # this might iterate over all layers
16 | |             x = layer(x)
17 | |         for layer in layers:  # this might not iterate over any layers
18 | |             x = layer(x)
19 | | 
20 | |     Args:
21 | |     ----
22 | |         p (float): probability of dropping out each layer
23 | |         modules (iterable, optional): an iterable of modules to add
24 | | 
25 | |     """
   | |_______^ D415
26 |   
27 |       def __init__(self, p, modules=None):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, p, modules=None):
   |         ^^^^^^^^ ANN204
28 |         super().__init__(modules)
29 |         self.p = p
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:27:9: D107 Missing docstring in `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, p, modules=None):
   |         ^^^^^^^^ D107
28 |         super().__init__(modules)
29 |         self.p = p
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:31:9: ANN204 Missing return type annotation for special method `__iter__`
   |
29 |         self.p = p
30 | 
31 |     def __iter__(self):
   |         ^^^^^^^^ ANN204
32 |         dropout_probs = torch.empty(len(self)).uniform_()
33 |         for i, m in enumerate(super().__iter__()):
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\Graphormer\modules\layer_drop.py:31:9: D105 Missing docstring in magic method
   |
29 |         self.p = p
30 | 
31 |     def __iter__(self):
   |         ^^^^^^^^ D105
32 |         dropout_probs = torch.empty(len(self)).uniform_()
33 |         for i, m in enumerate(super().__iter__()):
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:9:11: D101 Missing docstring in public class
   |
 7 |     has_fused_layernorm = True
 8 | 
 9 |     class FusedLayerNorm(_FusedLayerNorm):
   |           ^^^^^^^^^^^^^^ D101
10 |         @torch.jit.unused
11 |         def forward(self, x):
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:11:13: D102 Missing docstring in public method
   |
 9 |     class FusedLayerNorm(_FusedLayerNorm):
10 |         @torch.jit.unused
11 |         def forward(self, x):
   |             ^^^^^^^ D102
12 |             if not x.is_cuda:
13 |                 return super().forward(x)
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:14:13: RET505 Unnecessary `else` after `return` statement
   |
12 |             if not x.is_cuda:
13 |                 return super().forward(x)
14 |             else:
   |             ^^^^ RET505
15 |                 with torch.cuda.device(x.device):
16 |                     return super().forward(x)
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:22:5: N802 Function name `LayerNorm` should be lowercase
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |     ^^^^^^^^^ N802
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:22:5: D103 Missing docstring in public function
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |     ^^^^^^^^^ D103
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:22:43: FBT002 Boolean default positional argument in function definition
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |                                           ^^^^^^^^^^^^^^^^^^ FBT002
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\Graphormer\modules\layer_norm.py:22:68: FBT002 Boolean default positional argument in function definition
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |                                                                    ^^^^^^ FBT002
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:7:5: D205 1 blank line required between summary line and description
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D205
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:7:5: D400 First line should end with a period
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D400
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |
   = help: Add period

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:7:5: D401 First line of docstring should be in imperative mood: "Wraps modules and applies quantization noise to the weights for"
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D401
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:7:5: D415 First line should end with a period, question mark, or exclamation point
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D415
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:27:5: S101 Use of `assert` detected
   |
26 |     # supported modules
27 |     assert isinstance(module, (nn.Linear, nn.Embedding, nn.Conv2d))
   |     ^^^^^^ S101
28 | 
29 |     # test whether module.weight has the right sizes wrt block_size
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:30:37: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
   |
29 |     # test whether module.weight has the right sizes wrt block_size
30 |     is_conv = module.weight.ndim == 4
   |                                     ^ PLR2004
31 | 
32 |     # 2D matrix
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:34:9: S101 Use of `assert` detected
   |
32 |     # 2D matrix
33 |     if not is_conv:
34 |         assert (
   |         ^^^^^^ S101
35 |             module.weight.size(1) % block_size == 0
36 |         ), "Input features must be a multiple of block sizes"
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:40:9: S101 Use of `assert` detected
   |
38 |     # 4D matrix
39 |     elif module.kernel_size == (1, 1):
40 |         assert (
   |         ^^^^^^ S101
41 |             module.in_channels % block_size == 0
42 |         ), "Input channels must be a multiple of block sizes"
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:46:9: S101 Use of `assert` detected
   |
44 |     else:
45 |         k = module.kernel_size[0] * module.kernel_size[1]
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
   |         ^^^^^^ S101
47 | 
48 |     def _forward_pre_hook(mod, input):
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:48:9: ANN202 Missing return type annotation for private function `_forward_pre_hook`
   |
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
47 | 
48 |     def _forward_pre_hook(mod, input):
   |         ^^^^^^^^^^^^^^^^^ ANN202
49 |         # no noise for evaluation
50 |         if mod.training:
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:48:32: A002 Argument `input` is shadowing a Python builtin
   |
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
47 | 
48 |     def _forward_pre_hook(mod, input):
   |                                ^^^^^ A002
49 |         # no noise for evaluation
50 |         if mod.training:
   |

src\stk_search\geom3d\models\Graphormer\modules\quant_noise.py:48:32: ARG001 Unused function argument: `input`
   |
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
47 | 
48 |     def _forward_pre_hook(mod, input):
   |                                ^^^^^ ARG001
49 |         # no noise for evaluation
50 |         if mod.training:
   |

src\stk_search\geom3d\models\Graphormer\modules\utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\Graphormer\modules\utils.py:5:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
4 | import torch
5 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
  |

src\stk_search\geom3d\models\Graphormer\modules\utils.py:8:5: D103 Missing docstring in public function
   |
 8 | def softmax(x, dim: int, onnx_trace: bool = False):
   |     ^^^^^^^ D103
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
   |

src\stk_search\geom3d\models\Graphormer\modules\utils.py:8:26: FBT001 Boolean-typed positional argument in function definition
   |
 8 | def softmax(x, dim: int, onnx_trace: bool = False):
   |                          ^^^^^^^^^^ FBT001
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
   |

src\stk_search\geom3d\models\Graphormer\modules\utils.py:8:26: FBT002 Boolean default positional argument in function definition
   |
 8 | def softmax(x, dim: int, onnx_trace: bool = False):
   |                          ^^^^^^^^^^ FBT002
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
   |

src\stk_search\geom3d\models\Graphormer\modules\utils.py:11:5: RET505 Unnecessary `else` after `return` statement
   |
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
11 |     else:
   |     ^^^^ RET505
12 |         return F.softmax(x, dim=dim, dtype=torch.float32)
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\Graphormer\modules\utils.py:16:5: D400 First line should end with a period
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
17 |     # from fairseq.modules import gelu, gelu_accurate
   |
   = help: Add period

src\stk_search\geom3d\models\Graphormer\modules\utils.py:16:5: D401 First line of docstring should be in imperative mood: "Returns the activation function corresponding to `activation`"
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
17 |     # from fairseq.modules import gelu, gelu_accurate
   |

src\stk_search\geom3d\models\Graphormer\modules\utils.py:16:5: D415 First line should end with a period, question mark, or exclamation point
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
17 |     # from fairseq.modules import gelu, gelu_accurate
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\Graphormer\modules\utils.py:17:5: ERA001 Found commented-out code
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
17 |     # from fairseq.modules import gelu, gelu_accurate
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
18 | 
19 |     if activation == "relu":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:21:5: ERA001 Found commented-out code
   |
19 |     if activation == "relu":
20 |         return F.relu
21 |     # elif activation == "relu_squared":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
22 |     #     return relu_squared
23 |     # elif activation == "gelu":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:22:5: ERA001 Found commented-out code
   |
20 |         return F.relu
21 |     # elif activation == "relu_squared":
22 |     #     return relu_squared
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
23 |     # elif activation == "gelu":
24 |     #     return gelu
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:23:5: ERA001 Found commented-out code
   |
21 |     # elif activation == "relu_squared":
22 |     #     return relu_squared
23 |     # elif activation == "gelu":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
24 |     #     return gelu
25 |     # elif activation == "gelu_fast":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:24:5: ERA001 Found commented-out code
   |
22 |     #     return relu_squared
23 |     # elif activation == "gelu":
24 |     #     return gelu
   |     ^^^^^^^^^^^^^^^^^ ERA001
25 |     # elif activation == "gelu_fast":
26 |     #     deprecation_warning(
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:25:5: ERA001 Found commented-out code
   |
23 |     # elif activation == "gelu":
24 |     #     return gelu
25 |     # elif activation == "gelu_fast":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
26 |     #     deprecation_warning(
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:27:5: ERA001 Found commented-out code
   |
25 |     # elif activation == "gelu_fast":
26 |     #     deprecation_warning(
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
28 |     #     )
29 |     #     return gelu_accurate
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:28:5: ERA001 Found commented-out code
   |
26 |     #     deprecation_warning(
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
28 |     #     )
   |     ^^^^^^^ ERA001
29 |     #     return gelu_accurate
30 |     # elif activation == "gelu_accurate":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:29:5: ERA001 Found commented-out code
   |
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
28 |     #     )
29 |     #     return gelu_accurate
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
30 |     # elif activation == "gelu_accurate":
31 |     #     return gelu_accurate
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:30:5: ERA001 Found commented-out code
   |
28 |     #     )
29 |     #     return gelu_accurate
30 |     # elif activation == "gelu_accurate":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
31 |     #     return gelu_accurate
32 |     elif activation == "tanh":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:31:5: ERA001 Found commented-out code
   |
29 |     #     return gelu_accurate
30 |     # elif activation == "gelu_accurate":
31 |     #     return gelu_accurate
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
32 |     elif activation == "tanh":
33 |         return torch.tanh
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\Graphormer\modules\utils.py:32:5: RET505 Unnecessary `elif` after `return` statement
   |
30 |     # elif activation == "gelu_accurate":
31 |     #     return gelu_accurate
32 |     elif activation == "tanh":
   |     ^^^^ RET505
33 |         return torch.tanh
34 |     elif activation == "linear":
   |
   = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\Graphormer\modules\utils.py:39:15: TRY003 Avoid specifying long messages outside the exception class
   |
37 |         return torch.nn.SiLU
38 |     else:
39 |         raise RuntimeError(f"--activation-fn {activation} not supported")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
   |

src\stk_search\geom3d\models\Graphormer\modules\utils.py:39:28: EM102 Exception must not use an f-string literal, assign to variable first
   |
37 |         return torch.nn.SiLU
38 |     else:
39 |         raise RuntimeError(f"--activation-fn {activation} not supported")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\MLP.py:1:1: N999 Invalid module name: 'MLP'
src\stk_search\geom3d\models\MLP.py:1:1: F403 `from collections import *` used; unable to detect undefined names
  |
1 | from collections import *
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ F403
2 | 
3 | from torch import nn
  |

src\stk_search\geom3d\models\MLP.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\MLP.py:6:7: D101 Missing docstring in public class
  |
6 | class MLP(nn.Module):
  |       ^^^ D101
7 |     def __init__(self, ECFP_dim, hidden_dim, output_dim):
8 |         super(MLP, self).__init__()
  |

src\stk_search\geom3d\models\MLP.py:7:9: ANN204 Missing return type annotation for special method `__init__`
  |
6 | class MLP(nn.Module):
7 |     def __init__(self, ECFP_dim, hidden_dim, output_dim):
  |         ^^^^^^^^ ANN204
8 |         super(MLP, self).__init__()
9 |         self.ECFP_dim = ECFP_dim
  |
  = help: Add return type annotation: `None`

src\stk_search\geom3d\models\MLP.py:7:9: D107 Missing docstring in `__init__`
  |
6 | class MLP(nn.Module):
7 |     def __init__(self, ECFP_dim, hidden_dim, output_dim):
  |         ^^^^^^^^ D107
8 |         super(MLP, self).__init__()
9 |         self.ECFP_dim = ECFP_dim
  |

src\stk_search\geom3d\models\MLP.py:7:24: N803 Argument name `ECFP_dim` should be lowercase
  |
6 | class MLP(nn.Module):
7 |     def __init__(self, ECFP_dim, hidden_dim, output_dim):
  |                        ^^^^^^^^ N803
8 |         super(MLP, self).__init__()
9 |         self.ECFP_dim = ECFP_dim
  |

src\stk_search\geom3d\models\MLP.py:8:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
 6 | class MLP(nn.Module):
 7 |     def __init__(self, ECFP_dim, hidden_dim, output_dim):
 8 |         super(MLP, self).__init__()
   |              ^^^^^^^^^^^ UP008
 9 |         self.ECFP_dim = ECFP_dim
10 |         self.hidden_dim = hidden_dim
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\MLP.py:13:21: RUF005 Consider `[self.ECFP_dim, *self.hidden_dim]` instead of concatenation
   |
11 |         self.output_dim = output_dim
12 | 
13 |         layer_dim = [self.ECFP_dim] + self.hidden_dim
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
14 | 
15 |         layers = OrderedDict()
   |
   = help: Replace with `[self.ECFP_dim, *self.hidden_dim]`

src\stk_search\geom3d\models\MLP.py:15:18: F405 `OrderedDict` may be undefined, or defined from star imports
   |
13 |         layer_dim = [self.ECFP_dim] + self.hidden_dim
14 | 
15 |         layers = OrderedDict()
   |                  ^^^^^^^^^^^ F405
16 |         for layer_idx, (in_dim, out_dim) in enumerate(zip(layer_dim[:-1], layer_dim[1:])):
17 |             layers[f"fc layer {layer_idx}"] = nn.Linear(in_dim, out_dim)
   |

src\stk_search\geom3d\models\MLP.py:22:9: D102 Missing docstring in public method
   |
20 |         self.fc_layers = nn.Linear(layer_dim[-1], self.output_dim)
21 | 
22 |     def represent(self, x):
   |         ^^^^^^^^^ D102
23 |         x = self.represent_layers(x)
24 |         return x
   |

src\stk_search\geom3d\models\MLP.py:24:16: RET504 Unnecessary assignment to `x` before `return` statement
   |
22 |     def represent(self, x):
23 |         x = self.represent_layers(x)
24 |         return x
   |                ^ RET504
25 | 
26 |     def forward(self, x):
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\MLP.py:26:9: D102 Missing docstring in public method
   |
24 |         return x
25 | 
26 |     def forward(self, x):
   |         ^^^^^^^ D102
27 |         x = self.represent(x)
28 |         x = self.fc_layers(x)
   |

src\stk_search\geom3d\models\MLP.py:29:16: RET504 Unnecessary assignment to `x` before `return` statement
   |
27 |         x = self.represent(x)
28 |         x = self.fc_layers(x)
29 |         return x
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\NequIP\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\NequIP\model\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\NequIP\model\__init__.py:12:1: PLE0604 Invalid object in `__all__`, must contain only strings
   |
10 | )
11 | 
12 | __all__ = [
   | ^^^^^^^ PLE0604
13 |     SimpleIrrepsConfig,
14 |     EnergyModel,
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:3:1: ERA001 Found commented-out code
  |
1 | import inspect
2 | 
3 | # from stk_search.geom3d.models.NequIP.data import AtomicDataset
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
4 | from stk_search.geom3d.models.NequIP.data.transforms import TypeMapper
5 | from stk_search.geom3d.models.NequIP.nn import GraphModuleMixin
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_build.py:9:5: C901 `model_from_config` is too complex (16 > 10)
   |
 9 | def model_from_config(
   |     ^^^^^^^^^^^^^^^^^ C901
10 |     config, initialize: bool=False, dataset=None
11 | ) -> GraphModuleMixin:
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:9:5: PLR0912 Too many branches (16 > 12)
   |
 9 | def model_from_config(
   |     ^^^^^^^^^^^^^^^^^ PLR0912
10 |     config, initialize: bool=False, dataset=None
11 | ) -> GraphModuleMixin:
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:9:5: D417 Missing argument description in the docstring for `model_from_config`: `config`
   |
 9 | def model_from_config(
   |     ^^^^^^^^^^^^^^^^^ D417
10 |     config, initialize: bool=False, dataset=None
11 | ) -> GraphModuleMixin:
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:10:13: FBT001 Boolean-typed positional argument in function definition
   |
 9 | def model_from_config(
10 |     config, initialize: bool=False, dataset=None
   |             ^^^^^^^^^^ FBT001
11 | ) -> GraphModuleMixin:
12 |     """Build a model based on `config`.
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:10:13: FBT002 Boolean default positional argument in function definition
   |
 9 | def model_from_config(
10 |     config, initialize: bool=False, dataset=None
   |             ^^^^^^^^^^ FBT002
11 | ) -> GraphModuleMixin:
12 |     """Build a model based on `config`.
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:36:9: SIM105 Use `contextlib.suppress(RuntimeError)` instead of `try`-`except`-`pass`
   |
34 |           type_mapper = dataset.type_mapper
35 |       else:
36 |           try:
   |  _________^
37 | |             type_mapper, _ = instantiate(TypeMapper, all_args=config)
38 | |         except RuntimeError:
39 | |             pass
   | |________________^ SIM105
40 |   
41 |       if type_mapper is not None:
   |
   = help: Replace with `contextlib.suppress(RuntimeError)`

src\stk_search\geom3d\models\NequIP\model\_build.py:43:13: S101 Use of `assert` detected
   |
41 |     if type_mapper is not None:
42 |         if "num_types" in config:
43 |             assert (
   |             ^^^^^^ S101
44 |                 config["num_types"] == type_mapper.num_types
45 |             ), "inconsistant config & dataset"
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:47:13: S101 Use of `assert` detected
   |
45 |             ), "inconsistant config & dataset"
46 |         if "type_names" in config:
47 |             assert (
   |             ^^^^^^ S101
48 |                 config["type_names"] == type_mapper.type_names
49 |             ), "inconsistant config & dataset"
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:59:5: ERA001 Found commented-out code
   |
58 |     model = None
59 |     # print("builders", builders)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
60 |     # print()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_build.py:60:5: ERA001 Found commented-out code
   |
58 |     model = None
59 |     # print("builders", builders)
60 |     # print()
   |     ^^^^^^^^^ ERA001
61 | 
62 |     for builder in builders:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_build.py:63:9: ERA001 Found commented-out code
   |
62 |     for builder in builders:
63 |         # print("builder", builder)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
64 |         pnames = inspect.signature(builder).parameters
65 |         # print("pnames", pnames)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_build.py:65:9: ERA001 Found commented-out code
   |
63 |         # print("builder", builder)
64 |         pnames = inspect.signature(builder).parameters
65 |         # print("pnames", pnames)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
66 |         params = {}
67 |         if "initialize" in pnames:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_build.py:73:23: TRY003 Avoid specifying long messages outside the exception class
   |
71 |         if "dataset" in pnames:
72 |             if "initialize" not in pnames:
73 |                 raise ValueError("Cannot request dataset without requesting initialize")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
74 |             if (
75 |                 initialize
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:73:34: EM101 Exception must not use a string literal, assign to variable first
   |
71 |         if "dataset" in pnames:
72 |             if "initialize" not in pnames:
73 |                 raise ValueError("Cannot request dataset without requesting initialize")
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
74 |             if (
75 |                 initialize
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\_build.py:79:23: TRY003 Avoid specifying long messages outside the exception class
   |
77 |                   and dataset is None
78 |               ):
79 |                   raise RuntimeError(
   |  _______________________^
80 | |                     f"Builder {builder.__name__} requires the dataset, initialize is true, but no dataset was provided to `model_from_config`."
81 | |                 )
   | |_________________^ TRY003
82 |               params["dataset"] = dataset
83 |           if "model" in pnames:
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:80:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
78 |             ):
79 |                 raise RuntimeError(
80 |                     f"Builder {builder.__name__} requires the dataset, initialize is true, but no dataset was provided to `model_from_config`."
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
81 |                 )
82 |             params["dataset"] = dataset
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_build.py:85:23: TRY003 Avoid specifying long messages outside the exception class
   |
83 |           if "model" in pnames:
84 |               if model is None:
85 |                   raise RuntimeError(
   |  _______________________^
86 | |                     f"Builder {builder.__name__} asked for the model as an input, but no previous builder has returned a model"
87 | |                 )
   | |_________________^ TRY003
88 |               params["model"] = model
89 |           elif model is not None:
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:86:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
84 |             if model is None:
85 |                 raise RuntimeError(
86 |                     f"Builder {builder.__name__} asked for the model as an input, but no previous builder has returned a model"
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
87 |                 )
88 |             params["model"] = model
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_build.py:90:19: TRY003 Avoid specifying long messages outside the exception class
   |
88 |               params["model"] = model
89 |           elif model is not None:
90 |               raise RuntimeError(
   |  ___________________^
91 | |                 f"All model_builders after the first one that returns a model must take the model as an argument; {builder.__name__} doesn't"
92 | |             )
   | |_____________^ TRY003
93 |           # print("params", params)
94 |           model = builder(**params)
   |

src\stk_search\geom3d\models\NequIP\model\_build.py:91:17: EM102 Exception must not use an f-string literal, assign to variable first
   |
89 |         elif model is not None:
90 |             raise RuntimeError(
91 |                 f"All model_builders after the first one that returns a model must take the model as an argument; {builder.__name__} doesn't"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
92 |             )
93 |         # print("params", params)
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_build.py:93:9: ERA001 Found commented-out code
   |
91 |                 f"All model_builders after the first one that returns a model must take the model as an argument; {builder.__name__} doesn't"
92 |             )
93 |         # print("params", params)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
94 |         model = builder(**params)
95 |         if model is not None and not isinstance(model, GraphModuleMixin):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_build.py:96:19: TRY003 Avoid specifying long messages outside the exception class
    |
 94 |           model = builder(**params)
 95 |           if model is not None and not isinstance(model, GraphModuleMixin):
 96 |               raise TypeError(
    |  ___________________^
 97 | |                 f"Builder {builder.__name__} didn't return a GraphModuleMixin, got {type(model)} instead"
 98 | |             )
    | |_____________^ TRY003
 99 |           # print(builder, model)
100 |           # print()
    |

src\stk_search\geom3d\models\NequIP\model\_build.py:97:17: EM102 Exception must not use an f-string literal, assign to variable first
   |
95 |         if model is not None and not isinstance(model, GraphModuleMixin):
96 |             raise TypeError(
97 |                 f"Builder {builder.__name__} didn't return a GraphModuleMixin, got {type(model)} instead"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
98 |             )
99 |         # print(builder, model)
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_build.py:99:9: ERA001 Found commented-out code
    |
 97 |                 f"Builder {builder.__name__} didn't return a GraphModuleMixin, got {type(model)} instead"
 98 |             )
 99 |         # print(builder, model)
    |         ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
100 |         # print()
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_build.py:100:9: ERA001 Found commented-out code
    |
 98 |             )
 99 |         # print(builder, model)
100 |         # print()
    |         ^^^^^^^^^ ERA001
101 | 
102 |     return model
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_eng.py:19:5: N802 Function name `SimpleIrrepsConfig` should be lowercase
   |
19 | def SimpleIrrepsConfig(config, prefix: Optional[str] = None):
   |     ^^^^^^^^^^^^^^^^^^ N802
20 |     """Builder that pre-processes options to allow "simple" configuration of irreps."""
21 |     # We allow some simpler parameters to be provided, but if they are,
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:19:5: ANN202 Missing return type annotation for private function `SimpleIrrepsConfig`
   |
19 | def SimpleIrrepsConfig(config, prefix: Optional[str] = None):
   |     ^^^^^^^^^^^^^^^^^^ ANN202
20 |     """Builder that pre-processes options to allow "simple" configuration of irreps."""
21 |     # We allow some simpler parameters to be provided, but if they are,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\model\_eng.py:19:40: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
19 | def SimpleIrrepsConfig(config, prefix: Optional[str] = None):
   |                                        ^^^^^^^^ FA100
20 |     """Builder that pre-processes options to allow "simple" configuration of irreps."""
21 |     # We allow some simpler parameters to be provided, but if they are,
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:39:5: S101 Use of `assert` detected
   |
37 |         (f"{prefix}{k}" in config) or (k in config) for k in real_irreps_keys
38 |     )
39 |     assert has_simple or has_full
   |     ^^^^^^ S101
40 | 
41 |     update = {}
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:58:25: E741 Ambiguous variable name: `l`
   |
56 |                     (num_features, (l, p))
57 |                     for p in ((1, -1) if parity else (1,))
58 |                     for l in range(lmax + 1)
   |                         ^ E741
59 |                 ]
60 |             )
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:76:13: S101 Use of `assert` detected
   |
74 |     for k, v in update.items():
75 |         if k in config:
76 |             assert (
   |             ^^^^^^ S101
77 |                 config[k] == v
78 |             ), f"For key {k}, the full irreps options had value `{config[k]}` inconsistant with the value derived from the simple irreps options `{v}`"
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:82:5: N802 Function name `EnergyModel` should be lowercase
   |
82 | def EnergyModel(
   |     ^^^^^^^^^^^ N802
83 |     config, initialize: bool, dataset: Optional[AtomicDataset] = None
84 | ) -> SequentialGraphNetwork:
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:83:13: FBT001 Boolean-typed positional argument in function definition
   |
82 | def EnergyModel(
83 |     config, initialize: bool, dataset: Optional[AtomicDataset] = None
   |             ^^^^^^^^^^ FBT001
84 | ) -> SequentialGraphNetwork:
85 |     """Base default energy model archetecture.
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:83:13: ARG001 Unused function argument: `initialize`
   |
82 | def EnergyModel(
83 |     config, initialize: bool, dataset: Optional[AtomicDataset] = None
   |             ^^^^^^^^^^ ARG001
84 | ) -> SequentialGraphNetwork:
85 |     """Base default energy model archetecture.
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:83:31: ARG001 Unused function argument: `dataset`
   |
82 | def EnergyModel(
83 |     config, initialize: bool, dataset: Optional[AtomicDataset] = None
   |                               ^^^^^^^ ARG001
84 | ) -> SequentialGraphNetwork:
85 |     """Base default energy model archetecture.
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:83:40: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
82 | def EnergyModel(
83 |     config, initialize: bool, dataset: Optional[AtomicDataset] = None
   |                                        ^^^^^^^^ FA100
84 | ) -> SequentialGraphNetwork:
85 |     """Base default energy model archetecture.
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:85:5: D401 First line of docstring should be in imperative mood: "Base default energy model archetecture."
   |
83 |       config, initialize: bool, dataset: Optional[AtomicDataset] = None
84 |   ) -> SequentialGraphNetwork:
85 |       """Base default energy model archetecture.
   |  _____^
86 | | 
87 | |     For minimal and full configuration option listings, see ``minimal.yaml`` and ``example.yaml``.
88 | |     """
   | |_______^ D401
89 |       logging.debug("Start building the network model")
   |

src\stk_search\geom3d\models\NequIP\model\_eng.py:92:5: ERA001 Found commented-out code
   |
91 |     # builder_utils.add_avg_num_neighbors(
92 |     #     config=config, initialize=initialize, dataset=dataset
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
93 |     # )
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_eng.py:93:5: ERA001 Found commented-out code
   |
91 |     # builder_utils.add_avg_num_neighbors(
92 |     #     config=config, initialize=initialize, dataset=dataset
93 |     # )
   |     ^^^ ERA001
94 | 
95 |     num_layers = config.get("num_layers", 3)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_eng.py:114:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
112 |     layers.update(
113 |         {
114 |             # TODO: the next linear throws out all L > 0, don't create them in the last layer of convnet
    |               ^^^^ TD002
115 |             # -- output block --
116 |             "conv_to_output_hidden": AtomwiseLinear,
    |

src\stk_search\geom3d\models\NequIP\model\_eng.py:114:15: TD003 Missing issue link on the line following this TODO
    |
112 |     layers.update(
113 |         {
114 |             # TODO: the next linear throws out all L > 0, don't create them in the last layer of convnet
    |               ^^^^ TD003
115 |             # -- output block --
116 |             "conv_to_output_hidden": AtomwiseLinear,
    |

src\stk_search\geom3d\models\NequIP\model\_eng.py:114:15: FIX002 Line contains TODO, consider resolving the issue
    |
112 |     layers.update(
113 |         {
114 |             # TODO: the next linear throws out all L > 0, don't create them in the last layer of convnet
    |               ^^^^ FIX002
115 |             # -- output block --
116 |             "conv_to_output_hidden": AtomwiseLinear,
    |

src\stk_search\geom3d\models\NequIP\model\_eng.py:119:17: C408 Unnecessary `dict` call (rewrite as a literal)
    |
117 |             "output_hidden_to_scalar": (
118 |                 AtomwiseLinear,
119 |                 dict(irreps_out="1x0e", out_field=AtomicDataDict.PER_ATOM_ENERGY_KEY),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C408
120 |             ),
121 |         }
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\model\_eng.py:126:9: C408 Unnecessary `dict` call (rewrite as a literal)
    |
124 |       layers["total_energy_sum"] = (
125 |           AtomwiseReduce,
126 |           dict(
    |  _________^
127 | |             reduce="sum",
128 | |             field=AtomicDataDict.PER_ATOM_ENERGY_KEY,
129 | |             out_field=AtomicDataDict.TOTAL_ENERGY_KEY,
130 | |         ),
    | |_________^ C408
131 |       )
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\model\_grads.py:11:5: N802 Function name `ForceOutput` should be lowercase
   |
11 | def ForceOutput(model: GraphModuleMixin) -> GradientOutput:
   |     ^^^^^^^^^^^ N802
12 |     r"""Add forces to a model that predicts energy.
   |

src\stk_search\geom3d\models\NequIP\model\_grads.py:24:15: TRY003 Avoid specifying long messages outside the exception class
   |
22 |     """
23 |     if AtomicDataDict.FORCE_KEY in model.irreps_out:
24 |         raise ValueError("This model already has force outputs.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
25 |     return GradientOutput(
26 |         func=model,
   |

src\stk_search\geom3d\models\NequIP\model\_grads.py:24:26: EM101 Exception must not use a string literal, assign to variable first
   |
22 |     """
23 |     if AtomicDataDict.FORCE_KEY in model.irreps_out:
24 |         raise ValueError("This model already has force outputs.")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
25 |     return GradientOutput(
26 |         func=model,
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\_grads.py:34:5: N802 Function name `PartialForceOutput` should be lowercase
   |
34 | def PartialForceOutput(model: GraphModuleMixin) -> GradientOutput:
   |     ^^^^^^^^^^^^^^^^^^ N802
35 |     r"""Add forces and partial forces to a model that predicts energy.
   |

src\stk_search\geom3d\models\NequIP\model\_grads.py:50:15: TRY003 Avoid specifying long messages outside the exception class
   |
48 |         or AtomicDataDict.PARTIAL_FORCE_KEY in model.irreps_out
49 |     ):
50 |         raise ValueError("This model already has force outputs.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
51 |     return PartialForceOutputModule(func=model)
   |

src\stk_search\geom3d\models\NequIP\model\_grads.py:50:26: EM101 Exception must not use a string literal, assign to variable first
   |
48 |         or AtomicDataDict.PARTIAL_FORCE_KEY in model.irreps_out
49 |     ):
50 |         raise ValueError("This model already has force outputs.")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
51 |     return PartialForceOutputModule(func=model)
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\_grads.py:54:5: N802 Function name `StressForceOutput` should be lowercase
   |
54 | def StressForceOutput(model: GraphModuleMixin) -> GradientOutput:
   |     ^^^^^^^^^^^^^^^^^ N802
55 |     r"""Add forces and stresses to a model that predicts energy.
   |

src\stk_search\geom3d\models\NequIP\model\_grads.py:70:15: TRY003 Avoid specifying long messages outside the exception class
   |
68 |         or AtomicDataDict.STRESS_KEY in model.irreps_out
69 |     ):
70 |         raise ValueError("This model already has force or stress outputs.")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
71 |     return StressOutputModule(func=model)
   |

src\stk_search\geom3d\models\NequIP\model\_grads.py:70:26: EM101 Exception must not use a string literal, assign to variable first
   |
68 |         or AtomicDataDict.STRESS_KEY in model.irreps_out
69 |     ):
70 |         raise ValueError("This model already has force or stress outputs.")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
71 |     return StressOutputModule(func=model)
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:16:5: N802 Function name `RescaleEnergyEtc` should be lowercase
   |
16 | def RescaleEnergyEtc(
   |     ^^^^^^^^^^^^^^^^ N802
17 |     model: GraphModuleMixin, config, dataset: AtomicDataset, initialize: bool
18 | ):
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:16:5: ANN202 Missing return type annotation for private function `RescaleEnergyEtc`
   |
16 | def RescaleEnergyEtc(
   |     ^^^^^^^^^^^^^^^^ ANN202
17 |     model: GraphModuleMixin, config, dataset: AtomicDataset, initialize: bool
18 | ):
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\_scaling.py:17:62: FBT001 Boolean-typed positional argument in function definition
   |
16 | def RescaleEnergyEtc(
17 |     model: GraphModuleMixin, config, dataset: AtomicDataset, initialize: bool
   |                                                              ^^^^^^^^^^ FBT001
18 | ):
19 |     return GlobalRescale(
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:36:5: N802 Function name `GlobalRescale` should be lowercase
   |
36 | def GlobalRescale(
   |     ^^^^^^^^^^^^^ N802
37 |     model: GraphModuleMixin,
38 |     config,
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:36:5: C901 `GlobalRescale` is too complex (11 > 10)
   |
36 | def GlobalRescale(
   |     ^^^^^^^^^^^^^ C901
37 |     model: GraphModuleMixin,
38 |     config,
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:36:5: PLR0913 Too many arguments in function definition (11 > 5)
   |
36 | def GlobalRescale(
   |     ^^^^^^^^^^^^^ PLR0913
37 |     model: GraphModuleMixin,
38 |     config,
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:36:5: ANN202 Missing return type annotation for private function `GlobalRescale`
   |
36 | def GlobalRescale(
   |     ^^^^^^^^^^^^^ ANN202
37 |     model: GraphModuleMixin,
38 |     config,
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\_scaling.py:40:5: FBT001 Boolean-typed positional argument in function definition
   |
38 |     config,
39 |     dataset: AtomicDataset,
40 |     initialize: bool,
   |     ^^^^^^^^^^ FBT001
41 |     module_prefix: str,
42 |     default_scale: Union[str, float, list],
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:42:20: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
40 |     initialize: bool,
41 |     module_prefix: str,
42 |     default_scale: Union[str, float, list],
   |                    ^^^^^ FA100
43 |     default_shift: Union[str, float, list],
44 |     default_scale_keys: list,
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:43:20: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
41 |     module_prefix: str,
42 |     default_scale: Union[str, float, list],
43 |     default_shift: Union[str, float, list],
   |                    ^^^^^ FA100
44 |     default_scale_keys: list,
45 |     default_shift_keys: list,
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:58:13: G004 Logging statement uses f-string
   |
56 |       if global_shift is not None:
57 |           logging.warning(
58 |               f"!!!! Careful global_shift is set to {global_shift}."
   |  _____________^
59 | |             f"The model for {default_shift_keys} will no longer be size extensive"
   | |__________________________________________________________________________________^ G004
60 |           )
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:69:17: SIM101 Multiple `isinstance` calls for `value`, merge into a single call
   |
67 |                   str_names += [value]
68 |               elif (
69 |                   value is None
   |  _________________^
70 | |                 or isinstance(value, float)
71 | |                 or isinstance(value, torch.Tensor)
   | |__________________________________________________^ SIM101
72 |               ):
73 |                   # valid values
   |
   = help: Merge `isinstance` calls for `value`

src\stk_search\geom3d\models\NequIP\model\_scaling.py:76:23: TRY003 Avoid specifying long messages outside the exception class
   |
74 |                 pass
75 |             else:
76 |                 raise ValueError(f"Invalid global scale `{value}`")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
77 | 
78 |         # = Compute shifts and scales =
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:76:34: EM102 Exception must not use an f-string literal, assign to variable first
   |
74 |                 pass
75 |             else:
76 |                 raise ValueError(f"Invalid global scale `{value}`")
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
77 | 
78 |         # = Compute shifts and scales =
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:88:26: G004 Logging statement uses f-string
   |
86 |             s = global_scale
87 |             global_scale = computed_stats[str_names.index(global_scale)]
88 |             logging.info(f"Replace string {s} to {global_scale}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
89 |         if isinstance(global_shift, str):
90 |             s = global_shift
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:92:26: G004 Logging statement uses f-string
   |
90 |             s = global_shift
91 |             global_shift = computed_stats[str_names.index(global_shift)]
92 |             logging.info(f"Replace string {s} to {global_shift}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
93 | 
94 |         if global_scale is not None and global_scale < RESCALE_THRESHOLD:
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:95:19: TRY003 Avoid specifying long messages outside the exception class
   |
94 |           if global_scale is not None and global_scale < RESCALE_THRESHOLD:
95 |               raise ValueError(
   |  ___________________^
96 | |                 f"Global energy scaling was very low: {global_scale}. If dataset values were used, does the dataset contain insufficient variation? Maybe try disabling global scaling with global_scale=None."
97 | |             )
   | |_____________^ TRY003
98 |   
99 |           logging.info(
   |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:96:17: EM102 Exception must not use an f-string literal, assign to variable first
   |
94 |         if global_scale is not None and global_scale < RESCALE_THRESHOLD:
95 |             raise ValueError(
96 |                 f"Global energy scaling was very low: {global_scale}. If dataset values were used, does the dataset contain insufficient variation? Maybe try disabling global scaling with global_scale=None."
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
97 |             )
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:100:13: G004 Logging statement uses f-string
    |
 99 |         logging.info(
100 |             f"Initially outputs are globally scaled by: {global_scale}, total_energy are globally shifted by {global_shift}."
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
101 |         )
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:111:5: S101 Use of `assert` detected
    |
110 |     error_string = "keys need to be a list"
111 |     assert isinstance(default_scale_keys, list), error_string
    |     ^^^^^^ S101
112 |     assert isinstance(default_shift_keys, list), error_string
113 |     assert isinstance(default_related_scale_keys, list), error_string
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:112:5: S101 Use of `assert` detected
    |
110 |     error_string = "keys need to be a list"
111 |     assert isinstance(default_scale_keys, list), error_string
112 |     assert isinstance(default_shift_keys, list), error_string
    |     ^^^^^^ S101
113 |     assert isinstance(default_related_scale_keys, list), error_string
114 |     assert isinstance(default_related_shift_keys, list), error_string
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:113:5: S101 Use of `assert` detected
    |
111 |     assert isinstance(default_scale_keys, list), error_string
112 |     assert isinstance(default_shift_keys, list), error_string
113 |     assert isinstance(default_related_scale_keys, list), error_string
    |     ^^^^^^ S101
114 |     assert isinstance(default_related_shift_keys, list), error_string
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:114:5: S101 Use of `assert` detected
    |
112 |     assert isinstance(default_shift_keys, list), error_string
113 |     assert isinstance(default_related_scale_keys, list), error_string
114 |     assert isinstance(default_related_shift_keys, list), error_string
    |     ^^^^^^ S101
115 | 
116 |     # == Build the model ==
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:130:5: N802 Function name `PerSpeciesRescale` should be lowercase
    |
130 | def PerSpeciesRescale(
    |     ^^^^^^^^^^^^^^^^^ N802
131 |     model: GraphModuleMixin,
132 |     config,
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:130:5: C901 `PerSpeciesRescale` is too complex (16 > 10)
    |
130 | def PerSpeciesRescale(
    |     ^^^^^^^^^^^^^^^^^ C901
131 |     model: GraphModuleMixin,
132 |     config,
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:130:5: PLR0912 Too many branches (18 > 12)
    |
130 | def PerSpeciesRescale(
    |     ^^^^^^^^^^^^^^^^^ PLR0912
131 |     model: GraphModuleMixin,
132 |     config,
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:130:5: ANN202 Missing return type annotation for private function `PerSpeciesRescale`
    |
130 | def PerSpeciesRescale(
    |     ^^^^^^^^^^^^^^^^^ ANN202
131 |     model: GraphModuleMixin,
132 |     config,
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\_scaling.py:134:5: FBT001 Boolean-typed positional argument in function definition
    |
132 |     config,
133 |     dataset: AtomicDataset,
134 |     initialize: bool,
    |     ^^^^^^^^^^ FBT001
135 | ):
136 |     """Add global rescaling for energy(-based quantities).
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:162:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
160 |           # THIS CHECK IS ONLY GOOD ENOUGH FOR EMITTING WARNINGS
161 |           has_global_shift = config.get("global_rescale_shift", None) is not None
162 |           if has_global_shift:
    |  _________^
163 | |             if shifts is not None:
    | |__________________________________^ SIM102
164 |                   # using default of per_atom shift
165 |                   raise RuntimeError(
    |
    = help: Combine `if` statements using `and`

src\stk_search\geom3d\models\NequIP\model\_scaling.py:165:23: TRY003 Avoid specifying long messages outside the exception class
    |
163 |               if shifts is not None:
164 |                   # using default of per_atom shift
165 |                   raise RuntimeError(
    |  _______________________^
166 | |                     "A global_rescale_shift was provided, but the default per-atom energy shift was not disabled."
167 | |                 )
    | |_________________^ TRY003
168 |           del has_global_shift
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:166:21: EM101 Exception must not use a string literal, assign to variable first
    |
164 |                 # using default of per_atom shift
165 |                 raise RuntimeError(
166 |                     "A global_rescale_shift was provided, but the default per-atom energy shift was not disabled."
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
167 |                 )
168 |         del has_global_shift
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:178:17: SIM101 Multiple `isinstance` calls for `value`, merge into a single call
    |
176 |                   str_names += [value]
177 |               elif (
178 |                   value is None
    |  _________________^
179 | |                 or isinstance(value, float)
180 | |                 or isinstance(value, list)
181 | |                 or isinstance(value, torch.Tensor)
    | |__________________________________________________^ SIM101
182 |               ):
183 |                   # valid values
    |
    = help: Merge `isinstance` calls for `value`

src\stk_search\geom3d\models\NequIP\model\_scaling.py:186:23: TRY003 Avoid specifying long messages outside the exception class
    |
184 |                 pass
185 |             else:
186 |                 raise ValueError(f"Invalid value `{value}` of type {type(value)}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
187 | 
188 |         if len(str_names) == 2:
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:186:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
184 |                 pass
185 |             else:
186 |                 raise ValueError(f"Invalid value `{value}` of type {type(value)}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
187 | 
188 |         if len(str_names) == 2:
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:188:30: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
186 |                 raise ValueError(f"Invalid value `{value}` of type {type(value)}")
187 | 
188 |         if len(str_names) == 2:
    |                              ^ PLR2004
189 |             # Both computed from dataset
190 |             arguments_in_dataset_units = True
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:198:17: S101 Use of `assert` detected
    |
196 |                 arguments_in_dataset_units = True
197 |             else:
198 |                 assert config[
    |                 ^^^^^^ S101
199 |                     module_prefix + "_arguments_in_dataset_units"
200 |                 ], "Requested to set either the shifts or scales of the per_species_rescale using dataset values, but chose to provide the other in non-dataset units. Please give the explictly specified shifts/scales in dataset units and set per_species_rescale_arguments_in_dataset_units"
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:213:26: G004 Logging statement uses f-string
    |
211 |             s = scales
212 |             scales = computed_stats[str_names.index(scales)].squeeze(-1)  # energy is 1D
213 |             logging.info(f"Replace string {s} to {scales}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
214 |         elif isinstance(scales, (list, float)):
215 |             scales = torch.as_tensor(scales)
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:220:26: G004 Logging statement uses f-string
    |
218 |             s = shifts
219 |             shifts = computed_stats[str_names.index(shifts)].squeeze(-1)  # energy is 1D
220 |             logging.info(f"Replace string {s} to {shifts}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
221 |         elif isinstance(shifts, (list, float)):
222 |             shifts = torch.as_tensor(shifts)
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:225:19: TRY003 Avoid specifying long messages outside the exception class
    |
224 |           if scales is not None and torch.min(scales) < RESCALE_THRESHOLD:
225 |               raise ValueError(
    |  ___________________^
226 | |                 f"Per species energy scaling was very low: {scales}. Maybe try setting {module_prefix}_scales = 1."
227 | |             )
    | |_____________^ TRY003
228 |   
229 |           logging.info(
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:226:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
224 |         if scales is not None and torch.min(scales) < RESCALE_THRESHOLD:
225 |             raise ValueError(
226 |                 f"Per species energy scaling was very low: {scales}. Maybe try setting {module_prefix}_scales = 1."
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
227 |             )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:230:13: G004 Logging statement uses f-string
    |
229 |         logging.info(
230 |             f"Atomic outputs are scaled by: {TypeMapper.format(scales, config['type_names'])}, shifted by {TypeMapper.format(shifts, config['type_names'])}."
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
231 |         )
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:245:5: ERA001 Found commented-out code
    |
243 |         arguments_in_dataset_units = False
244 | 
245 |     # print("PerSpeciesRescale scales", scales)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
246 |     # print("PerSpeciesRescale shifts", shifts)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_scaling.py:246:5: ERA001 Found commented-out code
    |
245 |     # print("PerSpeciesRescale scales", scales)
246 |     # print("PerSpeciesRescale shifts", shifts)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
247 | 
248 |     # insert in per species shift
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_scaling.py:249:14: C408 Unnecessary `dict` call (rewrite as a literal)
    |
248 |       # insert in per species shift
249 |       params = dict(
    |  ______________^
250 | |         field=AtomicDataDict.PER_ATOM_ENERGY_KEY,
251 | |         out_field=AtomicDataDict.PER_ATOM_ENERGY_KEY,
252 | |         shifts=shifts,
253 | |         scales=scales,
254 | |     )
    | |_____^ C408
255 |   
256 |       params["arguments_in_dataset_units"] = arguments_in_dataset_units
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:269:5: ANN202 Missing return type annotation for private function `_compute_stats`
    |
269 | def _compute_stats(
    |     ^^^^^^^^^^^^^^ ANN202
270 |     str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
271 | ):
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\_scaling.py:269:5: D417 Missing argument description in the docstring for `_compute_stats`: `kwargs`
    |
269 | def _compute_stats(
    |     ^^^^^^^^^^^^^^ D417
270 |     str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
271 | ):
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:270:16: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
269 | def _compute_stats(
270 |     str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
    |                ^^^^ FA100
271 | ):
272 |     """Return the values of statistics over dataset
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:270:57: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
269 | def _compute_stats(
270 |     str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
    |                                                         ^^^^^^^^ FA100
271 | ):
272 |     """Return the values of statistics over dataset
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:270:74: B006 Do not use mutable data structures for argument defaults
    |
269 | def _compute_stats(
270 |     str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
    |                                                                          ^^ B006
271 | ):
272 |     """Return the values of statistics over dataset
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\model\_scaling.py:272:5: D205 1 blank line required between summary line and description
    |
270 |       str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
271 |   ):
272 |       """Return the values of statistics over dataset
    |  _____^
273 | |     quantity name should be dataset_key_stat, where key can be any key
274 | |     that exists in the dataset, stat can be mean, std
275 | | 
276 | |     Args:
277 | |     ----
278 | |     str_names: list of strings that define the quantity to compute
279 | |     dataset: dataset object to run the stats over
280 | |     stride: # frames to skip for every one frame to include
281 | | 
282 | |     """
    | |_______^ D205
283 |       # parse the list of string to field, mode
284 |       # and record which quantity correspond to which computed_item
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\model\_scaling.py:272:5: D400 First line should end with a period
    |
270 |       str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
271 |   ):
272 |       """Return the values of statistics over dataset
    |  _____^
273 | |     quantity name should be dataset_key_stat, where key can be any key
274 | |     that exists in the dataset, stat can be mean, std
275 | | 
276 | |     Args:
277 | |     ----
278 | |     str_names: list of strings that define the quantity to compute
279 | |     dataset: dataset object to run the stats over
280 | |     stride: # frames to skip for every one frame to include
281 | | 
282 | |     """
    | |_______^ D400
283 |       # parse the list of string to field, mode
284 |       # and record which quantity correspond to which computed_item
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\model\_scaling.py:272:5: D415 First line should end with a period, question mark, or exclamation point
    |
270 |       str_names: List[str], dataset, stride: int, kwargs: Optional[dict] = {}
271 |   ):
272 |       """Return the values of statistics over dataset
    |  _____^
273 | |     quantity name should be dataset_key_stat, where key can be any key
274 | |     that exists in the dataset, stat can be mean, std
275 | | 
276 | |     Args:
277 | |     ----
278 | |     str_names: list of strings that define the quantity to compute
279 | |     dataset: dataset object to run the stats over
280 | |     stride: # frames to skip for every one frame to include
281 | | 
282 | |     """
    | |_______^ D415
283 |       # parse the list of string to field, mode
284 |       # and record which quantity correspond to which computed_item
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\model\_scaling.py:296:13: PLW2901 `for` loop variable `name` overwritten by assignment target
    |
294 |         # remove dataset prefix
295 |         if name.startswith("dataset_"):
296 |             name = name[len("dataset_") :]
    |             ^^^^ PLW2901
297 |         # identify per_species and per_atom modes
298 |         prefix = ""
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:300:13: PLW2901 `for` loop variable `name` overwritten by assignment target
    |
298 |         prefix = ""
299 |         if name.startswith("per_species_"):
300 |             name = name[len("per_species_") :]
    |             ^^^^ PLW2901
301 |             prefix = "per_species_"
302 |         elif name.startswith("per_atom_"):
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:303:13: PLW2901 `for` loop variable `name` overwritten by assignment target
    |
301 |             prefix = "per_species_"
302 |         elif name.startswith("per_atom_"):
303 |             name = name[len("per_atom_") :]
    |             ^^^^ PLW2901
304 |             prefix = "per_atom_"
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:315:19: TRY003 Avoid specifying long messages outside the exception class
    |
313 |             stat_str = field + prefix + "rms"
314 |         else:
315 |             raise ValueError(f"Cannot handle {stat} type quantity")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
316 | 
317 |         if stat_str in stat_strs:
    |

src\stk_search\geom3d\models\NequIP\model\_scaling.py:315:30: EM102 Exception must not use an f-string literal, assign to variable first
    |
313 |             stat_str = field + prefix + "rms"
314 |         else:
315 |             raise ValueError(f"Cannot handle {stat} type quantity")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
316 | 
317 |         if stat_str in stat_strs:
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_scaling.py:324:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
322 |               stat_modes += [stat_mode]
323 |               stat_fields += [field]
324 |               if stat_mode.startswith("per_species_"):
    |  _____________^
325 | |                 if field in kwargs:
    | |___________________________________^ SIM102
326 |                       input_kwargs[field + stat_mode] = kwargs[field]
327 |           tuple_ids += [tuple_id_map[stat]]
    |
    = help: Combine `if` statements using `and`

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:11:5: ANN202 Missing return type annotation for private function `initialize_from_state`
   |
10 | # == Load old state ==
11 | def initialize_from_state(config: Config, model: GraphModuleMixin, initialize: bool):
   |     ^^^^^^^^^^^^^^^^^^^^^ ANN202
12 |     """Initialize the model from the state dict file given by the config options `initial_model_state`.
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:11:68: FBT001 Boolean-typed positional argument in function definition
   |
10 | # == Load old state ==
11 | def initialize_from_state(config: Config, model: GraphModuleMixin, initialize: bool):
   |                                                                    ^^^^^^^^^^ FBT001
12 |     """Initialize the model from the state dict file given by the config options `initial_model_state`.
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:29:5: ANN202 Missing return type annotation for private function `load_model_state`
   |
29 | def load_model_state(
   |     ^^^^^^^^^^^^^^^^ ANN202
30 |     config: Config,
31 |     model: GraphModuleMixin,
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:32:5: FBT001 Boolean-typed positional argument in function definition
   |
30 |     config: Config,
31 |     model: GraphModuleMixin,
32 |     initialize: bool,
   |     ^^^^^^^^^^ FBT001
33 |     _prefix: str = "load_model_state",
34 | ):
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:32:5: ARG001 Unused function argument: `initialize`
   |
30 |     config: Config,
31 |     model: GraphModuleMixin,
32 |     initialize: bool,
   |     ^^^^^^^^^^ ARG001
33 |     _prefix: str = "load_model_state",
34 | ):
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:46:15: TRY003 Avoid specifying long messages outside the exception class
   |
44 |       """
45 |       if _prefix not in config:
46 |           raise KeyError(
   |  _______________^
47 | |             f"initialize_from_state requires the `{_prefix}` option specifying the state to initialize from"
48 | |         )
   | |_________^ TRY003
49 |       state = torch.load(config[_prefix])
50 |       model.load_state_dict(state, strict=config.get(_prefix + "_strict", True))
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:47:13: EM102 Exception must not use an f-string literal, assign to variable first
   |
45 |     if _prefix not in config:
46 |         raise KeyError(
47 |             f"initialize_from_state requires the `{_prefix}` option specifying the state to initialize from"
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
48 |         )
49 |     state = torch.load(config[_prefix])
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:55:5: ANN202 Missing return type annotation for private function `unit_uniform_init_`
   |
54 | # == Init functions ==
55 | def unit_uniform_init_(t: torch.Tensor):
   |     ^^^^^^^^^^^^^^^^^^ ANN202
56 |     """Uniform initialization with <x_i^2> = 1"""
57 |     t.uniform_(-math.sqrt(3), math.sqrt(3))
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:56:5: D400 First line should end with a period
   |
54 | # == Init functions ==
55 | def unit_uniform_init_(t: torch.Tensor):
56 |     """Uniform initialization with <x_i^2> = 1"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
57 |     t.uniform_(-math.sqrt(3), math.sqrt(3))
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:56:5: D415 First line should end with a period, question mark, or exclamation point
   |
54 | # == Init functions ==
55 | def unit_uniform_init_(t: torch.Tensor):
56 |     """Uniform initialization with <x_i^2> = 1"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
57 |     t.uniform_(-math.sqrt(3), math.sqrt(3))
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:60:3: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
60 | # TODO: does this normalization make any sense
   |   ^^^^ TD002
61 | # def unit_orthogonal_init_(t: torch.Tensor):
62 | #     """Orthogonal init with <x_i^2> = 1"""
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:60:3: TD003 Missing issue link on the line following this TODO
   |
60 | # TODO: does this normalization make any sense
   |   ^^^^ TD003
61 | # def unit_orthogonal_init_(t: torch.Tensor):
62 | #     """Orthogonal init with <x_i^2> = 1"""
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:60:3: FIX002 Line contains TODO, consider resolving the issue
   |
60 | # TODO: does this normalization make any sense
   |   ^^^^ FIX002
61 | # def unit_orthogonal_init_(t: torch.Tensor):
62 | #     """Orthogonal init with <x_i^2> = 1"""
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:62:1: ERA001 Found commented-out code
   |
60 | # TODO: does this normalization make any sense
61 | # def unit_orthogonal_init_(t: torch.Tensor):
62 | #     """Orthogonal init with <x_i^2> = 1"""
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
63 | #     assert t.ndim == 2
64 | #     torch.nn.init.orthogonal_(t, gain=math.sqrt(max(t.shape)))
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:63:1: ERA001 Found commented-out code
   |
61 | # def unit_orthogonal_init_(t: torch.Tensor):
62 | #     """Orthogonal init with <x_i^2> = 1"""
63 | #     assert t.ndim == 2
   | ^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
64 | #     torch.nn.init.orthogonal_(t, gain=math.sqrt(max(t.shape)))
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:64:1: ERA001 Found commented-out code
   |
62 | #     """Orthogonal init with <x_i^2> = 1"""
63 | #     assert t.ndim == 2
64 | #     torch.nn.init.orthogonal_(t, gain=math.sqrt(max(t.shape)))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:67:5: N802 Function name `uniform_initialize_FCs` should be lowercase
   |
67 | def uniform_initialize_FCs(model: GraphModuleMixin, initialize: bool):
   |     ^^^^^^^^^^^^^^^^^^^^^^ N802
68 |     """Initialize ``e3nn.nn.FullyConnectedNet``s with unit uniform initialization"""
69 |     if initialize:
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:67:5: ANN202 Missing return type annotation for private function `uniform_initialize_FCs`
   |
67 | def uniform_initialize_FCs(model: GraphModuleMixin, initialize: bool):
   |     ^^^^^^^^^^^^^^^^^^^^^^ ANN202
68 |     """Initialize ``e3nn.nn.FullyConnectedNet``s with unit uniform initialization"""
69 |     if initialize:
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:67:53: FBT001 Boolean-typed positional argument in function definition
   |
67 | def uniform_initialize_FCs(model: GraphModuleMixin, initialize: bool):
   |                                                     ^^^^^^^^^^ FBT001
68 |     """Initialize ``e3nn.nn.FullyConnectedNet``s with unit uniform initialization"""
69 |     if initialize:
   |

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:68:5: D400 First line should end with a period
   |
67 | def uniform_initialize_FCs(model: GraphModuleMixin, initialize: bool):
68 |     """Initialize ``e3nn.nn.FullyConnectedNet``s with unit uniform initialization"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
69 |     if initialize:
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:68:5: D415 First line should end with a period, question mark, or exclamation point
   |
67 | def uniform_initialize_FCs(model: GraphModuleMixin, initialize: bool):
68 |     """Initialize ``e3nn.nn.FullyConnectedNet``s with unit uniform initialization"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
69 |     if initialize:
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\model\_weight_init.py:71:13: ANN202 Missing return type annotation for private function `_uniform_initialize_fcs`
   |
69 |     if initialize:
70 | 
71 |         def _uniform_initialize_fcs(mod: torch.nn.Module):
   |             ^^^^^^^^^^^^^^^^^^^^^^^ ANN202
72 |             if isinstance(mod, e3nn.nn.FullyConnectedNet):
73 |                 for layer in mod:
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\model\builder_utils.py:8:5: ANN202 Missing return type annotation for private function `_add_avg_num_neighbors_helper`
   |
 8 | def _add_avg_num_neighbors_helper(data):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
 9 |     counts = torch.unique(
10 |         data[AtomicDataDict.EDGE_INDEX_KEY][0],
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:22:5: D103 Missing docstring in public function
   |
22 | def add_avg_num_neighbors(
   |     ^^^^^^^^^^^^^^^^^^^^^ D103
23 |     config: Config,
24 |     initialize: bool,
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:24:5: FBT001 Boolean-typed positional argument in function definition
   |
22 | def add_avg_num_neighbors(
23 |     config: Config,
24 |     initialize: bool,
   |     ^^^^^^^^^^ FBT001
25 |     dataset: Optional[AtomicDataset] = None,
26 | ) -> Optional[float]:
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:25:14: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
23 |     config: Config,
24 |     initialize: bool,
25 |     dataset: Optional[AtomicDataset] = None,
   |              ^^^^^^^^ FA100
26 | ) -> Optional[float]:
27 |     # Compute avg_num_neighbors
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:26:6: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
24 |     initialize: bool,
25 |     dataset: Optional[AtomicDataset] = None,
26 | ) -> Optional[float]:
   |      ^^^^^^^^ FA100
27 |     # Compute avg_num_neighbors
28 |     annkey: str = "avg_num_neighbors"
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:34:19: TRY003 Avoid specifying long messages outside the exception class
   |
32 |     if ann == "auto":
33 |         if not initialize:
34 |             raise ValueError("avg_num_neighbors = auto but initialize is False")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
35 |         if dataset is None:
36 |             raise ValueError(
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:34:30: EM101 Exception must not use a string literal, assign to variable first
   |
32 |     if ann == "auto":
33 |         if not initialize:
34 |             raise ValueError("avg_num_neighbors = auto but initialize is False")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
35 |         if dataset is None:
36 |             raise ValueError(
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:36:19: TRY003 Avoid specifying long messages outside the exception class
   |
34 |               raise ValueError("avg_num_neighbors = auto but initialize is False")
35 |           if dataset is None:
36 |               raise ValueError(
   |  ___________________^
37 | |                 "When avg_num_neighbors = auto, the dataset is required to build+initialize a model"
38 | |             )
   | |_____________^ TRY003
39 |           ann, var_nn = dataset.statistics(
40 |               fields=[_add_avg_num_neighbors_helper],
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:37:17: EM101 Exception must not use a string literal, assign to variable first
   |
35 |         if dataset is None:
36 |             raise ValueError(
37 |                 "When avg_num_neighbors = auto, the dataset is required to build+initialize a model"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
38 |             )
39 |         ann, var_nn = dataset.statistics(
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:46:5: ERA001 Found commented-out code
   |
44 |         ann = ann.item()
45 |         var_nn = var_nn.item()
46 |     # print("add_avg_num_neighbors ann", ann)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
47 |     # print("add_avg_num_neighbors var_nn", var_nn)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:47:5: ERA001 Found commented-out code
   |
45 |         var_nn = var_nn.item()
46 |     # print("add_avg_num_neighbors ann", ann)
47 |     # print("add_avg_num_neighbors var_nn", var_nn)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
48 | 
49 |     # make sure its valid
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:58:5: ANN202 Missing return type annotation for private function `_add_avg_num_atoms_helper`
   |
58 | def _add_avg_num_atoms_helper(data):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
59 |     counts = torch.unique(
60 |         data[AtomicDataDict.BATCH_KEY],
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:67:5: D103 Missing docstring in public function
   |
67 | def add_avg_num_atoms(
   |     ^^^^^^^^^^^^^^^^^ D103
68 |     config: Config,
69 |     initialize: bool,
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:69:5: FBT001 Boolean-typed positional argument in function definition
   |
67 | def add_avg_num_atoms(
68 |     config: Config,
69 |     initialize: bool,
   |     ^^^^^^^^^^ FBT001
70 |     dataset: Optional[AtomicDataset] = None,
71 | ) -> Optional[float]:
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:70:14: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
68 |     config: Config,
69 |     initialize: bool,
70 |     dataset: Optional[AtomicDataset] = None,
   |              ^^^^^^^^ FA100
71 | ) -> Optional[float]:
72 |     # Compute avg_num_atoms
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:71:6: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
69 |     initialize: bool,
70 |     dataset: Optional[AtomicDataset] = None,
71 | ) -> Optional[float]:
   |      ^^^^^^^^ FA100
72 |     # Compute avg_num_atoms
73 |     anakey: str = "avg_num_atoms"
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:79:19: TRY003 Avoid specifying long messages outside the exception class
   |
77 |     if ana == "auto":
78 |         if not initialize:
79 |             raise ValueError("avg_num_atoms = auto but initialize is False")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
80 |         if dataset is None:
81 |             raise ValueError(
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:79:30: EM101 Exception must not use a string literal, assign to variable first
   |
77 |     if ana == "auto":
78 |         if not initialize:
79 |             raise ValueError("avg_num_atoms = auto but initialize is False")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
80 |         if dataset is None:
81 |             raise ValueError(
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:81:19: TRY003 Avoid specifying long messages outside the exception class
   |
79 |               raise ValueError("avg_num_atoms = auto but initialize is False")
80 |           if dataset is None:
81 |               raise ValueError(
   |  ___________________^
82 | |                 "When avg_num_atoms = auto, the dataset is required to build+initialize a model"
83 | |             )
   | |_____________^ TRY003
84 |           ana, var_na = dataset.statistics(
85 |               fields=[_add_avg_num_atoms_helper],
   |

src\stk_search\geom3d\models\NequIP\model\builder_utils.py:82:17: EM101 Exception must not use a string literal, assign to variable first
   |
80 |         if dataset is None:
81 |             raise ValueError(
82 |                 "When avg_num_atoms = auto, the dataset is required to build+initialize a model"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
83 |             )
84 |         ana, var_na = dataset.statistics(
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\nn\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:15:9: ANN204 Missing return type annotation for special method `__init__`
   |
14 | class AtomwiseOperation(GraphModuleMixin, torch.nn.Module):
15 |     def __init__(self, operation, field: str, irreps_in=None):
   |         ^^^^^^^^ ANN204
16 |         super().__init__()
17 |         self.operation = operation
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:31:9: ANN204 Missing return type annotation for special method `__init__`
   |
30 | class AtomwiseLinear(GraphModuleMixin, torch.nn.Module):
31 |     def __init__(
   |         ^^^^^^^^ ANN204
32 |         self,
33 |         field: str = AtomicDataDict.NODE_FEATURES_KEY,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:34:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
32 |         self,
33 |         field: str = AtomicDataDict.NODE_FEATURES_KEY,
34 |         out_field: Optional[str] = None,
   |                    ^^^^^^^^ FA100
35 |         irreps_in=None,
36 |         irreps_out=None,
   |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:62:9: ANN204 Missing return type annotation for special method `__init__`
   |
60 |     constant: float
61 | 
62 |     def __init__(
   |         ^^^^^^^^ ANN204
63 |         self,
64 |         field: str,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:65:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
63 |         self,
64 |         field: str,
65 |         out_field: Optional[str] = None,
   |                    ^^^^^^^^ FA100
66 |         reduce="sum",
67 |         avg_num_atoms=None,
   |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:68:19: B006 Do not use mutable data structures for argument defaults
   |
66 |         reduce="sum",
67 |         avg_num_atoms=None,
68 |         irreps_in={},
   |                   ^^ B006
69 |     ):
70 |         super().__init__()
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:71:9: S101 Use of `assert` detected
   |
69 |     ):
70 |         super().__init__()
71 |         assert reduce in ("sum", "mean", "normalized_sum")
   |         ^^^^^^ S101
72 |         self.constant = 1.0
73 |         if reduce == "normalized_sum":
   |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:74:13: S101 Use of `assert` detected
   |
72 |         self.constant = 1.0
73 |         if reduce == "normalized_sum":
74 |             assert avg_num_atoms is not None
   |             ^^^^^^ S101
75 |             self.constant = float(avg_num_atoms) ** -0.5
76 |             reduce = "sum"
   |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:124:9: PLR0913 Too many arguments in function definition (10 > 5)
    |
122 |     has_shifts: bool
123 | 
124 |     def __init__(
    |         ^^^^^^^^ PLR0913
125 |         self,
126 |         field: str,
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:124:9: ANN204 Missing return type annotation for special method `__init__`
    |
122 |     has_shifts: bool
123 | 
124 |     def __init__(
    |         ^^^^^^^^ ANN204
125 |         self,
126 |         field: str,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:128:21: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
126 |         field: str,
127 |         num_types: int,
128 |         type_names: List[str],
    |                     ^^^^ FA100
129 |         shifts: Optional[List[float]],
130 |         scales: Optional[List[float]],
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:129:17: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
127 |         num_types: int,
128 |         type_names: List[str],
129 |         shifts: Optional[List[float]],
    |                 ^^^^^^^^ FA100
130 |         scales: Optional[List[float]],
131 |         arguments_in_dataset_units: bool,
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:129:26: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
127 |         num_types: int,
128 |         type_names: List[str],
129 |         shifts: Optional[List[float]],
    |                          ^^^^ FA100
130 |         scales: Optional[List[float]],
131 |         arguments_in_dataset_units: bool,
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:130:17: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
128 |         type_names: List[str],
129 |         shifts: Optional[List[float]],
130 |         scales: Optional[List[float]],
    |                 ^^^^^^^^ FA100
131 |         arguments_in_dataset_units: bool,
132 |         out_field: Optional[str] = None,
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:130:26: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
128 |         type_names: List[str],
129 |         shifts: Optional[List[float]],
130 |         scales: Optional[List[float]],
    |                          ^^^^ FA100
131 |         arguments_in_dataset_units: bool,
132 |         out_field: Optional[str] = None,
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:131:9: FBT001 Boolean-typed positional argument in function definition
    |
129 |         shifts: Optional[List[float]],
130 |         scales: Optional[List[float]],
131 |         arguments_in_dataset_units: bool,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ FBT001
132 |         out_field: Optional[str] = None,
133 |         scales_trainable: bool = False,
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:132:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
130 |         scales: Optional[List[float]],
131 |         arguments_in_dataset_units: bool,
132 |         out_field: Optional[str] = None,
    |                    ^^^^^^^^ FA100
133 |         scales_trainable: bool = False,
134 |         shifts_trainable: bool = False,
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:133:9: FBT001 Boolean-typed positional argument in function definition
    |
131 |         arguments_in_dataset_units: bool,
132 |         out_field: Optional[str] = None,
133 |         scales_trainable: bool = False,
    |         ^^^^^^^^^^^^^^^^ FBT001
134 |         shifts_trainable: bool = False,
135 |         irreps_in={},
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:133:9: FBT002 Boolean default positional argument in function definition
    |
131 |         arguments_in_dataset_units: bool,
132 |         out_field: Optional[str] = None,
133 |         scales_trainable: bool = False,
    |         ^^^^^^^^^^^^^^^^ FBT002
134 |         shifts_trainable: bool = False,
135 |         irreps_in={},
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:134:9: FBT001 Boolean-typed positional argument in function definition
    |
132 |         out_field: Optional[str] = None,
133 |         scales_trainable: bool = False,
134 |         shifts_trainable: bool = False,
    |         ^^^^^^^^^^^^^^^^ FBT001
135 |         irreps_in={},
136 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:134:9: FBT002 Boolean default positional argument in function definition
    |
132 |         out_field: Optional[str] = None,
133 |         scales_trainable: bool = False,
134 |         shifts_trainable: bool = False,
    |         ^^^^^^^^^^^^^^^^ FBT002
135 |         irreps_in={},
136 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:135:19: B006 Do not use mutable data structures for argument defaults
    |
133 |         scales_trainable: bool = False,
134 |         shifts_trainable: bool = False,
135 |         irreps_in={},
    |                   ^^ B006
136 |     ):
137 |         super().__init__()
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:153:13: S101 Use of `assert` detected
    |
151 |             if len(shifts.reshape([-1])) == 1:
152 |                 shifts = torch.ones(num_types) * shifts
153 |             assert shifts.shape == (num_types,), f"Invalid shape of shifts {shifts}"
    |             ^^^^^^ S101
154 |             self.shifts_trainable = shifts_trainable
155 |             if shifts_trainable:
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:165:13: S101 Use of `assert` detected
    |
163 |             if len(scales.reshape([-1])) == 1:
164 |                 scales = torch.ones(num_types) * scales
165 |             assert scales.shape == (num_types,), f"Invalid shape of scales {scales}"
    |             ^^^^^^ S101
166 |             self.scales_trainable = scales_trainable
167 |             if scales_trainable:
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:181:9: S101 Use of `assert` detected
    |
179 |         species_idx = data[AtomicDataDict.ATOM_TYPE_KEY]
180 |         in_field = data[self.field]
181 |         assert len(in_field) == len(
    |         ^^^^^^ S101
182 |             species_idx
183 |         ), "in_field doesnt seem to have correct per-atom shape"
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:191:9: ANN202 Missing return type annotation for private function `update_for_rescale`
    |
189 |         return data
190 | 
191 |     def update_for_rescale(self, rescale_module):
    |         ^^^^^^^^^^^^^^^^^^ ANN202
192 |         if hasattr(rescale_module, "related_scale_keys"):
193 |             if self.out_field not in rescale_module.related_scale_keys:
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:192:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
191 |       def update_for_rescale(self, rescale_module):
192 |           if hasattr(rescale_module, "related_scale_keys"):
    |  _________^
193 | |             if self.out_field not in rescale_module.related_scale_keys:
    | |_______________________________________________________________________^ SIM102
194 |                   return
195 |           if self.arguments_in_dataset_units and rescale_module.has_scale:
    |
    = help: Combine `if` statements using `and`

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:197:17: G004 Logging statement uses f-string
    |
195 |           if self.arguments_in_dataset_units and rescale_module.has_scale:
196 |               logging.debug(
197 |                   f"PerSpeciesScaleShift's arguments were in dataset units; rescaling:\n  "
    |  _________________^
198 | |                 f"Original scales: {TypeMapper.format(self.scales, self.type_names) if self.has_scales else 'n/a'} "
199 | |                 f"shifts: {TypeMapper.format(self.shifts, self.type_names) if self.has_shifts else 'n/a'}"
    | |__________________________________________________________________________________________________________^ G004
200 |               )
201 |               with torch.no_grad():
    |

src\stk_search\geom3d\models\NequIP\nn\_atomwise.py:207:17: G004 Logging statement uses f-string
    |
205 |                       self.shifts.div_(rescale_module.scale_by)
206 |               logging.debug(
207 |                   f"  New scales: {TypeMapper.format(self.scales, self.type_names) if self.has_scales else 'n/a'} "
    |  _________________^
208 | |                 f"shifts: {TypeMapper.format(self.shifts, self.type_names) if self.has_shifts else 'n/a'}"
    | |__________________________________________________________________________________________________________^ G004
209 |               )
    |

src\stk_search\geom3d\models\NequIP\nn\_concat.py:12:9: ANN204 Missing return type annotation for special method `__init__`
   |
10 |     """Concatenate multiple fields into one."""
11 | 
12 |     def __init__(self, in_fields: List[str], out_field: str, irreps_in={}):
   |         ^^^^^^^^ ANN204
13 |         super().__init__()
14 |         self.in_fields = list(in_fields)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_concat.py:12:35: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
10 |     """Concatenate multiple fields into one."""
11 | 
12 |     def __init__(self, in_fields: List[str], out_field: str, irreps_in={}):
   |                                   ^^^^ FA100
13 |         super().__init__()
14 |         self.in_fields = list(in_fields)
   |

src\stk_search\geom3d\models\NequIP\nn\_concat.py:12:72: B006 Do not use mutable data structures for argument defaults
   |
10 |     """Concatenate multiple fields into one."""
11 | 
12 |     def __init__(self, in_fields: List[str], out_field: str, irreps_in={}):
   |                                                                        ^^ B006
13 |         super().__init__()
14 |         self.in_fields = list(in_fields)
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:24:5: D205 1 blank line required between summary line and description
   |
23 |   class ConvNetLayer(GraphModuleMixin, torch.nn.Module):
24 |       """Args:
   |  _____^
25 | |     ----
26 | | 
27 | |     """
   | |_______^ D205
28 |   
29 |       resnet: bool
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:24:5: D400 First line should end with a period
   |
23 |   class ConvNetLayer(GraphModuleMixin, torch.nn.Module):
24 |       """Args:
   |  _____^
25 | |     ----
26 | | 
27 | |     """
   | |_______^ D400
28 |   
29 |       resnet: bool
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:24:5: D415 First line should end with a period, question mark, or exclamation point
   |
23 |   class ConvNetLayer(GraphModuleMixin, torch.nn.Module):
24 |       """Args:
   |  _____^
25 | |     ----
26 | | 
27 | |     """
   | |_______^ D415
28 |   
29 |       resnet: bool
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:31:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
29 |     resnet: bool
30 | 
31 |     def __init__(
   |         ^^^^^^^^ PLR0913
32 |         self,
33 |         irreps_in,
   |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:31:9: ANN204 Missing return type annotation for special method `__init__`
   |
29 |     resnet: bool
30 | 
31 |     def __init__(
   |         ^^^^^^^^ ANN204
32 |         self,
33 |         irreps_in,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:36:36: B006 Do not use mutable data structures for argument defaults
   |
34 |         feature_irreps_hidden,
35 |         convolution=InteractionBlock,
36 |         convolution_kwargs: dict = {},
   |                                    ^^ B006
37 |         num_layers: int = 3,
38 |         resnet: bool = False,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:38:9: FBT001 Boolean-typed positional argument in function definition
   |
36 |         convolution_kwargs: dict = {},
37 |         num_layers: int = 3,
38 |         resnet: bool = False,
   |         ^^^^^^ FBT001
39 |         nonlinearity_type: str = "gate",
40 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp", "o": "tanh"},
   |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:38:9: FBT002 Boolean default positional argument in function definition
   |
36 |         convolution_kwargs: dict = {},
37 |         num_layers: int = 3,
38 |         resnet: bool = False,
   |         ^^^^^^ FBT002
39 |         nonlinearity_type: str = "gate",
40 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp", "o": "tanh"},
   |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:40:31: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
38 |         resnet: bool = False,
39 |         nonlinearity_type: str = "gate",
40 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp", "o": "tanh"},
   |                               ^^^^ FA100
41 |         nonlinearity_gates: Dict[int, Callable] = {"e": "ssp", "o": "abs"},
42 |     ):
   |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:40:53: B006 Do not use mutable data structures for argument defaults
   |
38 |         resnet: bool = False,
39 |         nonlinearity_type: str = "gate",
40 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp", "o": "tanh"},
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ B006
41 |         nonlinearity_gates: Dict[int, Callable] = {"e": "ssp", "o": "abs"},
42 |     ):
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:41:29: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
39 |         nonlinearity_type: str = "gate",
40 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp", "o": "tanh"},
41 |         nonlinearity_gates: Dict[int, Callable] = {"e": "ssp", "o": "abs"},
   |                             ^^^^ FA100
42 |     ):
43 |         super().__init__()
   |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:41:51: B006 Do not use mutable data structures for argument defaults
   |
39 |         nonlinearity_type: str = "gate",
40 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp", "o": "tanh"},
41 |         nonlinearity_gates: Dict[int, Callable] = {"e": "ssp", "o": "abs"},
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ B006
42 |     ):
43 |         super().__init__()
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:45:9: S101 Use of `assert` detected
   |
43 |         super().__init__()
44 |         # initialization
45 |         assert nonlinearity_type in ("gate", "norm")
   |         ^^^^^^ S101
46 |         # make the nonlin dicts from parity ints instead of convinience strs
47 |         nonlinearity_scalars = {
   |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:125:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
123 |         self.equivariant_nonlin = equivariant_nonlin
124 | 
125 |         # TODO: partial resnet?
    |           ^^^^ TD002
126 |         if irreps_layer_out == irreps_layer_out_prev and resnet:
127 |             # We are doing resnet updates and can for this layer
    |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:125:11: TD003 Missing issue link on the line following this TODO
    |
123 |         self.equivariant_nonlin = equivariant_nonlin
124 | 
125 |         # TODO: partial resnet?
    |           ^^^^ TD003
126 |         if irreps_layer_out == irreps_layer_out_prev and resnet:
127 |             # We are doing resnet updates and can for this layer
    |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:125:11: FIX002 Line contains TODO, consider resolving the issue
    |
123 |         self.equivariant_nonlin = equivariant_nonlin
124 | 
125 |         # TODO: partial resnet?
    |           ^^^^ FIX002
126 |         if irreps_layer_out == irreps_layer_out_prev and resnet:
127 |             # We are doing resnet updates and can for this layer
    |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:132:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
130 |             self.resnet = False
131 | 
132 |         # TODO: last convolution should go to explicit irreps out
    |           ^^^^ TD002
133 |         logging.debug(
134 |             f" parameters used to initialize {convolution.__name__}={convolution_kwargs}"
    |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:132:11: TD003 Missing issue link on the line following this TODO
    |
130 |             self.resnet = False
131 | 
132 |         # TODO: last convolution should go to explicit irreps out
    |           ^^^^ TD003
133 |         logging.debug(
134 |             f" parameters used to initialize {convolution.__name__}={convolution_kwargs}"
    |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:132:11: FIX002 Line contains TODO, consider resolving the issue
    |
130 |             self.resnet = False
131 | 
132 |         # TODO: last convolution should go to explicit irreps out
    |           ^^^^ FIX002
133 |         logging.debug(
134 |             f" parameters used to initialize {convolution.__name__}={convolution_kwargs}"
    |

src\stk_search\geom3d\models\NequIP\nn\_convnetlayer.py:134:13: G004 Logging statement uses f-string
    |
132 |         # TODO: last convolution should go to explicit irreps out
133 |         logging.debug(
134 |             f" parameters used to initialize {convolution.__name__}={convolution_kwargs}"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
135 |         )
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:29:9: ANN204 Missing return type annotation for special method `__init__`
   |
27 |     skip: bool
28 | 
29 |     def __init__(
   |         ^^^^^^^^ ANN204
30 |         self,
31 |         func: GraphModuleMixin,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:33:14: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
31 |         func: GraphModuleMixin,
32 |         of: str,
33 |         wrt: Union[str, List[str]],
   |              ^^^^^ FA100
34 |         out_field: Optional[List[str]] = None,
35 |         sign: float = 1.0,
   |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:33:25: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
31 |         func: GraphModuleMixin,
32 |         of: str,
33 |         wrt: Union[str, List[str]],
   |                         ^^^^ FA100
34 |         out_field: Optional[List[str]] = None,
35 |         sign: float = 1.0,
   |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:34:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
32 |         of: str,
33 |         wrt: Union[str, List[str]],
34 |         out_field: Optional[List[str]] = None,
   |                    ^^^^^^^^ FA100
35 |         sign: float = 1.0,
36 |     ):
   |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:34:29: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
32 |         of: str,
33 |         wrt: Union[str, List[str]],
34 |         out_field: Optional[List[str]] = None,
   |                             ^^^^ FA100
35 |         sign: float = 1.0,
36 |     ):
   |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:39:9: S101 Use of `assert` detected
   |
37 |         super().__init__()
38 |         sign = float(sign)
39 |         assert sign in (1.0, -1.0)
   |         ^^^^^^ S101
40 |         self.sign = sign
41 |         self._negate = sign == -1.0
   |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:55:13: S101 Use of `assert` detected
   |
53 |             self.out_field = [f"d({of})/d({e})" for e in self.wrt]
54 |         else:
55 |             assert len(out_field) == len(
   |             ^^^^^^ S101
56 |                 self.wrt
57 |             ), "Out field names must be given for all w.r.t tensors"
   |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:77:9: ERA001 Found commented-out code
   |
75 |         if self.skip:
76 |             return self.func(data)
77 |         # print("after", data.keys())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
78 |         # # dict_keys(['edge_index', 'pos', 'batch', 'ptr', 'cell', 'pbc', 'edge_cell_shift', 'r_max', 'atom_types'])
79 |         # print("edge_index", data['edge_index'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:78:9: ERA001 Found commented-out code
   |
76 |             return self.func(data)
77 |         # print("after", data.keys())
78 |         # # dict_keys(['edge_index', 'pos', 'batch', 'ptr', 'cell', 'pbc', 'edge_cell_shift', 'r_max', 'atom_types'])
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
79 |         # print("edge_index", data['edge_index'].size())
80 |         # print("pos", data['pos'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:79:9: ERA001 Found commented-out code
   |
77 |         # print("after", data.keys())
78 |         # # dict_keys(['edge_index', 'pos', 'batch', 'ptr', 'cell', 'pbc', 'edge_cell_shift', 'r_max', 'atom_types'])
79 |         # print("edge_index", data['edge_index'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
80 |         # print("pos", data['pos'].size())
81 |         # print("atom_types", data['atom_types'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:80:9: ERA001 Found commented-out code
   |
78 |         # # dict_keys(['edge_index', 'pos', 'batch', 'ptr', 'cell', 'pbc', 'edge_cell_shift', 'r_max', 'atom_types'])
79 |         # print("edge_index", data['edge_index'].size())
80 |         # print("pos", data['pos'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
81 |         # print("atom_types", data['atom_types'].size())
82 |         # print("batch", data['batch'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:81:9: ERA001 Found commented-out code
   |
79 |         # print("edge_index", data['edge_index'].size())
80 |         # print("pos", data['pos'].size())
81 |         # print("atom_types", data['atom_types'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
82 |         # print("batch", data['batch'].size())
83 |         # print("r_max", data['r_max'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:82:9: ERA001 Found commented-out code
   |
80 |         # print("pos", data['pos'].size())
81 |         # print("atom_types", data['atom_types'].size())
82 |         # print("batch", data['batch'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
83 |         # print("r_max", data['r_max'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:83:9: ERA001 Found commented-out code
   |
81 |         # print("atom_types", data['atom_types'].size())
82 |         # print("batch", data['batch'].size())
83 |         # print("r_max", data['r_max'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
84 | 
85 |         # print("ptr", data['ptr'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:85:9: ERA001 Found commented-out code
   |
83 |         # print("r_max", data['r_max'].size())
84 | 
85 |         # print("ptr", data['ptr'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
86 |         # print("cell", data['cell'].size())
87 |         # print("pbc", data['pbc'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:86:9: ERA001 Found commented-out code
   |
85 |         # print("ptr", data['ptr'].size())
86 |         # print("cell", data['cell'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
87 |         # print("pbc", data['pbc'].size())
88 |         # print("edge_cell_shift", data['edge_cell_shift'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:87:9: ERA001 Found commented-out code
   |
85 |         # print("ptr", data['ptr'].size())
86 |         # print("cell", data['cell'].size())
87 |         # print("pbc", data['pbc'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
88 |         # print("edge_cell_shift", data['edge_cell_shift'].size())
89 |         # del data['ptr']
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:88:9: ERA001 Found commented-out code
   |
86 |         # print("cell", data['cell'].size())
87 |         # print("pbc", data['pbc'].size())
88 |         # print("edge_cell_shift", data['edge_cell_shift'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
89 |         # del data['ptr']
90 |         # del data['cell']
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:89:9: ERA001 Found commented-out code
   |
87 |         # print("pbc", data['pbc'].size())
88 |         # print("edge_cell_shift", data['edge_cell_shift'].size())
89 |         # del data['ptr']
   |         ^^^^^^^^^^^^^^^^^ ERA001
90 |         # del data['cell']
91 |         # del data['pbc']
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:90:9: ERA001 Found commented-out code
   |
88 |         # print("edge_cell_shift", data['edge_cell_shift'].size())
89 |         # del data['ptr']
90 |         # del data['cell']
   |         ^^^^^^^^^^^^^^^^^^ ERA001
91 |         # del data['pbc']
92 |         # del data['edge_cell_shift']
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:91:9: ERA001 Found commented-out code
   |
89 |         # del data['ptr']
90 |         # del data['cell']
91 |         # del data['pbc']
   |         ^^^^^^^^^^^^^^^^^ ERA001
92 |         # del data['edge_cell_shift']
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:92:9: ERA001 Found commented-out code
   |
90 |         # del data['cell']
91 |         # del data['pbc']
92 |         # del data['edge_cell_shift']
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
93 | 
94 |         # print("after", data.keys())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:94:9: ERA001 Found commented-out code
   |
92 |         # del data['edge_cell_shift']
93 | 
94 |         # print("after", data.keys())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
95 |         # print("edge_index", data['edge_index'].size())
96 |         # print("pos", data['pos'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:95:9: ERA001 Found commented-out code
   |
94 |         # print("after", data.keys())
95 |         # print("edge_index", data['edge_index'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
96 |         # print("pos", data['pos'].size())
97 |         # print("atom_types", data['atom_types'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:96:9: ERA001 Found commented-out code
   |
94 |         # print("after", data.keys())
95 |         # print("edge_index", data['edge_index'].size())
96 |         # print("pos", data['pos'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
97 |         # print("atom_types", data['atom_types'].size())
98 |         # print("batch", data['batch'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:97:9: ERA001 Found commented-out code
   |
95 |         # print("edge_index", data['edge_index'].size())
96 |         # print("pos", data['pos'].size())
97 |         # print("atom_types", data['atom_types'].size())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
98 |         # print("batch", data['batch'].size())
99 |         # # print("r_max", data['r_max'].size())
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:98:9: ERA001 Found commented-out code
    |
 96 |         # print("pos", data['pos'].size())
 97 |         # print("atom_types", data['atom_types'].size())
 98 |         # print("batch", data['batch'].size())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
 99 |         # # print("r_max", data['r_max'].size())
100 |         # # print("ptr", data['ptr'].size())
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:99:9: ERA001 Found commented-out code
    |
 97 |         # print("atom_types", data['atom_types'].size())
 98 |         # print("batch", data['batch'].size())
 99 |         # # print("r_max", data['r_max'].size())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
100 |         # # print("ptr", data['ptr'].size())
101 |         # # print("cell", data['cell'].size())
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:100:9: ERA001 Found commented-out code
    |
 98 |         # print("batch", data['batch'].size())
 99 |         # # print("r_max", data['r_max'].size())
100 |         # # print("ptr", data['ptr'].size())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
101 |         # # print("cell", data['cell'].size())
102 |         # # print("pbc", data['pbc'].size())
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:101:9: ERA001 Found commented-out code
    |
 99 |         # # print("r_max", data['r_max'].size())
100 |         # # print("ptr", data['ptr'].size())
101 |         # # print("cell", data['cell'].size())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
102 |         # # print("pbc", data['pbc'].size())
103 |         # # print("edge_cell_shift", data['edge_cell_shift'].size())
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:102:9: ERA001 Found commented-out code
    |
100 |         # # print("ptr", data['ptr'].size())
101 |         # # print("cell", data['cell'].size())
102 |         # # print("pbc", data['pbc'].size())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
103 |         # # print("edge_cell_shift", data['edge_cell_shift'].size())
104 |         # # exit()
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:103:9: ERA001 Found commented-out code
    |
101 |         # # print("cell", data['cell'].size())
102 |         # # print("pbc", data['pbc'].size())
103 |         # # print("edge_cell_shift", data['edge_cell_shift'].size())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
104 |         # # exit()
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:104:9: ERA001 Found commented-out code
    |
102 |         # # print("pbc", data['pbc'].size())
103 |         # # print("edge_cell_shift", data['edge_cell_shift'].size())
104 |         # # exit()
    |         ^^^^^^^^^^ ERA001
105 | 
106 |         # set req grad
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:108:28: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
106 |         # set req grad
107 |         wrt_tensors = []
108 |         old_requires_grad: List[bool] = []
    |                            ^^^^ FA100
109 |         for k in self.wrt:
110 |             old_requires_grad.append(data[k].requires_grad)
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:111:36: FBT003 Boolean positional value in function call
    |
109 |         for k in self.wrt:
110 |             old_requires_grad.append(data[k].requires_grad)
111 |             data[k].requires_grad_(True)
    |                                    ^^^^ FBT003
112 |             wrt_tensors.append(data[k])
113 |         # run func
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:117:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
115 |         # Get grads
116 |         grads = torch.autograd.grad(
117 |             # TODO:
    |               ^^^^ TD002
118 |             # This makes sense for scalar batch-level or batch-wise outputs, specifically because d(sum(batches))/d wrt = sum(d batch / d wrt) = d my_batch / d wrt
119 |             # for a well-behaved example level like energy where d other_batch / d wrt is always zero. (In other words, the energy of example 1 in the batch is completely unaffect by changes in the position of atoms in another example.)
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:117:15: TD005 Missing issue description after `TODO`
    |
115 |         # Get grads
116 |         grads = torch.autograd.grad(
117 |             # TODO:
    |               ^^^^ TD005
118 |             # This makes sense for scalar batch-level or batch-wise outputs, specifically because d(sum(batches))/d wrt = sum(d batch / d wrt) = d my_batch / d wrt
119 |             # for a well-behaved example level like energy where d other_batch / d wrt is always zero. (In other words, the energy of example 1 in the batch is completely unaffect by changes in the position of atoms in another example.)
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:117:15: TD003 Missing issue link on the line following this TODO
    |
115 |         # Get grads
116 |         grads = torch.autograd.grad(
117 |             # TODO:
    |               ^^^^ TD003
118 |             # This makes sense for scalar batch-level or batch-wise outputs, specifically because d(sum(batches))/d wrt = sum(d batch / d wrt) = d my_batch / d wrt
119 |             # for a well-behaved example level like energy where d other_batch / d wrt is always zero. (In other words, the energy of example 1 in the batch is completely unaffect by changes in the position of atoms in another example.)
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:117:15: FIX002 Line contains TODO, consider resolving the issue
    |
115 |         # Get grads
116 |         grads = torch.autograd.grad(
117 |             # TODO:
    |               ^^^^ FIX002
118 |             # This makes sense for scalar batch-level or batch-wise outputs, specifically because d(sum(batches))/d wrt = sum(d batch / d wrt) = d my_batch / d wrt
119 |             # for a well-behaved example level like energy where d other_batch / d wrt is always zero. (In other words, the energy of example 1 in the batch is completely unaffect by changes in the position of atoms in another example.)
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:125:9: ERA001 Found commented-out code
    |
123 |             create_graph=self.training,  # needed to allow gradients of this output during training
124 |         )
125 |         # return
    |         ^^^^^^^^ ERA001
126 |         # grad is optional[tensor]?
127 |         for out, grad in zip(self.out_field, grads):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:129:53: RUF003 Comment contains ambiguous `’` (RIGHT SINGLE QUOTATION MARK). Did you mean ``` (GRAVE ACCENT)?
    |
127 |         for out, grad in zip(self.out_field, grads):
128 |             if grad is None:
129 |                 # From the docs: "If an output doesn’t require_grad, then the gradient can be None"
    |                                                     ^ RUF003
130 |                 raise RuntimeError("Something is wrong, gradient couldn't be computed")
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:130:23: TRY003 Avoid specifying long messages outside the exception class
    |
128 |             if grad is None:
129 |                 # From the docs: "If an output doesn’t require_grad, then the gradient can be None"
130 |                 raise RuntimeError("Something is wrong, gradient couldn't be computed")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
131 | 
132 |             if self._negate:
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:130:36: EM101 Exception must not use a string literal, assign to variable first
    |
128 |             if grad is None:
129 |                 # From the docs: "If an output doesn’t require_grad, then the gradient can be None"
130 |                 raise RuntimeError("Something is wrong, gradient couldn't be computed")
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
131 | 
132 |             if self._negate:
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:133:17: PLW2901 `for` loop variable `grad` overwritten by assignment target
    |
132 |             if self._negate:
133 |                 grad = torch.neg(grad)
    |                 ^^^^ PLW2901
134 |             data[out] = grad
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:157:9: ANN204 Missing return type annotation for special method `__init__`
    |
155 |     vectorize: bool
156 | 
157 |     def __init__(
    |         ^^^^^^^^ ANN204
158 |         self,
159 |         func: GraphModuleMixin,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:160:9: FBT001 Boolean-typed positional argument in function definition
    |
158 |         self,
159 |         func: GraphModuleMixin,
160 |         vectorize: bool = False,
    |         ^^^^^^^^^ FBT001
161 |         vectorize_warnings: bool = False,
162 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:160:9: FBT002 Boolean default positional argument in function definition
    |
158 |         self,
159 |         func: GraphModuleMixin,
160 |         vectorize: bool = False,
    |         ^^^^^^^^^ FBT002
161 |         vectorize_warnings: bool = False,
162 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:161:9: FBT001 Boolean-typed positional argument in function definition
    |
159 |         func: GraphModuleMixin,
160 |         vectorize: bool = False,
161 |         vectorize_warnings: bool = False,
    |         ^^^^^^^^^^^^^^^^^^ FBT001
162 |     ):
163 |         super().__init__()
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:161:9: FBT002 Boolean default positional argument in function definition
    |
159 |         func: GraphModuleMixin,
160 |         vectorize: bool = False,
161 |         vectorize_warnings: bool = False,
    |         ^^^^^^^^^^^^^^^^^^ FBT002
162 |     ):
163 |         super().__init__()
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:168:13: SLF001 Private member accessed: `_C`
    |
166 |         if vectorize_warnings:
167 |             # See https://pytorch.org/docs/stable/generated/torch.autograd.functional.jacobian.html
168 |             torch._C._debug_only_display_vmap_fallback_warnings(True)
    |             ^^^^^^^^ SLF001
169 | 
170 |         # check and init irreps
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:168:13: SLF001 Private member accessed: `_debug_only_display_vmap_fallback_warnings`
    |
166 |         if vectorize_warnings:
167 |             # See https://pytorch.org/docs/stable/generated/torch.autograd.functional.jacobian.html
168 |             torch._C._debug_only_display_vmap_fallback_warnings(True)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
169 | 
170 |         # check and init irreps
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:168:65: FBT003 Boolean positional value in function call
    |
166 |         if vectorize_warnings:
167 |             # See https://pytorch.org/docs/stable/generated/torch.autograd.functional.jacobian.html
168 |             torch._C._debug_only_display_vmap_fallback_warnings(True)
    |                                                                 ^^^^ FBT003
169 | 
170 |         # check and init irreps
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:184:13: D400 First line should end with a period
    |
183 |         def wrapper(pos: torch.Tensor) -> torch.Tensor:
184 |             """Wrapper from pos to atomic energy"""
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
185 |             nonlocal data, out_data
186 |             data[AtomicDataDict.POSITIONS_KEY] = pos
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:184:13: D401 First line of docstring should be in imperative mood: "Wrapper from pos to atomic energy"
    |
183 |         def wrapper(pos: torch.Tensor) -> torch.Tensor:
184 |             """Wrapper from pos to atomic energy"""
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
185 |             nonlocal data, out_data
186 |             data[AtomicDataDict.POSITIONS_KEY] = pos
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:184:13: D415 First line should end with a period, question mark, or exclamation point
    |
183 |         def wrapper(pos: torch.Tensor) -> torch.Tensor:
184 |             """Wrapper from pos to atomic energy"""
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
185 |             nonlocal data, out_data
186 |             data[AtomicDataDict.POSITIONS_KEY] = pos
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:199:9: ERA001 Found commented-out code
    |
197 |         )
198 |         partial_forces = partial_forces.negative()
199 |         # output is [n_at, n_at, 3]
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
200 | 
201 |         out_data[AtomicDataDict.PARTIAL_FORCE_KEY] = partial_forces
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:224:9: ANN204 Missing return type annotation for special method `__init__`
    |
222 |     do_forces: bool
223 | 
224 |     def __init__(
    |         ^^^^^^^^ ANN204
225 |         self,
226 |         func: GraphModuleMixin,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:227:9: FBT001 Boolean-typed positional argument in function definition
    |
225 |         self,
226 |         func: GraphModuleMixin,
227 |         do_forces: bool = True,
    |         ^^^^^^^^^ FBT001
228 |     ):
229 |         super().__init__()
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:227:9: FBT002 Boolean default positional argument in function definition
    |
225 |         self,
226 |         func: GraphModuleMixin,
227 |         do_forces: bool = True,
    |         ^^^^^^^^^ FBT002
228 |     ):
229 |         super().__init__()
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:231:9: B028 No explicit `stacklevel` keyword argument found
    |
229 |         super().__init__()
230 | 
231 |         warnings.warn(
    |         ^^^^^^^^^^^^^ B028
232 |             "!! Stresses in NequIP are in BETA and UNDER DEVELOPMENT: _please_ carefully check the sanity of your results and report any (potential) issues on the GitHub"
233 |         )
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:285:37: FBT003 Boolean positional value in function call
    |
283 |             device=pos.device,
284 |         )
285 |         displacement.requires_grad_(True)
    |                                     ^^^^ FBT003
286 |         data["_displacement"] = displacement
287 |         # in the above paper, the infinitesimal distortion is *symmetric*
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:300:28: FBT003 Boolean positional value in function call
    |
298 |         symmetric_displacement = 0.5 * (displacement + displacement.transpose(-1, -2))
299 |         did_pos_req_grad: bool = pos.requires_grad
300 |         pos.requires_grad_(True)
    |                            ^^^^ FBT003
301 |         # bmm is natom in batch
302 |         data[AtomicDataDict.POSITIONS_KEY] = pos + torch.bmm(
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:331:13: S101 Use of `assert` detected
    |
329 |         if forces is None:
330 |             # condition needed to unwrap optional for torchscript
331 |             assert False, "failed to compute forces autograd"
    |             ^^^^^^ S101
332 |         forces = torch.neg(forces)
333 |         data[AtomicDataDict.FORCE_KEY] = forces
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:331:13: PT015 Assertion always fails, replace with `pytest.fail()`
    |
329 |         if forces is None:
330 |             # condition needed to unwrap optional for torchscript
331 |             assert False, "failed to compute forces autograd"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT015
332 |         forces = torch.neg(forces)
333 |         data[AtomicDataDict.FORCE_KEY] = forces
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:331:20: B011 Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
    |
329 |         if forces is None:
330 |             # condition needed to unwrap optional for torchscript
331 |             assert False, "failed to compute forces autograd"
    |                    ^^^^^ B011
332 |         forces = torch.neg(forces)
333 |         data[AtomicDataDict.FORCE_KEY] = forces
    |
    = help: Replace `assert False`

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:339:13: S101 Use of `assert` detected
    |
337 |         if virial is None:
338 |             # condition needed to unwrap optional for torchscript
339 |             assert False, "failed to compute virial autograd"
    |             ^^^^^^ S101
340 | 
341 |         # we only compute the stress (1/V * virial) if we have a cell whose volume we can compute
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:339:13: PT015 Assertion always fails, replace with `pytest.fail()`
    |
337 |         if virial is None:
338 |             # condition needed to unwrap optional for torchscript
339 |             assert False, "failed to compute virial autograd"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT015
340 | 
341 |         # we only compute the stress (1/V * virial) if we have a cell whose volume we can compute
    |

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:339:20: B011 Do not `assert False` (`python -O` removes these calls), raise `AssertionError()`
    |
337 |         if virial is None:
338 |             # condition needed to unwrap optional for torchscript
339 |             assert False, "failed to compute virial autograd"
    |                    ^^^^^ B011
340 | 
341 |         # we only compute the stress (1/V * virial) if we have a cell whose volume we can compute
    |
    = help: Replace `assert False`

src\stk_search\geom3d\models\NequIP\nn\_grad_output.py:369:32: FBT003 Boolean positional value in function call
    |
367 |         if not did_pos_req_grad:
368 |             # don't give later modules one that does
369 |             pos.requires_grad_(False)
    |                                ^^^^^ FBT003
370 | 
371 |         return data
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:26:9: ANN202 Missing return type annotation for private function `_init_irreps`
   |
24 |     """
25 | 
26 |     def _init_irreps(
   |         ^^^^^^^^^^^^ ANN202
27 |         self,
28 |         irreps_in: Dict[str, Any] = {},
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:28:20: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
26 |     def _init_irreps(
27 |         self,
28 |         irreps_in: Dict[str, Any] = {},
   |                    ^^^^ FA100
29 |         my_irreps_in: Dict[str, Any] = {},
30 |         required_irreps_in: Sequence[str] = [],
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:28:37: B006 Do not use mutable data structures for argument defaults
   |
26 |     def _init_irreps(
27 |         self,
28 |         irreps_in: Dict[str, Any] = {},
   |                                     ^^ B006
29 |         my_irreps_in: Dict[str, Any] = {},
30 |         required_irreps_in: Sequence[str] = [],
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:29:23: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
27 |         self,
28 |         irreps_in: Dict[str, Any] = {},
29 |         my_irreps_in: Dict[str, Any] = {},
   |                       ^^^^ FA100
30 |         required_irreps_in: Sequence[str] = [],
31 |         irreps_out: Dict[str, Any] = {},
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:29:40: B006 Do not use mutable data structures for argument defaults
   |
27 |         self,
28 |         irreps_in: Dict[str, Any] = {},
29 |         my_irreps_in: Dict[str, Any] = {},
   |                                        ^^ B006
30 |         required_irreps_in: Sequence[str] = [],
31 |         irreps_out: Dict[str, Any] = {},
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:31:21: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
29 |         my_irreps_in: Dict[str, Any] = {},
30 |         required_irreps_in: Sequence[str] = [],
31 |         irreps_out: Dict[str, Any] = {},
   |                     ^^^^ FA100
32 |     ):
33 |         """Setup the expected data fields and their irreps for this graph module.
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:31:38: B006 Do not use mutable data structures for argument defaults
   |
29 |         my_irreps_in: Dict[str, Any] = {},
30 |         required_irreps_in: Sequence[str] = [],
31 |         irreps_out: Dict[str, Any] = {},
   |                                      ^^ B006
32 |     ):
33 |         """Setup the expected data fields and their irreps for this graph module.
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:33:9: D401 First line of docstring should be in imperative mood: "Setup the expected data fields and their irreps for this graph module."
   |
31 |           irreps_out: Dict[str, Any] = {},
32 |       ):
33 |           """Setup the expected data fields and their irreps for this graph module.
   |  _________^
34 | | 
35 | |         ``None`` is a valid irreps in the context for anything that is invariant but not well described by an ``e3nn.o3.Irreps``. An example are edge indexes in a graph, which are invariant but are integers, not ``0e`` scalars.
36 | | 
37 | |         Args:
38 | |         ----
39 | |             irreps_in (dict): maps names of all input fields from previous modules or
40 | |                 data to their corresponding irreps
41 | |             my_irreps_in (dict): maps names of fields to the irreps they must have for
42 | |                 this graph module. Will be checked for consistancy with ``irreps_in``
43 | |             required_irreps_in: sequence of names of fields that must be present in
44 | |                 ``irreps_in``, but that can have any irreps.
45 | |             irreps_out (dict): mapping names of fields that are modified/output by
46 | |                 this graph module to their irreps.
47 | | 
48 | |         """
   | |___________^ D401
49 |           # Coerce
50 |           irreps_in = {} if irreps_in is None else irreps_in
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:51:21: SLF001 Private member accessed: `_fix_irreps_dict`
   |
49 |         # Coerce
50 |         irreps_in = {} if irreps_in is None else irreps_in
51 |         irreps_in = AtomicDataDict._fix_irreps_dict(irreps_in)
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
52 |         # positions are *always* 1o, and always present
53 |         if AtomicDataDict.POSITIONS_KEY in irreps_in:
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:53:9: SIM102 Use a single `if` statement instead of nested `if` statements
   |
51 |           irreps_in = AtomicDataDict._fix_irreps_dict(irreps_in)
52 |           # positions are *always* 1o, and always present
53 |           if AtomicDataDict.POSITIONS_KEY in irreps_in:
   |  _________^
54 | |             if irreps_in[AtomicDataDict.POSITIONS_KEY] != o3.Irreps("1x1o"):
   | |____________________________________________________________________________^ SIM102
55 |                   raise ValueError(
56 |                       f"Positions must have irreps 1o, got instead `{irreps_in[AtomicDataDict.POSITIONS_KEY]}`"
   |
   = help: Combine `if` statements using `and`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:55:23: TRY003 Avoid specifying long messages outside the exception class
   |
53 |           if AtomicDataDict.POSITIONS_KEY in irreps_in:
54 |               if irreps_in[AtomicDataDict.POSITIONS_KEY] != o3.Irreps("1x1o"):
55 |                   raise ValueError(
   |  _______________________^
56 | |                     f"Positions must have irreps 1o, got instead `{irreps_in[AtomicDataDict.POSITIONS_KEY]}`"
57 | |                 )
   | |_________________^ TRY003
58 |           irreps_in[AtomicDataDict.POSITIONS_KEY] = o3.Irreps("1o")
59 |           # edges are also always present
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:56:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
54 |             if irreps_in[AtomicDataDict.POSITIONS_KEY] != o3.Irreps("1x1o"):
55 |                 raise ValueError(
56 |                     f"Positions must have irreps 1o, got instead `{irreps_in[AtomicDataDict.POSITIONS_KEY]}`"
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
57 |                 )
58 |         irreps_in[AtomicDataDict.POSITIONS_KEY] = o3.Irreps("1o")
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:60:9: SIM102 Use a single `if` statement instead of nested `if` statements
   |
58 |           irreps_in[AtomicDataDict.POSITIONS_KEY] = o3.Irreps("1o")
59 |           # edges are also always present
60 |           if AtomicDataDict.EDGE_INDEX_KEY in irreps_in:
   |  _________^
61 | |             if irreps_in[AtomicDataDict.EDGE_INDEX_KEY] is not None:
   | |____________________________________________________________________^ SIM102
62 |                   raise ValueError(
63 |                       f"Edge indexes must have irreps None, got instead `{irreps_in[AtomicDataDict.EDGE_INDEX_KEY]}`"
   |
   = help: Combine `if` statements using `and`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:62:23: TRY003 Avoid specifying long messages outside the exception class
   |
60 |           if AtomicDataDict.EDGE_INDEX_KEY in irreps_in:
61 |               if irreps_in[AtomicDataDict.EDGE_INDEX_KEY] is not None:
62 |                   raise ValueError(
   |  _______________________^
63 | |                     f"Edge indexes must have irreps None, got instead `{irreps_in[AtomicDataDict.EDGE_INDEX_KEY]}`"
64 | |                 )
   | |_________________^ TRY003
65 |           irreps_in[AtomicDataDict.EDGE_INDEX_KEY] = None
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:63:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
61 |             if irreps_in[AtomicDataDict.EDGE_INDEX_KEY] is not None:
62 |                 raise ValueError(
63 |                     f"Edge indexes must have irreps None, got instead `{irreps_in[AtomicDataDict.EDGE_INDEX_KEY]}`"
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
64 |                 )
65 |         irreps_in[AtomicDataDict.EDGE_INDEX_KEY] = None
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:67:24: SLF001 Private member accessed: `_fix_irreps_dict`
   |
65 |         irreps_in[AtomicDataDict.EDGE_INDEX_KEY] = None
66 | 
67 |         my_irreps_in = AtomicDataDict._fix_irreps_dict(my_irreps_in)
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
68 | 
69 |         irreps_out = AtomicDataDict._fix_irreps_dict(irreps_out)
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:69:22: SLF001 Private member accessed: `_fix_irreps_dict`
   |
67 |         my_irreps_in = AtomicDataDict._fix_irreps_dict(my_irreps_in)
68 | 
69 |         irreps_out = AtomicDataDict._fix_irreps_dict(irreps_out)
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
70 |         # Confirm compatibility:
71 |         # with my_irreps_in
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:74:23: TRY003 Avoid specifying long messages outside the exception class
   |
72 |           for k in my_irreps_in:
73 |               if k in irreps_in and irreps_in[k] != my_irreps_in[k]:
74 |                   raise ValueError(
   |  _______________________^
75 | |                     f"The given input irreps {irreps_in[k]} for field '{k}' is incompatible with this configuration {type(self)}; should have been {my_irreps_in[k]}"
76 | |                 )
   | |_________________^ TRY003
77 |           # with required_irreps_in
78 |           for k in required_irreps_in:
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:75:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
73 |             if k in irreps_in and irreps_in[k] != my_irreps_in[k]:
74 |                 raise ValueError(
75 |                     f"The given input irreps {irreps_in[k]} for field '{k}' is incompatible with this configuration {type(self)}; should have been {my_irreps_in[k]}"
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
76 |                 )
77 |         # with required_irreps_in
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:80:23: TRY003 Avoid specifying long messages outside the exception class
   |
78 |           for k in required_irreps_in:
79 |               if k not in irreps_in:
80 |                   raise ValueError(
   |  _______________________^
81 | |                     f"This {type(self)} requires field '{k}' to be in irreps_in"
82 | |                 )
   | |_________________^ TRY003
83 |           # Save stuff
84 |           self.irreps_in = irreps_in
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:81:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
79 |             if k not in irreps_in:
80 |                 raise ValueError(
81 |                     f"This {type(self)} requires field '{k}' to be in irreps_in"
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
82 |                 )
83 |         # Save stuff
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:90:9: ANN202 Missing return type annotation for private function `_add_independent_irreps`
   |
88 |         self.irreps_out = new_out
89 | 
90 |     def _add_independent_irreps(self, irreps: Dict[str, Any]):
   |         ^^^^^^^^^^^^^^^^^^^^^^^ ANN202
91 |         """Insert some independent irreps that need to be exposed to the self.irreps_in and self.irreps_out.
92 |         The terms that have already appeared in the irreps_in will be removed.
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:90:47: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
88 |         self.irreps_out = new_out
89 | 
90 |     def _add_independent_irreps(self, irreps: Dict[str, Any]):
   |                                               ^^^^ FA100
91 |         """Insert some independent irreps that need to be exposed to the self.irreps_in and self.irreps_out.
92 |         The terms that have already appeared in the irreps_in will be removed.
   |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:91:9: D205 1 blank line required between summary line and description
    |
 90 |       def _add_independent_irreps(self, irreps: Dict[str, Any]):
 91 |           """Insert some independent irreps that need to be exposed to the self.irreps_in and self.irreps_out.
    |  _________^
 92 | |         The terms that have already appeared in the irreps_in will be removed.
 93 | | 
 94 | |         Args:
 95 | |         ----
 96 | |             irreps (dict): maps names of all new fields
 97 | | 
 98 | |         """
    | |___________^ D205
 99 |           irreps = {
100 |               key: irrep for key, irrep in irreps.items() if key not in self.irreps_in
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:102:21: SLF001 Private member accessed: `_fix_irreps_dict`
    |
100 |             key: irrep for key, irrep in irreps.items() if key not in self.irreps_in
101 |         }
102 |         irreps_in = AtomicDataDict._fix_irreps_dict(irreps)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
103 |         irreps_out = AtomicDataDict._fix_irreps_dict(
104 |             {key: irrep for key, irrep in irreps.items() if key not in self.irreps_out}
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:103:22: SLF001 Private member accessed: `_fix_irreps_dict`
    |
101 |         }
102 |         irreps_in = AtomicDataDict._fix_irreps_dict(irreps)
103 |         irreps_out = AtomicDataDict._fix_irreps_dict(
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
104 |             {key: irrep for key, irrep in irreps.items() if key not in self.irreps_out}
105 |         )
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:109:9: ANN202 Missing return type annotation for private function `_make_tracing_inputs`
    |
107 |         self.irreps_out.update(irreps_out)
108 | 
109 |     def _make_tracing_inputs(self, n):
    |         ^^^^^^^^^^^^^^^^^^^^ ANN202
110 |         # We impliment this to be able to trace graph modules
111 |         out = []
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:113:21: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
111 |         out = []
112 |         for _ in range(n):
113 |             batch = random.randint(1, 4)
    |                     ^^^^^^^^^^^^^^^^^^^^ S311
114 |             # TODO: handle None case
115 |             # TODO: do only required inputs
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:114:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
112 |         for _ in range(n):
113 |             batch = random.randint(1, 4)
114 |             # TODO: handle None case
    |               ^^^^ TD002
115 |             # TODO: do only required inputs
116 |             # TODO: dummy input if empty?
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:114:15: TD003 Missing issue link on the line following this TODO
    |
112 |         for _ in range(n):
113 |             batch = random.randint(1, 4)
114 |             # TODO: handle None case
    |               ^^^^ TD003
115 |             # TODO: do only required inputs
116 |             # TODO: dummy input if empty?
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:114:15: FIX002 Line contains TODO, consider resolving the issue
    |
112 |         for _ in range(n):
113 |             batch = random.randint(1, 4)
114 |             # TODO: handle None case
    |               ^^^^ FIX002
115 |             # TODO: do only required inputs
116 |             # TODO: dummy input if empty?
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:115:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
113 |             batch = random.randint(1, 4)
114 |             # TODO: handle None case
115 |             # TODO: do only required inputs
    |               ^^^^ TD002
116 |             # TODO: dummy input if empty?
117 |             out.append(
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:115:15: TD003 Missing issue link on the line following this TODO
    |
113 |             batch = random.randint(1, 4)
114 |             # TODO: handle None case
115 |             # TODO: do only required inputs
    |               ^^^^ TD003
116 |             # TODO: dummy input if empty?
117 |             out.append(
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:115:15: FIX002 Line contains TODO, consider resolving the issue
    |
113 |             batch = random.randint(1, 4)
114 |             # TODO: handle None case
115 |             # TODO: do only required inputs
    |               ^^^^ FIX002
116 |             # TODO: dummy input if empty?
117 |             out.append(
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:116:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
114 |             # TODO: handle None case
115 |             # TODO: do only required inputs
116 |             # TODO: dummy input if empty?
    |               ^^^^ TD002
117 |             out.append(
118 |                 {
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:116:15: TD003 Missing issue link on the line following this TODO
    |
114 |             # TODO: handle None case
115 |             # TODO: do only required inputs
116 |             # TODO: dummy input if empty?
    |               ^^^^ TD003
117 |             out.append(
118 |                 {
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:116:15: FIX002 Line contains TODO, consider resolving the issue
    |
114 |             # TODO: handle None case
115 |             # TODO: do only required inputs
116 |             # TODO: dummy input if empty?
    |               ^^^^ FIX002
117 |             out.append(
118 |                 {
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:140:9: ANN204 Missing return type annotation for special method `__init__`
    |
138 |     """
139 | 
140 |     def __init__(
    |         ^^^^^^^^ ANN204
141 |         self,
142 |         modules: Union[Sequence[GraphModuleMixin], Dict[str, GraphModuleMixin]],
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:142:18: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
140 |     def __init__(
141 |         self,
142 |         modules: Union[Sequence[GraphModuleMixin], Dict[str, GraphModuleMixin]],
    |                  ^^^^^ FA100
143 |     ):
144 |         if isinstance(modules, dict):
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:142:52: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
    |
140 |     def __init__(
141 |         self,
142 |         modules: Union[Sequence[GraphModuleMixin], Dict[str, GraphModuleMixin]],
    |                                                    ^^^^ FA100
143 |     ):
144 |         if isinstance(modules, dict):
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:148:9: ERA001 Found commented-out code
    |
146 |         else:
147 |             module_list = list(modules)
148 |         # print("module_list", module_list)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
149 |         # check in/out irreps compatible
150 |         for m1, m2 in zip(module_list, module_list[1:]):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:151:13: S101 Use of `assert` detected
    |
149 |         # check in/out irreps compatible
150 |         for m1, m2 in zip(module_list, module_list[1:]):
151 |             assert AtomicDataDict._irreps_compatible(
    |             ^^^^^^ S101
152 |                 m1.irreps_out, m2.irreps_in
153 |             ), f"Incompatible irreps_out from {type(m1).__name__} for input to {type(m2).__name__}: {m1.irreps_out} -> {m2.irreps_in}"
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:151:20: SLF001 Private member accessed: `_irreps_compatible`
    |
149 |         # check in/out irreps compatible
150 |         for m1, m2 in zip(module_list, module_list[1:]):
151 |             assert AtomicDataDict._irreps_compatible(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
152 |                 m1.irreps_out, m2.irreps_in
153 |             ), f"Incompatible irreps_out from {type(m1).__name__} for input to {type(m2).__name__}: {m1.irreps_out} -> {m2.irreps_in}"
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:167:9: ANN206 Missing return type annotation for classmethod `from_parameters`
    |
166 |     @classmethod
167 |     def from_parameters(
    |         ^^^^^^^^^^^^^^^ ANN206
168 |         cls,
169 |         shared_params: Mapping,
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:170:17: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
    |
168 |         cls,
169 |         shared_params: Mapping,
170 |         layers: Dict[str, Union[Callable, Tuple[Callable, Dict[str, Any]]]],
    |                 ^^^^ FA100
171 |         irreps_in: Optional[dict] = None,
172 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:170:27: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
168 |         cls,
169 |         shared_params: Mapping,
170 |         layers: Dict[str, Union[Callable, Tuple[Callable, Dict[str, Any]]]],
    |                           ^^^^^ FA100
171 |         irreps_in: Optional[dict] = None,
172 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:170:43: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
168 |         cls,
169 |         shared_params: Mapping,
170 |         layers: Dict[str, Union[Callable, Tuple[Callable, Dict[str, Any]]]],
    |                                           ^^^^^ FA100
171 |         irreps_in: Optional[dict] = None,
172 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:170:59: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
    |
168 |         cls,
169 |         shared_params: Mapping,
170 |         layers: Dict[str, Union[Callable, Tuple[Callable, Dict[str, Any]]]],
    |                                                           ^^^^ FA100
171 |         irreps_in: Optional[dict] = None,
172 |     ):
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:171:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
169 |         shared_params: Mapping,
170 |         layers: Dict[str, Union[Callable, Tuple[Callable, Dict[str, Any]]]],
171 |         irreps_in: Optional[dict] = None,
    |                    ^^^^^^^^ FA100
172 |     ):
173 |         r"""Construct a ``SequentialGraphModule`` of modules built from a shared set of parameters.
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:198:17: TRY004 Prefer `TypeError` exception for invalid type
    |
196 |         for name, builder in layers.items():
197 |             if not isinstance(name, str):
198 |                 raise ValueError(f"`'name'` must be a str; got `{name}`")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY004
199 |             if isinstance(builder, tuple):
200 |                 builder, params = builder
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:198:23: TRY003 Avoid specifying long messages outside the exception class
    |
196 |         for name, builder in layers.items():
197 |             if not isinstance(name, str):
198 |                 raise ValueError(f"`'name'` must be a str; got `{name}`")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
199 |             if isinstance(builder, tuple):
200 |                 builder, params = builder
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:198:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
196 |         for name, builder in layers.items():
197 |             if not isinstance(name, str):
198 |                 raise ValueError(f"`'name'` must be a str; got `{name}`")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
199 |             if isinstance(builder, tuple):
200 |                 builder, params = builder
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:200:17: PLW2901 `for` loop variable `builder` overwritten by assignment target
    |
198 |                 raise ValueError(f"`'name'` must be a str; got `{name}`")
199 |             if isinstance(builder, tuple):
200 |                 builder, params = builder
    |                 ^^^^^^^ PLW2901
201 |             else:
202 |                 params = {}
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:204:23: TRY003 Avoid specifying long messages outside the exception class
    |
202 |                   params = {}
203 |               if not callable(builder):
204 |                   raise TypeError(
    |  _______________________^
205 | |                     f"The builder has to be a class or a function. got {type(builder)}"
206 | |                 )
    | |_________________^ TRY003
207 |   
208 |               instance, _ = instantiate(
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:205:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
203 |             if not callable(builder):
204 |                 raise TypeError(
205 |                     f"The builder has to be a class or a function. got {type(builder)}"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
206 |                 )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:212:21: C408 Unnecessary `dict` call (rewrite as a literal)
    |
210 |                   prefix=name,
211 |                   positional_args=(
212 |                       dict(
    |  _____________________^
213 | |                         irreps_in=(
214 | |                             built_modules[-1].irreps_out
215 | |                             if len(built_modules) > 0
216 | |                             else irreps_in
217 | |                         )
218 | |                     )
    | |_____________________^ C408
219 |                   ),
220 |                   optional_args=params,
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:225:23: TRY003 Avoid specifying long messages outside the exception class
    |
224 |               if not isinstance(instance, GraphModuleMixin):
225 |                   raise TypeError(
    |  _______________________^
226 | |                     f"Builder `{builder}` for layer with name `{name}` did not return a GraphModuleMixin, instead got a {type(instance).__name__}"
227 | |                 )
    | |_________________^ TRY003
228 |   
229 |               built_modules.append(instance)
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:226:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
224 |             if not isinstance(instance, GraphModuleMixin):
225 |                 raise TypeError(
226 |                     f"Builder `{builder}` for layer with name `{name}` did not return a GraphModuleMixin, instead got a {type(instance).__name__}"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
227 |                 )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:244:9: S101 Use of `assert` detected
    |
243 |         """
244 |         assert AtomicDataDict._irreps_compatible(self.irreps_out, module.irreps_in)
    |         ^^^^^^ S101
245 |         self.add_module(name, module)
246 |         self.irreps_out = dict(module.irreps_out)
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:244:16: SLF001 Private member accessed: `_irreps_compatible`
    |
243 |         """
244 |         assert AtomicDataDict._irreps_compatible(self.irreps_out, module.irreps_in)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
245 |         self.add_module(name, module)
246 |         self.irreps_out = dict(module.irreps_out)
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:253:17: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
    |
251 |         name: str,
252 |         builder: Callable,
253 |         params: Dict[str, Any] = {},
    |                 ^^^^ FA100
254 |     ) -> None:
255 |         r"""Build a module from parameters and append it.
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:253:34: B006 Do not use mutable data structures for argument defaults
    |
251 |         name: str,
252 |         builder: Callable,
253 |         params: Dict[str, Any] = {},
    |                                  ^^ B006
254 |     ) -> None:
255 |         r"""Build a module from parameters and append it.
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:268:30: C408 Unnecessary `dict` call (rewrite as a literal)
    |
266 |             builder=builder,
267 |             prefix=name,
268 |             positional_args=(dict(irreps_in=self[-1].irreps_out)),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C408
269 |             optional_args=params,
270 |             all_args=shared_params,
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:278:16: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
276 |         name: str,
277 |         module: GraphModuleMixin,
278 |         after: Optional[str] = None,
    |                ^^^^^^^^ FA100
279 |         before: Optional[str] = None,
280 |     ) -> None:
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:279:17: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
277 |         module: GraphModuleMixin,
278 |         after: Optional[str] = None,
279 |         before: Optional[str] = None,
    |                 ^^^^^^^^ FA100
280 |     ) -> None:
281 |         """Insert a module after the module with name ``after``.
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:292:19: TRY003 Avoid specifying long messages outside the exception class
    |
290 |         """
291 |         if (before is None) is (after is None):
292 |             raise ValueError("Only one of before or after argument needs to be defined")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
293 |         elif before is None:
294 |             insert_location = after
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:292:30: EM101 Exception must not use a string literal, assign to variable first
    |
290 |         """
291 |         if (before is None) is (after is None):
292 |             raise ValueError("Only one of before or after argument needs to be defined")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
293 |         elif before is None:
294 |             insert_location = after
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:293:9: RET506 Unnecessary `elif` after `raise` statement
    |
291 |         if (before is None) is (after is None):
292 |             raise ValueError("Only one of before or after argument needs to be defined")
293 |         elif before is None:
    |         ^^^^ RET506
294 |             insert_location = after
295 |         else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:315:13: S101 Use of `assert` detected
    |
313 |         # sanity check the compatibility
314 |         if idx > 0:
315 |             assert AtomicDataDict._irreps_compatible(
    |             ^^^^^^ S101
316 |                 module_list[idx - 1].irreps_out, module.irreps_in
317 |             )
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:315:20: SLF001 Private member accessed: `_irreps_compatible`
    |
313 |         # sanity check the compatibility
314 |         if idx > 0:
315 |             assert AtomicDataDict._irreps_compatible(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
316 |                 module_list[idx - 1].irreps_out, module.irreps_in
317 |             )
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:319:13: S101 Use of `assert` detected
    |
317 |             )
318 |         if len(module_list) > idx:
319 |             assert AtomicDataDict._irreps_compatible(
    |             ^^^^^^ S101
320 |                 module_list[idx + 1].irreps_in, module.irreps_out
321 |             )
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:319:20: SLF001 Private member accessed: `_irreps_compatible`
    |
317 |             )
318 |         if len(module_list) > idx:
319 |             assert AtomicDataDict._irreps_compatible(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
320 |                 module_list[idx + 1].irreps_in, module.irreps_out
321 |             )
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:324:13: B007 Loop control variable `module_id` not used within loop body
    |
323 |         # insert the new irreps_out to the later modules
324 |         for module_id, next_module in enumerate(module_list[idx + 1 :]):
    |             ^^^^^^^^^ B007
325 |             next_module._add_independent_irreps(module.irreps_out)
    |
    = help: Rename unused `module_id` to `_module_id`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:325:13: SLF001 Private member accessed: `_add_independent_irreps`
    |
323 |         # insert the new irreps_out to the later modules
324 |         for module_id, next_module in enumerate(module_list[idx + 1 :]):
325 |             next_module._add_independent_irreps(module.irreps_out)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
326 | 
327 |         # update the final wrapper irreps_out
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:331:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
331 |     def insert_from_parameters(
    |         ^^^^^^^^^^^^^^^^^^^^^^ PLR0913
332 |         self,
333 |         shared_params: Mapping,
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:336:17: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
    |
334 |         name: str,
335 |         builder: Callable,
336 |         params: Dict[str, Any] = {},
    |                 ^^^^ FA100
337 |         after: Optional[str] = None,
338 |         before: Optional[str] = None,
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:336:34: B006 Do not use mutable data structures for argument defaults
    |
334 |         name: str,
335 |         builder: Callable,
336 |         params: Dict[str, Any] = {},
    |                                  ^^ B006
337 |         after: Optional[str] = None,
338 |         before: Optional[str] = None,
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:337:16: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
335 |         builder: Callable,
336 |         params: Dict[str, Any] = {},
337 |         after: Optional[str] = None,
    |                ^^^^^^^^ FA100
338 |         before: Optional[str] = None,
339 |     ) -> None:
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:338:17: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
336 |         params: Dict[str, Any] = {},
337 |         after: Optional[str] = None,
338 |         before: Optional[str] = None,
    |                 ^^^^^^^^ FA100
339 |     ) -> None:
340 |         r"""Build a module from parameters and insert it after ``after``.
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:353:19: TRY003 Avoid specifying long messages outside the exception class
    |
351 |         """
352 |         if (before is None) is (after is None):
353 |             raise ValueError("Only one of before or after argument needs to be defined")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
354 |         elif before is None:
355 |             insert_location = after
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:353:30: EM101 Exception must not use a string literal, assign to variable first
    |
351 |         """
352 |         if (before is None) is (after is None):
353 |             raise ValueError("Only one of before or after argument needs to be defined")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
354 |         elif before is None:
355 |             insert_location = after
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:354:9: RET506 Unnecessary `elif` after `raise` statement
    |
352 |         if (before is None) is (after is None):
353 |             raise ValueError("Only one of before or after argument needs to be defined")
354 |         elif before is None:
    |         ^^^^ RET506
355 |             insert_location = after
356 |         else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:364:30: C408 Unnecessary `dict` call (rewrite as a literal)
    |
362 |             builder=builder,
363 |             prefix=name,
364 |             positional_args=(dict(irreps_in=self[idx].irreps_out)),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C408
365 |             optional_args=params,
366 |             all_args=shared_params,
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:372:23: A002 Argument `input` is shadowing a Python builtin
    |
370 |     # Copied from https://pytorch.org/docs/stable/_modules/torch/nn/modules/container.html#Sequential
371 |     # with type annotations added
372 |     def forward(self, input: AtomicDataDict.Type) -> AtomicDataDict.Type:
    |                       ^^^^^ A002
373 |         for module in self:
374 |             input = module(input)
    |

src\stk_search\geom3d\models\NequIP\nn\_graph_mixin.py:374:13: A001 Variable `input` is shadowing a Python builtin
    |
372 |     def forward(self, input: AtomicDataDict.Type) -> AtomicDataDict.Type:
373 |         for module in self:
374 |             input = module(input)
    |             ^^^^^ A001
375 |         return input
    |

src\stk_search\geom3d\models\NequIP\nn\_interaction_block.py:1:1: D400 First line should end with a period
  |
1 | """Interaction Block"""
  | ^^^^^^^^^^^^^^^^^^^^^^^ D400
2 | from typing import Callable, Dict, Optional
  |
  = help: Add period

src\stk_search\geom3d\models\NequIP\nn\_interaction_block.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | """Interaction Block"""
  | ^^^^^^^^^^^^^^^^^^^^^^^ D415
2 | from typing import Callable, Dict, Optional
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\nn\_interaction_block.py:16:24: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
15 | class InteractionBlock(GraphModuleMixin, torch.nn.Module):
16 |     avg_num_neighbors: Optional[float]
   |                        ^^^^^^^^ FA100
17 |     use_sc: bool
   |

src\stk_search\geom3d\models\NequIP\nn\_interaction_block.py:19:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
17 |     use_sc: bool
18 | 
19 |     def __init__(
   |         ^^^^^^^^ PLR0913
20 |         self,
21 |         irreps_in,
   |

src\stk_search\geom3d\models\NequIP\nn\_interaction_block.py:26:9: FBT002 Boolean default positional argument in function definition
   |
24 |         invariant_neurons=8,
25 |         avg_num_neighbors=None,
26 |         use_sc=True,
   |         ^^^^^^ FBT002
27 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp"},
28 |     ) -> None:
   |

src\stk_search\geom3d\models\NequIP\nn\_interaction_block.py:27:31: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
25 |         avg_num_neighbors=None,
26 |         use_sc=True,
27 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp"},
   |                               ^^^^ FA100
28 |     ) -> None:
29 |         """InteractionBlock.
   |

src\stk_search\geom3d\models\NequIP\nn\_interaction_block.py:27:53: B006 Do not use mutable data structures for argument defaults
   |
25 |         avg_num_neighbors=None,
26 |         use_sc=True,
27 |         nonlinearity_scalars: Dict[int, Callable] = {"e": "ssp"},
   |                                                     ^^^^^^^^^^^^ B006
28 |     ) -> None:
29 |         """InteractionBlock.
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:32:17: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
30 |     """
31 | 
32 |     scale_keys: List[str]
   |                 ^^^^ FA100
33 |     shift_keys: List[str]
34 |     related_scale_keys: List[str]
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:33:17: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
32 |     scale_keys: List[str]
33 |     shift_keys: List[str]
   |                 ^^^^ FA100
34 |     related_scale_keys: List[str]
35 |     related_shift_keys: List[str]
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:34:25: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
32 |     scale_keys: List[str]
33 |     shift_keys: List[str]
34 |     related_scale_keys: List[str]
   |                         ^^^^ FA100
35 |     related_shift_keys: List[str]
36 |     scale_trainble: bool
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:35:25: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
33 |     shift_keys: List[str]
34 |     related_scale_keys: List[str]
35 |     related_shift_keys: List[str]
   |                         ^^^^ FA100
36 |     scale_trainble: bool
37 |     rescale_trainable: bool
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:42:9: C901 `__init__` is too complex (16 > 10)
   |
40 |     has_shift: bool
41 | 
42 |     def __init__(
   |         ^^^^^^^^ C901
43 |         self,
44 |         model: GraphModuleMixin,
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:42:9: PLR0913 Too many arguments in function definition (10 > 5)
   |
40 |     has_shift: bool
41 | 
42 |     def __init__(
   |         ^^^^^^^^ PLR0913
43 |         self,
44 |         model: GraphModuleMixin,
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:42:9: PLR0912 Too many branches (19 > 12)
   |
40 |     has_shift: bool
41 | 
42 |     def __init__(
   |         ^^^^^^^^ PLR0912
43 |         self,
44 |         model: GraphModuleMixin,
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:42:9: ANN204 Missing return type annotation for special method `__init__`
   |
40 |     has_shift: bool
41 | 
42 |     def __init__(
   |         ^^^^^^^^ ANN204
43 |         self,
44 |         model: GraphModuleMixin,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:45:21: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
43 |         self,
44 |         model: GraphModuleMixin,
45 |         scale_keys: Union[Sequence[str], str] = [],
   |                     ^^^^^ FA100
46 |         shift_keys: Union[Sequence[str], str] = [],
47 |         related_shift_keys: Union[Sequence[str], str] = [],
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:46:21: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
44 |         model: GraphModuleMixin,
45 |         scale_keys: Union[Sequence[str], str] = [],
46 |         shift_keys: Union[Sequence[str], str] = [],
   |                     ^^^^^ FA100
47 |         related_shift_keys: Union[Sequence[str], str] = [],
48 |         related_scale_keys: Union[Sequence[str], str] = [],
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:47:29: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
45 |         scale_keys: Union[Sequence[str], str] = [],
46 |         shift_keys: Union[Sequence[str], str] = [],
47 |         related_shift_keys: Union[Sequence[str], str] = [],
   |                             ^^^^^ FA100
48 |         related_scale_keys: Union[Sequence[str], str] = [],
49 |         scale_by=None,
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:48:29: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
46 |         shift_keys: Union[Sequence[str], str] = [],
47 |         related_shift_keys: Union[Sequence[str], str] = [],
48 |         related_scale_keys: Union[Sequence[str], str] = [],
   |                             ^^^^^ FA100
49 |         scale_by=None,
50 |         shift_by=None,
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:51:9: FBT001 Boolean-typed positional argument in function definition
   |
49 |         scale_by=None,
50 |         shift_by=None,
51 |         shift_trainable: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT001
52 |         scale_trainable: bool = False,
53 |         irreps_in: dict = {},
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:51:9: FBT002 Boolean default positional argument in function definition
   |
49 |         scale_by=None,
50 |         shift_by=None,
51 |         shift_trainable: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT002
52 |         scale_trainable: bool = False,
53 |         irreps_in: dict = {},
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:52:9: FBT001 Boolean-typed positional argument in function definition
   |
50 |         shift_by=None,
51 |         shift_trainable: bool = False,
52 |         scale_trainable: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT001
53 |         irreps_in: dict = {},
54 |     ):
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:52:9: FBT002 Boolean default positional argument in function definition
   |
50 |         shift_by=None,
51 |         shift_trainable: bool = False,
52 |         scale_trainable: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT002
53 |         irreps_in: dict = {},
54 |     ):
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:53:27: B006 Do not use mutable data structures for argument defaults
   |
51 |         shift_trainable: bool = False,
52 |         scale_trainable: bool = False,
53 |         irreps_in: dict = {},
   |                           ^^ B006
54 |     ):
55 |         super().__init__()
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:65:23: TRY003 Avoid specifying long messages outside the exception class
   |
63 |           for k in irreps_in:
64 |               if k in model.irreps_in and model.irreps_in[k] != irreps_in[k]:
65 |                   raise ValueError(
   |  _______________________^
66 | |                     f"For field '{k}', the provided explicit `irreps_in` ('{k}': {irreps_in[k]}) are incompataible with those of the wrapped `model` ('{k}': {model.irreps_in[k]})"
67 | |                 )
   | |_________________^ TRY003
68 |           for k in all_keys:
69 |               if k not in model.irreps_out:
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:66:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
64 |             if k in model.irreps_in and model.irreps_in[k] != irreps_in[k]:
65 |                 raise ValueError(
66 |                     f"For field '{k}', the provided explicit `irreps_in` ('{k}': {irreps_in[k]}) are incompataible with those of the wrapped `model` ('{k}': {model.irreps_in[k]})"
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
67 |                 )
68 |         for k in all_keys:
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:70:23: TRY003 Avoid specifying long messages outside the exception class
   |
68 |           for k in all_keys:
69 |               if k not in model.irreps_out:
70 |                   raise KeyError(
   |  _______________________^
71 | |                     f"Asked to scale or shift '{k}', but '{k}' is not in the outputs of the provided `model`."
72 | |                 )
   | |_________________^ TRY003
73 |           for k in shift_keys:
74 |               if model.irreps_out[k] is not None and model.irreps_out[k].lmax > 0:
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:71:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
69 |             if k not in model.irreps_out:
70 |                 raise KeyError(
71 |                     f"Asked to scale or shift '{k}', but '{k}' is not in the outputs of the provided `model`."
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
72 |                 )
73 |         for k in shift_keys:
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:75:23: TRY003 Avoid specifying long messages outside the exception class
   |
73 |           for k in shift_keys:
74 |               if model.irreps_out[k] is not None and model.irreps_out[k].lmax > 0:
75 |                   raise ValueError(
   |  _______________________^
76 | |                     f"It doesn't make sense to shift non-scalar target '{k}'."
77 | |                 )
   | |_________________^ TRY003
78 |   
79 |           irreps_in.update(model.irreps_in)
   |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:76:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
74 |             if model.irreps_out[k] is not None and model.irreps_out[k].lmax > 0:
75 |                 raise ValueError(
76 |                     f"It doesn't make sense to shift non-scalar target '{k}'."
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
77 |                 )
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:96:19: TRY003 Avoid specifying long messages outside the exception class
    |
 94 |                   self.register_buffer("scale_by", scale_by)
 95 |           elif self.scale_trainble:
 96 |               raise ValueError(
    |  ___________________^
 97 | |                 "Asked for a scale_trainable, but this RescaleOutput has no scaling (`scale_by = None`)"
 98 | |             )
    | |_____________^ TRY003
 99 |           else:
100 |               # register dummy for TorchScript
    |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:97:17: EM101 Exception must not use a string literal, assign to variable first
   |
95 |         elif self.scale_trainble:
96 |             raise ValueError(
97 |                 "Asked for a scale_trainable, but this RescaleOutput has no scaling (`scale_by = None`)"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
98 |             )
99 |         else:
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:112:19: TRY003 Avoid specifying long messages outside the exception class
    |
110 |                   self.register_buffer("shift_by", shift_by)
111 |           elif self.rescale_trainable:
112 |               raise ValueError(
    |  ___________________^
113 | |                 "Asked for a shift_trainable, but this RescaleOutput has no shift (`shift_by = None`)"
114 | |             )
    | |_____________^ TRY003
115 |           else:
116 |               # register dummy for TorchScript
    |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:113:17: EM101 Exception must not use a string literal, assign to variable first
    |
111 |         elif self.rescale_trainable:
112 |             raise ValueError(
113 |                 "Asked for a shift_trainable, but this RescaleOutput has no shift (`shift_by = None`)"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
114 |             )
115 |         else:
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:132:9: ANN202 Missing return type annotation for private function `get_inner_model`
    |
130 |                     callback(self)
131 | 
132 |     def get_inner_model(self):
    |         ^^^^^^^^^^^^^^^ ANN202
133 |         """Get the outermost child module that is not another ``RescaleOutput``"""
134 |         model = self.model
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:133:9: D400 First line should end with a period
    |
132 |     def get_inner_model(self):
133 |         """Get the outermost child module that is not another ``RescaleOutput``"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
134 |         model = self.model
135 |         while isinstance(model, RescaleOutput):
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:133:9: D415 First line should end with a period, question mark, or exclamation point
    |
132 |     def get_inner_model(self):
133 |         """Get the outermost child module that is not another ``RescaleOutput``"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
134 |         model = self.model
135 |         while isinstance(model, RescaleOutput):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:143:9: RET505 Unnecessary `else` after `return` statement
    |
141 |         if self.training:
142 |             return data
143 |         else:
    |         ^^^^ RET505
144 |             # Scale then shift
145 |             if self.has_scale:
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:157:9: FBT001 Boolean-typed positional argument in function definition
    |
155 |         self,
156 |         data: AtomicDataDict.Type,
157 |         force_process: bool = False,
    |         ^^^^^^^^^^^^^ FBT001
158 |     ) -> AtomicDataDict.Type:
159 |         """Apply rescaling to ``data``, in place.
    |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:157:9: FBT002 Boolean default positional argument in function definition
    |
155 |         self,
156 |         data: AtomicDataDict.Type,
157 |         force_process: bool = False,
    |         ^^^^^^^^^^^^^ FBT002
158 |     ) -> AtomicDataDict.Type:
159 |         """Apply rescaling to ``data``, in place.
    |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:176:9: RET505 Unnecessary `else` after `return` statement
    |
174 |         if self.training and not force_process:
175 |             return data
176 |         else:
    |         ^^^^ RET505
177 |             if self.has_scale:
178 |                 for field in self.scale_keys:
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:191:9: FBT001 Boolean-typed positional argument in function definition
    |
189 |         self,
190 |         data: AtomicDataDict.Type,
191 |         force_process: bool = False,
    |         ^^^^^^^^^^^^^ FBT001
192 |     ) -> AtomicDataDict.Type:
193 |         """Apply the inverse of the rescaling operation to ``data``, in place.
    |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:191:9: FBT002 Boolean default positional argument in function definition
    |
189 |         self,
190 |         data: AtomicDataDict.Type,
191 |         force_process: bool = False,
    |         ^^^^^^^^^^^^^ FBT002
192 |     ) -> AtomicDataDict.Type:
193 |         """Apply the inverse of the rescaling operation to ``data``, in place.
    |

src\stk_search\geom3d\models\NequIP\nn\_rescale.py:219:9: RET505 Unnecessary `else` after `return` statement
    |
217 |                         data[field] = data[field] / self.scale_by
218 |             return data
219 |         else:
    |         ^^^^ RET505
220 |             return data
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\nn\_util.py:21:9: ANN204 Missing return type annotation for special method `__init__`
   |
19 |     out_field: str
20 | 
21 |     def __init__(self, field: str, out_field: str, irreps_in=None):
   |         ^^^^^^^^ ANN204
22 |         super().__init__()
23 |         self._init_irreps(irreps_in=irreps_in)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\cutoffs.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\nn\cutoffs.py:16:7: D101 Missing docstring in public class
   |
16 | class PolynomialCutoff(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^^ D101
17 |     _factor: float
18 |     p: float
   |

src\stk_search\geom3d\models\NequIP\nn\cutoffs.py:20:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 |     p: float
19 | 
20 |     def __init__(self, r_max: float, p: float = 6):
   |         ^^^^^^^^ ANN204
21 |         r"""Polynomial cutoff, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\cutoffs.py:21:9: D400 First line should end with a period
   |
20 |       def __init__(self, r_max: float, p: float = 6):
21 |           r"""Polynomial cutoff, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |  _________^
22 | | 
23 | |         Parameters
24 | |         ----------
25 | |         r_max : float
26 | |             Cutoff radius
27 | | 
28 | |         p : int
29 | |             Power used in envelope function
30 | | 
31 | |         """
   | |___________^ D400
32 |           super().__init__()
33 |           assert p >= 2.0
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\nn\cutoffs.py:21:9: D415 First line should end with a period, question mark, or exclamation point
   |
20 |       def __init__(self, r_max: float, p: float = 6):
21 |           r"""Polynomial cutoff, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |  _________^
22 | | 
23 | |         Parameters
24 | |         ----------
25 | |         r_max : float
26 | |             Cutoff radius
27 | | 
28 | |         p : int
29 | |             Power used in envelope function
30 | | 
31 | |         """
   | |___________^ D415
32 |           super().__init__()
33 |           assert p >= 2.0
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\nn\cutoffs.py:33:9: S101 Use of `assert` detected
   |
31 |         """
32 |         super().__init__()
33 |         assert p >= 2.0
   |         ^^^^^^ S101
34 |         self.p = float(p)
35 |         self._factor = 1.0 / float(r_max)
   |

src\stk_search\geom3d\models\NequIP\nn\cutoffs.py:33:21: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
   |
31 |         """
32 |         super().__init__()
33 |         assert p >= 2.0
   |                     ^^^ PLR2004
34 |         self.p = float(p)
35 |         self._factor = 1.0 / float(r_max)
   |

src\stk_search\geom3d\models\NequIP\nn\embedding\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\NequIP\nn\embedding\__init__.py:4:1: PLE0604 Invalid object in `__all__`, must contain only strings
  |
2 | from ._one_hot import OneHotAtomEncoding
3 | 
4 | __all__ = [OneHotAtomEncoding, SphericalHarmonicEdgeAttrs, RadialBasisEdgeEncoding]
  | ^^^^^^^ PLE0604
  |

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:8:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 6 | from stk_search.geom3d.models.NequIP.data import AtomicDataDict
 7 | 
 8 | from .._graph_mixin import GraphModuleMixin
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
 9 | from ..cutoffs import PolynomialCutoff
10 | from ..radial_basis import BesselBasis
   |
   = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:9:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from .._graph_mixin import GraphModuleMixin
 9 | from ..cutoffs import PolynomialCutoff
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
10 | from ..radial_basis import BesselBasis
   |
   = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:10:1: TID252 Prefer absolute imports over relative imports from parent modules
   |
 8 | from .._graph_mixin import GraphModuleMixin
 9 | from ..cutoffs import PolynomialCutoff
10 | from ..radial_basis import BesselBasis
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
   |
   = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:30:9: ANN204 Missing return type annotation for special method `__init__`
   |
28 |     out_field: str
29 | 
30 |     def __init__(
   |         ^^^^^^^^ ANN204
31 |         self,
32 |         irreps_edge_sh: Union[int, str, o3.Irreps],
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:32:25: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
30 |     def __init__(
31 |         self,
32 |         irreps_edge_sh: Union[int, str, o3.Irreps],
   |                         ^^^^^ FA100
33 |         edge_sh_normalization: str = "component",
34 |         edge_sh_normalize: bool = True,
   |

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:34:9: FBT001 Boolean-typed positional argument in function definition
   |
32 |         irreps_edge_sh: Union[int, str, o3.Irreps],
33 |         edge_sh_normalization: str = "component",
34 |         edge_sh_normalize: bool = True,
   |         ^^^^^^^^^^^^^^^^^ FBT001
35 |         irreps_in=None,
36 |         out_field: str = AtomicDataDict.EDGE_ATTRS_KEY,
   |

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:34:9: FBT002 Boolean default positional argument in function definition
   |
32 |         irreps_edge_sh: Union[int, str, o3.Irreps],
33 |         edge_sh_normalization: str = "component",
34 |         edge_sh_normalize: bool = True,
   |         ^^^^^^^^^^^^^^^^^ FBT002
35 |         irreps_in=None,
36 |         out_field: str = AtomicDataDict.EDGE_ATTRS_KEY,
   |

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:65:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
63 |     out_field: str
64 | 
65 |     def __init__(
   |         ^^^^^^^^ PLR0913
66 |         self,
67 |         basis=BesselBasis,
   |

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:65:9: ANN204 Missing return type annotation for special method `__init__`
   |
63 |     out_field: str
64 | 
65 |     def __init__(
   |         ^^^^^^^^ ANN204
66 |         self,
67 |         basis=BesselBasis,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:69:22: B006 Do not use mutable data structures for argument defaults
   |
67 |         basis=BesselBasis,
68 |         cutoff=PolynomialCutoff,
69 |         basis_kwargs={},
   |                      ^^ B006
70 |         cutoff_kwargs={},
71 |         out_field: str = AtomicDataDict.EDGE_EMBEDDING_KEY,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\embedding\_edge.py:70:23: B006 Do not use mutable data structures for argument defaults
   |
68 |         cutoff=PolynomialCutoff,
69 |         basis_kwargs={},
70 |         cutoff_kwargs={},
   |                       ^^ B006
71 |         out_field: str = AtomicDataDict.EDGE_EMBEDDING_KEY,
72 |         irreps_in=None,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\nn\embedding\_one_hot.py:7:1: TID252 Prefer absolute imports over relative imports from parent modules
  |
5 | from stk_search.geom3d.models.NequIP.data import AtomicDataDict
6 | 
7 | from .._graph_mixin import GraphModuleMixin
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TID252
  |
  = help: Replace relative imports from parent modules with absolute imports

src\stk_search\geom3d\models\NequIP\nn\embedding\_one_hot.py:23:9: ANN204 Missing return type annotation for special method `__init__`
   |
21 |     set_features: bool
22 | 
23 |     def __init__(
   |         ^^^^^^^^ ANN204
24 |         self,
25 |         num_types: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\embedding\_one_hot.py:26:9: FBT001 Boolean-typed positional argument in function definition
   |
24 |         self,
25 |         num_types: int,
26 |         set_features: bool = True,
   |         ^^^^^^^^^^^^ FBT001
27 |         irreps_in=None,
28 |     ):
   |

src\stk_search\geom3d\models\NequIP\nn\embedding\_one_hot.py:26:9: FBT002 Boolean default positional argument in function definition
   |
24 |         self,
25 |         num_types: int,
26 |         set_features: bool = True,
   |         ^^^^^^^^^^^^ FBT002
27 |         irreps_in=None,
28 |     ):
   |

src\stk_search\geom3d\models\NequIP\nn\nonlinearities.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\nn\nonlinearities.py:7:5: N802 Function name `ShiftedSoftPlus` should be lowercase
  |
6 | @torch.jit.script
7 | def ShiftedSoftPlus(x):
  |     ^^^^^^^^^^^^^^^ N802
8 |     return torch.nn.functional.softplus(x) - math.log(2.0)
  |

src\stk_search\geom3d\models\NequIP\nn\nonlinearities.py:7:5: D103 Missing docstring in public function
  |
6 | @torch.jit.script
7 | def ShiftedSoftPlus(x):
  |     ^^^^^^^^^^^^^^^ D103
8 |     return torch.nn.functional.softplus(x) - math.log(2.0)
  |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:11:7: N801 Class name `e3nn_basis` should use CapWords convention
   |
10 | @compile_mode("trace")
11 | class e3nn_basis(nn.Module):
   |       ^^^^^^^^^^ N801
12 |     r_max: float
13 |     r_min: float
   |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:11:7: D101 Missing docstring in public class
   |
10 | @compile_mode("trace")
11 | class e3nn_basis(nn.Module):
   |       ^^^^^^^^^^ D101
12 |     r_max: float
13 |     r_min: float
   |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:17:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 |     num_basis: int
16 | 
17 |     def __init__(
   |         ^^^^^^^^ ANN204
18 |         self,
19 |         r_max: float,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:17:9: D107 Missing docstring in `__init__`
   |
15 |     num_basis: int
16 | 
17 |     def __init__(
   |         ^^^^^^^^ D107
18 |         self,
19 |         r_max: float,
   |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:20:16: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
18 |         self,
19 |         r_max: float,
20 |         r_min: Optional[float] = None,
   |                ^^^^^^^^ FA100
21 |         e3nn_basis_name: str = "gaussian",
22 |         num_basis: int = 8,
   |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:30:9: D102 Missing docstring in public method
   |
28 |         self.num_basis = num_basis
29 | 
30 |     def forward(self, x: torch.Tensor) -> torch.Tensor:
   |         ^^^^^^^ D102
31 |         return soft_one_hot_linspace(
32 |             x,
   |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:40:9: ANN202 Missing return type annotation for private function `_make_tracing_inputs`
   |
38 |         )
39 | 
40 |     def _make_tracing_inputs(self, n: int):
   |         ^^^^^^^^^^^^^^^^^^^^ ANN202
41 |         return [{"forward": (torch.randn(5, 1),)} for _ in range(n)]
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:44:7: D101 Missing docstring in public class
   |
44 | class BesselBasis(nn.Module):
   |       ^^^^^^^^^^^ D101
45 |     r_max: float
46 |     prefactor: float
   |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:48:9: ANN204 Missing return type annotation for special method `__init__`
   |
46 |     prefactor: float
47 | 
48 |     def __init__(self, r_max, num_basis=8, trainable=True):
   |         ^^^^^^^^ ANN204
49 |         r"""Radial Bessel Basis, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:48:44: FBT002 Boolean default positional argument in function definition
   |
46 |     prefactor: float
47 | 
48 |     def __init__(self, r_max, num_basis=8, trainable=True):
   |                                            ^^^^^^^^^ FBT002
49 |         r"""Radial Bessel Basis, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:49:9: D400 First line should end with a period
   |
48 |       def __init__(self, r_max, num_basis=8, trainable=True):
49 |           r"""Radial Bessel Basis, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |  _________^
50 | | 
51 | |         Parameters
52 | |         ----------
53 | |         r_max : float
54 | |             Cutoff radius
55 | | 
56 | |         num_basis : int
57 | |             Number of Bessel Basis functions
58 | | 
59 | |         trainable : bool
60 | |             Train the :math:`n \pi` part or not.
61 | | 
62 | |         """
   | |___________^ D400
63 |           super(BesselBasis, self).__init__()
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:49:9: D415 First line should end with a period, question mark, or exclamation point
   |
48 |       def __init__(self, r_max, num_basis=8, trainable=True):
49 |           r"""Radial Bessel Basis, as proposed in DimeNet: https://arxiv.org/abs/2003.03123
   |  _________^
50 | | 
51 | |         Parameters
52 | |         ----------
53 | |         r_max : float
54 | |             Cutoff radius
55 | | 
56 | |         num_basis : int
57 | |             Number of Bessel Basis functions
58 | | 
59 | |         trainable : bool
60 | |             Train the :math:`n \pi` part or not.
61 | | 
62 | |         """
   | |___________^ D415
63 |           super(BesselBasis, self).__init__()
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:63:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
62 |         """
63 |         super(BesselBasis, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^ UP008
64 | 
65 |         self.trainable = trainable
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:94:1: ERA001 Found commented-out code
   |
93 | # class GaussianBasis(nn.Module):
94 | #     r_max: float
   | ^^^^^^^^^^^^^^^^^^ ERA001
95 | 
96 | #     def __init__(self, r_max, r_min=0.0, num_basis=8, trainable=True):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:97:1: ERA001 Found commented-out code
   |
96 | #     def __init__(self, r_max, r_min=0.0, num_basis=8, trainable=True):
97 | #         super().__init__()
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
98 | 
99 | #         self.trainable = trainable
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:99:1: ERA001 Found commented-out code
    |
 97 | #         super().__init__()
 98 | 
 99 | #         self.trainable = trainable
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
100 | #         self.num_basis = num_basis
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:100:1: ERA001 Found commented-out code
    |
 99 | #         self.trainable = trainable
100 | #         self.num_basis = num_basis
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
101 | 
102 | #         self.r_max = float(r_max)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:102:1: ERA001 Found commented-out code
    |
100 | #         self.num_basis = num_basis
101 | 
102 | #         self.r_max = float(r_max)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
103 | #         self.r_min = float(r_min)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:103:1: ERA001 Found commented-out code
    |
102 | #         self.r_max = float(r_max)
103 | #         self.r_min = float(r_min)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
104 | 
105 | #         means = torch.linspace(self.r_min, self.r_max, self.num_basis)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:105:1: ERA001 Found commented-out code
    |
103 | #         self.r_min = float(r_min)
104 | 
105 | #         means = torch.linspace(self.r_min, self.r_max, self.num_basis)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
106 | #         stds = torch.full(size=means.size, fill_value=means[1] - means[0])
107 | #         if self.trainable:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:106:1: ERA001 Found commented-out code
    |
105 | #         means = torch.linspace(self.r_min, self.r_max, self.num_basis)
106 | #         stds = torch.full(size=means.size, fill_value=means[1] - means[0])
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
107 | #         if self.trainable:
108 | #             self.means = nn.Parameter(means)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:108:1: ERA001 Found commented-out code
    |
106 | #         stds = torch.full(size=means.size, fill_value=means[1] - means[0])
107 | #         if self.trainable:
108 | #             self.means = nn.Parameter(means)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
109 | #             self.stds = nn.Parameter(stds)
110 | #         else:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:109:1: ERA001 Found commented-out code
    |
107 | #         if self.trainable:
108 | #             self.means = nn.Parameter(means)
109 | #             self.stds = nn.Parameter(stds)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
110 | #         else:
111 | #             self.register_buffer("means", means)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:110:1: ERA001 Found commented-out code
    |
108 | #             self.means = nn.Parameter(means)
109 | #             self.stds = nn.Parameter(stds)
110 | #         else:
    | ^^^^^^^^^^^^^^^ ERA001
111 | #             self.register_buffer("means", means)
112 | #             self.register_buffer("stds", stds)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:111:1: ERA001 Found commented-out code
    |
109 | #             self.stds = nn.Parameter(stds)
110 | #         else:
111 | #             self.register_buffer("means", means)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
112 | #             self.register_buffer("stds", stds)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:112:1: ERA001 Found commented-out code
    |
110 | #         else:
111 | #             self.register_buffer("means", means)
112 | #             self.register_buffer("stds", stds)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
113 | 
114 | #     def forward(self, x: torch.Tensor) -> torch.Tensor:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:115:1: ERA001 Found commented-out code
    |
114 | #     def forward(self, x: torch.Tensor) -> torch.Tensor:
115 | #         x = (x[..., None] - self.means) / self.stds
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
116 | #         x = x.square().mul(-0.5).exp() / self.stds  # sqrt(2 * pi)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\nn\radial_basis.py:116:1: ERA001 Found commented-out code
    |
114 | #     def forward(self, x: torch.Tensor) -> torch.Tensor:
115 | #         x = (x[..., None] - self.means) / self.stds
116 | #         x = x.square().mul(-0.5).exp() / self.stds  # sqrt(2 * pi)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\scripts\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\NequIP\scripts\_logger.py:5:5: ANN202 Missing return type annotation for private function `set_up_script_logger`
  |
5 | def set_up_script_logger(logfile: str, verbose: str = "INFO"):
  |     ^^^^^^^^^^^^^^^^^^^^ ANN202
6 |     # Configure the root logger so stuff gets printed
7 |     root_logger = logging.getLogger()
  |
  = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:19:5: PLR0915 Too many statements (87 > 50)
   |
19 | def main(args=None):
   |     ^^^^ PLR0915
20 |     parser = argparse.ArgumentParser(
21 |         description=textwrap.dedent(
   |

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:19:5: D103 Missing docstring in public function
   |
19 | def main(args=None):
   |     ^^^^ D103
20 |     parser = argparse.ArgumentParser(
21 |         description=textwrap.dedent(
   |

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:57:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
55 |     )
56 | 
57 |     # TODO: option to show memory use
   |       ^^^^ TD002
58 | 
59 |     # Parse the args
   |

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:57:7: TD003 Missing issue link on the line following this TODO
   |
55 |     )
56 | 
57 |     # TODO: option to show memory use
   |       ^^^^ TD003
58 | 
59 |     # Parse the args
   |

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:57:7: FIX002 Line contains TODO, consider resolving the issue
   |
55 |     )
56 | 
57 |     # TODO: option to show memory use
   |       ^^^^ FIX002
58 | 
59 |     # Parse the args
   |

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:67:5: T201 `print` found
   |
65 |         device = torch.device(args.device)
66 | 
67 |     print(f"Using device: {device}")
   |     ^^^^^ T201
68 | 
69 |     config = Config.from_file(args.config, defaults=default_config)
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:74:5: T201 `print` found
   |
73 |     # Load dataset to get something to benchmark on
74 |     print("Loading dataset... ")
   |     ^^^^^ T201
75 |     dataset_time = time.time()
76 |     dataset = dataset_from_config(config)
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:78:5: T201 `print` found
   |
76 |     dataset = dataset_from_config(config)
77 |     dataset_time = time.time() - dataset_time
78 |     print(f"    loading dataset took {dataset_time:.4f}s")
   |     ^^^^^ T201
79 |     dataset_rng = torch.Generator()
80 |     dataset_rng.manual_seed(config.get("dataset_seed", config.get("seed", 12345)))
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:88:13: EM101 Exception must not use a string literal, assign to variable first
   |
86 |     if not all(len(d["pos"]) == n_atom for d in datas):
87 |         raise NotImplementedError(
88 |             "NequIP-benchmark does not currently handle benchmarking on data frames with variable number of atoms"
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
89 |         )
90 |     print(
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:90:5: T201 `print` found
   |
88 |             "NequIP-benchmark does not currently handle benchmarking on data frames with variable number of atoms"
89 |         )
90 |     print(
   |     ^^^^^ T201
91 |         f"    loaded dataset of size {len(dataset)} and sampled --n-data={args.n_data} frames"
92 |     )
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:94:5: T201 `print` found
   |
92 |     )
93 |     # print some dataset information
94 |     print("    benchmark frames statistics:")
   |     ^^^^^ T201
95 |     print(f"         number of atoms: {n_atom}")
96 |     print(f"         number of types: {dataset.type_mapper.num_types}")
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:95:5: T201 `print` found
   |
93 |     # print some dataset information
94 |     print("    benchmark frames statistics:")
95 |     print(f"         number of atoms: {n_atom}")
   |     ^^^^^ T201
96 |     print(f"         number of types: {dataset.type_mapper.num_types}")
97 |     print(
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:96:5: T201 `print` found
   |
94 |     print("    benchmark frames statistics:")
95 |     print(f"         number of atoms: {n_atom}")
96 |     print(f"         number of types: {dataset.type_mapper.num_types}")
   |     ^^^^^ T201
97 |     print(
98 |         f"          avg. num edges: {sum(d[AtomicDataDict.EDGE_INDEX_KEY].shape[1] for d in datas) / len(datas)}"
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:97:5: T201 `print` found
   |
95 |     print(f"         number of atoms: {n_atom}")
96 |     print(f"         number of types: {dataset.type_mapper.num_types}")
97 |     print(
   |     ^^^^^ T201
98 |         f"          avg. num edges: {sum(d[AtomicDataDict.EDGE_INDEX_KEY].shape[1] for d in datas) / len(datas)}"
99 |     )
   |
   = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:111:5: T201 `print` found
    |
109 |         )
110 |     ).item()
111 |     print(f"         avg. neigh/atom: {avg_edges_per_atom}")
    |     ^^^^^ T201
112 | 
113 |     # cycle over the datas we loaded
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:118:9: T201 `print` found
    |
116 |     # short circut
117 |     if args.n == 0:
118 |         print("Got -n 0, so quitting without running benchmark.")
    |         ^^^^^ T201
119 |         return
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:122:5: T201 `print` found
    |
121 |     # Load model:
122 |     print("Building model... ")
    |     ^^^^^ T201
123 |     model_time = time.time()
124 |     model = model_from_config(config, initialize=True, dataset=dataset)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:126:5: T201 `print` found
    |
124 |     model = model_from_config(config, initialize=True, dataset=dataset)
125 |     model_time = time.time() - model_time
126 |     print(f"    building model took {model_time:.4f}s")
    |     ^^^^^ T201
127 |     print("Compile...")
128 |     # "Deploy" it
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:127:5: T201 `print` found
    |
125 |     model_time = time.time() - model_time
126 |     print(f"    building model took {model_time:.4f}s")
127 |     print("Compile...")
    |     ^^^^^ T201
128 |     # "Deploy" it
129 |     model.eval()
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:134:5: T201 `print` found
    |
132 |     model = _compile_for_deploy(model)
133 |     compile_time = time.time() - compile_time
134 |     print(f"    compilation took {compile_time:.4f}s")
    |     ^^^^^ T201
135 | 
136 |     # save and reload to avoid bugs
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:151:13: ANN202 Missing return type annotation for private function `trace_handler`
    |
149 |     if args.profile is not None:
150 | 
151 |         def trace_handler(p):
    |             ^^^^^^^^^^^^^ ANN202
152 |             p.export_chrome_trace(args.profile)
153 |             print(f"Wrote profiling trace to `{args.profile}`")
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:153:13: T201 `print` found
    |
151 |         def trace_handler(p):
152 |             p.export_chrome_trace(args.profile)
153 |             print(f"Wrote profiling trace to `{args.profile}`")
    |             ^^^^^ T201
154 | 
155 |         print("Starting...")
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:155:9: T201 `print` found
    |
153 |             print(f"Wrote profiling trace to `{args.profile}`")
154 | 
155 |         print("Starting...")
    |         ^^^^^ T201
156 |         with torch.profiler.profile(
157 |             activities=[
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:170:9: T201 `print` found
    |
168 |                 p.step()
169 |     else:
170 |         print("Warmup...")
    |         ^^^^^ T201
171 |         warmup_time = time.time()
172 |         for _ in range(warmup):
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:175:9: T201 `print` found
    |
173 |             model(next(datas).copy())
174 |         warmup_time = time.time() - warmup_time
175 |         print(f"    {warmup} calls of warmup took {warmup_time:.4f}s")
    |         ^^^^^ T201
176 | 
177 |         print("Starting...")
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:177:9: T201 `print` found
    |
175 |         print(f"    {warmup} calls of warmup took {warmup_time:.4f}s")
176 | 
177 |         print("Starting...")
    |         ^^^^^ T201
178 |         # just time
179 |         t = Timer(
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:184:9: T201 `print` found
    |
182 |         perloop: Measurement = t.timeit(args.n)
183 | 
184 |         print(" -- Results --")
    |         ^^^^^ T201
185 |         print(
186 |             f"PLEASE NOTE: these are speeds for the MODEL, evaluated on --n-data={args.n_data} configurations kept in memory."
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:185:9: T201 `print` found
    |
184 |         print(" -- Results --")
185 |         print(
    |         ^^^^^ T201
186 |             f"PLEASE NOTE: these are speeds for the MODEL, evaluated on --n-data={args.n_data} configurations kept in memory."
187 |         )
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:188:9: T201 `print` found
    |
186 |             f"PLEASE NOTE: these are speeds for the MODEL, evaluated on --n-data={args.n_data} configurations kept in memory."
187 |         )
188 |         print(
    |         ^^^^^ T201
189 |             "    \\_ MD itself, memory copies, and other overhead will affect real-world performance."
190 |         )
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:191:9: T201 `print` found
    |
189 |             "    \\_ MD itself, memory copies, and other overhead will affect real-world performance."
190 |         )
191 |         print()
    |         ^^^^^ T201
192 |         trim_time = trim_sigfig(perloop.times[0], perloop.significant_figures)
193 |         time_unit, time_scale = select_unit(trim_time)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:197:9: T201 `print` found
    |
195 |             trim_time / time_scale
196 |         )
197 |         print(f"The average call took {time_str}{time_unit}")
    |         ^^^^^ T201
198 |         print(
199 |             "Assuming linear scaling — which is ALMOST NEVER true in practice, especially on GPU —"
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:198:9: T201 `print` found
    |
196 |         )
197 |         print(f"The average call took {time_str}{time_unit}")
198 |         print(
    |         ^^^^^ T201
199 |             "Assuming linear scaling — which is ALMOST NEVER true in practice, especially on GPU —"
200 |         )
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:203:9: T201 `print` found
    |
201 |         per_atom_time = trim_time / n_atom
202 |         time_unit_per, time_scale_per = select_unit(per_atom_time)
203 |         print(
    |         ^^^^^ T201
204 |             f"    \\_ this comes out to {per_atom_time/time_scale_per:g} {time_unit_per}/atom/call"
205 |         )
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\benchmark.py:208:9: T201 `print` found
    |
206 |         ns_day = (86400.0 / trim_time) * args.timestep * 1e-6
207 |         #     day in s^   s/step^         ^ fs / step      ^ ns / fs
208 |         print(
    |         ^^^^^ T201
209 |             f"For this system, at a {args.timestep:.2f}fs timestep, this comes out to {ns_day:.2f} ns/day"
210 |         )
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\scripts\deploy.py:3:4: YTT203 `sys.version_info[1]` compared to integer (python4), compare `sys.version_info` to tuple
  |
1 | import sys
2 | 
3 | if sys.version_info[1] >= 8:
  |    ^^^^^^^^^^^^^^^^^^^ YTT203
4 |     from typing import Final
5 | else:
  |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:3:27: PLR2004 Magic value used in comparison, consider replacing `8` with a constant variable
  |
1 | import sys
2 | 
3 | if sys.version_info[1] >= 8:
  |                           ^ PLR2004
4 |     from typing import Final
5 | else:
  |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:53:5: ANN202 Missing return type annotation for private function `_compile_for_deploy`
   |
53 | def _compile_for_deploy(model):
   |     ^^^^^^^^^^^^^^^^^^^ ANN202
54 |     model.eval()
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:62:5: D417 Missing argument descriptions in the docstring for `load_deployed_model`: `device`, `freeze`, `set_global_options`
   |
62 | def load_deployed_model(
   |     ^^^^^^^^^^^^^^^^^^^ D417
63 |     model_path: Union[pathlib.Path, str],
64 |     device: Union[str, torch.device] = "cpu",
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:63:17: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
62 | def load_deployed_model(
63 |     model_path: Union[pathlib.Path, str],
   |                 ^^^^^ FA100
64 |     device: Union[str, torch.device] = "cpu",
65 |     freeze: bool = True,
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:64:13: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
62 | def load_deployed_model(
63 |     model_path: Union[pathlib.Path, str],
64 |     device: Union[str, torch.device] = "cpu",
   |             ^^^^^ FA100
65 |     freeze: bool = True,
66 |     set_global_options: Union[str, bool] = "warn",
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:65:5: FBT001 Boolean-typed positional argument in function definition
   |
63 |     model_path: Union[pathlib.Path, str],
64 |     device: Union[str, torch.device] = "cpu",
65 |     freeze: bool = True,
   |     ^^^^^^ FBT001
66 |     set_global_options: Union[str, bool] = "warn",
67 | ) -> Tuple[torch.jit.ScriptModule, Dict[str, str]]:
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:65:5: FBT002 Boolean default positional argument in function definition
   |
63 |     model_path: Union[pathlib.Path, str],
64 |     device: Union[str, torch.device] = "cpu",
65 |     freeze: bool = True,
   |     ^^^^^^ FBT002
66 |     set_global_options: Union[str, bool] = "warn",
67 | ) -> Tuple[torch.jit.ScriptModule, Dict[str, str]]:
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:66:25: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
64 |     device: Union[str, torch.device] = "cpu",
65 |     freeze: bool = True,
66 |     set_global_options: Union[str, bool] = "warn",
   |                         ^^^^^ FA100
67 | ) -> Tuple[torch.jit.ScriptModule, Dict[str, str]]:
68 |     r"""Load a deployed model.
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:67:6: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
65 |     freeze: bool = True,
66 |     set_global_options: Union[str, bool] = "warn",
67 | ) -> Tuple[torch.jit.ScriptModule, Dict[str, str]]:
   |      ^^^^^ FA100
68 |     r"""Load a deployed model.
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:67:36: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
65 |     freeze: bool = True,
66 |     set_global_options: Union[str, bool] = "warn",
67 | ) -> Tuple[torch.jit.ScriptModule, Dict[str, str]]:
   |                                    ^^^^ FA100
68 |     r"""Load a deployed model.
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:83:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
81 |           model = torch.jit.load(model_path, map_location=device, _extra_files=metadata)
82 |       except RuntimeError as e:
83 |           raise ValueError(
   |  _________^
84 | |             f"{model_path} does not seem to be a deployed NequIP model file. Did you forget to deploy it using `NequIP-deploy`? \n\n(Underlying error: {e})"
85 | |         )
   | |_________^ B904
86 |       # Confirm NequIP made it
87 |       if metadata[NEQUIP_VERSION_KEY] == "":
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:83:15: TRY003 Avoid specifying long messages outside the exception class
   |
81 |           model = torch.jit.load(model_path, map_location=device, _extra_files=metadata)
82 |       except RuntimeError as e:
83 |           raise ValueError(
   |  _______________^
84 | |             f"{model_path} does not seem to be a deployed NequIP model file. Did you forget to deploy it using `NequIP-deploy`? \n\n(Underlying error: {e})"
85 | |         )
   | |_________^ TRY003
86 |       # Confirm NequIP made it
87 |       if metadata[NEQUIP_VERSION_KEY] == "":
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:84:13: EM102 Exception must not use an f-string literal, assign to variable first
   |
82 |     except RuntimeError as e:
83 |         raise ValueError(
84 |             f"{model_path} does not seem to be a deployed NequIP model file. Did you forget to deploy it using `NequIP-deploy`? \n\n(Underlying error: {e})"
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
85 |         )
86 |     # Confirm NequIP made it
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:88:15: TRY003 Avoid specifying long messages outside the exception class
   |
86 |       # Confirm NequIP made it
87 |       if metadata[NEQUIP_VERSION_KEY] == "":
88 |           raise ValueError(
   |  _______________^
89 | |             f"{model_path} does not seem to be a deployed NequIP model file"
90 | |         )
   | |_________^ TRY003
91 |       # Confirm its TorchScript
92 |       assert isinstance(model, torch.jit.ScriptModule)
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:89:13: EM102 Exception must not use an f-string literal, assign to variable first
   |
87 |     if metadata[NEQUIP_VERSION_KEY] == "":
88 |         raise ValueError(
89 |             f"{model_path} does not seem to be a deployed NequIP model file"
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
90 |         )
91 |     # Confirm its TorchScript
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:92:5: S101 Use of `assert` detected
   |
90 |         )
91 |     # Confirm its TorchScript
92 |     assert isinstance(model, torch.jit.ScriptModule)
   |     ^^^^^^ S101
93 |     # Make sure we're in eval mode
94 |     model.eval()
   |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:103:5: S101 Use of `assert` detected
    |
101 |     metadata = {k: v.decode("ascii") for k, v in metadata.items()}
102 |     # Set up global settings:
103 |     assert set_global_options in (True, False, "warn")
    |     ^^^^^^ S101
104 |     if set_global_options:
105 |         global_config_dict = {}
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:130:5: C901 `main` is too complex (13 > 10)
    |
130 | def main(args=None):
    |     ^^^^ C901
131 |     parser = argparse.ArgumentParser(
132 |         description="Create and view information about deployed NequIP potentials."
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:130:5: PLR0912 Too many branches (17 > 12)
    |
130 | def main(args=None):
    |     ^^^^ PLR0912
131 |     parser = argparse.ArgumentParser(
132 |         description="Create and view information about deployed NequIP potentials."
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:130:5: PLR0915 Too many statements (67 > 50)
    |
130 | def main(args=None):
    |     ^^^^ PLR0915
131 |     parser = argparse.ArgumentParser(
132 |         description="Create and view information about deployed NequIP potentials."
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:130:5: D103 Missing docstring in public function
    |
130 | def main(args=None):
    |     ^^^^ D103
131 |     parser = argparse.ArgumentParser(
132 |         description="Create and view information about deployed NequIP potentials."
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:135:8: YTT203 `sys.version_info[1]` compared to integer (python4), compare `sys.version_info` to tuple
    |
133 |     )
134 |     # backward compat for 3.6
135 |     if sys.version_info[1] > 6:
    |        ^^^^^^^^^^^^^^^^^^^ YTT203
136 |         required = {"required": True}
137 |     else:
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:135:30: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
    |
133 |     )
134 |     # backward compat for 3.6
135 |     if sys.version_info[1] > 6:
    |                              ^ PLR2004
136 |         required = {"required": True}
137 |     else:
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:175:34: UP031 Use format specifiers instead of percent format
    |
173 |         del model
174 |         config = metadata.pop(CONFIG_KEY)
175 |         metadata_str = "\n".join("  %s: %s" % e for e in metadata.items())
    |                                  ^^^^^^^^^^^^^^ UP031
176 |         logging.info(f"Loaded TorchScript model with metadata:\n{metadata_str}\n")
177 |         logging.info("Model was built with config:")
    |
    = help: Replace with format specifiers

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:176:22: G004 Logging statement uses f-string
    |
174 |         config = metadata.pop(CONFIG_KEY)
175 |         metadata_str = "\n".join("  %s: %s" % e for e in metadata.items())
176 |         logging.info(f"Loaded TorchScript model with metadata:\n{metadata_str}\n")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
177 |         logging.info("Model was built with config:")
178 |         print(config)
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:178:9: T201 `print` found
    |
176 |         logging.info(f"Loaded TorchScript model with metadata:\n{metadata_str}\n")
177 |         logging.info("Model was built with config:")
178 |         print(config)
    |         ^^^^^ T201
179 | 
180 |     elif args.command == "build":
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:182:19: TRY003 Avoid specifying long messages outside the exception class
    |
180 |     elif args.command == "build":
181 |         if args.model and args.train_dir:
182 |             raise ValueError("--model and --train-dir cannot both be specified.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
183 |         if args.train_dir is not None:
184 |             logging.info("Loading best_model from training session...")
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:182:30: EM101 Exception must not use a string literal, assign to variable first
    |
180 |     elif args.command == "build":
181 |         if args.model and args.train_dir:
182 |             raise ValueError("--model and --train-dir cannot both be specified.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
183 |         if args.train_dir is not None:
184 |             logging.info("Loading best_model from training session...")
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:190:19: TRY003 Avoid specifying long messages outside the exception class
    |
188 |             config = Config.from_file(str(args.model), defaults=default_config)
189 |         else:
190 |             raise ValueError("one of --train-dir or --model must be given")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
191 | 
192 |         _set_global_options(config)
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:190:30: EM101 Exception must not use a string literal, assign to variable first
    |
188 |             config = Config.from_file(str(args.model), defaults=default_config)
189 |         else:
190 |             raise ValueError("one of --train-dir or --model must be given")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
191 | 
192 |         _set_global_options(config)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:225:21: A001 Variable `type` is shadowing a Python builtin
    |
223 |             type_names = {
224 |                 type: ase.data.chemical_symbols[atomic_num]
225 |                 for type, atomic_num in enumerate(config["allowed_species"])
    |                     ^^^^ A001
226 |             }
227 |         else:
    |

src\stk_search\geom3d\models\NequIP\scripts\deploy.py:235:52: PLR2004 Magic value used in comparison, consider replacing `11` with a constant variable
    |
234 |         metadata[JIT_BAILOUT_KEY] = str(config[JIT_BAILOUT_KEY])
235 |         if int(torch.__version__.split(".")[1]) >= 11 and JIT_FUSION_STRATEGY in config:
    |                                                    ^^ PLR2004
236 |             metadata[JIT_FUSION_STRATEGY] = ";".join(
237 |                 "%s,%i" % e for e in config[JIT_FUSION_STRATEGY]
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:29:5: C901 `main` is too complex (38 > 10)
   |
29 | def main(args=None, running_as_script: bool = True):
   |     ^^^^ C901
30 |     # in results dir, do: NequIP-deploy build --train-dir . deployed.pth
31 |     parser = argparse.ArgumentParser(
   |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:29:5: PLR0912 Too many branches (43 > 12)
   |
29 | def main(args=None, running_as_script: bool = True):
   |     ^^^^ PLR0912
30 |     # in results dir, do: NequIP-deploy build --train-dir . deployed.pth
31 |     parser = argparse.ArgumentParser(
   |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:29:5: PLR0915 Too many statements (167 > 50)
   |
29 | def main(args=None, running_as_script: bool = True):
   |     ^^^^ PLR0915
30 |     # in results dir, do: NequIP-deploy build --train-dir . deployed.pth
31 |     parser = argparse.ArgumentParser(
   |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:29:5: D103 Missing docstring in public function
   |
29 | def main(args=None, running_as_script: bool = True):
   |     ^^^^ D103
30 |     # in results dir, do: NequIP-deploy build --train-dir . deployed.pth
31 |     parser = argparse.ArgumentParser(
   |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:29:21: FBT001 Boolean-typed positional argument in function definition
   |
29 | def main(args=None, running_as_script: bool = True):
   |                     ^^^^^^^^^^^^^^^^^ FBT001
30 |     # in results dir, do: NequIP-deploy build --train-dir . deployed.pth
31 |     parser = argparse.ArgumentParser(
   |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:29:21: FBT002 Boolean default positional argument in function definition
   |
29 | def main(args=None, running_as_script: bool = True):
   |                     ^^^^^^^^^^^^^^^^^ FBT002
30 |     # in results dir, do: NequIP-deploy build --train-dir . deployed.pth
31 |     parser = argparse.ArgumentParser(
   |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:158:15: TRY003 Avoid specifying long messages outside the exception class
    |
156 |     # validate
157 |     if args.dataset_config is None:
158 |         raise ValueError("--dataset-config or --train-dir must be provided")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
159 |     if args.metrics_config is None and args.output is None:
160 |         raise ValueError(
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:158:26: EM101 Exception must not use a string literal, assign to variable first
    |
156 |     # validate
157 |     if args.dataset_config is None:
158 |         raise ValueError("--dataset-config or --train-dir must be provided")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
159 |     if args.metrics_config is None and args.output is None:
160 |         raise ValueError(
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:160:15: TRY003 Avoid specifying long messages outside the exception class
    |
158 |           raise ValueError("--dataset-config or --train-dir must be provided")
159 |       if args.metrics_config is None and args.output is None:
160 |           raise ValueError(
    |  _______________^
161 | |             "Nothing to do! Must provide at least one of --metrics-config, --train-dir (to use training config for metrics), or --output"
162 | |         )
    | |_________^ TRY003
163 |       if args.model is None:
164 |           raise ValueError("--model or --train-dir must be provided")
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:161:13: EM101 Exception must not use a string literal, assign to variable first
    |
159 |     if args.metrics_config is None and args.output is None:
160 |         raise ValueError(
161 |             "Nothing to do! Must provide at least one of --metrics-config, --train-dir (to use training config for metrics), or --output"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
162 |         )
163 |     if args.model is None:
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:164:15: TRY003 Avoid specifying long messages outside the exception class
    |
162 |         )
163 |     if args.model is None:
164 |         raise ValueError("--model or --train-dir must be provided")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
165 |     output_type: Optional[str] = None
166 |     if args.output is not None:
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:164:26: EM101 Exception must not use a string literal, assign to variable first
    |
162 |         )
163 |     if args.model is None:
164 |         raise ValueError("--model or --train-dir must be provided")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
165 |     output_type: Optional[str] = None
166 |     if args.output is not None:
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:165:18: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
163 |     if args.model is None:
164 |         raise ValueError("--model or --train-dir must be provided")
165 |     output_type: Optional[str] = None
    |                  ^^^^^^^^ FA100
166 |     if args.output is not None:
167 |         if args.output.suffix != ".xyz":
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:168:19: TRY003 Avoid specifying long messages outside the exception class
    |
166 |     if args.output is not None:
167 |         if args.output.suffix != ".xyz":
168 |             raise ValueError("Only .xyz format for `--output` is supported.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
169 |         args.output_fields = [e for e in args.output_fields.split(",") if e != ""] + [
170 |             ORIGINAL_DATASET_INDEX_KEY
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:168:30: EM101 Exception must not use a string literal, assign to variable first
    |
166 |     if args.output is not None:
167 |         if args.output.suffix != ".xyz":
168 |             raise ValueError("Only .xyz format for `--output` is supported.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
169 |         args.output_fields = [e for e in args.output_fields.split(",") if e != ""] + [
170 |             ORIGINAL_DATASET_INDEX_KEY
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:174:9: S101 Use of `assert` detected
    |
172 |         output_type = "xyz"
173 |     else:
174 |         assert args.output_fields == ""
    |         ^^^^^^ S101
175 |         args.output_fields = []
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:187:17: G004 Logging statement uses f-string
    |
185 |     logger.setLevel(logging.INFO)
186 | 
187 |     logger.info(f"Using device: {device}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ G004
188 |     if device.type == "cuda":
189 |         logger.info(
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:197:44: FBT003 Boolean positional value in function call
    |
195 |             "Telling PyTorch to try to use deterministic algorithms... please note that this will likely error on CUDA/GPU"
196 |         )
197 |         torch.use_deterministic_algorithms(True)
    |                                            ^^^^ FBT003
198 | 
199 |     # Load model:
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:239:9: G004 Logging statement uses f-string
    |
237 |     # Load a config file
238 |     logger.info(
239 |         f"Loading {'original ' if dataset_is_from_training else ''}dataset...",
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
240 |     )
241 |     dataset_config = Config.from_file(
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:245:15: TRY003 Avoid specifying long messages outside the exception class
    |
243 |       )
244 |       if dataset_config["r_max"] != model_r_max:
245 |           raise RuntimeError(
    |  _______________^
246 | |             f"Dataset config has r_max={dataset_config['r_max']}, but model has r_max={model_r_max}!"
247 | |         )
    | |_________^ TRY003
248 |   
249 |       dataset_is_validation: bool = False
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:246:13: EM102 Exception must not use an f-string literal, assign to variable first
    |
244 |     if dataset_config["r_max"] != model_r_max:
245 |         raise RuntimeError(
246 |             f"Dataset config has r_max={dataset_config['r_max']}, but model has r_max={model_r_max}!"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
247 |         )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:261:9: G004 Logging statement uses f-string
    |
259 |         dataset = dataset_from_config(dataset_config)
260 |     logger.info(
261 |         f"Loaded {'validation_' if dataset_is_validation else ''}dataset specified in {args.dataset_config.name}.",
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
262 |     )
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:279:17: G004 Logging statement uses f-string
    |
277 |             test_idcs = list(all_idcs - val_idcs)
278 |             logger.info(
279 |                 f"Using origial validation dataset ({len(dataset)} frames) minus validation set frames ({len(val_idcs)} frames), yielding a test set size of {len(test_idcs)} frames.",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
280 |             )
281 |         else:
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:283:13: S101 Use of `assert` detected
    |
281 |         else:
282 |             test_idcs = list(all_idcs - train_idcs - val_idcs)
283 |             assert set(test_idcs).isdisjoint(train_idcs)
    |             ^^^^^^ S101
284 |             logger.info(
285 |                 f"Using origial training dataset ({len(dataset)} frames) minus training ({len(train_idcs)} frames) and validation frames ({len(val_idcs)} frames), yielding a test set size of {len(test_idcs)} frames.",
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:285:17: G004 Logging statement uses f-string
    |
283 |             assert set(test_idcs).isdisjoint(train_idcs)
284 |             logger.info(
285 |                 f"Using origial training dataset ({len(dataset)} frames) minus training ({len(train_idcs)} frames) and validation frames ({len(val_idcs)} frames), yielding a test set size of {len(test_idcs)} frames.",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
286 |             )
287 |         # No matter what it should be disjoint from validation:
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:288:9: S101 Use of `assert` detected
    |
286 |             )
287 |         # No matter what it should be disjoint from validation:
288 |         assert set(test_idcs).isdisjoint(val_idcs)
    |         ^^^^^^ S101
289 |         if not do_metrics:
290 |             logger.info(
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:297:13: G004 Logging statement uses f-string
    |
295 |         test_idcs = torch.arange(dataset.len())
296 |         logger.info(
297 |             f"Using all frames from the specified test dataset, yielding a test set size of {len(test_idcs)} frames.",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
298 |         )
299 |     else:
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:302:31: C408 Unnecessary `dict` call (rewrite as a literal)
    |
300 |           # load from file
301 |           test_idcs = load_file(
302 |               supported_formats=dict(
    |  _______________________________^
303 | |                 torch=["pt", "pth"], yaml=["yaml", "yml"], json=["json"]
304 | |             ),
    | |_____________^ C408
305 |               filename=str(args.test_indexes),
306 |           )
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:308:13: G004 Logging statement uses f-string
    |
306 |         )
307 |         logger.info(
308 |             f"Using provided test set indexes, yielding a test set size of {len(test_idcs)} frames.",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
309 |         )
310 |     test_idcs = torch.as_tensor(test_idcs, dtype=torch.long)
    |

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:323:33: C408 Unnecessary `dict` call (rewrite as a literal)
    |
321 |                 builder=Loss,
322 |                 prefix="loss",
323 |                 positional_args=dict(coeffs=metrics_config.loss_coeffs),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C408
324 |                 all_args=metrics_config,
325 |             )
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:337:29: C408 Unnecessary `dict` call (rewrite as a literal)
    |
335 |             builder=Metrics,
336 |             prefix="metrics",
337 |             positional_args=dict(components=metrics_components),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C408
338 |             all_args=metrics_config,
339 |         )
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:347:36: F811 Redefinition of unused `context_stack` from line 346
    |
345 |     logger.info("Starting...")
346 |     context_stack = contextlib.ExitStack()
347 |     with contextlib.ExitStack() as context_stack:
    |                                    ^^^^^^^^^^^^^ F811
348 |         # "None" checks if in a TTY and disables if not
349 |         prog = context_stack.enter_context(tqdm(total=len(test_idcs), disable=None))
    |
    = help: Remove definition: `context_stack`

src\stk_search\geom3d\models\NequIP\scripts\evaluate.py:361:50: PTH123 `open()` should be replaced by `Path.open()`
    |
360 |         if output_type is not None:
361 |             output = context_stack.enter_context(open(args.output, "w"))
    |                                                  ^^^^ PTH123
362 |         else:
363 |             output = None
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\scripts\run_md.py:26:18: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
24 |     """
25 |     write(
26 |         filename=os.path.join(os.path.join(logdir, "xyz_strucs/"), prefix + ".xyz"),
   |                  ^^^^^^^^^^^^ PTH118
27 |         images=atoms,
28 |         format="extxyz",
   |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:26:31: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
24 |     """
25 |     write(
26 |         filename=os.path.join(os.path.join(logdir, "xyz_strucs/"), prefix + ".xyz"),
   |                               ^^^^^^^^^^^^ PTH118
27 |         images=atoms,
28 |         format="extxyz",
   |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:71:5: D103 Missing docstring in public function
   |
71 | def main(args=None):
   |     ^^^^ D103
72 |     parser = argparse.ArgumentParser(
73 |         description="Run Nose-Hoover MD using a deployed NequIP model."
   |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:107:19: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
105 |     args = parser.parse_args(args=args)
106 | 
107 |     logfilename = os.path.join(args.logdir, f"ase_md_run_{time.time()}.log")
    |                   ^^^^^^^^^^^^ PTH118
108 | 
109 |     np.random.seed(args.seed)
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:109:5: NPY002 Replace legacy `np.random.seed` call with `np.random.Generator`
    |
107 |     logfilename = os.path.join(args.logdir, f"ase_md_run_{time.time()}.log")
108 | 
109 |     np.random.seed(args.seed)
    |     ^^^^^^^^^^^^^^ NPY002
110 |     torch.manual_seed(args.seed)
111 |     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:113:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
111 |     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
112 | 
113 |     if not os.path.exists(args.logdir):
    |            ^^^^^^^^^^^^^^ PTH110
114 |         os.makedirs(args.logdir)
115 |         os.makedirs(os.path.join(args.logdir, "xyz_strucs"))
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:114:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
113 |     if not os.path.exists(args.logdir):
114 |         os.makedirs(args.logdir)
    |         ^^^^^^^^^^^ PTH103
115 |         os.makedirs(os.path.join(args.logdir, "xyz_strucs"))
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:115:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
113 |     if not os.path.exists(args.logdir):
114 |         os.makedirs(args.logdir)
115 |         os.makedirs(os.path.join(args.logdir, "xyz_strucs"))
    |         ^^^^^^^^^^^ PTH103
116 | 
117 |     logging.basicConfig(filename=logfilename, format="%(message)s", level=logging.INFO)
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:115:21: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
113 |     if not os.path.exists(args.logdir):
114 |         os.makedirs(args.logdir)
115 |         os.makedirs(os.path.join(args.logdir, "xyz_strucs"))
    |                     ^^^^^^^^^^^^ PTH118
116 | 
117 |     logging.basicConfig(filename=logfilename, format="%(message)s", level=logging.INFO)
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:147:9: G004 Logging statement uses f-string
    |
145 |     # log first frame
146 |     logging.info(
147 |         f"\n\nStarting dynamics with Nose-Hoover Thermostat with nvt_q: {args.nvt_q}\n\n"
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
148 |     )
149 |     write_ase_md_config(curr_atoms=atoms, curr_step=0, dt=args.dt)
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:150:18: G004 Logging statement uses f-string
    |
148 |     )
149 |     write_ase_md_config(curr_atoms=atoms, curr_step=0, dt=args.dt)
150 |     logging.info(f"COM [A]: {atoms.get_center_of_mass()}\n")
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
151 | 
152 |     save_to_xyz(atoms, logdir=args.logdir, prefix="nvt_")
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:160:26: G004 Logging statement uses f-string
    |
158 |             write_ase_md_config(curr_atoms=atoms, curr_step=i, dt=args.dt)
159 | 
160 |             logging.info(f"COM [A]: {atoms.get_center_of_mass()}\n")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
161 | 
162 |         # append current structure to xyz file
    |

src\stk_search\geom3d\models\NequIP\scripts\run_md.py:166:5: T201 `print` found
    |
164 |             save_to_xyz(atoms, logdir=args.logdir, prefix="nvt_")
165 | 
166 |     print("finished...")
    |     ^^^^^ T201
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\scripts\train.py:20:18: C408 Unnecessary `dict` call (rewrite as a literal)
   |
18 |   from NequIP.utils.versions import check_code_version
19 |   
20 |   default_config = dict(
   |  __________________^
21 | |     root="./",
22 | |     run_name="NequIP",
23 | |     wandb=False,
24 | |     wandb_project="NequIP",
25 | |     model_builders=[
26 | |         "SimpleIrrepsConfig",
27 | |         "EnergyModel",
28 | |         "PerSpeciesRescale",
29 | |         "ForceOutput",
30 | |         "RescaleEnergyEtc",
31 | |     ],
32 | |     dataset_statistics_stride=1,
33 | |     default_dtype="float32",
34 | |     allow_tf32=False,  # TODO: until we understand equivar issues
35 | |     verbose="INFO",
36 | |     model_debug_mode=False,
37 | |     equivariance_test=False,
38 | |     grad_anomaly_mode=False,
39 | |     append=False,
40 | |     _jit_bailout_depth=2,  # avoid 20 iters of pain, see https://github.com/pytorch/pytorch/issues/52286
41 | |     # Quote from eelison in PyTorch slack:
42 | |     # https://pytorch.slack.com/archives/CDZD1FANA/p1644259272007529?thread_ts=1644064449.039479&cid=CDZD1FANA
43 | |     # > Right now the default behavior is to specialize twice on static shapes and then on dynamic shapes.
44 | |     # > To reduce warmup time you can do something like setFusionStrartegy({{FusionBehavior::DYNAMIC, 3}})
45 | |     # > ... Although we would wouldn't really expect to recompile a dynamic shape fusion in a model,
46 | |     # > provided broadcasting patterns remain fixed
47 | |     # We default to DYNAMIC alone because the number of edges is always dynamic,
48 | |     # even if the number of atoms is fixed:
49 | |     _jit_fusion_strategy=[("DYNAMIC", 3)],
50 | | )
   | |_^ C408
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\scripts\train.py:34:26: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
32 |     dataset_statistics_stride=1,
33 |     default_dtype="float32",
34 |     allow_tf32=False,  # TODO: until we understand equivar issues
   |                          ^^^^ TD002
35 |     verbose="INFO",
36 |     model_debug_mode=False,
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:34:26: TD003 Missing issue link on the line following this TODO
   |
32 |     dataset_statistics_stride=1,
33 |     default_dtype="float32",
34 |     allow_tf32=False,  # TODO: until we understand equivar issues
   |                          ^^^^ TD003
35 |     verbose="INFO",
36 |     model_debug_mode=False,
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:34:26: FIX002 Line contains TODO, consider resolving the issue
   |
32 |     dataset_statistics_stride=1,
33 |     default_dtype="float32",
34 |     allow_tf32=False,  # TODO: until we understand equivar issues
   |                          ^^^^ FIX002
35 |     verbose="INFO",
36 |     model_debug_mode=False,
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:53:5: D103 Missing docstring in public function
   |
53 | def main(args=None, running_as_script: bool = True):
   |     ^^^^ D103
54 |     config = parse_command_line(args)
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:53:21: FBT001 Boolean-typed positional argument in function definition
   |
53 | def main(args=None, running_as_script: bool = True):
   |                     ^^^^^^^^^^^^^^^^^ FBT001
54 |     config = parse_command_line(args)
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:53:21: FBT002 Boolean default positional argument in function definition
   |
53 | def main(args=None, running_as_script: bool = True):
   |                     ^^^^^^^^^^^^^^^^^ FBT002
54 |     config = parse_command_line(args)
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:59:26: PTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`
   |
57 |         set_up_script_logger(config.get("log", None), config.verbose)
58 | 
59 |     found_restart_file = isdir(f"{config.root}/{config.run_name}")
   |                          ^^^^^ PTH112
60 |     if found_restart_file and not config.append:
61 |         raise RuntimeError(
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:61:15: TRY003 Avoid specifying long messages outside the exception class
   |
59 |       found_restart_file = isdir(f"{config.root}/{config.run_name}")
60 |       if found_restart_file and not config.append:
61 |           raise RuntimeError(
   |  _______________^
62 | |             f"Training instance exists at {config.root}/{config.run_name}; "
63 | |             "either set append to True or use a different root or runname"
64 | |         )
   | |_________^ TRY003
65 |   
66 |       # for fresh new train
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:62:13: EM102 Exception must not use an f-string literal, assign to variable first
   |
60 |       if found_restart_file and not config.append:
61 |           raise RuntimeError(
62 |               f"Training instance exists at {config.root}/{config.run_name}; "
   |  _____________^
63 | |             "either set append to True or use a different root or runname"
   | |__________________________________________________________________________^ EM102
64 |           )
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\scripts\train.py:78:5: D103 Missing docstring in public function
   |
78 | def parse_command_line(args=None):
   |     ^^^^^^^^^^^^^^^^^^ D103
79 |     parser = argparse.ArgumentParser(description="Train a NequIP model.")
80 |     parser.add_argument("config", help="configuration file")
   |

src\stk_search\geom3d\models\NequIP\scripts\train.py:113:5: D103 Missing docstring in public function
    |
113 | def fresh_start(config):
    |     ^^^^^^^^^^^ D103
114 |     # we use add_to_config cause it's a fresh start and need to record it
115 |     check_code_version(config, add_to_config=True)
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:141:18: G004 Logging statement uses f-string
    |
139 |     # = Load the dataset =
140 |     dataset = dataset_from_config(config, prefix="dataset")
141 |     logging.info(f"Successfully loaded the data set of type {dataset}...")
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
142 |     try:
143 |         validation_dataset = dataset_from_config(config, prefix="validation_dataset")
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:145:13: G004 Logging statement uses f-string
    |
143 |         validation_dataset = dataset_from_config(config, prefix="validation_dataset")
144 |         logging.info(
145 |             f"Successfully loaded the validation data set of type {validation_dataset}..."
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
146 |         )
147 |     except KeyError:
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:166:9: S101 Use of `assert` detected
    |
164 |     if config.equivariance_test > 0:
165 |         n_train: int = len(trainer.dataset_train)
166 |         assert config.equivariance_test <= n_train
    |         ^^^^^^ S101
167 |         final_model.eval()
168 |         indexes = torch.randperm(n_train)[: config.equivariance_test]
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:174:13: G004 Logging statement uses f-string
    |
172 |           final_model.train()
173 |           logging.info(
174 |               "Equivariance test passed; equivariance errors:\n"
    |  _____________^
175 | |             "   Errors are in real units, where relevant.\n"
176 | |             "   Please note that the large scale of the typical\n"
177 | |             "   shifts to the (atomic) energy can cause\n"
178 | |             "   catastrophic cancellation and give incorrectly\n"
179 | |             "   the equivariance error as zero for those fields.\n"
180 | |             f"{errstr}"
    | |_______________________^ G004
181 |           )
182 |           del errstr, indexes, n_train
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:193:5: D103 Missing docstring in public function
    |
193 | def restart(config):
    |     ^^^^^^^ D103
194 |     # load the dictionary
195 |     restart_file = f"{config.root}/{config.run_name}/trainer.pth"
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:197:27: C408 Unnecessary `dict` call (rewrite as a literal)
    |
195 |     restart_file = f"{config.root}/{config.run_name}/trainer.pth"
196 |     dictionary = load_file(
197 |         supported_formats=dict(torch=["pt", "pth"]),
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ C408
198 |         filename=restart_file,
199 |         enforced_format="torch",
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\scripts\train.py:203:9: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
202 |     # compare dictionary to config and update stop condition related arguments
203 |     for k in config.keys():
    |         ^^^^^^^^^^^^^^^^^^ SIM118
204 |         if config[k] != dictionary.get(k, ""):
205 |             if k == "max_epochs" or k.startswith("early_stop"):
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\models\NequIP\scripts\train.py:207:30: G004 Logging statement uses f-string
    |
205 |             if k == "max_epochs" or k.startswith("early_stop"):
206 |                 dictionary[k] = config[k]
207 |                 logging.info(f'Update "{k}" to {dictionary[k]}')
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
208 |             elif isinstance(config[k], type(dictionary.get(k, ""))):
209 |                 raise ValueError(
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:209:23: TRY003 Avoid specifying long messages outside the exception class
    |
207 |                   logging.info(f'Update "{k}" to {dictionary[k]}')
208 |               elif isinstance(config[k], type(dictionary.get(k, ""))):
209 |                   raise ValueError(
    |  _______________________^
210 | |                     f'Key "{k}" is different in config and the result trainer.pth file. Please double check'
211 | |                 )
    | |_________________^ TRY003
212 |   
213 |       # note, "trainer.pth"/dictionary also store code versions,
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:210:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
208 |             elif isinstance(config[k], type(dictionary.get(k, ""))):
209 |                 raise ValueError(
210 |                     f'Key "{k}" is different in config and the result trainer.pth file. Please double check'
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
211 |                 )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\scripts\train.py:240:18: G004 Logging statement uses f-string
    |
238 |     # = Load the dataset =
239 |     dataset = dataset_from_config(config, prefix="dataset")
240 |     logging.info(f"Successfully re-loaded the data set of type {dataset}...")
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
241 |     try:
242 |         validation_dataset = dataset_from_config(config, prefix="validation_dataset")
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:244:13: G004 Logging statement uses f-string
    |
242 |         validation_dataset = dataset_from_config(config, prefix="validation_dataset")
243 |         logging.info(
244 |             f"Successfully re-loaded the validation data set of type {validation_dataset}..."
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
245 |         )
246 |     except KeyError:
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:255:5: D400 First line should end with a period
    |
254 | def _check_old_keys(config) -> None:
255 |     """Check ``config`` for old/depricated keys and emit corresponding errors/warnings"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
256 |     # compile_model
257 |     k = "compile_model"
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\scripts\train.py:255:5: D415 First line should end with a period, question mark, or exclamation point
    |
254 | def _check_old_keys(config) -> None:
255 |     """Check ``config`` for old/depricated keys and emit corresponding errors/warnings"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
256 |     # compile_model
257 |     k = "compile_model"
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\scripts\train.py:260:19: TRY003 Avoid specifying long messages outside the exception class
    |
258 |     if k in config:
259 |         if config[k]:
260 |             raise ValueError("the `compile_model` option has been removed")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
261 |         else:
262 |             warnings.warn("the `compile_model` option has been removed")
    |

src\stk_search\geom3d\models\NequIP\scripts\train.py:260:30: EM101 Exception must not use a string literal, assign to variable first
    |
258 |     if k in config:
259 |         if config[k]:
260 |             raise ValueError("the `compile_model` option has been removed")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
261 |         else:
262 |             warnings.warn("the `compile_model` option has been removed")
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\scripts\train.py:261:9: RET506 Unnecessary `else` after `raise` statement
    |
259 |         if config[k]:
260 |             raise ValueError("the `compile_model` option has been removed")
261 |         else:
    |         ^^^^ RET506
262 |             warnings.warn("the `compile_model` option has been removed")
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\scripts\train.py:262:13: B028 No explicit `stacklevel` keyword argument found
    |
260 |             raise ValueError("the `compile_model` option has been removed")
261 |         else:
262 |             warnings.warn("the `compile_model` option has been removed")
    |             ^^^^^^^^^^^^^ B028
    |

src\stk_search\geom3d\models\NequIP\utils\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\NequIP\utils\__init__.py:16:1: ERA001 Found commented-out code
   |
14 | )
15 | 
16 | # from .output import Output
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
17 | # from .modules import find_first_of_type
18 | # from .misc import dtype_from_name
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\__init__.py:17:1: ERA001 Found commented-out code
   |
16 | # from .output import Output
17 | # from .modules import find_first_of_type
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
18 | # from .misc import dtype_from_name
19 | from .scatter import scatter
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\__init__.py:18:1: ERA001 Found commented-out code
   |
16 | # from .output import Output
17 | # from .modules import find_first_of_type
18 | # from .misc import dtype_from_name
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
19 | from .scatter import scatter
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\__init__.py:21:1: PLE0604 Invalid object in `__all__`, must contain only strings
   |
19 | from .scatter import scatter
20 | 
21 | __all__ = [
   | ^^^^^^^ PLE0604
22 |     instantiate_from_cls_name,
23 |     instantiate,
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:24:12: PLW0602 Using global for `_latest_global_config` but no assignment is done
   |
22 |     This is useful for getting worker processes into the same state as the parent.
23 |     """
24 |     global _latest_global_config
   |            ^^^^^^^^^^^^^^^^^^^^^ PLW0602
25 |     return _latest_global_config
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:28:5: C901 `_set_global_options` is too complex (12 > 10)
   |
28 | def _set_global_options(config, warn_on_override: bool = False) -> None:
   |     ^^^^^^^^^^^^^^^^^^^ C901
29 |     """Configure global options of libraries like `torch` and `e3nn` based on `config`.
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:28:5: D417 Missing argument description in the docstring for `_set_global_options`: `config`
   |
28 | def _set_global_options(config, warn_on_override: bool = False) -> None:
   |     ^^^^^^^^^^^^^^^^^^^ D417
29 |     """Configure global options of libraries like `torch` and `e3nn` based on `config`.
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:28:33: FBT001 Boolean-typed positional argument in function definition
   |
28 | def _set_global_options(config, warn_on_override: bool = False) -> None:
   |                                 ^^^^^^^^^^^^^^^^ FBT001
29 |     """Configure global options of libraries like `torch` and `e3nn` based on `config`.
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:28:33: FBT002 Boolean default positional argument in function definition
   |
28 | def _set_global_options(config, warn_on_override: bool = False) -> None:
   |                                 ^^^^^^^^^^^^^^^^ FBT002
29 |     """Configure global options of libraries like `torch` and `e3nn` based on `config`.
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:37:12: PLW0602 Using global for `_latest_global_config` but no assignment is done
   |
35 |     """
36 |     # update these options into the latest global config.
37 |     global _latest_global_config
   |            ^^^^^^^^^^^^^^^^^^^^^ PLW0602
38 |     _latest_global_config.update(dict(config))
39 |     # Set TF32 support
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:41:5: SIM102 Use a single `if` statement instead of nested `if` statements
   |
39 |       # Set TF32 support
40 |       # See https://pytorch.org/docs/stable/notes/cuda.html#tensorfloat-32-tf32-on-ampere-devices
41 |       if torch.cuda.is_available() and "allow_tf32" in config:
   |  _____^
42 | |         if torch.torch.backends.cuda.matmul.allow_tf32 is not config["allow_tf32"]:
   | |___________________________________________________________________________________^ SIM102
43 |               # update the setting
44 |               if warn_on_override:
   |
   = help: Combine `if` statements using `and`

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:45:17: B028 No explicit `stacklevel` keyword argument found
   |
43 |             # update the setting
44 |             if warn_on_override:
45 |                 warnings.warn(
   |                 ^^^^^^^^^^^^^ B028
46 |                     f"Setting the GLOBAL value for allow_tf32 to {config['allow_tf32']} which is different than the previous value of {torch.torch.backends.cuda.matmul.allow_tf32}"
47 |                 )
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:51:48: PLR2004 Magic value used in comparison, consider replacing `11` with a constant variable
   |
49 |             torch.backends.cudnn.allow_tf32 = config["allow_tf32"]
50 | 
51 |     if int(torch.__version__.split(".")[1]) >= 11:
   |                                                ^^ PLR2004
52 |         # PyTorch >= 1.11
53 |         k = "_jit_fusion_strategy"
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:52:9: ERA001 Found commented-out code
   |
51 |     if int(torch.__version__.split(".")[1]) >= 11:
52 |         # PyTorch >= 1.11
   |         ^^^^^^^^^^^^^^^^^ ERA001
53 |         k = "_jit_fusion_strategy"
54 |         if k in config:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:58:17: B028 No explicit `stacklevel` keyword argument found
   |
56 |             old_strat = torch.jit.set_fusion_strategy(new_strat)
57 |             if warn_on_override and old_strat != new_strat:
58 |                 warnings.warn(
   |                 ^^^^^^^^^^^^^ B028
59 |                     f"Setting the GLOBAL value for jit fusion strategy to `{new_strat}` which is different than the previous value of `{old_strat}`"
60 |                 )
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:67:25: SLF001 Private member accessed: `_C`
   |
65 |         if k in config:
66 |             new_depth = config[k]
67 |             old_depth = torch._C._jit_set_bailout_depth(new_depth)
   |                         ^^^^^^^^ SLF001
68 |             if warn_on_override and old_depth != new_depth:
69 |                 warnings.warn(
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:67:25: SLF001 Private member accessed: `_jit_set_bailout_depth`
   |
65 |         if k in config:
66 |             new_depth = config[k]
67 |             old_depth = torch._C._jit_set_bailout_depth(new_depth)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
68 |             if warn_on_override and old_depth != new_depth:
69 |                 warnings.warn(
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:69:17: B028 No explicit `stacklevel` keyword argument found
   |
67 |             old_depth = torch._C._jit_set_bailout_depth(new_depth)
68 |             if warn_on_override and old_depth != new_depth:
69 |                 warnings.warn(
   |                 ^^^^^^^^^^^^^ B028
70 |                     f"Setting the GLOBAL value for jit bailout depth to `{new_depth}` which is different than the previous value of `{old_depth}`"
71 |                 )
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:73:7: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
71 |                 )
72 | 
73 |     # TODO: warn_on_override for the rest here?
   |       ^^^^ TD002
74 |     if config.get("model_debug_mode", False):
75 |         set_irreps_debug(enabled=True)
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:73:7: TD003 Missing issue link on the line following this TODO
   |
71 |                 )
72 | 
73 |     # TODO: warn_on_override for the rest here?
   |       ^^^^ TD003
74 |     if config.get("model_debug_mode", False):
75 |         set_irreps_debug(enabled=True)
   |

src\stk_search\geom3d\models\NequIP\utils\_global_options.py:73:7: FIX002 Line contains TODO, consider resolving the issue
   |
71 |                 )
72 | 
73 |     # TODO: warn_on_override for the rest here?
   |       ^^^^ FIX002
74 |     if config.get("model_debug_mode", False):
75 |         set_irreps_debug(enabled=True)
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\auto_init.py:8:5: PLR0913 Too many arguments in function definition (8 > 5)
   |
 8 | def instantiate_from_cls_name(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
 9 |     module,
10 |     class_name: str,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:8:5: D417 Missing argument description in the docstring for `instantiate_from_cls_name`: `prefix`
   |
 8 | def instantiate_from_cls_name(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ D417
 9 |     module,
10 |     class_name: str,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:11:13: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
 9 |     module,
10 |     class_name: str,
11 |     prefix: Optional[Union[str, List[str]]] = [],
   |             ^^^^^^^^ FA100
12 |     positional_args: dict = {},
13 |     optional_args: Optional[dict] = None,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:11:22: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
 9 |     module,
10 |     class_name: str,
11 |     prefix: Optional[Union[str, List[str]]] = [],
   |                      ^^^^^ FA100
12 |     positional_args: dict = {},
13 |     optional_args: Optional[dict] = None,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:11:33: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
 9 |     module,
10 |     class_name: str,
11 |     prefix: Optional[Union[str, List[str]]] = [],
   |                                 ^^^^ FA100
12 |     positional_args: dict = {},
13 |     optional_args: Optional[dict] = None,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:11:47: B006 Do not use mutable data structures for argument defaults
   |
 9 |     module,
10 |     class_name: str,
11 |     prefix: Optional[Union[str, List[str]]] = [],
   |                                               ^^ B006
12 |     positional_args: dict = {},
13 |     optional_args: Optional[dict] = None,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:12:29: B006 Do not use mutable data structures for argument defaults
   |
10 |     class_name: str,
11 |     prefix: Optional[Union[str, List[str]]] = [],
12 |     positional_args: dict = {},
   |                             ^^ B006
13 |     optional_args: Optional[dict] = None,
14 |     all_args: Optional[dict] = None,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:13:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
11 |     prefix: Optional[Union[str, List[str]]] = [],
12 |     positional_args: dict = {},
13 |     optional_args: Optional[dict] = None,
   |                    ^^^^^^^^ FA100
14 |     all_args: Optional[dict] = None,
15 |     remove_kwargs: bool = True,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:14:15: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
12 |     positional_args: dict = {},
13 |     optional_args: Optional[dict] = None,
14 |     all_args: Optional[dict] = None,
   |               ^^^^^^^^ FA100
15 |     remove_kwargs: bool = True,
16 |     return_args_only: bool = False,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:15:5: FBT001 Boolean-typed positional argument in function definition
   |
13 |     optional_args: Optional[dict] = None,
14 |     all_args: Optional[dict] = None,
15 |     remove_kwargs: bool = True,
   |     ^^^^^^^^^^^^^ FBT001
16 |     return_args_only: bool = False,
17 | ):
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:15:5: FBT002 Boolean default positional argument in function definition
   |
13 |     optional_args: Optional[dict] = None,
14 |     all_args: Optional[dict] = None,
15 |     remove_kwargs: bool = True,
   |     ^^^^^^^^^^^^^ FBT002
16 |     return_args_only: bool = False,
17 | ):
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:16:5: FBT001 Boolean-typed positional argument in function definition
   |
14 |     all_args: Optional[dict] = None,
15 |     remove_kwargs: bool = True,
16 |     return_args_only: bool = False,
   |     ^^^^^^^^^^^^^^^^ FBT001
17 | ):
18 |     """Initialize a class based on a string class name
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:16:5: FBT002 Boolean default positional argument in function definition
   |
14 |     all_args: Optional[dict] = None,
15 |     remove_kwargs: bool = True,
16 |     return_args_only: bool = False,
   |     ^^^^^^^^^^^^^^^^ FBT002
17 | ):
18 |     """Initialize a class based on a string class name
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:18:5: D400 First line should end with a period
   |
16 |       return_args_only: bool = False,
17 |   ):
18 |       """Initialize a class based on a string class name
   |  _____^
19 | | 
20 | |     Args:
21 | |     ----
22 | |     module: the module to import the class, i.e. torch.optim
23 | |     class_name: the string name of the class, i.e. "CosineAnnealingWarmRestarts"
24 | |     positional_args (dict): positional arguments
25 | |     optional_args (optional, dict): optional arguments
26 | |     all_args (dict): list of all candidate parameters tha could potentially match the argument list
27 | |     remove_kwargs: if True, ignore the kwargs argument in the init funciton
28 | |         same definition as the one in Config.from_function
29 | |     return_args_only (bool): if True, do not instantiate, only return the arguments
30 | | 
31 | |     Returns:
32 | |     -------
33 | |     instance: the instance
34 | |     optional_args (dict):
35 | | 
36 | |     """
   | |_______^ D400
37 |       if class_name is None:
38 |           raise NameError("class_name type is not defined ")
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:18:5: D415 First line should end with a period, question mark, or exclamation point
   |
16 |       return_args_only: bool = False,
17 |   ):
18 |       """Initialize a class based on a string class name
   |  _____^
19 | | 
20 | |     Args:
21 | |     ----
22 | |     module: the module to import the class, i.e. torch.optim
23 | |     class_name: the string name of the class, i.e. "CosineAnnealingWarmRestarts"
24 | |     positional_args (dict): positional arguments
25 | |     optional_args (optional, dict): optional arguments
26 | |     all_args (dict): list of all candidate parameters tha could potentially match the argument list
27 | |     remove_kwargs: if True, ignore the kwargs argument in the init funciton
28 | |         same definition as the one in Config.from_function
29 | |     return_args_only (bool): if True, do not instantiate, only return the arguments
30 | | 
31 | |     Returns:
32 | |     -------
33 | |     instance: the instance
34 | |     optional_args (dict):
35 | | 
36 | |     """
   | |_______^ D415
37 |       if class_name is None:
38 |           raise NameError("class_name type is not defined ")
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:38:15: TRY003 Avoid specifying long messages outside the exception class
   |
36 |     """
37 |     if class_name is None:
38 |         raise NameError("class_name type is not defined ")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
39 | 
40 |     # first obtain a list of all classes in this module
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:38:25: EM101 Exception must not use a string literal, assign to variable first
   |
36 |     """
37 |     if class_name is None:
38 |         raise NameError("class_name type is not defined ")
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
39 | 
40 |     # first obtain a list of all classes in this module
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:44:9: PERF403 Use a dictionary comprehension instead of a for-loop
   |
42 |     class_dict = {}
43 |     for k, v in class_list:
44 |         class_dict[k] = v
   |         ^^^^^^^^^^^^^^^^^ PERF403
45 |     # print("class_dict", class_dict)
46 |     # print("class_name", class_name)
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:45:5: ERA001 Found commented-out code
   |
43 |     for k, v in class_list:
44 |         class_dict[k] = v
45 |     # print("class_dict", class_dict)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
46 |     # print("class_name", class_name)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:46:5: ERA001 Found commented-out code
   |
44 |         class_dict[k] = v
45 |     # print("class_dict", class_dict)
46 |     # print("class_name", class_name)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
47 | 
48 |     # find the matching class
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:51:15: TRY003 Avoid specifying long messages outside the exception class
   |
49 |     the_class = class_dict.get(class_name)
50 |     if the_class is None:
51 |         raise NameError(f"{class_name} type is not found in {module.__name__} module")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
52 | 
53 |     return instantiate(
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:51:25: EM102 Exception must not use an f-string literal, assign to variable first
   |
49 |     the_class = class_dict.get(class_name)
50 |     if the_class is None:
51 |         raise NameError(f"{class_name} type is not found in {module.__name__} module")
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
52 | 
53 |     return instantiate(
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:64:5: C901 `instantiate` is too complex (27 > 10)
   |
64 | def instantiate(
   |     ^^^^^^^^^^^ C901
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:64:5: PLR0913 Too many arguments in function definition (8 > 5)
   |
64 | def instantiate(
   |     ^^^^^^^^^^^ PLR0913
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:64:5: PLR0912 Too many branches (27 > 12)
   |
64 | def instantiate(
   |     ^^^^^^^^^^^ PLR0912
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:64:5: PLR0915 Too many statements (67 > 50)
   |
64 | def instantiate(
   |     ^^^^^^^^^^^ PLR0915
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:64:5: D417 Missing argument description in the docstring for `instantiate`: `parent_builders`
   |
64 | def instantiate(
   |     ^^^^^^^^^^^ D417
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:66:13: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
64 | def instantiate(
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |             ^^^^^^^^ FA100
67 |     positional_args: dict = {},
68 |     optional_args: dict = None,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:66:22: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
64 | def instantiate(
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |                      ^^^^^ FA100
67 |     positional_args: dict = {},
68 |     optional_args: dict = None,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:66:33: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
64 | def instantiate(
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |                                 ^^^^ FA100
67 |     positional_args: dict = {},
68 |     optional_args: dict = None,
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:66:47: B006 Do not use mutable data structures for argument defaults
   |
64 | def instantiate(
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
   |                                               ^^ B006
67 |     positional_args: dict = {},
68 |     optional_args: dict = None,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:67:29: B006 Do not use mutable data structures for argument defaults
   |
65 |     builder,
66 |     prefix: Optional[Union[str, List[str]]] = [],
67 |     positional_args: dict = {},
   |                             ^^ B006
68 |     optional_args: dict = None,
69 |     all_args: dict = None,
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:68:20: RUF013 PEP 484 prohibits implicit `Optional`
   |
66 |     prefix: Optional[Union[str, List[str]]] = [],
67 |     positional_args: dict = {},
68 |     optional_args: dict = None,
   |                    ^^^^ RUF013
69 |     all_args: dict = None,
70 |     remove_kwargs: bool = True,
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:69:15: RUF013 PEP 484 prohibits implicit `Optional`
   |
67 |     positional_args: dict = {},
68 |     optional_args: dict = None,
69 |     all_args: dict = None,
   |               ^^^^ RUF013
70 |     remove_kwargs: bool = True,
71 |     return_args_only: bool = False,
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:70:5: FBT001 Boolean-typed positional argument in function definition
   |
68 |     optional_args: dict = None,
69 |     all_args: dict = None,
70 |     remove_kwargs: bool = True,
   |     ^^^^^^^^^^^^^ FBT001
71 |     return_args_only: bool = False,
72 |     parent_builders: list = [],
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:70:5: FBT002 Boolean default positional argument in function definition
   |
68 |     optional_args: dict = None,
69 |     all_args: dict = None,
70 |     remove_kwargs: bool = True,
   |     ^^^^^^^^^^^^^ FBT002
71 |     return_args_only: bool = False,
72 |     parent_builders: list = [],
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:71:5: FBT001 Boolean-typed positional argument in function definition
   |
69 |     all_args: dict = None,
70 |     remove_kwargs: bool = True,
71 |     return_args_only: bool = False,
   |     ^^^^^^^^^^^^^^^^ FBT001
72 |     parent_builders: list = [],
73 | ):
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:71:5: FBT002 Boolean default positional argument in function definition
   |
69 |     all_args: dict = None,
70 |     remove_kwargs: bool = True,
71 |     return_args_only: bool = False,
   |     ^^^^^^^^^^^^^^^^ FBT002
72 |     parent_builders: list = [],
73 | ):
   |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:72:29: B006 Do not use mutable data structures for argument defaults
   |
70 |     remove_kwargs: bool = True,
71 |     return_args_only: bool = False,
72 |     parent_builders: list = [],
   |                             ^^ B006
73 | ):
74 |     """Automatic initializing class instance by matching keys in the parameter dictionary to the constructor function.
   |
   = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:99:9: TRY004 Prefer `TypeError` exception for invalid type
    |
 97 |         prefix_list += prefix
 98 |     else:
 99 |         raise ValueError(f"prefix has the wrong type {type(prefix)}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY004
100 | 
101 |     # detect the input parameters needed from params
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:99:15: TRY003 Avoid specifying long messages outside the exception class
    |
 97 |         prefix_list += prefix
 98 |     else:
 99 |         raise ValueError(f"prefix has the wrong type {type(prefix)}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
100 | 
101 |     # detect the input parameters needed from params
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:99:26: EM102 Exception must not use an f-string literal, assign to variable first
    |
 97 |         prefix_list += prefix
 98 |     else:
 99 |         raise ValueError(f"prefix has the wrong type {type(prefix)}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
100 | 
101 |     # detect the input parameters needed from params
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:109:19: TRY003 Avoid specifying long messages outside the exception class
    |
107 |           bname = key[:-7]
108 |           if key.endswith("_kwargs") and bname not in allow:
109 |               raise KeyError(
    |  ___________________^
110 | |                 f"Instantiating {builder.__name__}: found kwargs argument `{key}`, but no parameter `{bname}` for the corresponding builder. (Did you rename `{bname}` but forget to change `{bname}_kwargs`?) Either add a parameter for `{bname}` if you are trying to allow construction of a submodule, or, if `{bname}_kwargs` is just supposed to be a dictionary, rename it without `_kwargs`."
111 | |             )
    | |_____________^ TRY003
112 |       del allow
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:110:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
108 |         if key.endswith("_kwargs") and bname not in allow:
109 |             raise KeyError(
110 |                 f"Instantiating {builder.__name__}: found kwargs argument `{key}`, but no parameter `{bname}` for the corresponding builder. (Did you rename `{bname}` but forget to change `{bname}_kwargs`?) Either add a parameter for `{bname}` if you are trying to allow construction of a submodule, or, if `{bname}_kwargs` is just supposed to be a dictionary, rename it without `_kwargs`."
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
111 |             )
112 |     del allow
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:120:13: B007 Loop control variable `idx` not used within loop body
    |
118 |         key_mapping["all"] = {k: k for k in _keys}
119 |         # fetch paratemeters that match prefix + "_" + name
120 |         for idx, prefix_str in enumerate(prefix_list):
    |             ^^^ B007
121 |             _keys = config.update_w_prefix(
122 |                 all_args,
    |
    = help: Rename unused `idx` to `_idx`

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:132:13: B007 Loop control variable `idx` not used within loop body
    |
130 |         key_mapping["optional"] = {k: k for k in _keys}
131 |         # fetch paratemeters that match prefix + "_" + name
132 |         for idx, prefix_str in enumerate(prefix_list):
    |             ^^^ B007
133 |             _keys = config.update_w_prefix(
134 |                 optional_args,
    |
    = help: Rename unused `idx` to `_idx`

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:168:19: TRY003 Avoid specifying long messages outside the exception class
    |
167 |           if not (callable(sub_builder) or inspect.isclass(sub_builder)):
168 |               raise ValueError(
    |  ___________________^
169 | |                 f"Builder for submodule `{key}` must be a callable or a class, got `{sub_builder!r}` instead."
170 | |             )
    | |_____________^ TRY003
171 |   
172 |           # add double check to avoid cycle
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:169:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
167 |         if not (callable(sub_builder) or inspect.isclass(sub_builder)):
168 |             raise ValueError(
169 |                 f"Builder for submodule `{key}` must be a callable or a class, got `{sub_builder!r}` instead."
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
170 |             )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:179:17: PLR1704 Redefining argument with the local name `prefix`
    |
177 |         ):
178 |             sub_prefix_list = [sub_builder.__name__, key]
179 |             for prefix in prefix_list:
    |                 ^^^^^^ PLR1704
180 |                 sub_prefix_list = sub_prefix_list + [
181 |                     prefix,
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:180:35: RUF005 Consider `[*sub_prefix_list, prefix, prefix + "_" + key]` instead of concatenation
    |
178 |               sub_prefix_list = [sub_builder.__name__, key]
179 |               for prefix in prefix_list:
180 |                   sub_prefix_list = sub_prefix_list + [
    |  ___________________________________^
181 | |                     prefix,
182 | |                     prefix + "_" + key,
183 | |                 ]
    | |_________________^ RUF005
184 |   
185 |               nested_km, nested_kwargs = instantiate(
    |
    = help: Replace with `[*sub_prefix_list, prefix, prefix + "_" + key]`

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:193:33: RUF005 Consider `[builder, *parent_builders]` instead of concatenation
    |
191 |                 remove_kwargs=remove_kwargs,
192 |                 return_args_only=True,
193 |                 parent_builders=[builder] + parent_builders,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
194 |             )
195 |             # the values in kwargs get higher priority
    |
    = help: Replace with `[builder, *parent_builders]`

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:204:19: TRY003 Avoid specifying long messages outside the exception class
    |
202 |                   )
203 |           elif sub_builder in parent_builders:
204 |               raise RuntimeError(
    |  ___________________^
205 | |                 f"cyclic recursion in builder {parent_builders} {sub_builder}"
206 | |             )
    | |_____________^ TRY003
207 |           elif not callable(sub_builder) and not inspect.isclass(sub_builder):
208 |               logging.warning(f"subbuilder is not callable {sub_builder}")
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:205:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
203 |         elif sub_builder in parent_builders:
204 |             raise RuntimeError(
205 |                 f"cyclic recursion in builder {parent_builders} {sub_builder}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
206 |             )
207 |         elif not callable(sub_builder) and not inspect.isclass(sub_builder):
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:208:29: G004 Logging statement uses f-string
    |
206 |             )
207 |         elif not callable(sub_builder) and not inspect.isclass(sub_builder):
208 |             logging.warning(f"subbuilder is not callable {sub_builder}")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
209 |         elif key + "_kwargs" in positional_args:
210 |             logging.warning(
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:211:17: G004 Logging statement uses f-string
    |
209 |         elif key + "_kwargs" in positional_args:
210 |             logging.warning(
211 |                 f"skip searching for nested argument because {key}_kwargs are defined in positional arguments"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
212 |             )
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:224:19: G004 Logging statement uses f-string
    |
223 |     # debug info
224 |     logging.debug(f"instantiate {builder.__name__}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
225 |     for t in key_mapping:
226 |         for k, v in key_mapping[t].items():
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:231:19: G004 Logging statement uses f-string
    |
229 |                 string += f" <- {v:>50s}"
230 |             logging.debug(string)
231 |     logging.debug(f"...{builder.__name__}_param = dict(")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
232 |     logging.debug(f"...   optional_args = {final_optional_args},")
233 |     logging.debug(f"...   positional_args = {positional_args})")
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:232:19: G004 Logging statement uses f-string
    |
230 |             logging.debug(string)
231 |     logging.debug(f"...{builder.__name__}_param = dict(")
232 |     logging.debug(f"...   optional_args = {final_optional_args},")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
233 |     logging.debug(f"...   positional_args = {positional_args})")
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:233:19: G004 Logging statement uses f-string
    |
231 |     logging.debug(f"...{builder.__name__}_param = dict(")
232 |     logging.debug(f"...   optional_args = {final_optional_args},")
233 |     logging.debug(f"...   positional_args = {positional_args})")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
234 | 
235 |     # print(f"Start to build object with prefix `{prefix}` using builder `{builder.__name__}`")
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:235:5: ERA001 Found commented-out code
    |
233 |     logging.debug(f"...   positional_args = {positional_args})")
234 | 
235 |     # print(f"Start to build object with prefix `{prefix}` using builder `{builder.__name__}`")
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
236 |     # print("positional_args", positional_args)
237 |     # print("final_optional_args", final_optional_args)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:236:5: ERA001 Found commented-out code
    |
235 |     # print(f"Start to build object with prefix `{prefix}` using builder `{builder.__name__}`")
236 |     # print("positional_args", positional_args)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
237 |     # print("final_optional_args", final_optional_args)
238 |     try:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:237:5: ERA001 Found commented-out code
    |
235 |     # print(f"Start to build object with prefix `{prefix}` using builder `{builder.__name__}`")
236 |     # print("positional_args", positional_args)
237 |     # print("final_optional_args", final_optional_args)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
238 |     try:
239 |         instance = builder(**positional_args, **final_optional_args)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:241:15: TRY003 Avoid specifying long messages outside the exception class
    |
239 |           instance = builder(**positional_args, **final_optional_args)
240 |       except Exception as e:
241 |           raise RuntimeError(
    |  _______________^
242 | |             f"Failed to build object with prefix `{prefix}` using builder `{builder.__name__}`"
243 | |         ) from e
    | |_________^ TRY003
244 |   
245 |       return instance, final_optional_args
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:242:13: EM102 Exception must not use an f-string literal, assign to variable first
    |
240 |     except Exception as e:
241 |         raise RuntimeError(
242 |             f"Failed to build object with prefix `{prefix}` using builder `{builder.__name__}`"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
243 |         ) from e
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:248:5: C901 `get_w_prefix` is too complex (12 > 10)
    |
248 | def get_w_prefix(
    |     ^^^^^^^^^^^^ C901
249 |     key: List[str],
250 |     *kwargs,
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:249:10: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
248 | def get_w_prefix(
249 |     key: List[str],
    |          ^^^^ FA100
250 |     *kwargs,
251 |     arg_dicts: List[dict] = [],
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:250:5: ANN002 Missing type annotation for `*kwargs`
    |
248 | def get_w_prefix(
249 |     key: List[str],
250 |     *kwargs,
    |     ^^^^^^^ ANN002
251 |     arg_dicts: List[dict] = [],
252 |     prefix: Optional[Union[str, List[str]]] = [],
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:251:16: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
249 |     key: List[str],
250 |     *kwargs,
251 |     arg_dicts: List[dict] = [],
    |                ^^^^ FA100
252 |     prefix: Optional[Union[str, List[str]]] = [],
253 | ):
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:251:29: B006 Do not use mutable data structures for argument defaults
    |
249 |     key: List[str],
250 |     *kwargs,
251 |     arg_dicts: List[dict] = [],
    |                             ^^ B006
252 |     prefix: Optional[Union[str, List[str]]] = [],
253 | ):
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:252:13: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
250 |     *kwargs,
251 |     arg_dicts: List[dict] = [],
252 |     prefix: Optional[Union[str, List[str]]] = [],
    |             ^^^^^^^^ FA100
253 | ):
254 |     """Act as the get function and try to search for the value key from arg_dicts
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:252:22: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
250 |     *kwargs,
251 |     arg_dicts: List[dict] = [],
252 |     prefix: Optional[Union[str, List[str]]] = [],
    |                      ^^^^^ FA100
253 | ):
254 |     """Act as the get function and try to search for the value key from arg_dicts
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:252:33: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
250 |     *kwargs,
251 |     arg_dicts: List[dict] = [],
252 |     prefix: Optional[Union[str, List[str]]] = [],
    |                                 ^^^^ FA100
253 | ):
254 |     """Act as the get function and try to search for the value key from arg_dicts
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:252:47: B006 Do not use mutable data structures for argument defaults
    |
250 |     *kwargs,
251 |     arg_dicts: List[dict] = [],
252 |     prefix: Optional[Union[str, List[str]]] = [],
    |                                               ^^ B006
253 | ):
254 |     """Act as the get function and try to search for the value key from arg_dicts
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:254:5: D200 One-line docstring should fit on one line
    |
252 |       prefix: Optional[Union[str, List[str]]] = [],
253 |   ):
254 |       """Act as the get function and try to search for the value key from arg_dicts
    |  _____^
255 | |     """
    | |_______^ D200
256 |       # detect the input parameters needed from params
257 |       config = Config(config={}, allow_list=[key])
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:254:5: D400 First line should end with a period
    |
252 |       prefix: Optional[Union[str, List[str]]] = [],
253 |   ):
254 |       """Act as the get function and try to search for the value key from arg_dicts
    |  _____^
255 | |     """
    | |_______^ D400
256 |       # detect the input parameters needed from params
257 |       config = Config(config={}, allow_list=[key])
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:254:5: D415 First line should end with a period, question mark, or exclamation point
    |
252 |       prefix: Optional[Union[str, List[str]]] = [],
253 |   ):
254 |       """Act as the get function and try to search for the value key from arg_dicts
    |  _____^
255 | |     """
    | |_______^ D415
256 |       # detect the input parameters needed from params
257 |       config = Config(config={}, allow_list=[key])
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:265:9: TRY004 Prefer `TypeError` exception for invalid type
    |
263 |         prefix_list = prefix
264 |     else:
265 |         raise ValueError(f"prefix is with a wrong type {type(prefix)}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY004
266 |     print("prefix_list", prefix_list)
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:265:15: TRY003 Avoid specifying long messages outside the exception class
    |
263 |         prefix_list = prefix
264 |     else:
265 |         raise ValueError(f"prefix is with a wrong type {type(prefix)}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
266 |     print("prefix_list", prefix_list)
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:265:26: EM102 Exception must not use an f-string literal, assign to variable first
    |
263 |         prefix_list = prefix
264 |     else:
265 |         raise ValueError(f"prefix is with a wrong type {type(prefix)}")
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
266 |     print("prefix_list", prefix_list)
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:266:5: T201 `print` found
    |
264 |     else:
265 |         raise ValueError(f"prefix is with a wrong type {type(prefix)}")
266 |     print("prefix_list", prefix_list)
    |     ^^^^^ T201
267 | 
268 |     if not isinstance(arg_dicts, list):
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:279:13: PLW2901 Outer `for` loop variable `idx` overwritten by inner `for` loop target
    |
277 |         key_mapping[idx] = {k: k for k in _keys}
278 |         # fetch paratemeters that match prefix + "_" + name
279 |         for idx, prefix_str in enumerate(prefix_list):
    |             ^^^ PLW2901
280 |             _keys = config.update_w_prefix(
281 |                 arg_dict,
    |

src\stk_search\geom3d\models\NequIP\utils\auto_init.py:300:19: G004 Logging statement uses f-string
    |
299 |     # debug info
300 |     logging.debug(f"search for {key} with prefix {prefix}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
301 |     for t in key_mapping:
302 |         for k, v in key_mapping[t].items():
    |

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:6:5: D103 Missing docstring in public function
  |
6 | def bincount(
  |     ^^^^^^^^ D103
7 |     input: torch.Tensor, batch: Optional[torch.Tensor] = None, minlength: int = 0
8 | ):
  |

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:7:5: A002 Argument `input` is shadowing a Python builtin
  |
6 | def bincount(
7 |     input: torch.Tensor, batch: Optional[torch.Tensor] = None, minlength: int = 0
  |     ^^^^^ A002
8 | ):
9 |     assert input.ndim == 1
  |

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:7:33: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
  |
6 | def bincount(
7 |     input: torch.Tensor, batch: Optional[torch.Tensor] = None, minlength: int = 0
  |                                 ^^^^^^^^ FA100
8 | ):
9 |     assert input.ndim == 1
  |

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:9:5: S101 Use of `assert` detected
   |
 7 |     input: torch.Tensor, batch: Optional[torch.Tensor] = None, minlength: int = 0
 8 | ):
 9 |     assert input.ndim == 1
   |     ^^^^^^ S101
10 |     if batch is None:
11 |         return torch.bincount(input, minlength=minlength)
   |

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:12:5: RET505 Unnecessary `else` after `return` statement
   |
10 |     if batch is None:
11 |         return torch.bincount(input, minlength=minlength)
12 |     else:
   |     ^^^^ RET505
13 |         assert batch.shape == input.shape
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:13:9: S101 Use of `assert` detected
   |
11 |         return torch.bincount(input, minlength=minlength)
12 |     else:
13 |         assert batch.shape == input.shape
   |         ^^^^^^ S101
14 | 
15 |         length = input.max().item() + 1
   |

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:19:19: TRY003 Avoid specifying long messages outside the exception class
   |
17 |               minlength = length
18 |           if length > minlength:
19 |               raise ValueError(
   |  ___________________^
20 | |                 f"minlength {minlength} too small for input with integers up to and including {length}"
21 | |             )
   | |_____________^ TRY003
22 |   
23 |           # Flatten indexes
   |

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:20:17: EM102 Exception must not use an f-string literal, assign to variable first
   |
18 |         if length > minlength:
19 |             raise ValueError(
20 |                 f"minlength {minlength} too small for input with integers up to and including {length}"
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
21 |             )
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\batch_ops.py:25:9: A001 Variable `input` is shadowing a Python builtin
   |
23 |         # Flatten indexes
24 |         # Make each "class" in input into a per-input class.
25 |         input = input + batch * minlength
   |         ^^^^^ A001
26 | 
27 |         num_batch = batch.max() + 1
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:46:7: D101 Missing docstring in public class
   |
46 | class Config:
   |       ^^^^^^ D101
47 |     def __init__(
48 |         self,
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:47:9: ANN204 Missing return type annotation for special method `__init__`
   |
46 | class Config:
47 |     def __init__(
   |         ^^^^^^^^ ANN204
48 |         self,
49 |         config: Optional[dict] = None,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\config.py:47:9: D107 Missing docstring in `__init__`
   |
46 | class Config:
47 |     def __init__(
   |         ^^^^^^^^ D107
48 |         self,
49 |         config: Optional[dict] = None,
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:49:17: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
47 |     def __init__(
48 |         self,
49 |         config: Optional[dict] = None,
   |                 ^^^^^^^^ FA100
50 |         allow_list: Optional[list] = None,
51 |         exclude_keys: Optional[list] = None,
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:50:21: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
48 |         self,
49 |         config: Optional[dict] = None,
50 |         allow_list: Optional[list] = None,
   |                     ^^^^^^^^ FA100
51 |         exclude_keys: Optional[list] = None,
52 |     ):
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:51:23: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
49 |         config: Optional[dict] = None,
50 |         allow_list: Optional[list] = None,
51 |         exclude_keys: Optional[list] = None,
   |                       ^^^^^^^^ FA100
52 |     ):
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:54:44: C408 Unnecessary `dict` call (rewrite as a literal)
   |
52 |     ):
53 | 
54 |         object.__setattr__(self, "_items", dict())
   |                                            ^^^^^^ C408
55 |         object.__setattr__(self, "_item_types", dict())
56 |         object.__setattr__(self, "_allow_list", list())
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\utils\config.py:55:49: C408 Unnecessary `dict` call (rewrite as a literal)
   |
54 |         object.__setattr__(self, "_items", dict())
55 |         object.__setattr__(self, "_item_types", dict())
   |                                                 ^^^^^^ C408
56 |         object.__setattr__(self, "_allow_list", list())
57 |         object.__setattr__(self, "_allow_all", True)
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\utils\config.py:56:49: C408 Unnecessary `list` call (rewrite as a literal)
   |
54 |         object.__setattr__(self, "_items", dict())
55 |         object.__setattr__(self, "_item_types", dict())
56 |         object.__setattr__(self, "_allow_list", list())
   |                                                 ^^^^^^ C408
57 |         object.__setattr__(self, "_allow_all", True)
   |
   = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\utils\config.py:69:9: ANN204 Missing return type annotation for special method `__repr__`
   |
67 |             self.update(config)
68 | 
69 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
70 |         return str(dict(self))
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\NequIP\utils\config.py:69:9: D105 Missing docstring in magic method
   |
67 |             self.update(config)
68 | 
69 |     def __repr__(self):
   |         ^^^^^^^^ D105
70 |         return str(dict(self))
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:74:9: D102 Missing docstring in public method
   |
72 |     __str__ = __repr__
73 | 
74 |     def keys(self):
   |         ^^^^ D102
75 |         return self._items.keys()
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:77:9: ANN202 Missing return type annotation for private function `_as_dict`
   |
75 |         return self._items.keys()
76 | 
77 |     def _as_dict(self):
   |         ^^^^^^^^ ANN202
78 |         return self._items
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\config.py:80:9: D102 Missing docstring in public method
   |
78 |         return self._items
79 | 
80 |     def as_dict(self):
   |         ^^^^^^^ D102
81 |         return dict(self)
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:83:9: ANN204 Missing return type annotation for special method `__getitem__`
   |
81 |         return dict(self)
82 | 
83 |     def __getitem__(self, key):
   |         ^^^^^^^^^^^ ANN204
84 |         return self._items[key]
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\config.py:83:9: D105 Missing docstring in magic method
   |
81 |         return dict(self)
82 | 
83 |     def __getitem__(self, key):
   |         ^^^^^^^^^^^ D105
84 |         return self._items[key]
   |

src\stk_search\geom3d\models\NequIP\utils\config.py:87:9: D205 1 blank line required between summary line and description
   |
86 |       def get_type(self, key):
87 |           """Get Typehint from item_types dict or previous defined value
   |  _________^
88 | |         Args:
89 | | 
90 | |             key: name of the variable
91 | |         """
   | |___________^ D205
92 |           return self._item_types.get(key, None)
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\utils\config.py:87:9: D400 First line should end with a period
   |
86 |       def get_type(self, key):
87 |           """Get Typehint from item_types dict or previous defined value
   |  _________^
88 | |         Args:
89 | | 
90 | |             key: name of the variable
91 | |         """
   | |___________^ D400
92 |           return self._item_types.get(key, None)
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:87:9: D415 First line should end with a period, question mark, or exclamation point
   |
86 |       def get_type(self, key):
87 |           """Get Typehint from item_types dict or previous defined value
   |  _________^
88 | |         Args:
89 | | 
90 | |             key: name of the variable
91 | |         """
   | |___________^ D415
92 |           return self._item_types.get(key, None)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:95:9: D400 First line should end with a period
    |
 94 |       def set_type(self, key, typehint):
 95 |           """Set typehint for a variable
    |  _________^
 96 | | 
 97 | |         Args:
 98 | |         ----
 99 | |             key: name of the variable
100 | |             typehint: type of the variable
101 | | 
102 | |         """
    | |___________^ D400
103 |           self._item_types[key] = typehint
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:95:9: D415 First line should end with a period, question mark, or exclamation point
    |
 94 |       def set_type(self, key, typehint):
 95 |           """Set typehint for a variable
    |  _________^
 96 | | 
 97 | |         Args:
 98 | |         ----
 99 | |             key: name of the variable
100 | |             typehint: type of the variable
101 | | 
102 | |         """
    | |___________^ D415
103 |           self._item_types[key] = typehint
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:105:51: B006 Do not use mutable data structures for argument defaults
    |
103 |         self._item_types[key] = typehint
104 | 
105 |     def add_allow_list(self, keys, default_values={}):
    |                                                   ^^ B006
106 |         """Add key to allow_list"""
107 |         object.__setattr__(self, "_allow_all", False)
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\config.py:106:9: D400 First line should end with a period
    |
105 |     def add_allow_list(self, keys, default_values={}):
106 |         """Add key to allow_list"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
107 |         object.__setattr__(self, "_allow_all", False)
108 |         object.__setattr__(
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:106:9: D415 First line should end with a period, question mark, or exclamation point
    |
105 |     def add_allow_list(self, keys, default_values={}):
106 |         """Add key to allow_list"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
107 |         object.__setattr__(self, "_allow_all", False)
108 |         object.__setattr__(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:113:9: D102 Missing docstring in public method
    |
111 |         self.update(default_values)
112 | 
113 |     def allow_list(self):
    |         ^^^^^^^^^^ D102
114 |         return self._allow_list
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:116:9: ANN204 Missing return type annotation for special method `__setitem__`
    |
114 |         return self._allow_list
115 | 
116 |     def __setitem__(self, key, val):
    |         ^^^^^^^^^^^ ANN204
117 | 
118 |         # typehint
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\config.py:116:9: D105 Missing docstring in magic method
    |
114 |         return self._allow_list
115 | 
116 |     def __setitem__(self, key, val):
    |         ^^^^^^^^^^^ D105
117 | 
118 |         # typehint
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:125:13: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
123 |                 return None
124 | 
125 |             self._item_types[k] = val
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ RET503
126 | 
127 |         # normal value
    |
    = help: Add explicit `return` statement

src\stk_search\geom3d\models\NequIP\utils\config.py:138:20: BLE001 Do not catch blind exception: `Exception`
    |
136 |             try:
137 |                 val = typehint(val) if typehint is not None else val
138 |             except Exception:
    |                    ^^^^^^^^^ BLE001
139 |                 raise TypeError(
140 |                     f"Wrong Type: Parameter {key} should be {typehint} type."
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:139:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
137 |                   val = typehint(val) if typehint is not None else val
138 |               except Exception:
139 |                   raise TypeError(
    |  _________________^
140 | |                     f"Wrong Type: Parameter {key} should be {typehint} type."
141 | |                     f"But {type(val)} is given"
142 | |                 )
    | |_________________^ B904
143 |   
144 |               self._items[key] = deepcopy(val)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:139:23: TRY003 Avoid specifying long messages outside the exception class
    |
137 |                   val = typehint(val) if typehint is not None else val
138 |               except Exception:
139 |                   raise TypeError(
    |  _______________________^
140 | |                     f"Wrong Type: Parameter {key} should be {typehint} type."
141 | |                     f"But {type(val)} is given"
142 | |                 )
    | |_________________^ TRY003
143 |   
144 |               self._items[key] = deepcopy(val)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:140:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
138 |               except Exception:
139 |                   raise TypeError(
140 |                       f"Wrong Type: Parameter {key} should be {typehint} type."
    |  _____________________^
141 | |                     f"But {type(val)} is given"
    | |_______________________________________________^ EM102
142 |                   )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\config.py:147:9: D102 Missing docstring in public method
    |
145 |             return key
146 | 
147 |     def items(self):
    |         ^^^^^ D102
148 |         return self._items.items()
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:152:9: ANN204 Missing return type annotation for special method `__getattr__`
    |
150 |     __setattr__ = __setitem__
151 | 
152 |     def __getattr__(self, key):
    |         ^^^^^^^^^^^ ANN204
153 |         return self.__getitem__(key)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\config.py:152:9: D105 Missing docstring in magic method
    |
150 |     __setattr__ = __setitem__
151 | 
152 |     def __getattr__(self, key):
    |         ^^^^^^^^^^^ D105
153 |         return self.__getitem__(key)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:155:9: ANN204 Missing return type annotation for special method `__contains__`
    |
153 |         return self.__getitem__(key)
154 | 
155 |     def __contains__(self, key):
    |         ^^^^^^^^^^^^ ANN204
156 |         return key in self._items
    |
    = help: Add return type annotation: `bool`

src\stk_search\geom3d\models\NequIP\utils\config.py:155:9: D105 Missing docstring in magic method
    |
153 |         return self.__getitem__(key)
154 | 
155 |     def __contains__(self, key):
    |         ^^^^^^^^^^^^ D105
156 |         return key in self._items
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:158:9: D102 Missing docstring in public method
    |
156 |         return key in self._items
157 | 
158 |     def pop(self, *args):
    |         ^^^ D102
159 |         return self._items.pop(*args)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:158:19: ANN002 Missing type annotation for `*args`
    |
156 |         return key in self._items
157 | 
158 |     def pop(self, *args):
    |                   ^^^^^ ANN002
159 |         return self._items.pop(*args)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:161:9: D417 Missing argument description in the docstring for `update_w_prefix`: `prefix`
    |
159 |         return self._items.pop(*args)
160 | 
161 |     def update_w_prefix(
    |         ^^^^^^^^^^^^^^^ D417
162 |         self,
163 |         dictionary: dict,
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:167:9: D400 First line should end with a period
    |
165 |           allow_val_change=None,
166 |       ):
167 |           """Mock of wandb.config function
    |  _________^
168 | | 
169 | |         Add a dictionary of parameters to the
170 | |         The key of the parameter cannot be started as "_"
171 | | 
172 | |         Args:
173 | |         ----
174 | |             dictionary (dict): dictionary of parameters and their typehint to update
175 | |             allow_val_change (None): mock for wandb.config, not used.
176 | | 
177 | |         Returns:
178 | |         -------
179 | | 
180 | |         """
    | |___________^ D400
181 |           # override with prefix
182 |           l_prefix = len(prefix) + 1
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:167:9: D415 First line should end with a period, question mark, or exclamation point
    |
165 |           allow_val_change=None,
166 |       ):
167 |           """Mock of wandb.config function
    |  _________^
168 | | 
169 | |         Add a dictionary of parameters to the
170 | |         The key of the parameter cannot be started as "_"
171 | | 
172 | |         Args:
173 | |         ----
174 | |             dictionary (dict): dictionary of parameters and their typehint to update
175 | |             allow_val_change (None): mock for wandb.config, not used.
176 | | 
177 | |         Returns:
178 | |         -------
179 | | 
180 | |         """
    | |___________^ D415
181 |           # override with prefix
182 |           l_prefix = len(prefix) + 1
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:177:9: D414 Section has no content ("Returns")
    |
175 |             allow_val_change (None): mock for wandb.config, not used.
176 | 
177 |         Returns:
    |         ^^^^^^^ D414
178 |         -------
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:198:40: ARG002 Unused method argument: `allow_val_change`
    |
196 |         return keys
197 | 
198 |     def update(self, dictionary: dict, allow_val_change=None):
    |                                        ^^^^^^^^^^^^^^^^ ARG002
199 |         """Mock of wandb.config function
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:199:9: D400 First line should end with a period
    |
198 |       def update(self, dictionary: dict, allow_val_change=None):
199 |           """Mock of wandb.config function
    |  _________^
200 | | 
201 | |         Add a dictionary of parameters to the config
202 | |         The key of the parameter cannot be started as "_"
203 | | 
204 | |         Args:
205 | |         ----
206 | |             dictionary (dict): dictionary of parameters and their typehint to update
207 | |             allow_val_change (None): mock for wandb.config, not used.
208 | | 
209 | |         Returns:
210 | |         -------
211 | |             keys (set): set of keys being udpated
212 | | 
213 | |         """
    | |___________^ D400
214 |           keys = []
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:199:9: D415 First line should end with a period, question mark, or exclamation point
    |
198 |       def update(self, dictionary: dict, allow_val_change=None):
199 |           """Mock of wandb.config function
    |  _________^
200 | | 
201 | |         Add a dictionary of parameters to the config
202 | |         The key of the parameter cannot be started as "_"
203 | | 
204 | |         Args:
205 | |         ----
206 | |             dictionary (dict): dictionary of parameters and their typehint to update
207 | |             allow_val_change (None): mock for wandb.config, not used.
208 | | 
209 | |         Returns:
210 | |         -------
211 | |             keys (set): set of keys being udpated
212 | | 
213 | |         """
    | |___________^ D415
214 |           keys = []
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:226:28: C405 Unnecessary `list` literal (rewrite as a `set` literal)
    |
224 |                 keys += [self.__setitem__(k, value)]
225 | 
226 |         return set(keys) - set([None])
    |                            ^^^^^^^^^^^ C405
227 | 
228 |     def get(self, *args):
    |
    = help: Rewrite as a `set` literal

src\stk_search\geom3d\models\NequIP\utils\config.py:228:9: D102 Missing docstring in public method
    |
226 |         return set(keys) - set([None])
227 | 
228 |     def get(self, *args):
    |         ^^^ D102
229 |         return self._items.get(*args)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:228:19: ANN002 Missing type annotation for `*args`
    |
226 |         return set(keys) - set([None])
227 | 
228 |     def get(self, *args):
    |                   ^^^^^ ANN002
229 |         return self._items.get(*args)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:232:9: D400 First line should end with a period
    |
231 |     def persist(self):
232 |         """Mock wandb.config function"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
233 | 
234 |     def setdefaults(self, d):
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:232:9: D415 First line should end with a period, question mark, or exclamation point
    |
231 |     def persist(self):
232 |         """Mock wandb.config function"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
233 | 
234 |     def setdefaults(self, d):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:235:9: D400 First line should end with a period
    |
234 |     def setdefaults(self, d):
235 |         """Mock wandb.config function"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
236 | 
237 |     def update_locked(self, d, user=None):
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:235:9: D415 First line should end with a period, question mark, or exclamation point
    |
234 |     def setdefaults(self, d):
235 |         """Mock wandb.config function"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
236 | 
237 |     def update_locked(self, d, user=None):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:238:9: D400 First line should end with a period
    |
237 |     def update_locked(self, d, user=None):
238 |         """Mock wandb.config function"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
239 | 
240 |     def save(self, filename: str, format: Optional[str] = None):
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:238:9: D415 First line should end with a period, question mark, or exclamation point
    |
237 |     def update_locked(self, d, user=None):
238 |         """Mock wandb.config function"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
239 | 
240 |     def save(self, filename: str, format: Optional[str] = None):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:240:35: A002 Argument `format` is shadowing a Python builtin
    |
238 |         """Mock wandb.config function"""
239 | 
240 |     def save(self, filename: str, format: Optional[str] = None):
    |                                   ^^^^^^ A002
241 |         """Print config to file."""
242 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:240:43: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
238 |         """Mock wandb.config function"""
239 | 
240 |     def save(self, filename: str, format: Optional[str] = None):
    |                                           ^^^^^^^^ FA100
241 |         """Print config to file."""
242 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:251:9: ANN205 Missing return type annotation for staticmethod `from_file`
    |
250 |     @staticmethod
251 |     def from_file(filename: str, format: Optional[str] = None, defaults: dict = {}):
    |         ^^^^^^^^^ ANN205
252 |         """Load arguments from file"""
253 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\config.py:251:34: A002 Argument `format` is shadowing a Python builtin
    |
250 |     @staticmethod
251 |     def from_file(filename: str, format: Optional[str] = None, defaults: dict = {}):
    |                                  ^^^^^^ A002
252 |         """Load arguments from file"""
253 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:251:42: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
250 |     @staticmethod
251 |     def from_file(filename: str, format: Optional[str] = None, defaults: dict = {}):
    |                                          ^^^^^^^^ FA100
252 |         """Load arguments from file"""
253 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:251:81: B006 Do not use mutable data structures for argument defaults
    |
250 |     @staticmethod
251 |     def from_file(filename: str, format: Optional[str] = None, defaults: dict = {}):
    |                                                                                 ^^ B006
252 |         """Load arguments from file"""
253 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\config.py:252:9: D400 First line should end with a period
    |
250 |     @staticmethod
251 |     def from_file(filename: str, format: Optional[str] = None, defaults: dict = {}):
252 |         """Load arguments from file"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
253 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
254 |         dictionary = load_file(
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:252:9: D415 First line should end with a period, question mark, or exclamation point
    |
250 |     @staticmethod
251 |     def from_file(filename: str, format: Optional[str] = None, defaults: dict = {}):
252 |         """Load arguments from file"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
253 |         supported_formats = {"yaml": ("yml", "yaml"), "json": "json"}
254 |         dictionary = load_file(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:262:9: ANN205 Missing return type annotation for staticmethod `from_dict`
    |
261 |     @staticmethod
262 |     def from_dict(dictionary: dict, defaults: dict = {}):
    |         ^^^^^^^^^ ANN205
263 |         c = Config(defaults)
264 |         c.update(dictionary)
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\config.py:262:9: D102 Missing docstring in public method
    |
261 |     @staticmethod
262 |     def from_dict(dictionary: dict, defaults: dict = {}):
    |         ^^^^^^^^^ D102
263 |         c = Config(defaults)
264 |         c.update(dictionary)
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:262:54: B006 Do not use mutable data structures for argument defaults
    |
261 |     @staticmethod
262 |     def from_dict(dictionary: dict, defaults: dict = {}):
    |                                                      ^^ B006
263 |         c = Config(defaults)
264 |         c.update(dictionary)
    |
    = help: Replace with `None`; initialize within function

src\stk_search\geom3d\models\NequIP\utils\config.py:268:9: ANN205 Missing return type annotation for staticmethod `from_class`
    |
267 |     @staticmethod
268 |     def from_class(class_type, remove_kwargs: bool = False):
    |         ^^^^^^^^^^ ANN205
269 |         """Return Config class instance based on init function of the input class
270 |         the instance will only allow to store init function related variables
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\config.py:268:32: FBT001 Boolean-typed positional argument in function definition
    |
267 |     @staticmethod
268 |     def from_class(class_type, remove_kwargs: bool = False):
    |                                ^^^^^^^^^^^^^ FBT001
269 |         """Return Config class instance based on init function of the input class
270 |         the instance will only allow to store init function related variables
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:268:32: FBT002 Boolean default positional argument in function definition
    |
267 |     @staticmethod
268 |     def from_class(class_type, remove_kwargs: bool = False):
    |                                ^^^^^^^^^^^^^ FBT002
269 |         """Return Config class instance based on init function of the input class
270 |         the instance will only allow to store init function related variables
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:269:9: D205 1 blank line required between summary line and description
    |
267 |       @staticmethod
268 |       def from_class(class_type, remove_kwargs: bool = False):
269 |           """Return Config class instance based on init function of the input class
    |  _________^
270 | |         the instance will only allow to store init function related variables
271 | |         the type hints are all set to None, so no automatic format conversion is applied
272 | | 
273 | |         class_type: torch.module children class type, i.e. .NequIP.Nequip
274 | |         remove_kwargs (optional, bool): the same as Config.from_function
275 | | 
276 | |         Returns
277 | |         -------
278 | |         config (Config):
279 | | 
280 | |         """
    | |___________^ D205
281 |           if inspect.isclass(class_type):
282 |               return Config.from_function(
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\utils\config.py:269:9: D400 First line should end with a period
    |
267 |       @staticmethod
268 |       def from_class(class_type, remove_kwargs: bool = False):
269 |           """Return Config class instance based on init function of the input class
    |  _________^
270 | |         the instance will only allow to store init function related variables
271 | |         the type hints are all set to None, so no automatic format conversion is applied
272 | | 
273 | |         class_type: torch.module children class type, i.e. .NequIP.Nequip
274 | |         remove_kwargs (optional, bool): the same as Config.from_function
275 | | 
276 | |         Returns
277 | |         -------
278 | |         config (Config):
279 | | 
280 | |         """
    | |___________^ D400
281 |           if inspect.isclass(class_type):
282 |               return Config.from_function(
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:269:9: D415 First line should end with a period, question mark, or exclamation point
    |
267 |       @staticmethod
268 |       def from_class(class_type, remove_kwargs: bool = False):
269 |           """Return Config class instance based on init function of the input class
    |  _________^
270 | |         the instance will only allow to store init function related variables
271 | |         the type hints are all set to None, so no automatic format conversion is applied
272 | | 
273 | |         class_type: torch.module children class type, i.e. .NequIP.Nequip
274 | |         remove_kwargs (optional, bool): the same as Config.from_function
275 | | 
276 | |         Returns
277 | |         -------
278 | |         config (Config):
279 | | 
280 | |         """
    | |___________^ D415
281 |           if inspect.isclass(class_type):
282 |               return Config.from_function(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:285:9: RET505 Unnecessary `elif` after `return` statement
    |
283 |                 class_type.__init__, remove_kwargs=remove_kwargs
284 |             )
285 |         elif callable(class_type):
    |         ^^^^ RET505
286 |             return Config.from_function(class_type, remove_kwargs=remove_kwargs)
287 |         else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\config.py:288:19: TRY003 Avoid specifying long messages outside the exception class
    |
286 |               return Config.from_function(class_type, remove_kwargs=remove_kwargs)
287 |           else:
288 |               raise ValueError(
    |  ___________________^
289 | |                 f"from_class only takes class type or callable, but got {class_type}"
290 | |             )
    | |_____________^ TRY003
291 |   
292 |       @staticmethod
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:289:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
287 |         else:
288 |             raise ValueError(
289 |                 f"from_class only takes class type or callable, but got {class_type}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
290 |             )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\config.py:293:9: ANN205 Missing return type annotation for staticmethod `from_function`
    |
292 |     @staticmethod
293 |     def from_function(function, remove_kwargs=False):
    |         ^^^^^^^^^^^^^ ANN205
294 |         """Return Config class instance based on the function of the input class
295 |         the instance will only allow to store init function related variables
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\config.py:293:33: FBT002 Boolean default positional argument in function definition
    |
292 |     @staticmethod
293 |     def from_function(function, remove_kwargs=False):
    |                                 ^^^^^^^^^^^^^ FBT002
294 |         """Return Config class instance based on the function of the input class
295 |         the instance will only allow to store init function related variables
    |

src\stk_search\geom3d\models\NequIP\utils\config.py:294:9: D205 1 blank line required between summary line and description
    |
292 |       @staticmethod
293 |       def from_function(function, remove_kwargs=False):
294 |           """Return Config class instance based on the function of the input class
    |  _________^
295 | |         the instance will only allow to store init function related variables
296 | |         the type hints are all set to None, so no automatic format conversion is applied
297 | | 
298 | |         Args:
299 | |         ----
300 | |         function: function name
301 | |         remove_kwargs (optional, bool): if True, kwargs are removed from the keys
302 | |              and the returned instance will only takes the init params of the class_type.
303 | |              if False and kwargs exists, the config only initialized with the default param values,
304 | |              but it can take any other keys
305 | | 
306 | |         Returns:
307 | |         -------
308 | |         config (Config):
309 | | 
310 | |         """
    | |___________^ D205
311 |           sig = inspect.signature(function)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\utils\config.py:294:9: D400 First line should end with a period
    |
292 |       @staticmethod
293 |       def from_function(function, remove_kwargs=False):
294 |           """Return Config class instance based on the function of the input class
    |  _________^
295 | |         the instance will only allow to store init function related variables
296 | |         the type hints are all set to None, so no automatic format conversion is applied
297 | | 
298 | |         Args:
299 | |         ----
300 | |         function: function name
301 | |         remove_kwargs (optional, bool): if True, kwargs are removed from the keys
302 | |              and the returned instance will only takes the init params of the class_type.
303 | |              if False and kwargs exists, the config only initialized with the default param values,
304 | |              but it can take any other keys
305 | | 
306 | |         Returns:
307 | |         -------
308 | |         config (Config):
309 | | 
310 | |         """
    | |___________^ D400
311 |           sig = inspect.signature(function)
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\config.py:294:9: D415 First line should end with a period, question mark, or exclamation point
    |
292 |       @staticmethod
293 |       def from_function(function, remove_kwargs=False):
294 |           """Return Config class instance based on the function of the input class
    |  _________^
295 | |         the instance will only allow to store init function related variables
296 | |         the type hints are all set to None, so no automatic format conversion is applied
297 | | 
298 | |         Args:
299 | |         ----
300 | |         function: function name
301 | |         remove_kwargs (optional, bool): if True, kwargs are removed from the keys
302 | |              and the returned instance will only takes the init params of the class_type.
303 | |              if False and kwargs exists, the config only initialized with the default param values,
304 | |              but it can take any other keys
305 | | 
306 | |         Returns:
307 | |         -------
308 | |         config (Config):
309 | | 
310 | |         """
    | |___________^ D415
311 |           sig = inspect.signature(function)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\config.py:328:9: RET505 Unnecessary `elif` after `return` statement
    |
326 |         if "kwargs" in param_keys and not remove_kwargs:
327 |             return Config(config=default_params)
328 |         elif "kwargs" in param_keys:
    |         ^^^^ RET505
329 |             param_keys.remove("kwargs")
330 |             return Config(config=default_params, allow_list=param_keys)
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\git.py:1:1: ERA001 Found commented-out code
  |
1 | # from typing import Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
2 | 
3 | # import subprocess
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\git.py:3:1: ERA001 Found commented-out code
  |
1 | # from typing import Optional
2 | 
3 | # import subprocess
  | ^^^^^^^^^^^^^^^^^^^ ERA001
4 | # from pathlib import Path
5 | # from importlib import import_module
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:4:1: ERA001 Found commented-out code
  |
3 | # import subprocess
4 | # from pathlib import Path
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
5 | # from importlib import import_module
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:5:1: ERA001 Found commented-out code
  |
3 | # import subprocess
4 | # from pathlib import Path
5 | # from importlib import import_module
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:10:1: ERA001 Found commented-out code
   |
 8 | # def get_commit(module: str) -> Optional[str]:
 9 | 
10 | #     module = import_module(module)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
11 | #     path = str(Path(module.__file__).parents[0] / "..")
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:11:1: ERA001 Found commented-out code
   |
10 | #     module = import_module(module)
11 | #     path = str(Path(module.__file__).parents[0] / "..")
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
12 | 
13 | #     retcode = subprocess.run(
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:13:1: ERA001 Found commented-out code
   |
11 | #     path = str(Path(module.__file__).parents[0] / "..")
12 | 
13 | #     retcode = subprocess.run(
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
14 | #         "git show --oneline --abbrev=40 -s".split(),
15 | #         cwd=path,
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:14:1: ERA001 Found commented-out code
   |
13 | #     retcode = subprocess.run(
14 | #         "git show --oneline --abbrev=40 -s".split(),
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
15 | #         cwd=path,
16 | #         stdout=subprocess.PIPE,
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:15:1: ERA001 Found commented-out code
   |
13 | #     retcode = subprocess.run(
14 | #         "git show --oneline --abbrev=40 -s".split(),
15 | #         cwd=path,
   | ^^^^^^^^^^^^^^^^^^^ ERA001
16 | #         stdout=subprocess.PIPE,
17 | #         stderr=subprocess.PIPE,
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:16:1: ERA001 Found commented-out code
   |
14 | #         "git show --oneline --abbrev=40 -s".split(),
15 | #         cwd=path,
16 | #         stdout=subprocess.PIPE,
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
17 | #         stderr=subprocess.PIPE,
18 | #     )
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:17:1: ERA001 Found commented-out code
   |
15 | #         cwd=path,
16 | #         stdout=subprocess.PIPE,
17 | #         stderr=subprocess.PIPE,
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
18 | #     )
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:18:1: ERA001 Found commented-out code
   |
16 | #         stdout=subprocess.PIPE,
17 | #         stderr=subprocess.PIPE,
18 | #     )
   | ^^^^^^^ ERA001
19 | 
20 | #     if retcode.returncode == 0:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:21:1: ERA001 Found commented-out code
   |
20 | #     if retcode.returncode == 0:
21 | #         return retcode.stdout.decode().splitlines()[0].split()[0]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
22 | #     else:
23 | #         return None
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:22:1: ERA001 Found commented-out code
   |
20 | #     if retcode.returncode == 0:
21 | #         return retcode.stdout.decode().splitlines()[0].split()[0]
22 | #     else:
   | ^^^^^^^^^^^ ERA001
23 | #         return None
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\git.py:23:1: ERA001 Found commented-out code
   |
21 | #         return retcode.stdout.decode().splitlines()[0].split()[0]
22 | #     else:
23 | #         return None
   | ^^^^^^^^^^^^^^^^^^^^^ ERA001
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\misc.py:1:1: ERA001 Found commented-out code
  |
1 | # import torch
  | ^^^^^^^^^^^^^^ ERA001
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\misc.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\misc.py:5:1: ERA001 Found commented-out code
  |
4 | # def dtype_from_name(name: str) -> torch.dtype:
5 | #     return {"float32": torch.float32, "float64": torch.float64}[name]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\modules.py:1:1: ERA001 Found commented-out code
  |
1 | # from typing import Optional
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
2 | 
3 | # import torch
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\modules.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\modules.py:3:1: ERA001 Found commented-out code
  |
1 | # from typing import Optional
2 | 
3 | # import torch
  | ^^^^^^^^^^^^^^ ERA001
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\modules.py:9:1: ERA001 Found commented-out code
   |
 7 | #     """Find the first module of a given type in a module tree."""
 8 | #     if isinstance(m, kls):
 9 | #         return m
   | ^^^^^^^^^^^^^^^^^^ ERA001
10 | #     else:
11 | #         for child in m.children():
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\modules.py:10:1: ERA001 Found commented-out code
   |
 8 | #     if isinstance(m, kls):
 9 | #         return m
10 | #     else:
   | ^^^^^^^^^^^ ERA001
11 | #         for child in m.children():
12 | #             tmp = find_first_of_type(child, kls)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\modules.py:12:1: ERA001 Found commented-out code
   |
10 | #     else:
11 | #         for child in m.children():
12 | #             tmp = find_first_of_type(child, kls)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
13 | #             if tmp is not None:
14 | #                 return tmp
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\modules.py:14:1: ERA001 Found commented-out code
   |
12 | #             tmp = find_first_of_type(child, kls)
13 | #             if tmp is not None:
14 | #                 return tmp
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
15 | #     return None
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\modules.py:15:1: ERA001 Found commented-out code
   |
13 | #             if tmp is not None:
14 | #                 return tmp
15 | #     return None
   | ^^^^^^^^^^^^^^^^^ ERA001
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\multiprocessing.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\multiprocessing.py:6:5: D103 Missing docstring in public function
  |
6 | def num_tasks() -> int:
  |     ^^^^^^^^^ D103
7 |     # sched_getaffinity gives number of _allowed_ cores
8 |     # this is correct for SLURM jobs, for example
  |

src\stk_search\geom3d\models\NequIP\utils\multiprocessing.py:20:5: S101 Use of `assert` detected
   |
18 |         os.environ.get("NEQUIP_NUM_TASKS", num_avail if _has_sched_getaffinity else 1)
19 |     )
20 |     assert n_proc > 0
   |     ^^^^^^ S101
21 |     assert (
22 |         n_proc <= num_avail
   |

src\stk_search\geom3d\models\NequIP\utils\multiprocessing.py:21:5: S101 Use of `assert` detected
   |
19 |     )
20 |     assert n_proc > 0
21 |     assert (
   |     ^^^^^^ S101
22 |         n_proc <= num_avail
23 |     ), f"Asked for more worker tasks NEQUIP_NUM_TASKS={n_proc} than available CPU cores {num_avail}"
   |

src\stk_search\geom3d\models\NequIP\utils\output.py:1:1: ERA001 Found commented-out code
  |
1 | # import inspect
  | ^^^^^^^^^^^^^^^^ ERA001
2 | # import logging
3 | # import sys
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\output.py:2:1: ERA001 Found commented-out code
  |
1 | # import inspect
2 | # import logging
  | ^^^^^^^^^^^^^^^^ ERA001
3 | # import sys
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:3:1: ERA001 Found commented-out code
  |
1 | # import inspect
2 | # import logging
3 | # import sys
  | ^^^^^^^^^^^^ ERA001
4 | 
5 | # from logging import FileHandler, StreamHandler
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:5:1: ERA001 Found commented-out code
  |
3 | # import sys
4 | 
5 | # from logging import FileHandler, StreamHandler
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 | # from os import makedirs
7 | # from os.path import abspath, relpath, isfile, isdir
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:6:1: ERA001 Found commented-out code
  |
5 | # from logging import FileHandler, StreamHandler
6 | # from os import makedirs
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
7 | # from os.path import abspath, relpath, isfile, isdir
8 | # from typing import Optional
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:7:1: ERA001 Found commented-out code
  |
5 | # from logging import FileHandler, StreamHandler
6 | # from os import makedirs
7 | # from os.path import abspath, relpath, isfile, isdir
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
8 | # from typing import Optional
  |
  = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:8:1: ERA001 Found commented-out code
   |
 6 | # from os import makedirs
 7 | # from os.path import abspath, relpath, isfile, isdir
 8 | # from typing import Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
 9 | 
10 | # from .config import Config
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:10:1: ERA001 Found commented-out code
   |
 8 | # from typing import Optional
 9 | 
10 | # from .config import Config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:29:1: ERA001 Found commented-out code
   |
27 | #         root: str,
28 | #         run_name: str,
29 | #         logfile: Optional[str] = None,
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
30 | #         append: bool = False,
31 | #         screen: bool = False,
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:30:1: ERA001 Found commented-out code
   |
28 | #         run_name: str,
29 | #         logfile: Optional[str] = None,
30 | #         append: bool = False,
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
31 | #         screen: bool = False,
32 | #         verbose: str = "info",
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:31:1: ERA001 Found commented-out code
   |
29 | #         logfile: Optional[str] = None,
30 | #         append: bool = False,
31 | #         screen: bool = False,
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
32 | #         verbose: str = "info",
33 | #     ):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:32:1: ERA001 Found commented-out code
   |
30 | #         append: bool = False,
31 | #         screen: bool = False,
32 | #         verbose: str = "info",
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
33 | #     ):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:36:1: ERA001 Found commented-out code
   |
35 | #         # add screen output to the universal logger
36 | #         logger = logging.getLogger("")
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
37 | #         logger.setLevel(getattr(logging, verbose.upper()))
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:37:1: ERA001 Found commented-out code
   |
35 | #         # add screen output to the universal logger
36 | #         logger = logging.getLogger("")
37 | #         logger.setLevel(getattr(logging, verbose.upper()))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
38 | 
39 | #         if len(logger.handlers) == 0 and (screen or verbose.lower() == "debug"):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:40:1: ERA001 Found commented-out code
   |
39 | #         if len(logger.handlers) == 0 and (screen or verbose.lower() == "debug"):
40 | #             logger.addHandler(logging.StreamHandler(sys.stdout))
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
41 | 
42 | #         logging.debug("* Initialize Output")
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:42:1: ERA001 Found commented-out code
   |
40 | #             logger.addHandler(logging.StreamHandler(sys.stdout))
41 | 
42 | #         logging.debug("* Initialize Output")
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
43 | 
44 | #         FORMAT = "%(message)s"
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:44:1: ERA001 Found commented-out code
   |
42 | #         logging.debug("* Initialize Output")
43 | 
44 | #         FORMAT = "%(message)s"
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
45 | #         formatter = logging.Formatter(FORMAT)
46 | #         for handler in logger.handlers:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:45:1: ERA001 Found commented-out code
   |
44 | #         FORMAT = "%(message)s"
45 | #         formatter = logging.Formatter(FORMAT)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
46 | #         for handler in logger.handlers:
47 | #             handler.setFormatter(fmt=formatter)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:47:1: ERA001 Found commented-out code
   |
45 | #         formatter = logging.Formatter(FORMAT)
46 | #         for handler in logger.handlers:
47 | #             handler.setFormatter(fmt=formatter)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
48 | 
49 | #         self.append = append
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:49:1: ERA001 Found commented-out code
   |
47 | #             handler.setFormatter(fmt=formatter)
48 | 
49 | #         self.append = append
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
50 | #         self.screen = screen
51 | #         self.verbose = verbose
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:50:1: ERA001 Found commented-out code
   |
49 | #         self.append = append
50 | #         self.screen = screen
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
51 | #         self.verbose = verbose
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:51:1: ERA001 Found commented-out code
   |
49 | #         self.append = append
50 | #         self.screen = screen
51 | #         self.verbose = verbose
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
52 | 
53 | #         # open root folder for storing
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:55:1: ERA001 Found commented-out code
   |
53 | #         # open root folder for storing
54 | #         # if folder exists and not append, the folder name and filename will be updated
55 | #         self.root = set_if_none(root, ".")
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
56 | #         self.run_name = run_name
57 | #         self.workdir = f"{self.root}/{self.run_name}"
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:56:1: ERA001 Found commented-out code
   |
54 | #         # if folder exists and not append, the folder name and filename will be updated
55 | #         self.root = set_if_none(root, ".")
56 | #         self.run_name = run_name
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
57 | #         self.workdir = f"{self.root}/{self.run_name}"
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:57:1: ERA001 Found commented-out code
   |
55 | #         self.root = set_if_none(root, ".")
56 | #         self.run_name = run_name
57 | #         self.workdir = f"{self.root}/{self.run_name}"
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
58 | 
59 | #         assert "/" not in run_name
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:65:1: ERA001 Found commented-out code
   |
63 | #         if isdir(self.workdir) and not append:
64 | #             raise RuntimeError(
65 | #                 f"project {self.run_name} already exist under {self.root}"
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
66 | #             )
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:66:1: ERA001 Found commented-out code
   |
64 | #             raise RuntimeError(
65 | #                 f"project {self.run_name} already exist under {self.root}"
66 | #             )
   | ^^^^^^^^^^^^^^^ ERA001
67 | 
68 | #         makedirs(self.workdir, exist_ok=True)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:68:1: ERA001 Found commented-out code
   |
66 | #             )
67 | 
68 | #         makedirs(self.workdir, exist_ok=True)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
69 | 
70 | #         self.logfile = logfile
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:70:1: ERA001 Found commented-out code
   |
68 | #         makedirs(self.workdir, exist_ok=True)
69 | 
70 | #         self.logfile = logfile
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
71 | #         if logfile is not None:
72 | #             self.logfile = self.open_logfile(
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:73:1: ERA001 Found commented-out code
   |
71 | #         if logfile is not None:
72 | #             self.logfile = self.open_logfile(
73 | #                 file_name=logfile, screen=screen, propagate=True
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
74 | #             )
75 | #             logging.debug(f"  ...logfile {self.logfile} to")
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:74:1: ERA001 Found commented-out code
   |
72 | #             self.logfile = self.open_logfile(
73 | #                 file_name=logfile, screen=screen, propagate=True
74 | #             )
   | ^^^^^^^^^^^^^^^ ERA001
75 | #             logging.debug(f"  ...logfile {self.logfile} to")
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:75:1: ERA001 Found commented-out code
   |
73 | #                 file_name=logfile, screen=screen, propagate=True
74 | #             )
75 | #             logging.debug(f"  ...logfile {self.logfile} to")
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
76 | 
77 | #     def generate_file(self, file_name: str):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:83:1: ERA001 Found commented-out code
   |
82 | #         if file_name.startswith("/"):
83 | #             raise ValueError("filename should be a relative path file name")
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
84 | #         file_name = f"{self.workdir}/{file_name}"
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:84:1: ERA001 Found commented-out code
   |
82 | #         if file_name.startswith("/"):
83 | #             raise ValueError("filename should be a relative path file name")
84 | #         file_name = f"{self.workdir}/{file_name}"
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
85 | 
86 | #         if isfile(file_name) and not self.append:
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:88:1: ERA001 Found commented-out code
   |
86 | #         if isfile(file_name) and not self.append:
87 | #             raise RuntimeError(
88 | #                 f"Tried to create file `{file_name}` but it already exists and either (1) append is disabled or (2) this run is not a restart"
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
89 | #             )
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:89:1: ERA001 Found commented-out code
   |
87 | #             raise RuntimeError(
88 | #                 f"Tried to create file `{file_name}` but it already exists and either (1) append is disabled or (2) this run is not a restart"
89 | #             )
   | ^^^^^^^^^^^^^^^ ERA001
90 | 
91 | #         logging.debug(f"  ...generate file name {file_name}")
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:91:1: ERA001 Found commented-out code
   |
89 | #             )
90 | 
91 | #         logging.debug(f"  ...generate file name {file_name}")
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
92 | #         return file_name
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:92:1: ERA001 Found commented-out code
   |
91 | #         logging.debug(f"  ...generate file name {file_name}")
92 | #         return file_name
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
93 | 
94 | #     def open_logfile(
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:97:1: ERA001 Found commented-out code
   |
95 | #         self,
96 | #         file_name: str,
97 | #         screen: bool = False,
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
98 | #         propagate: bool = False,
99 | #     ):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:98:1: ERA001 Found commented-out code
    |
 96 | #         file_name: str,
 97 | #         screen: bool = False,
 98 | #         propagate: bool = False,
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
 99 | #     ):
100 | #         """open a logger with a file and screen print
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:113:1: ERA001 Found commented-out code
    |
111 | #         """
112 | 
113 | #         file_name = self.generate_file(file_name)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
114 | 
115 | #         logger = logging.getLogger(file_name)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:115:1: ERA001 Found commented-out code
    |
113 | #         file_name = self.generate_file(file_name)
114 | 
115 | #         logger = logging.getLogger(file_name)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
116 | #         logger.propagate = propagate
117 | #         verbose = getattr(logging, self.verbose.upper())
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:116:1: ERA001 Found commented-out code
    |
115 | #         logger = logging.getLogger(file_name)
116 | #         logger.propagate = propagate
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
117 | #         verbose = getattr(logging, self.verbose.upper())
118 | #         logger.setLevel(verbose)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:117:1: ERA001 Found commented-out code
    |
115 | #         logger = logging.getLogger(file_name)
116 | #         logger.propagate = propagate
117 | #         verbose = getattr(logging, self.verbose.upper())
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
118 | #         logger.setLevel(verbose)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:118:1: ERA001 Found commented-out code
    |
116 | #         logger.propagate = propagate
117 | #         verbose = getattr(logging, self.verbose.upper())
118 | #         logger.setLevel(verbose)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
119 | 
120 | #         if len(logger.handlers) == 0:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:122:1: ERA001 Found commented-out code
    |
120 | #         if len(logger.handlers) == 0:
121 | 
122 | #             formatter = logging.Formatter("%(message)s")
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
123 | #             fh = FileHandler(file_name, mode="a" if self.append else "w")
124 | #             fh.setLevel(logging.DEBUG)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:123:1: ERA001 Found commented-out code
    |
122 | #             formatter = logging.Formatter("%(message)s")
123 | #             fh = FileHandler(file_name, mode="a" if self.append else "w")
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
124 | #             fh.setLevel(logging.DEBUG)
125 | #             fh.setFormatter(formatter)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:124:1: ERA001 Found commented-out code
    |
122 | #             formatter = logging.Formatter("%(message)s")
123 | #             fh = FileHandler(file_name, mode="a" if self.append else "w")
124 | #             fh.setLevel(logging.DEBUG)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
125 | #             fh.setFormatter(formatter)
126 | #             logger.addHandler(fh)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:125:1: ERA001 Found commented-out code
    |
123 | #             fh = FileHandler(file_name, mode="a" if self.append else "w")
124 | #             fh.setLevel(logging.DEBUG)
125 | #             fh.setFormatter(formatter)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
126 | #             logger.addHandler(fh)
127 | #             if screen:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:126:1: ERA001 Found commented-out code
    |
124 | #             fh.setLevel(logging.DEBUG)
125 | #             fh.setFormatter(formatter)
126 | #             logger.addHandler(fh)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
127 | #             if screen:
128 | #                 ch = StreamHandler(sys.stdout)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:128:1: ERA001 Found commented-out code
    |
126 | #             logger.addHandler(fh)
127 | #             if screen:
128 | #                 ch = StreamHandler(sys.stdout)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
129 | #                 ch.setLevel(logging.DEBUG)
130 | #                 ch.setFormatter(formatter)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:129:1: ERA001 Found commented-out code
    |
127 | #             if screen:
128 | #                 ch = StreamHandler(sys.stdout)
129 | #                 ch.setLevel(logging.DEBUG)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
130 | #                 ch.setFormatter(formatter)
131 | #                 logger.addHandler(ch)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:130:1: ERA001 Found commented-out code
    |
128 | #                 ch = StreamHandler(sys.stdout)
129 | #                 ch.setLevel(logging.DEBUG)
130 | #                 ch.setFormatter(formatter)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
131 | #                 logger.addHandler(ch)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:131:1: ERA001 Found commented-out code
    |
129 | #                 ch.setLevel(logging.DEBUG)
130 | #                 ch.setFormatter(formatter)
131 | #                 logger.addHandler(ch)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
132 | 
133 | #         logging.debug(f"  ...open log file {file_name}")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:133:1: ERA001 Found commented-out code
    |
131 | #                 logger.addHandler(ch)
132 | 
133 | #         logging.debug(f"  ...open log file {file_name}")
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
134 | 
135 | #         return file_name
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:135:1: ERA001 Found commented-out code
    |
133 | #         logging.debug(f"  ...open log file {file_name}")
134 | 
135 | #         return file_name
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
136 | 
137 | #     def as_dict(self):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:138:1: ERA001 Found commented-out code
    |
137 | #     def as_dict(self):
138 | #         d = inspect.signature(Output.__init__)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
139 | #         return {
140 | #             key: getattr(self, key)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:140:1: ERA001 Found commented-out code
    |
138 | #         d = inspect.signature(Output.__init__)
139 | #         return {
140 | #             key: getattr(self, key)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
141 | #             for key in list(d.parameters.keys())
142 | #             if key not in ["self", "kwargs"]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:143:1: ERA001 Found commented-out code
    |
141 | #             for key in list(d.parameters.keys())
142 | #             if key not in ["self", "kwargs"]
143 | #         }
    | ^^^^^^^^^^^ ERA001
144 | 
145 | #     @classmethod
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:148:1: ERA001 Found commented-out code
    |
146 | #     def get_output(cls, kwargs: dict = {}):
147 | 
148 | #         d = inspect.signature(cls.__init__)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
149 | #         _kwargs = {
150 | #             key: kwargs.get(key, None)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:149:1: ERA001 Found commented-out code
    |
148 | #         d = inspect.signature(cls.__init__)
149 | #         _kwargs = {
    | ^^^^^^^^^^^^^^^^^^^^^ ERA001
150 | #             key: kwargs.get(key, None)
151 | #             for key in list(d.parameters.keys())
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:150:1: ERA001 Found commented-out code
    |
148 | #         d = inspect.signature(cls.__init__)
149 | #         _kwargs = {
150 | #             key: kwargs.get(key, None)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
151 | #             for key in list(d.parameters.keys())
152 | #             if key not in ["self", "kwargs"]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:153:1: ERA001 Found commented-out code
    |
151 | #             for key in list(d.parameters.keys())
152 | #             if key not in ["self", "kwargs"]
153 | #         }
    | ^^^^^^^^^^^ ERA001
154 | #         return cls(**_kwargs)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:154:1: ERA001 Found commented-out code
    |
152 | #             if key not in ["self", "kwargs"]
153 | #         }
154 | #         return cls(**_kwargs)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
155 | 
156 | #     @classmethod
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:158:1: ERA001 Found commented-out code
    |
156 | #     @classmethod
157 | #     def from_config(cls, config):
158 | #         c = Config.from_class(cls)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
159 | #         c.update(config)
160 | #         return cls(**dict(c))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:159:1: ERA001 Found commented-out code
    |
157 | #     def from_config(cls, config):
158 | #         c = Config.from_class(cls)
159 | #         c.update(config)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
160 | #         return cls(**dict(c))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:160:1: ERA001 Found commented-out code
    |
158 | #         c = Config.from_class(cls)
159 | #         c.update(config)
160 | #         return cls(**dict(c))
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:164:1: ERA001 Found commented-out code
    |
163 | # def set_if_none(x, y):
164 | #     return y if x is None else x
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:177:1: ERA001 Found commented-out code
    |
176 | #     if relative:
177 | #         return None if path is None else relpath(path)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
178 | #     else:
179 | #         return None if path is None else abspath(path)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:178:1: ERA001 Found commented-out code
    |
176 | #     if relative:
177 | #         return None if path is None else relpath(path)
178 | #     else:
    | ^^^^^^^^^^^ ERA001
179 | #         return None if path is None else abspath(path)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\output.py:179:1: ERA001 Found commented-out code
    |
177 | #         return None if path is None else relpath(path)
178 | #     else:
179 | #         return None if path is None else abspath(path)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\NequIP\utils\regressor.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\regressor.py:10:5: D103 Missing docstring in public function
   |
10 | def solver(X, y, regressor: Optional[str] = "NormalizedGaussianProcess", **kwargs):
   |     ^^^^^^ D103
11 |     if regressor == "GaussianProcess":
12 |         return gp(X, y, **kwargs)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:10:12: N803 Argument name `X` should be lowercase
   |
10 | def solver(X, y, regressor: Optional[str] = "NormalizedGaussianProcess", **kwargs):
   |            ^ N803
11 |     if regressor == "GaussianProcess":
12 |         return gp(X, y, **kwargs)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:10:29: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
10 | def solver(X, y, regressor: Optional[str] = "NormalizedGaussianProcess", **kwargs):
   |                             ^^^^^^^^ FA100
11 |     if regressor == "GaussianProcess":
12 |         return gp(X, y, **kwargs)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:10:74: ANN003 Missing type annotation for `**kwargs`
   |
10 | def solver(X, y, regressor: Optional[str] = "NormalizedGaussianProcess", **kwargs):
   |                                                                          ^^^^^^^^ ANN003
11 |     if regressor == "GaussianProcess":
12 |         return gp(X, y, **kwargs)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:13:5: RET505 Unnecessary `elif` after `return` statement
   |
11 |     if regressor == "GaussianProcess":
12 |         return gp(X, y, **kwargs)
13 |     elif regressor == "NormalizedGaussianProcess":
   |     ^^^^ RET505
14 |         return normalized_gp(X, y, **kwargs)
15 |     else:
   |
   = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\regressor.py:16:35: EM102 Exception must not use an f-string literal, assign to variable first
   |
14 |         return normalized_gp(X, y, **kwargs)
15 |     else:
16 |         raise NotImplementedError(f"{regressor} is not implemented")
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\regressor.py:19:5: D103 Missing docstring in public function
   |
19 | def normalized_gp(X, y, **kwargs):
   |     ^^^^^^^^^^^^^ D103
20 |     feature_rms = 1.0 / np.sqrt(np.average(X**2, axis=0))
21 |     feature_rms = np.nan_to_num(feature_rms, 1)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:19:19: N803 Argument name `X` should be lowercase
   |
19 | def normalized_gp(X, y, **kwargs):
   |                   ^ N803
20 |     feature_rms = 1.0 / np.sqrt(np.average(X**2, axis=0))
21 |     feature_rms = np.nan_to_num(feature_rms, 1)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:19:25: ANN003 Missing type annotation for `**kwargs`
   |
19 | def normalized_gp(X, y, **kwargs):
   |                         ^^^^^^^^ ANN003
20 |     feature_rms = 1.0 / np.sqrt(np.average(X**2, axis=0))
21 |     feature_rms = np.nan_to_num(feature_rms, 1)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:33:5: D103 Missing docstring in public function
   |
33 | def gp(X, y, **kwargs):
   |     ^^ D103
34 |     return base_gp(
35 |         X, y, DotProduct, {"sigma_0": 0, "sigma_0_bounds": "fixed"}, **kwargs
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:33:8: N803 Argument name `X` should be lowercase
   |
33 | def gp(X, y, **kwargs):
   |        ^ N803
34 |     return base_gp(
35 |         X, y, DotProduct, {"sigma_0": 0, "sigma_0_bounds": "fixed"}, **kwargs
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:33:14: ANN003 Missing type annotation for `**kwargs`
   |
33 | def gp(X, y, **kwargs):
   |              ^^^^^^^^ ANN003
34 |     return base_gp(
35 |         X, y, DotProduct, {"sigma_0": 0, "sigma_0_bounds": "fixed"}, **kwargs
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:39:5: PLR0913 Too many arguments in function definition (7 > 5)
   |
39 | def base_gp(
   |     ^^^^^^^ PLR0913
40 |     X,
41 |     y,
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:39:5: D103 Missing docstring in public function
   |
39 | def base_gp(
   |     ^^^^^^^ D103
40 |     X,
41 |     y,
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:40:5: N803 Argument name `X` should be lowercase
   |
39 | def base_gp(
40 |     X,
   |     ^ N803
41 |     y,
42 |     kernel,
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:44:12: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
42 |     kernel,
43 |     kernel_kwargs,
44 |     alpha: Optional[float] = 0.1,
   |            ^^^^^^^^ FA100
45 |     max_iteration: int = 20,
46 |     stride: Optional[int] = None,
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:46:13: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
44 |     alpha: Optional[float] = 0.1,
45 |     max_iteration: int = 20,
46 |     stride: Optional[int] = None,
   |             ^^^^^^^^ FA100
47 | ):
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:53:9: N806 Variable `X` in function should be lowercase
   |
52 |     if stride is not None:
53 |         X = X[::stride]
   |         ^ N806
54 |         y = y[::stride]
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:61:23: G004 Logging statement uses f-string
   |
59 |     std = None
60 |     while not_fit:
61 |         logging.debug(f"GP fitting iteration {iteration} {alpha}")
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
62 |         try:
63 |             _kernel = kernel(**kernel_kwargs)
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:80:17: G004 Logging statement uses f-string
   |
79 |               logging.debug(
80 |                   f"GP fitting: alpha {alpha}:\n"
   |  _________________^
81 | |                 f"            residue {res}\n"
82 | |                 f"            mean {mean} std {std}\n"
83 | |                 f"            log marginal likelihood {likelihood}"
   | |___________________________________________________________________^ G004
84 |               )
85 |               not_fit = False
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:87:16: BLE001 Do not catch blind exception: `Exception`
   |
85 |             not_fit = False
86 | 
87 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
88 |             logging.info(f"GP fitting failed for alpha={alpha} and {e.args}")
89 |             if alpha == 0 or alpha is None:
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:88:26: G004 Logging statement uses f-string
   |
87 |         except Exception as e:
88 |             logging.info(f"GP fitting failed for alpha={alpha} and {e.args}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
89 |             if alpha == 0 or alpha is None:
90 |                 logging.info("try a non-zero alpha")
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:92:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
90 |                   logging.info("try a non-zero alpha")
91 |                   not_fit = False
92 |                   raise ValueError(
   |  _________________^
93 | |                     f"Please set the {alpha} to non-zero value. \n"
94 | |                     "The dataset energy is rank deficient to be solved with GP"
95 | |                 )
   | |_________________^ B904
96 |               else:
97 |                   alpha = alpha * 2
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:92:23: TRY003 Avoid specifying long messages outside the exception class
   |
90 |                   logging.info("try a non-zero alpha")
91 |                   not_fit = False
92 |                   raise ValueError(
   |  _______________________^
93 | |                     f"Please set the {alpha} to non-zero value. \n"
94 | |                     "The dataset energy is rank deficient to be solved with GP"
95 | |                 )
   | |_________________^ TRY003
96 |               else:
97 |                   alpha = alpha * 2
   |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:93:21: EM102 Exception must not use an f-string literal, assign to variable first
   |
91 |                   not_fit = False
92 |                   raise ValueError(
93 |                       f"Please set the {alpha} to non-zero value. \n"
   |  _____________________^
94 | |                     "The dataset energy is rank deficient to be solved with GP"
   | |_______________________________________________________________________________^ EM102
95 |                   )
96 |               else:
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\regressor.py:96:13: RET506 Unnecessary `else` after `raise` statement
   |
94 |                     "The dataset energy is rank deficient to be solved with GP"
95 |                 )
96 |             else:
   |             ^^^^ RET506
97 |                 alpha = alpha * 2
98 |                 iteration += 1
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\utils\regressor.py:99:31: G004 Logging statement uses f-string
    |
 97 |                 alpha = alpha * 2
 98 |                 iteration += 1
 99 |                 logging.debug(f"           increase alpha to {alpha}")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
100 | 
101 |             if iteration >= max_iteration or not_fit is False:
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:102:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
101 |               if iteration >= max_iteration or not_fit is False:
102 |                   raise ValueError(
    |  _________________^
103 | |                     "Please set the per species shift and scale to zeros and ones. \n"
104 | |                     "The dataset energy is to diverge to be solved with GP"
105 | |                 )
    | |_________________^ B904
106 |   
107 |       return mean, std
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:102:23: TRY003 Avoid specifying long messages outside the exception class
    |
101 |               if iteration >= max_iteration or not_fit is False:
102 |                   raise ValueError(
    |  _______________________^
103 | |                     "Please set the per species shift and scale to zeros and ones. \n"
104 | |                     "The dataset energy is to diverge to be solved with GP"
105 | |                 )
    | |_________________^ TRY003
106 |   
107 |       return mean, std
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:103:21: EM101 Exception must not use a string literal, assign to variable first
    |
101 |               if iteration >= max_iteration or not_fit is False:
102 |                   raise ValueError(
103 |                       "Please set the per species shift and scale to zeros and ones. \n"
    |  _____________________^
104 | |                     "The dataset energy is to diverge to be solved with GP"
    | |___________________________________________________________________________^ EM101
105 |                   )
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\utils\regressor.py:111:5: D205 1 blank line required between summary line and description
    |
110 |   class NormalizedDotProduct(Kernel):
111 |       r"""Dot-Product kernel.
    |  _____^
112 | |     .. math::
113 | |         k(x_i, x_j) = x_i \cdot A \cdot x_j
114 | |     """
    | |_______^ D205
115 |   
116 |       def __init__(self, diagonal_elements):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\utils\regressor.py:111:5: D400 First line should end with a period
    |
110 |   class NormalizedDotProduct(Kernel):
111 |       r"""Dot-Product kernel.
    |  _____^
112 | |     .. math::
113 | |         k(x_i, x_j) = x_i \cdot A \cdot x_j
114 | |     """
    | |_______^ D400
115 |   
116 |       def __init__(self, diagonal_elements):
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\regressor.py:111:5: D415 First line should end with a period, question mark, or exclamation point
    |
110 |   class NormalizedDotProduct(Kernel):
111 |       r"""Dot-Product kernel.
    |  _____^
112 | |     .. math::
113 | |         k(x_i, x_j) = x_i \cdot A \cdot x_j
114 | |     """
    | |_______^ D415
115 |   
116 |       def __init__(self, diagonal_elements):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\regressor.py:116:9: ANN204 Missing return type annotation for special method `__init__`
    |
114 |     """
115 | 
116 |     def __init__(self, diagonal_elements):
    |         ^^^^^^^^ ANN204
117 |         # TO DO: check shape
118 |         self.diagonal_elements = diagonal_elements
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\regressor.py:116:9: D107 Missing docstring in `__init__`
    |
114 |     """
115 | 
116 |     def __init__(self, diagonal_elements):
    |         ^^^^^^^^ D107
117 |         # TO DO: check shape
118 |         self.diagonal_elements = diagonal_elements
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:121:9: ANN204 Missing return type annotation for special method `__call__`
    |
119 |         self.A = np.diag(diagonal_elements)
120 | 
121 |     def __call__(self, X, Y=None, eval_gradient=False):
    |         ^^^^^^^^ ANN204
122 |         """Return the kernel k(X, Y) and optionally its gradient.
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\regressor.py:121:24: N803 Argument name `X` should be lowercase
    |
119 |         self.A = np.diag(diagonal_elements)
120 | 
121 |     def __call__(self, X, Y=None, eval_gradient=False):
    |                        ^ N803
122 |         """Return the kernel k(X, Y) and optionally its gradient.
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:121:27: N803 Argument name `Y` should be lowercase
    |
119 |         self.A = np.diag(diagonal_elements)
120 | 
121 |     def __call__(self, X, Y=None, eval_gradient=False):
    |                           ^ N803
122 |         """Return the kernel k(X, Y) and optionally its gradient.
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:121:35: FBT002 Boolean default positional argument in function definition
    |
119 |         self.A = np.diag(diagonal_elements)
120 | 
121 |     def __call__(self, X, Y=None, eval_gradient=False):
    |                                   ^^^^^^^^^^^^^ FBT002
122 |         """Return the kernel k(X, Y) and optionally its gradient.
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:147:9: N806 Variable `X` in function should be lowercase
    |
146 |         """
147 |         X = np.atleast_2d(X)
    |         ^ N806
148 |         if Y is None:
149 |             K = (X.dot(self.A)).dot(X.T)
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:149:13: N806 Variable `K` in function should be lowercase
    |
147 |         X = np.atleast_2d(X)
148 |         if Y is None:
149 |             K = (X.dot(self.A)).dot(X.T)
    |             ^ N806
150 |         else:
151 |             if eval_gradient:
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:152:23: TRY003 Avoid specifying long messages outside the exception class
    |
150 |         else:
151 |             if eval_gradient:
152 |                 raise ValueError("Gradient can only be evaluated when Y is None.")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
153 |             K = (X.dot(self.A)).dot(Y.T)
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:152:34: EM101 Exception must not use a string literal, assign to variable first
    |
150 |         else:
151 |             if eval_gradient:
152 |                 raise ValueError("Gradient can only be evaluated when Y is None.")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
153 |             K = (X.dot(self.A)).dot(Y.T)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\utils\regressor.py:153:13: N806 Variable `K` in function should be lowercase
    |
151 |             if eval_gradient:
152 |                 raise ValueError("Gradient can only be evaluated when Y is None.")
153 |             K = (X.dot(self.A)).dot(Y.T)
    |             ^ N806
154 | 
155 |         if eval_gradient:
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:157:9: RET505 Unnecessary `else` after `return` statement
    |
155 |         if eval_gradient:
156 |             return K, np.empty((X.shape[0], X.shape[0], 0))
157 |         else:
    |         ^^^^ RET505
158 |             return K
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\utils\regressor.py:160:20: N803 Argument name `X` should be lowercase
    |
158 |             return K
159 | 
160 |     def diag(self, X):
    |                    ^ N803
161 |         """Returns the diagonal of the kernel k(X, X).
162 |         The result of this method is identical to np.diag(self(X)); however,
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:161:9: D205 1 blank line required between summary line and description
    |
160 |       def diag(self, X):
161 |           """Returns the diagonal of the kernel k(X, X).
    |  _________^
162 | |         The result of this method is identical to np.diag(self(X)); however,
163 | |         it can be evaluated more efficiently since only the diagonal is
164 | |         evaluated.
165 | | 
166 | |         Parameters
167 | |         ----------
168 | |         X : ndarray of shape (n_samples_X, n_features)
169 | |             Left argument of the returned kernel k(X, Y).
170 | | 
171 | |         Returns
172 | |         -------
173 | |         K_diag : ndarray of shape (n_samples_X,)
174 | |             Diagonal of kernel k(X, X).
175 | | 
176 | |         """
    | |___________^ D205
177 |           return np.einsum("ij,ij,jj->i", X, X, self.A)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\utils\regressor.py:161:9: D401 First line of docstring should be in imperative mood: "Returns the diagonal of the kernel k(X, X)."
    |
160 |       def diag(self, X):
161 |           """Returns the diagonal of the kernel k(X, X).
    |  _________^
162 | |         The result of this method is identical to np.diag(self(X)); however,
163 | |         it can be evaluated more efficiently since only the diagonal is
164 | |         evaluated.
165 | | 
166 | |         Parameters
167 | |         ----------
168 | |         X : ndarray of shape (n_samples_X, n_features)
169 | |             Left argument of the returned kernel k(X, Y).
170 | | 
171 | |         Returns
172 | |         -------
173 | |         K_diag : ndarray of shape (n_samples_X,)
174 | |             Diagonal of kernel k(X, X).
175 | | 
176 | |         """
    | |___________^ D401
177 |           return np.einsum("ij,ij,jj->i", X, X, self.A)
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:179:9: ANN204 Missing return type annotation for special method `__repr__`
    |
177 |         return np.einsum("ij,ij,jj->i", X, X, self.A)
178 | 
179 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
180 |         return ""
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\NequIP\utils\regressor.py:179:9: D105 Missing docstring in magic method
    |
177 |         return np.einsum("ij,ij,jj->i", X, X, self.A)
178 | 
179 |     def __repr__(self):
    |         ^^^^^^^^ D105
180 |         return ""
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:183:9: D401 First line of docstring should be in imperative mood: "Returns whether the kernel is stationary."
    |
182 |     def is_stationary(self):
183 |         """Returns whether the kernel is stationary."""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
184 |         return False
    |

src\stk_search\geom3d\models\NequIP\utils\regressor.py:187:9: D102 Missing docstring in public method
    |
186 |     @property
187 |     def hyperparameter_diagonal_elements(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
188 |         return Hyperparameter("diagonal_elements", "numeric", "fixed")
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """utilities that involve file searching and operations (i.e. save/load)
2 | | """
  | |___^ D200
3 |   import contextlib
4 |   import contextvars
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\NequIP\utils\savenload.py:1:1: D400 First line should end with a period
  |
1 | / """utilities that involve file searching and operations (i.e. save/load)
2 | | """
  | |___^ D400
3 |   import contextlib
4 |   import contextvars
  |
  = help: Add period

src\stk_search\geom3d\models\NequIP\utils\savenload.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """utilities that involve file searching and operations (i.e. save/load)
2 | | """
  | |___^ D415
3 |   import contextlib
4 |   import contextvars
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\savenload.py:19:5: ANN202 Missing return type annotation for private function `_delete_files_if_exist`
   |
19 | def _delete_files_if_exist(paths):
   |     ^^^^^^^^^^^^^^^^^^^^^^ ANN202
20 |     # clean up
21 |     # better for python 3.8 >
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:22:8: YTT203 `sys.version_info[1]` compared to integer (python4), compare `sys.version_info` to tuple
   |
20 |     # clean up
21 |     # better for python 3.8 >
22 |     if sys.version_info[1] >= 8:
   |        ^^^^^^^^^^^^^^^^^^^ YTT203
23 |         for f in paths:
24 |             f.unlink(missing_ok=True)
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:22:31: PLR2004 Magic value used in comparison, consider replacing `8` with a constant variable
   |
20 |     # clean up
21 |     # better for python 3.8 >
22 |     if sys.version_info[1] >= 8:
   |                               ^ PLR2004
23 |         for f in paths:
24 |             f.unlink(missing_ok=True)
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:32:5: ANN202 Missing return type annotation for private function `_process_moves`
   |
32 | def _process_moves(moves: List[Tuple[bool, Path, Path]]):
   |     ^^^^^^^^^^^^^^ ANN202
33 |     """Blocking to copy (possibly across filesystems) to temp name; then atomic rename to final name"""
34 |     try:
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:32:27: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
32 | def _process_moves(moves: List[Tuple[bool, Path, Path]]):
   |                           ^^^^ FA100
33 |     """Blocking to copy (possibly across filesystems) to temp name; then atomic rename to final name"""
34 |     try:
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:32:32: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
32 | def _process_moves(moves: List[Tuple[bool, Path, Path]]):
   |                                ^^^^^ FA100
33 |     """Blocking to copy (possibly across filesystems) to temp name; then atomic rename to final name"""
34 |     try:
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:33:5: D400 First line should end with a period
   |
32 | def _process_moves(moves: List[Tuple[bool, Path, Path]]):
33 |     """Blocking to copy (possibly across filesystems) to temp name; then atomic rename to final name"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
34 |     try:
35 |         for _, from_name, to_name in moves:
   |
   = help: Add period

src\stk_search\geom3d\models\NequIP\utils\savenload.py:33:5: D415 First line should end with a period, question mark, or exclamation point
   |
32 | def _process_moves(moves: List[Tuple[bool, Path, Path]]):
33 |     """Blocking to copy (possibly across filesystems) to temp name; then atomic rename to final name"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
34 |     try:
35 |         for _, from_name, to_name in moves:
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\savenload.py:47:1: S101 Use of `assert` detected
   |
45 | # allow user to enable/disable depending on their filesystem
46 | _ASYNC_ENABLED = os.environ.get("NEQUIP_ASYNC_IO", "false").lower()
47 | assert _ASYNC_ENABLED in ("true", "false")
   | ^^^^^^ S101
48 | _ASYNC_ENABLED = _ASYNC_ENABLED == "true"
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:59:9: ANN202 Missing return type annotation for private function `_moving_thread`
   |
57 |     # Because we use a queue, later writes will always (correctly)
58 |     # overwrite earlier writes
59 |     def _moving_thread(queue):
   |         ^^^^^^^^^^^^^^ ANN202
60 |         while True:
61 |             moves = queue.get()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:64:27: G004 Logging statement uses f-string
   |
62 |             _process_moves(moves)
63 |             # logging is thread safe: https://stackoverflow.com/questions/2973900/is-pythons-logging-module-thread-safe
64 |             logging.debug(f"Finished writing {', '.join(m[2].name for m in moves)}")
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
65 |             queue.task_done()
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:67:9: ANN202 Missing return type annotation for private function `_submit_move`
   |
65 |             queue.task_done()
66 | 
67 |     def _submit_move(from_name, to_name, blocking: bool):
   |         ^^^^^^^^^^^^ ANN202
68 |         global _MOVE_QUEUE
69 |         global _MOVE_THREAD
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:67:42: FBT001 Boolean-typed positional argument in function definition
   |
65 |             queue.task_done()
66 | 
67 |     def _submit_move(from_name, to_name, blocking: bool):
   |                                          ^^^^^^^^ FBT001
68 |         global _MOVE_QUEUE
69 |         global _MOVE_THREAD
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:68:16: PLW0602 Using global for `_MOVE_QUEUE` but no assignment is done
   |
67 |     def _submit_move(from_name, to_name, blocking: bool):
68 |         global _MOVE_QUEUE
   |                ^^^^^^^^^^^ PLW0602
69 |         global _MOVE_THREAD
70 |         global _MOVE_SET
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:69:16: PLW0603 Using the global statement to update `_MOVE_THREAD` is discouraged
   |
67 |     def _submit_move(from_name, to_name, blocking: bool):
68 |         global _MOVE_QUEUE
69 |         global _MOVE_THREAD
   |                ^^^^^^^^^^^^ PLW0603
70 |         global _MOVE_SET
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:70:16: PLW0602 Using global for `_MOVE_SET` but no assignment is done
   |
68 |         global _MOVE_QUEUE
69 |         global _MOVE_THREAD
70 |         global _MOVE_SET
   |                ^^^^^^^^^ PLW0602
71 | 
72 |         # launch thread if its not running
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:82:19: TRY003 Avoid specifying long messages outside the exception class
   |
80 |         if not _MOVE_THREAD.is_alive():
81 |             _MOVE_THREAD.join()  # will raise exception
82 |             raise RuntimeError("Writer thread failed.")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
83 | 
84 |         # submit this move
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:82:32: EM101 Exception must not use a string literal, assign to variable first
   |
80 |         if not _MOVE_THREAD.is_alive():
81 |             _MOVE_THREAD.join()  # will raise exception
82 |             raise RuntimeError("Writer thread failed.")
   |                                ^^^^^^^^^^^^^^^^^^^^^^^ EM101
83 | 
84 |         # submit this move
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\utils\savenload.py:97:9: D103 Missing docstring in public function
   |
96 |     @contextlib.contextmanager
97 |     def atomic_write_group():
   |         ^^^^^^^^^^^^^^^^^^ D103
98 |         global _MOVE_SET
99 |         if _MOVE_SET.get() is not None:
   |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:98:16: PLW0602 Using global for `_MOVE_SET` but no assignment is done
    |
 96 |     @contextlib.contextmanager
 97 |     def atomic_write_group():
 98 |         global _MOVE_SET
    |                ^^^^^^^^^ PLW0602
 99 |         if _MOVE_SET.get() is not None:
100 |             # nesting is a no-op
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:104:31: C408 Unnecessary `list` call (rewrite as a literal)
    |
102 |             yield
103 |             return
104 |         token = _MOVE_SET.set(list())
    |                               ^^^^^^ C408
105 |         # run the saves
106 |         yield
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\utils\savenload.py:115:9: D103 Missing docstring in public function
    |
113 |         _MOVE_SET.reset(token)
114 | 
115 |     def finish_all_writes():
    |         ^^^^^^^^^^^^^^^^^ D103
116 |         global _MOVE_QUEUE
117 |         _MOVE_QUEUE.join()
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:116:16: PLW0602 Using global for `_MOVE_QUEUE` but no assignment is done
    |
115 |     def finish_all_writes():
116 |         global _MOVE_QUEUE
    |                ^^^^^^^^^^^ PLW0602
117 |         _MOVE_QUEUE.join()
118 |         # ^ wait for all remaining moves to be processed
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:122:9: ANN202 Missing return type annotation for private function `_submit_move`
    |
120 | else:
121 | 
122 |     def _submit_move(from_name, to_name, blocking: bool):
    |         ^^^^^^^^^^^^ ANN202
123 |         global _MOVE_SET
124 |         obj = (blocking, from_name, to_name)
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:122:42: FBT001 Boolean-typed positional argument in function definition
    |
120 | else:
121 | 
122 |     def _submit_move(from_name, to_name, blocking: bool):
    |                                          ^^^^^^^^ FBT001
123 |         global _MOVE_SET
124 |         obj = (blocking, from_name, to_name)
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:123:16: PLW0602 Using global for `_MOVE_SET` but no assignment is done
    |
122 |     def _submit_move(from_name, to_name, blocking: bool):
123 |         global _MOVE_SET
    |                ^^^^^^^^^ PLW0602
124 |         obj = (blocking, from_name, to_name)
125 |         if _MOVE_SET.get() is None:
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:133:9: D103 Missing docstring in public function
    |
132 |     @contextlib.contextmanager
133 |     def atomic_write_group():
    |         ^^^^^^^^^^^^^^^^^^ D103
134 |         global _MOVE_SET
135 |         if _MOVE_SET.get() is not None:
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:134:16: PLW0602 Using global for `_MOVE_SET` but no assignment is done
    |
132 |     @contextlib.contextmanager
133 |     def atomic_write_group():
134 |         global _MOVE_SET
    |                ^^^^^^^^^ PLW0602
135 |         if _MOVE_SET.get() is not None:
136 |             # don't nest them
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:139:31: C408 Unnecessary `list` call (rewrite as a literal)
    |
137 |             yield
138 |             return
139 |         token = _MOVE_SET.set(list())
    |                               ^^^^^^ C408
140 |         yield
141 |         _process_moves(_MOVE_SET.get())  # do it
    |
    = help: Rewrite as a literal

src\stk_search\geom3d\models\NequIP\utils\savenload.py:144:9: D103 Missing docstring in public function
    |
142 |         _MOVE_SET.reset(token)
143 | 
144 |     def finish_all_writes():
    |         ^^^^^^^^^^^^^^^^^ D103
145 |         pass  # nothing to do since all writes blocked
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:149:5: D103 Missing docstring in public function
    |
148 | @contextlib.contextmanager
149 | def atomic_write(
    |     ^^^^^^^^^^^^ D103
150 |     filename: Union[Path, str, List[Union[Path, str]]],
151 |     blocking: bool = True,
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:150:15: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
148 | @contextlib.contextmanager
149 | def atomic_write(
150 |     filename: Union[Path, str, List[Union[Path, str]]],
    |               ^^^^^ FA100
151 |     blocking: bool = True,
152 |     binary: bool = False,
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:150:32: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
148 | @contextlib.contextmanager
149 | def atomic_write(
150 |     filename: Union[Path, str, List[Union[Path, str]]],
    |                                ^^^^ FA100
151 |     blocking: bool = True,
152 |     binary: bool = False,
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:150:37: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
148 | @contextlib.contextmanager
149 | def atomic_write(
150 |     filename: Union[Path, str, List[Union[Path, str]]],
    |                                     ^^^^^ FA100
151 |     blocking: bool = True,
152 |     binary: bool = False,
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:151:5: FBT001 Boolean-typed positional argument in function definition
    |
149 | def atomic_write(
150 |     filename: Union[Path, str, List[Union[Path, str]]],
151 |     blocking: bool = True,
    |     ^^^^^^^^ FBT001
152 |     binary: bool = False,
153 | ):
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:151:5: FBT002 Boolean default positional argument in function definition
    |
149 | def atomic_write(
150 |     filename: Union[Path, str, List[Union[Path, str]]],
151 |     blocking: bool = True,
    |     ^^^^^^^^ FBT002
152 |     binary: bool = False,
153 | ):
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:152:5: FBT001 Boolean-typed positional argument in function definition
    |
150 |     filename: Union[Path, str, List[Union[Path, str]]],
151 |     blocking: bool = True,
152 |     binary: bool = False,
    |     ^^^^^^ FBT001
153 | ):
154 |     aslist: bool = True
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:152:5: FBT002 Boolean default positional argument in function definition
    |
150 |     filename: Union[Path, str, List[Union[Path, str]]],
151 |     blocking: bool = True,
152 |     binary: bool = False,
    |     ^^^^^^ FBT002
153 | ):
154 |     aslist: bool = True
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:188:22: RUF013 PEP 484 prohibits implicit `Optional`
    |
186 |     supported_formats: dict,
187 |     filename: str,
188 |     enforced_format: str = None,
    |                      ^^^ RUF013
189 |     blocking: bool = True,
190 | ):
    |
    = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:189:5: FBT001 Boolean-typed positional argument in function definition
    |
187 |     filename: str,
188 |     enforced_format: str = None,
189 |     blocking: bool = True,
    |     ^^^^^^^^ FBT001
190 | ):
191 |     """Save file. It can take yaml, json, pickle, json, npz and torch save
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:189:5: FBT002 Boolean default positional argument in function definition
    |
187 |     filename: str,
188 |     enforced_format: str = None,
189 |     blocking: bool = True,
    |     ^^^^^^^^ FBT002
190 | ):
191 |     """Save file. It can take yaml, json, pickle, json, npz and torch save
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:191:5: D200 One-line docstring should fit on one line
    |
189 |       blocking: bool = True,
190 |   ):
191 |       """Save file. It can take yaml, json, pickle, json, npz and torch save
    |  _____^
192 | |     """
    | |_______^ D200
193 |       # check whether folder exist
194 |       path = os.path.dirname(os.path.realpath(filename))
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\NequIP\utils\savenload.py:191:5: D400 First line should end with a period
    |
189 |       blocking: bool = True,
190 |   ):
191 |       """Save file. It can take yaml, json, pickle, json, npz and torch save
    |  _____^
192 | |     """
    | |_______^ D400
193 |       # check whether folder exist
194 |       path = os.path.dirname(os.path.realpath(filename))
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\savenload.py:191:5: D415 First line should end with a period, question mark, or exclamation point
    |
189 |       blocking: bool = True,
190 |   ):
191 |       """Save file. It can take yaml, json, pickle, json, npz and torch save
    |  _____^
192 | |     """
    | |_______^ D415
193 |       # check whether folder exist
194 |       path = os.path.dirname(os.path.realpath(filename))
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\savenload.py:194:12: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
192 |     """
193 |     # check whether folder exist
194 |     path = os.path.dirname(os.path.realpath(filename))
    |            ^^^^^^^^^^^^^^^ PTH120
195 |     if not os.path.isdir(path):
196 |         logging.debug(f"save_file make dirs {path}")
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:195:12: PTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`
    |
193 |     # check whether folder exist
194 |     path = os.path.dirname(os.path.realpath(filename))
195 |     if not os.path.isdir(path):
    |            ^^^^^^^^^^^^^ PTH112
196 |         logging.debug(f"save_file make dirs {path}")
197 |         os.makedirs(path, exist_ok=True)
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:196:23: G004 Logging statement uses f-string
    |
194 |     path = os.path.dirname(os.path.realpath(filename))
195 |     if not os.path.isdir(path):
196 |         logging.debug(f"save_file make dirs {path}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
197 |         os.makedirs(path, exist_ok=True)
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:197:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
195 |     if not os.path.isdir(path):
196 |         logging.debug(f"save_file make dirs {path}")
197 |         os.makedirs(path, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
198 | 
199 |     format, filename = adjust_format_name(
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:199:5: A001 Variable `format` is shadowing a Python builtin
    |
197 |         os.makedirs(path, exist_ok=True)
198 | 
199 |     format, filename = adjust_format_name(
    |     ^^^^^^ A001
200 |         supported_formats=supported_formats,
201 |         filename=filename,
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:238:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
236 |           else:
237 |               raise NotImplementedError(
238 |                   f"Output format {format} not supported:"
    |  _________________^
239 | |                 f" try from {supported_formats.keys()}"
    | |_______________________________________________________^ EM102
240 |               )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\savenload.py:245:72: RUF013 PEP 484 prohibits implicit `Optional`
    |
245 | def load_file(supported_formats: dict, filename: str, enforced_format: str = None):
    |                                                                        ^^^ RUF013
246 |     """Load file. Current support form
247 |     """
    |
    = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:246:5: D200 One-line docstring should fit on one line
    |
245 |   def load_file(supported_formats: dict, filename: str, enforced_format: str = None):
246 |       """Load file. Current support form
    |  _____^
247 | |     """
    | |_______^ D200
248 |       if enforced_format is None:
249 |           format = match_suffix(supported_formats=supported_formats, filename=filename)
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\NequIP\utils\savenload.py:246:5: D400 First line should end with a period
    |
245 |   def load_file(supported_formats: dict, filename: str, enforced_format: str = None):
246 |       """Load file. Current support form
    |  _____^
247 | |     """
    | |_______^ D400
248 |       if enforced_format is None:
249 |           format = match_suffix(supported_formats=supported_formats, filename=filename)
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\savenload.py:246:5: D415 First line should end with a period, question mark, or exclamation point
    |
245 |   def load_file(supported_formats: dict, filename: str, enforced_format: str = None):
246 |       """Load file. Current support form
    |  _____^
247 | |     """
    | |_______^ D415
248 |       if enforced_format is None:
249 |           format = match_suffix(supported_formats=supported_formats, filename=filename)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\savenload.py:249:9: A001 Variable `format` is shadowing a Python builtin
    |
247 |     """
248 |     if enforced_format is None:
249 |         format = match_suffix(supported_formats=supported_formats, filename=filename)
    |         ^^^^^^ A001
250 |     else:
251 |         format = enforced_format
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:251:9: A001 Variable `format` is shadowing a Python builtin
    |
249 |         format = match_suffix(supported_formats=supported_formats, filename=filename)
250 |     else:
251 |         format = enforced_format
    |         ^^^^^^ A001
252 | 
253 |     if not os.path.isfile(filename):
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:253:12: PTH113 `os.path.isfile()` should be replaced by `Path.is_file()`
    |
251 |         format = enforced_format
252 | 
253 |     if not os.path.isfile(filename):
    |            ^^^^^^^^^^^^^^ PTH113
254 |         abs_path = str(Path(filename).resolve())
255 |         raise OSError(f"file {filename} at {abs_path} is not found")
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:255:15: TRY003 Avoid specifying long messages outside the exception class
    |
253 |     if not os.path.isfile(filename):
254 |         abs_path = str(Path(filename).resolve())
255 |         raise OSError(f"file {filename} at {abs_path} is not found")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
256 | 
257 |     if format == "json":
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:255:23: EM102 Exception must not use an f-string literal, assign to variable first
    |
253 |     if not os.path.isfile(filename):
254 |         abs_path = str(Path(filename).resolve())
255 |         raise OSError(f"file {filename} at {abs_path} is not found")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
256 | 
257 |     if format == "json":
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\savenload.py:260:14: PTH123 `open()` should be replaced by `Path.open()`
    |
258 |         import json
259 | 
260 |         with open(filename) as fin:
    |              ^^^^ PTH123
261 |             return json.load(fin)
262 |     elif format == "yaml":
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:265:14: PTH123 `open()` should be replaced by `Path.open()`
    |
263 |         import yaml
264 | 
265 |         with open(filename) as fin:
    |              ^^^^ PTH123
266 |             return yaml.load(fin, Loader=yaml.Loader)
267 |     elif format == "torch":
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:266:42: S506 Probable use of unsafe loader `Loader` with `yaml.load`. Allows instantiation of arbitrary objects. Consider `yaml.safe_load`.
    |
265 |         with open(filename) as fin:
266 |             return yaml.load(fin, Loader=yaml.Loader)
    |                                          ^^^^^^^^^^^ S506
267 |     elif format == "torch":
268 |         import torch
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:274:14: PTH123 `open()` should be replaced by `Path.open()`
    |
272 |         import pickle
273 | 
274 |         with open(filename, "rb") as fin:
    |              ^^^^ PTH123
275 |             return pickle.load(fin)
276 |     elif format == "npz":
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:275:20: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
274 |         with open(filename, "rb") as fin:
275 |             return pickle.load(fin)
    |                    ^^^^^^^^^^^^^^^^ S301
276 |     elif format == "npz":
277 |         import numpy as np
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:282:13: EM102 Exception must not use an f-string literal, assign to variable first
    |
280 |     else:
281 |         raise NotImplementedError(
282 |             f"Input format not supported:" f" try from {supported_formats.keys()}"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
283 |         )
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\savenload.py:286:24: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
286 | def load_callable(obj: Union[str, Callable], prefix: Optional[str] = None) -> Callable:
    |                        ^^^^^ FA100
287 |     """Load a callable from a name, or pass through a callable."""
288 |     if callable(obj):
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:286:54: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
286 | def load_callable(obj: Union[str, Callable], prefix: Optional[str] = None) -> Callable:
    |                                                      ^^^^^^^^ FA100
287 |     """Load a callable from a name, or pass through a callable."""
288 |     if callable(obj):
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:291:9: T201 `print` found
    |
289 |         pass
290 |     elif isinstance(obj, str):
291 |         print("obj", obj)
    |         ^^^^^ T201
292 |         print("prefix", prefix)
293 |         prefix = f"Geom3D.models.{prefix}"
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:292:9: T201 `print` found
    |
290 |     elif isinstance(obj, str):
291 |         print("obj", obj)
292 |         print("prefix", prefix)
    |         ^^^^^ T201
293 |         prefix = f"Geom3D.models.{prefix}"
294 |         print("prefix", prefix)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:294:9: T201 `print` found
    |
292 |         print("prefix", prefix)
293 |         prefix = f"Geom3D.models.{prefix}"
294 |         print("prefix", prefix)
    |         ^^^^^ T201
295 |         if "." not in obj:
296 |             # It's an unqualified name
    |
    = help: Remove `print`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:301:23: TRY003 Avoid specifying long messages outside the exception class
    |
299 |             else:
300 |                 # You can't have an unqualified name without a prefix
301 |                 raise ValueError(f"Cannot load unqualified name {obj}.")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
302 |         obj = yaml.load(f"!!python/name:{obj}", Loader=yaml.Loader)
303 |     else:
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:301:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
299 |             else:
300 |                 # You can't have an unqualified name without a prefix
301 |                 raise ValueError(f"Cannot load unqualified name {obj}.")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
302 |         obj = yaml.load(f"!!python/name:{obj}", Loader=yaml.Loader)
303 |     else:
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\savenload.py:302:56: S506 Probable use of unsafe loader `Loader` with `yaml.load`. Allows instantiation of arbitrary objects. Consider `yaml.safe_load`.
    |
300 |                 # You can't have an unqualified name without a prefix
301 |                 raise ValueError(f"Cannot load unqualified name {obj}.")
302 |         obj = yaml.load(f"!!python/name:{obj}", Loader=yaml.Loader)
    |                                                        ^^^^^^^^^^^ S506
303 |     else:
304 |         raise TypeError
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:305:5: S101 Use of `assert` detected
    |
303 |     else:
304 |         raise TypeError
305 |     assert callable(obj), f"{obj} isn't callable"
    |     ^^^^^^ S101
306 |     return obj
    |

src\stk_search\geom3d\models\NequIP\utils\savenload.py:310:62: RUF013 PEP 484 prohibits implicit `Optional`
    |
309 | def adjust_format_name(
310 |     supported_formats: dict, filename: str, enforced_format: str = None
    |                                                              ^^^ RUF013
311 | ):
312 |     """Recognize whether proper suffix is added to the filename.
    |
    = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\NequIP\utils\savenload.py:312:5: D205 1 blank line required between summary line and description
    |
310 |       supported_formats: dict, filename: str, enforced_format: str = None
311 |   ):
312 |       """Recognize whether proper suffix is added to the filename.
    |  _____^
313 | |     If not, add it and return the formatted file name
314 | | 
315 | |     Args:
316 | |     ----
317 | |         supported_formats (dict): list of supported formats and corresponding suffix
318 | |         filename (str): initial filename
319 | |         enforced_format (str): default format
320 | | 
321 | |     Returns:
322 | |     -------
323 | |         newformat (str): the chosen format
324 | |         newname (str): the adjusted filename
325 | | 
326 | |     """
    | |_______^ D205
327 |       if enforced_format is None:
328 |           newformat = match_suffix(supported_formats=supported_formats, filename=filename)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\NequIP\utils\savenload.py:312:5: D400 First line should end with a period
    |
310 |       supported_formats: dict, filename: str, enforced_format: str = None
311 |   ):
312 |       """Recognize whether proper suffix is added to the filename.
    |  _____^
313 | |     If not, add it and return the formatted file name
314 | | 
315 | |     Args:
316 | |     ----
317 | |         supported_formats (dict): list of supported formats and corresponding suffix
318 | |         filename (str): initial filename
319 | |         enforced_format (str): default format
320 | | 
321 | |     Returns:
322 | |     -------
323 | |         newformat (str): the chosen format
324 | |         newname (str): the adjusted filename
325 | | 
326 | |     """
    | |_______^ D400
327 |       if enforced_format is None:
328 |           newformat = match_suffix(supported_formats=supported_formats, filename=filename)
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\savenload.py:312:5: D415 First line should end with a period, question mark, or exclamation point
    |
310 |       supported_formats: dict, filename: str, enforced_format: str = None
311 |   ):
312 |       """Recognize whether proper suffix is added to the filename.
    |  _____^
313 | |     If not, add it and return the formatted file name
314 | | 
315 | |     Args:
316 | |     ----
317 | |         supported_formats (dict): list of supported formats and corresponding suffix
318 | |         filename (str): initial filename
319 | |         enforced_format (str): default format
320 | | 
321 | |     Returns:
322 | |     -------
323 | |         newformat (str): the chosen format
324 | |         newname (str): the adjusted filename
325 | | 
326 | |     """
    | |_______^ D415
327 |       if enforced_format is None:
328 |           newformat = match_suffix(supported_formats=supported_formats, filename=filename)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\savenload.py:353:5: D400 First line should end with a period
    |
352 |   def match_suffix(supported_formats: str, filename: str):
353 |       """Recognize format based on suffix
    |  _____^
354 | | 
355 | |     Args:
356 | |     ----
357 | |         supported_formats (dict): list of supported formats and corresponding suffix
358 | |         filename (str): initial filename
359 | | 
360 | |     Returns:
361 | |     -------
362 | |         format (str): the recognized format
363 | | 
364 | |     """
    | |_______^ D400
365 |       for form, suffs in supported_formats.items():
366 |           if isinstance(suffs, (set, list, tuple)):
    |
    = help: Add period

src\stk_search\geom3d\models\NequIP\utils\savenload.py:353:5: D415 First line should end with a period, question mark, or exclamation point
    |
352 |   def match_suffix(supported_formats: str, filename: str):
353 |       """Recognize format based on suffix
    |  _____^
354 | | 
355 | |     Args:
356 | |     ----
357 | |         supported_formats (dict): list of supported formats and corresponding suffix
358 | |         filename (str): initial filename
359 | | 
360 | |     Returns:
361 | |     -------
362 | |         format (str): the recognized format
363 | | 
364 | |     """
    | |_______^ D415
365 |       for form, suffs in supported_formats.items():
366 |           if isinstance(suffs, (set, list, tuple)):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\NequIP\utils\savenload.py:373:12: RUF015 Prefer `next(iter(supported_formats.keys()))` over single element slice
    |
371 |             return form
372 | 
373 |     return list(supported_formats.keys())[0]
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF015
    |
    = help: Replace with `next(iter(supported_formats.keys()))`

src\stk_search\geom3d\models\NequIP\utils\scatter.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\scatter.py:7:5: ANN202 Missing return type annotation for private function `_broadcast`
  |
6 | # credit to https://github.com/mir-group/pytorch_runstats/blob/main/torch_runstats/scatter.py
7 | def _broadcast(src: torch.Tensor, other: torch.Tensor, dim: int):
  |     ^^^^^^^^^^ ANN202
8 |     if dim < 0:
9 |         dim = other.dim() + dim
  |
  = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\scatter.py:16:12: RET504 Unnecessary assignment to `src` before `return` statement
   |
14 |         src = src.unsqueeze(-1)
15 |     src = src.expand_as(other)
16 |     return src
   |            ^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\NequIP\utils\scatter.py:20:5: PLR0913 Too many arguments in function definition (6 > 5)
   |
19 | @torch.jit.script
20 | def scatter(
   |     ^^^^^^^ PLR0913
21 |     src: torch.Tensor,
22 |     index: torch.Tensor,
   |

src\stk_search\geom3d\models\NequIP\utils\scatter.py:20:5: D103 Missing docstring in public function
   |
19 | @torch.jit.script
20 | def scatter(
   |     ^^^^^^^ D103
21 |     src: torch.Tensor,
22 |     index: torch.Tensor,
   |

src\stk_search\geom3d\models\NequIP\utils\scatter.py:24:10: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
22 |     index: torch.Tensor,
23 |     dim: int = -1,
24 |     out: Optional[torch.Tensor] = None,
   |          ^^^^^^^^ FA100
25 |     dim_size: Optional[int] = None,
26 |     reduce: str = "sum",
   |

src\stk_search\geom3d\models\NequIP\utils\scatter.py:25:15: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
23 |     dim: int = -1,
24 |     out: Optional[torch.Tensor] = None,
25 |     dim_size: Optional[int] = None,
   |               ^^^^^^^^ FA100
26 |     reduce: str = "sum",
27 | ) -> torch.Tensor:
   |

src\stk_search\geom3d\models\NequIP\utils\scatter.py:28:5: S101 Use of `assert` detected
   |
26 |     reduce: str = "sum",
27 | ) -> torch.Tensor:
28 |     assert reduce == "sum"  # for now, TODO
   |     ^^^^^^ S101
29 |     index = _broadcast(index, src, dim)
30 |     if out is None:
   |

src\stk_search\geom3d\models\NequIP\utils\scatter.py:40:5: RET505 Unnecessary `else` after `return` statement
   |
38 |         out = torch.zeros(size, dtype=src.dtype, device=src.device)
39 |         return out.scatter_add_(dim, index, src)
40 |     else:
   |     ^^^^ RET505
41 |         return out.scatter_add_(dim, index, src)
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\utils\test.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\test.py:18:5: ANN202 Missing return type annotation for private function `_inverse_permutation`
   |
17 | # https://discuss.pytorch.org/t/how-to-quickly-inverse-a-permutation-by-using-pytorch/116205/4
18 | def _inverse_permutation(perm):
   |     ^^^^^^^^^^^^^^^^^^^^ ANN202
19 |     inv = torch.empty_like(perm)
20 |     inv[perm] = torch.arange(perm.size(0), device=perm.device)
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\test.py:24:5: C901 `assert_permutation_equivariant` is too complex (22 > 10)
   |
24 | def assert_permutation_equivariant(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
25 |     func: GraphModuleMixin,
26 |     data_in: AtomicDataDict.Type,
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:24:5: PLR0912 Too many branches (24 > 12)
   |
24 | def assert_permutation_equivariant(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
25 |     func: GraphModuleMixin,
26 |     data_in: AtomicDataDict.Type,
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:24:5: PLR0915 Too many statements (57 > 50)
   |
24 | def assert_permutation_equivariant(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
25 |     func: GraphModuleMixin,
26 |     data_in: AtomicDataDict.Type,
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:24:5: D417 Missing argument descriptions in the docstring for `assert_permutation_equivariant`: `raise_error`, `tolerance`
   |
24 | def assert_permutation_equivariant(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
25 |     func: GraphModuleMixin,
26 |     data_in: AtomicDataDict.Type,
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:27:16: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
25 |     func: GraphModuleMixin,
26 |     data_in: AtomicDataDict.Type,
27 |     tolerance: Optional[float] = None,
   |                ^^^^^^^^ FA100
28 |     raise_error: bool = True,
29 | ):
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:28:5: FBT001 Boolean-typed positional argument in function definition
   |
26 |     data_in: AtomicDataDict.Type,
27 |     tolerance: Optional[float] = None,
28 |     raise_error: bool = True,
   |     ^^^^^^^^^^^ FBT001
29 | ):
30 |     r"""Test the permutation equivariance of ``func``.
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:28:5: FBT002 Boolean default positional argument in function definition
   |
26 |     data_in: AtomicDataDict.Type,
27 |     tolerance: Optional[float] = None,
28 |     raise_error: bool = True,
   |     ^^^^^^^^^^^ FBT002
29 | ):
30 |     r"""Test the permutation equivariance of ``func``.
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:77:9: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
76 |     perm_data_in = {}
77 |     for k in data_in.keys():
   |         ^^^^^^^^^^^^^^^^^^^ SIM118
78 |         if k in node_permute_fields:
79 |             perm_data_in[k] = data_in[k][node_perm]
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\models\NequIP\utils\test.py:92:5: S101 Use of `assert` detected
   |
90 |     out_perm = func(perm_data_in)
91 | 
92 |     assert set(out_orig.keys()) == set(
   |     ^^^^^^ S101
93 |         out_perm.keys()
94 |     ), "Permutation changed the set of fields returned by model"
   |

src\stk_search\geom3d\models\NequIP\utils\test.py:97:9: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
96 |     problems = []
97 |     for k in out_orig.keys():
   |         ^^^^^^^^^^^^^^^^^^^^ SIM118
98 |         if k in node_permute_fields:
99 |             if not torch.allclose(out_orig[k][node_perm], out_perm[k], atol=atol):
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\models\NequIP\utils\test.py:125:5: RET505 Unnecessary `elif` after `return` statement
    |
123 |     if len(problems) == 0:
124 |         return None
125 |     elif raise_error:
    |     ^^^^ RET505
126 |         raise AssertionError(msg)
127 |     else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\test.py:131:5: N802 Function name `assert_AtomicData_equivariant` should be lowercase
    |
131 | def assert_AtomicData_equivariant(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:131:5: C901 `assert_AtomicData_equivariant` is too complex (25 > 10)
    |
131 | def assert_AtomicData_equivariant(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:131:5: PLR0912 Too many branches (16 > 12)
    |
131 | def assert_AtomicData_equivariant(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:131:5: PLR0915 Too many statements (59 > 50)
    |
131 | def assert_AtomicData_equivariant(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0915
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:131:5: D417 Missing argument descriptions in the docstring for `assert_AtomicData_equivariant`: `o3_tolerance`, `permutation_tolerance`
    |
131 | def assert_AtomicData_equivariant(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:133:14: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
131 | def assert_AtomicData_equivariant(
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
    |              ^^^^^ FA100
134 |         AtomicData, AtomicDataDict.Type, List[Union[AtomicData, AtomicDataDict.Type]]
135 |     ],
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:134:42: FA100 Add `from __future__ import annotations` to simplify `typing.List`
    |
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
134 |         AtomicData, AtomicDataDict.Type, List[Union[AtomicData, AtomicDataDict.Type]]
    |                                          ^^^^ FA100
135 |     ],
136 |     permutation_tolerance: Optional[float] = None,
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:134:47: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
    |
132 |     func: GraphModuleMixin,
133 |     data_in: Union[
134 |         AtomicData, AtomicDataDict.Type, List[Union[AtomicData, AtomicDataDict.Type]]
    |                                               ^^^^^ FA100
135 |     ],
136 |     permutation_tolerance: Optional[float] = None,
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:136:28: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
134 |         AtomicData, AtomicDataDict.Type, List[Union[AtomicData, AtomicDataDict.Type]]
135 |     ],
136 |     permutation_tolerance: Optional[float] = None,
    |                            ^^^^^^^^ FA100
137 |     o3_tolerance: Optional[float] = None,
138 |     **kwargs,
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:137:19: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
135 |     ],
136 |     permutation_tolerance: Optional[float] = None,
137 |     o3_tolerance: Optional[float] = None,
    |                   ^^^^^^^^ FA100
138 |     **kwargs,
139 | ) -> str:
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:138:5: ANN003 Missing type annotation for `**kwargs`
    |
136 |     permutation_tolerance: Optional[float] = None,
137 |     o3_tolerance: Optional[float] = None,
138 |     **kwargs,
    |     ^^^^^^^^ ANN003
139 | ) -> str:
140 |     r"""Test the rotation, translation, parity, and permutation equivariance of ``func``.
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:186:13: S101 Use of `assert` detected
    |
184 |             # it should always have been 1o vectors
185 |             # since that's actually a valid Irreps
186 |             assert o3.Irreps(irps[AtomicDataDict.POSITIONS_KEY]) == o3.Irreps("1o")
    |             ^^^^^^ S101
187 |             irps[AtomicDataDict.POSITIONS_KEY] = "cartesian_points"
188 |         if AtomicDataDict.CELL_KEY in irps:
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:190:13: S101 Use of `assert` detected
    |
188 |         if AtomicDataDict.CELL_KEY in irps:
189 |             prev_cell_irps = irps[AtomicDataDict.CELL_KEY]
190 |             assert prev_cell_irps is None or o3.Irreps(prev_cell_irps) == o3.Irreps(
    |             ^^^^^^ S101
191 |                 "3x1o"
192 |             )
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:208:9: ANN202 Missing return type annotation for private function `wrapper`
    |
206 |             irreps_out[k] = stress_cart_tensor
207 | 
208 |     def wrapper(*args):
    |         ^^^^^^^ ANN202
209 |         arg_dict = {k: v for k, v in zip(irreps_in, args)}
210 |         # cell is a special case
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\test.py:208:17: ANN002 Missing type annotation for `*args`
    |
206 |             irreps_out[k] = stress_cart_tensor
207 | 
208 |     def wrapper(*args):
    |                 ^^^^^ ANN002
209 |         arg_dict = {k: v for k, v in zip(irreps_in, args)}
210 |         # cell is a special case
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:209:20: C416 Unnecessary `dict` comprehension (rewrite using `dict()`)
    |
208 |     def wrapper(*args):
209 |         arg_dict = {k: v for k, v in zip(irreps_in, args)}
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C416
210 |         # cell is a special case
211 |         for key in (AtomicDataDict.CELL_KEY,):
    |
    = help: Rewrite using `dict()`

src\stk_search\geom3d\models\NequIP\utils\test.py:215:17: S101 Use of `assert` detected
    |
213 |                 # unflatten
214 |                 val = arg_dict[key]
215 |                 assert val.shape[-1] == 9
    |                 ^^^^^^ S101
216 |                 arg_dict[key] = val.reshape(val.shape[:-1] + (3, 3))
217 |         output = func(arg_dict)
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:215:41: PLR2004 Magic value used in comparison, consider replacing `9` with a constant variable
    |
213 |                 # unflatten
214 |                 val = arg_dict[key]
215 |                 assert val.shape[-1] == 9
    |                                         ^ PLR2004
216 |                 arg_dict[key] = val.reshape(val.shape[:-1] + (3, 3))
217 |         output = func(arg_dict)
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:223:17: S101 Use of `assert` detected
    |
221 |                 # flatten
222 |                 val = output[key]
223 |                 assert val.shape[-2:] == (3, 3)
    |                 ^^^^^^ S101
224 |                 output[key] = val.reshape(val.shape[:-2] + (9,))
225 |         # stress is also a special case,
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:238:13: S101 Use of `assert` detected
    |
236 |             # flatten
237 |             cell = d[AtomicDataDict.CELL_KEY]
238 |             assert cell.shape[-2:] == (3, 3)
    |             ^^^^^^ S101
239 |             d[AtomicDataDict.CELL_KEY] = cell.reshape(cell.shape[:-2] + (9,))
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:262:13: ANN202 Missing return type annotation for private function `_describe`
    |
260 |         problems = {k: v for k, v in errs.items() if v > o3_tolerance}
261 | 
262 |         def _describe(errors):
    |             ^^^^^^^^^ ANN202
263 |             return (
264 |                 permutation_problems + "\n" if permutation_problems is not None else ""
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\test.py:276:5: RET505 Unnecessary `else` after `return` statement
    |
275 |         return _describe(errs)
276 |     else:
    |     ^^^^ RET505
277 |         # it's newer and tells us which is which
278 |         all_errs = []
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\NequIP\utils\test.py:281:33: RUF005 Consider `(*case, key, this_err)` instead of concatenation
    |
279 |         for case, err in errs.items():
280 |             for key, this_err in zip(irreps_out.keys(), err):
281 |                 all_errs.append(case + (key, this_err))
    |                                 ^^^^^^^^^^^^^^^^^^^^^^ RUF005
282 |         problems = [e for e in all_errs if e[-1] > o3_tolerance]
    |
    = help: Replace with `(*case, key, this_err)`

src\stk_search\geom3d\models\NequIP\utils\test.py:284:13: ANN202 Missing return type annotation for private function `_describe`
    |
282 |         problems = [e for e in all_errs if e[-1] > o3_tolerance]
283 | 
284 |         def _describe(errors):
    |             ^^^^^^^^^ ANN202
285 |             return (
286 |                 permutation_problems + "\n" if permutation_problems is not None else ""
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\NequIP\utils\test.py:303:5: C901 `set_irreps_debug` is too complex (22 > 10)
    |
303 | def set_irreps_debug(enabled: bool = False) -> None:
    |     ^^^^^^^^^^^^^^^^ C901
304 |     r"""Add debugging hooks to ``forward()`` that check data-irreps consistancy.
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:303:22: FBT001 Boolean-typed positional argument in function definition
    |
303 | def set_irreps_debug(enabled: bool = False) -> None:
    |                      ^^^^^^^ FBT001
304 |     r"""Add debugging hooks to ``forward()`` that check data-irreps consistancy.
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:303:22: FBT002 Boolean default positional argument in function definition
    |
303 | def set_irreps_debug(enabled: bool = False) -> None:
    |                      ^^^^^^^ FBT002
304 |     r"""Add debugging hooks to ``forward()`` that check data-irreps consistancy.
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:311:12: PLW0603 Using the global statement to update `_DEBUG_HOOKS` is discouraged
    |
310 |     """
311 |     global _DEBUG_HOOKS
    |            ^^^^^^^^^^^^ PLW0603
312 |     if _DEBUG_HOOKS is None and not enabled or _DEBUG_HOOKS is not None and enabled:
313 |         return
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:311:12: PLW0603 Using the global statement to update `_DEBUG_HOOKS` is discouraged
    |
310 |     """
311 |     global _DEBUG_HOOKS
    |            ^^^^^^^^^^^^ PLW0603
312 |     if _DEBUG_HOOKS is None and not enabled or _DEBUG_HOOKS is not None and enabled:
313 |         return
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:314:5: RET505 Unnecessary `elif` after `return` statement
    |
312 |     if _DEBUG_HOOKS is None and not enabled or _DEBUG_HOOKS is not None and enabled:
313 |         return
314 |     elif _DEBUG_HOOKS is not None and not enabled:
    |     ^^^^ RET505
315 |         for hook in _DEBUG_HOOKS:
316 |             hook.remove()
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\test.py:325:9: ANN202 Missing return type annotation for private function `pre_hook`
    |
323 |     from NequIP.utils.torch_geometric import Data
324 | 
325 |     def pre_hook(mod: GraphModuleMixin, inp):
    |         ^^^^^^^^ ANN202
326 |         __tracebackhide__ = True
327 |         if not isinstance(mod, GraphModuleMixin):
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\test.py:331:19: TRY003 Avoid specifying long messages outside the exception class
    |
329 |           mname = type(mod).__name__
330 |           if len(inp) > 1:
331 |               raise ValueError(
    |  ___________________^
332 | |                 f"Module {mname} should have received a single argument, but got {len(inp)}"
333 | |             )
    | |_____________^ TRY003
334 |           elif len(inp) == 0:
335 |               raise ValueError(
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:332:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
330 |         if len(inp) > 1:
331 |             raise ValueError(
332 |                 f"Module {mname} should have received a single argument, but got {len(inp)}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
333 |             )
334 |         elif len(inp) == 0:
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:334:9: RET506 Unnecessary `elif` after `raise` statement
    |
332 |                 f"Module {mname} should have received a single argument, but got {len(inp)}"
333 |             )
334 |         elif len(inp) == 0:
    |         ^^^^ RET506
335 |             raise ValueError(
336 |                 f"Module {mname} didn't get any arguments; this case is correctly handled with an empty dict."
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\test.py:335:19: TRY003 Avoid specifying long messages outside the exception class
    |
333 |               )
334 |           elif len(inp) == 0:
335 |               raise ValueError(
    |  ___________________^
336 | |                 f"Module {mname} didn't get any arguments; this case is correctly handled with an empty dict."
337 | |             )
    | |_____________^ TRY003
338 |           inp = inp[0]
339 |           if not (isinstance(inp, dict) or isinstance(inp, Data)):
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:336:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
334 |         elif len(inp) == 0:
335 |             raise ValueError(
336 |                 f"Module {mname} didn't get any arguments; this case is correctly handled with an empty dict."
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
337 |             )
338 |         inp = inp[0]
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:339:17: SIM101 Multiple `isinstance` calls for `inp`, merge into a single call
    |
337 |             )
338 |         inp = inp[0]
339 |         if not (isinstance(inp, dict) or isinstance(inp, Data)):
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM101
340 |             raise TypeError(
341 |                 f"Module {mname} should have received a dict or a torch_geometric Data, instead got a {type(inp).__name__}"
    |
    = help: Merge `isinstance` calls for `inp`

src\stk_search\geom3d\models\NequIP\utils\test.py:340:19: TRY003 Avoid specifying long messages outside the exception class
    |
338 |           inp = inp[0]
339 |           if not (isinstance(inp, dict) or isinstance(inp, Data)):
340 |               raise TypeError(
    |  ___________________^
341 | |                 f"Module {mname} should have received a dict or a torch_geometric Data, instead got a {type(inp).__name__}"
342 | |             )
    | |_____________^ TRY003
343 |           for k, ir in mod.irreps_in.items():
344 |               if k not in inp:
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:341:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
339 |         if not (isinstance(inp, dict) or isinstance(inp, Data)):
340 |             raise TypeError(
341 |                 f"Module {mname} should have received a dict or a torch_geometric Data, instead got a {type(inp).__name__}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
342 |             )
343 |         for k, ir in mod.irreps_in.items():
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:345:23: TRY003 Avoid specifying long messages outside the exception class
    |
343 |           for k, ir in mod.irreps_in.items():
344 |               if k not in inp:
345 |                   raise KeyError(
    |  _______________________^
346 | |                     f"Field {k} with irreps {ir} expected to be input to {mname}; not present"
347 | |                 )
    | |_________________^ TRY003
348 |               elif isinstance(inp[k], torch.Tensor) and isinstance(ir, o3.Irreps):
349 |                   if inp[k].ndim == 1:
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:346:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
344 |             if k not in inp:
345 |                 raise KeyError(
346 |                     f"Field {k} with irreps {ir} expected to be input to {mname}; not present"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
347 |                 )
348 |             elif isinstance(inp[k], torch.Tensor) and isinstance(ir, o3.Irreps):
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:348:13: RET506 Unnecessary `elif` after `raise` statement
    |
346 |                     f"Field {k} with irreps {ir} expected to be input to {mname}; not present"
347 |                 )
348 |             elif isinstance(inp[k], torch.Tensor) and isinstance(ir, o3.Irreps):
    |             ^^^^ RET506
349 |                 if inp[k].ndim == 1:
350 |                     raise ValueError(
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\test.py:350:27: TRY003 Avoid specifying long messages outside the exception class
    |
348 |               elif isinstance(inp[k], torch.Tensor) and isinstance(ir, o3.Irreps):
349 |                   if inp[k].ndim == 1:
350 |                       raise ValueError(
    |  ___________________________^
351 | |                         f"Field {k} in input to module {mname} has only one dimension (assumed to be batch-like); it must have a second irreps dimension even if irreps.dim == 1 (i.e. a single per atom scalar must have shape [N_at, 1], not [N_at])"
352 | |                     )
    | |_____________________^ TRY003
353 |                   elif inp[k].shape[-1] != ir.dim:
354 |                       raise ValueError(
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:351:25: EM102 Exception must not use an f-string literal, assign to variable first
    |
349 |                 if inp[k].ndim == 1:
350 |                     raise ValueError(
351 |                         f"Field {k} in input to module {mname} has only one dimension (assumed to be batch-like); it must have a second irreps dimension even if irreps.dim == 1 (i.e. a single per atom scalar must have shape [N_at, 1], not [N_at])"
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
352 |                     )
353 |                 elif inp[k].shape[-1] != ir.dim:
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:353:17: RET506 Unnecessary `elif` after `raise` statement
    |
351 |                         f"Field {k} in input to module {mname} has only one dimension (assumed to be batch-like); it must have a second irreps dimension even if irreps.dim == 1 (i.e. a single per atom scalar must have shape [N_at, 1], not [N_at])"
352 |                     )
353 |                 elif inp[k].shape[-1] != ir.dim:
    |                 ^^^^ RET506
354 |                     raise ValueError(
355 |                         f"Field {k} in input to module {mname} has last dimension {inp[k].shape[-1]} but its irreps {ir} indicate last dimension {ir.dim}"
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\test.py:354:27: TRY003 Avoid specifying long messages outside the exception class
    |
352 |                       )
353 |                   elif inp[k].shape[-1] != ir.dim:
354 |                       raise ValueError(
    |  ___________________________^
355 | |                         f"Field {k} in input to module {mname} has last dimension {inp[k].shape[-1]} but its irreps {ir} indicate last dimension {ir.dim}"
356 | |                     )
    | |_____________________^ TRY003
357 |           return
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:355:25: EM102 Exception must not use an f-string literal, assign to variable first
    |
353 |                 elif inp[k].shape[-1] != ir.dim:
354 |                     raise ValueError(
355 |                         f"Field {k} in input to module {mname} has last dimension {inp[k].shape[-1]} but its irreps {ir} indicate last dimension {ir.dim}"
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
356 |                     )
357 |         return
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:361:9: ANN202 Missing return type annotation for private function `post_hook`
    |
359 |     h1 = torch.nn.modules.module.register_module_forward_pre_hook(pre_hook)
360 | 
361 |     def post_hook(mod: GraphModuleMixin, _, out):
    |         ^^^^^^^^^ ANN202
362 |         __tracebackhide__ = True
363 |         if not isinstance(mod, GraphModuleMixin):
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\NequIP\utils\test.py:366:17: SIM101 Multiple `isinstance` calls for `out`, merge into a single call
    |
364 |             return
365 |         mname = type(mod).__name__
366 |         if not (isinstance(out, dict) or isinstance(out, Data)):
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM101
367 |             raise TypeError(
368 |                 f"Module {mname} should have returned a dict or a torch_geometric Data, instead got a {type(out).__name__}"
    |
    = help: Merge `isinstance` calls for `out`

src\stk_search\geom3d\models\NequIP\utils\test.py:367:19: TRY003 Avoid specifying long messages outside the exception class
    |
365 |           mname = type(mod).__name__
366 |           if not (isinstance(out, dict) or isinstance(out, Data)):
367 |               raise TypeError(
    |  ___________________^
368 | |                 f"Module {mname} should have returned a dict or a torch_geometric Data, instead got a {type(out).__name__}"
369 | |             )
    | |_____________^ TRY003
370 |           for k, ir in mod.irreps_out.items():
371 |               if k not in out:
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:368:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
366 |         if not (isinstance(out, dict) or isinstance(out, Data)):
367 |             raise TypeError(
368 |                 f"Module {mname} should have returned a dict or a torch_geometric Data, instead got a {type(out).__name__}"
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
369 |             )
370 |         for k, ir in mod.irreps_out.items():
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:372:23: TRY003 Avoid specifying long messages outside the exception class
    |
370 |           for k, ir in mod.irreps_out.items():
371 |               if k not in out:
372 |                   raise KeyError(
    |  _______________________^
373 | |                     f"Field {k} with irreps {ir} expected to be in output from {mname}; not present"
374 | |                 )
    | |_________________^ TRY003
375 |               elif isinstance(out[k], torch.Tensor) and isinstance(ir, o3.Irreps):
376 |                   if out[k].ndim == 1:
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:373:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
371 |             if k not in out:
372 |                 raise KeyError(
373 |                     f"Field {k} with irreps {ir} expected to be in output from {mname}; not present"
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
374 |                 )
375 |             elif isinstance(out[k], torch.Tensor) and isinstance(ir, o3.Irreps):
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:375:13: RET506 Unnecessary `elif` after `raise` statement
    |
373 |                     f"Field {k} with irreps {ir} expected to be in output from {mname}; not present"
374 |                 )
375 |             elif isinstance(out[k], torch.Tensor) and isinstance(ir, o3.Irreps):
    |             ^^^^ RET506
376 |                 if out[k].ndim == 1:
377 |                     raise ValueError(
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\test.py:377:27: TRY003 Avoid specifying long messages outside the exception class
    |
375 |               elif isinstance(out[k], torch.Tensor) and isinstance(ir, o3.Irreps):
376 |                   if out[k].ndim == 1:
377 |                       raise ValueError(
    |  ___________________________^
378 | |                         f"Field {k} in output from module {mname} has only one dimension (assumed to be batch-like); it must have a second irreps dimension even if irreps.dim == 1 (i.e. a single per atom scalar must have shape [N_at, 1], not [N_at])"
379 | |                     )
    | |_____________________^ TRY003
380 |                   elif out[k].shape[-1] != ir.dim:
381 |                       raise ValueError(
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:378:25: EM102 Exception must not use an f-string literal, assign to variable first
    |
376 |                 if out[k].ndim == 1:
377 |                     raise ValueError(
378 |                         f"Field {k} in output from module {mname} has only one dimension (assumed to be batch-like); it must have a second irreps dimension even if irreps.dim == 1 (i.e. a single per atom scalar must have shape [N_at, 1], not [N_at])"
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
379 |                     )
380 |                 elif out[k].shape[-1] != ir.dim:
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\test.py:380:17: RET506 Unnecessary `elif` after `raise` statement
    |
378 |                         f"Field {k} in output from module {mname} has only one dimension (assumed to be batch-like); it must have a second irreps dimension even if irreps.dim == 1 (i.e. a single per atom scalar must have shape [N_at, 1], not [N_at])"
379 |                     )
380 |                 elif out[k].shape[-1] != ir.dim:
    |                 ^^^^ RET506
381 |                     raise ValueError(
382 |                         f"Field {k} in output from {mname} has last dimension {out[k].shape[-1]} but its irreps {ir} indicate last dimension {ir.dim}"
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\NequIP\utils\test.py:381:27: TRY003 Avoid specifying long messages outside the exception class
    |
379 |                       )
380 |                   elif out[k].shape[-1] != ir.dim:
381 |                       raise ValueError(
    |  ___________________________^
382 | |                         f"Field {k} in output from {mname} has last dimension {out[k].shape[-1]} but its irreps {ir} indicate last dimension {ir.dim}"
383 | |                     )
    | |_____________________^ TRY003
384 |           return
    |

src\stk_search\geom3d\models\NequIP\utils\test.py:382:25: EM102 Exception must not use an f-string literal, assign to variable first
    |
380 |                 elif out[k].shape[-1] != ir.dim:
381 |                     raise ValueError(
382 |                         f"Field {k} in output from {mname} has last dimension {out[k].shape[-1]} but its irreps {ir} indicate last dimension {ir.dim}"
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
383 |                     )
384 |         return
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\NequIP\utils\tp_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\tp_utils.py:4:5: D103 Missing docstring in public function
  |
4 | def tp_path_exists(irreps_in1, irreps_in2, ir_out):
  |     ^^^^^^^^^^^^^^ D103
5 |     irreps_in1 = o3.Irreps(irreps_in1).simplify()
6 |     irreps_in2 = o3.Irreps(irreps_in2).simplify()
  |

src\stk_search\geom3d\models\NequIP\utils\versions.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\versions.py:16:5: D103 Missing docstring in public function
   |
16 | def get_config_code_versions(config) -> Tuple[dict, dict]:
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ D103
17 |     code_versions = {}
18 |     for code in _DEFAULT_VERSION_CODES:
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:16:41: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
16 | def get_config_code_versions(config) -> Tuple[dict, dict]:
   |                                         ^^^^^ FA100
17 |     code_versions = {}
18 |     for code in _DEFAULT_VERSION_CODES:
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:29:5: D103 Missing docstring in public function
   |
29 | def get_current_code_versions(config) -> Tuple[dict, dict]:
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ D103
30 |     code_versions = {}
31 |     for code in _DEFAULT_VERSION_CODES:
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:29:42: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
29 | def get_current_code_versions(config) -> Tuple[dict, dict]:
   |                                          ^^^^^ FA100
30 |     code_versions = {}
31 |     for code in _DEFAULT_VERSION_CODES:
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:37:9: PLW2901 `for` loop variable `builder` overwritten by assignment target
   |
35 |         if not isinstance(builder, str):
36 |             continue
37 |         builder = builder.split(".")
   |         ^^^^^^^ PLW2901
38 |         if len(builder) > 1:
39 |             # it's not a single name which is from NequIP
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:46:5: D103 Missing docstring in public function
   |
46 | def check_code_version(config, add_to_config: bool = False):
   |     ^^^^^^^^^^^^^^^^^^ D103
47 |     current_code_versions, current_code_commits = get_current_code_versions(config)
48 |     code_versions, code_commits = get_config_code_versions(config)
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:46:32: FBT001 Boolean-typed positional argument in function definition
   |
46 | def check_code_version(config, add_to_config: bool = False):
   |                                ^^^^^^^^^^^^^ FBT001
47 |     current_code_versions, current_code_commits = get_current_code_versions(config)
48 |     code_versions, code_commits = get_config_code_versions(config)
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:46:32: FBT002 Boolean default positional argument in function definition
   |
46 | def check_code_version(config, add_to_config: bool = False):
   |                                ^^^^^^^^^^^^^ FBT002
47 |     current_code_versions, current_code_commits = get_current_code_versions(config)
48 |     code_versions, code_commits = get_config_code_versions(config)
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:54:17: G004 Logging statement uses f-string
   |
52 |           if version != current_code_versions.get(code, version):
53 |               logging.error(
54 |                   "Loading a saved model created with different library version(s) may cause issues."
   |  _________________^
55 | |                 f" Current {code} version: {current_code_versions[code]} "
56 | |                 f"vs  original version: {version}"
   | |__________________________________________________^ G004
57 |               )
   |

src\stk_search\geom3d\models\NequIP\utils\versions.py:63:17: G004 Logging statement uses f-string
   |
61 |           if commit != current_code_commits.get(code, commit):
62 |               logging.error(
63 |                   "Loading a saved model created with different library git commit(s) may cause issues."
   |  _________________^
64 | |                 f" Currently {code}'s git commit: {current_code_commits[code]} "
65 | |                 f"vs  original commit: {commit}"
   | |________________________________________________^ G004
66 |               )
   |

src\stk_search\geom3d\models\NequIP\utils\wandb.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\NequIP\utils\wandb.py:7:5: D103 Missing docstring in public function
  |
7 | def init_n_update(config):
  |     ^^^^^^^^^^^^^ D103
8 |     conf_dict = dict(config)
9 |     # wandb mangles keys (in terms of type) as well, but we can't easily correct that because there are many ambiguous edge cases. (E.g. string "-1" vs int -1 as keys, are they different config keys?)
  |

src\stk_search\geom3d\models\NequIP\utils\wandb.py:11:15: TRY003 Avoid specifying long messages outside the exception class
   |
 9 |       # wandb mangles keys (in terms of type) as well, but we can't easily correct that because there are many ambiguous edge cases. (E.g. string "-1" vs int -1 as keys, are they different config keys?)
10 |       if any(not isinstance(k, str) for k in conf_dict):
11 |           raise TypeError(
   |  _______________^
12 | |             "Due to wandb limitations, only string keys are supported in configurations."
13 | |         )
   | |_________^ TRY003
14 |   
15 |       # download from wandb set up
   |

src\stk_search\geom3d\models\NequIP\utils\wandb.py:12:13: EM101 Exception must not use a string literal, assign to variable first
   |
10 |     if any(not isinstance(k, str) for k in conf_dict):
11 |         raise TypeError(
12 |             "Due to wandb limitations, only string keys are supported in configurations."
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
13 |         )
   |
   = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\NequIP\utils\wandb.py:29:12: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
27 |     for k, v_new in updated_parameters.items():
28 |         skip = False
29 |         if k in config.keys():
   |            ^^^^^^^^^^^^^^^^^^ SIM118
30 |             # double check the one sanitized by wandb
31 |             v_old = json_friendly_val(config[k])
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\models\NequIP\utils\wandb.py:35:26: G004 Logging statement uses f-string
   |
33 |                 skip = True
34 |         if skip:
35 |             logging.info(f"# skipping wandb update {k} from {v_old} to {v_new}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
36 |         else:
37 |             config.update({k: v_new})
   |

src\stk_search\geom3d\models\NequIP\utils\wandb.py:38:26: G004 Logging statement uses f-string
   |
36 |         else:
37 |             config.update({k: v_new})
38 |             logging.info(f"# wandb update {k} from {v_old} to {v_new}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
39 |     return config
   |

src\stk_search\geom3d\models\NequIP\utils\wandb.py:42:5: D103 Missing docstring in public function
   |
42 | def resume(config):
   |     ^^^^^^ D103
43 |     # resume to the old wandb run
44 |     wandb.init(
   |

src\stk_search\geom3d\models\PNA\PNA.py:1:1: N999 Invalid module name: 'PNA'
src\stk_search\geom3d\models\PNA\PNA.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """credit to https://github.com/lukecavabarrett/PNA/blob/master/models/pytorch_geometric/PNA.py
2 | | and https://github.com/wdimmy/GNN_Molecule_Retrieval/tree/main/PNA
3 | | """
  | |___^ D205
4 |   from typing import Dict, List, Optional
  |
  = help: Insert single blank line

src\stk_search\geom3d\models\PNA\PNA.py:1:1: D400 First line should end with a period
  |
1 | / """credit to https://github.com/lukecavabarrett/PNA/blob/master/models/pytorch_geometric/PNA.py
2 | | and https://github.com/wdimmy/GNN_Molecule_Retrieval/tree/main/PNA
3 | | """
  | |___^ D400
4 |   from typing import Dict, List, Optional
  |
  = help: Add period

src\stk_search\geom3d\models\PNA\PNA.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """credit to https://github.com/lukecavabarrett/PNA/blob/master/models/pytorch_geometric/PNA.py
2 | | and https://github.com/wdimmy/GNN_Molecule_Retrieval/tree/main/PNA
3 | | """
  | |___^ D415
4 |   from typing import Dict, List, Optional
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\PNA\PNA.py:7:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
6 | import torch
7 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
8 | from ogb.graphproppred.mol_encoder import AtomEncoder, BondEncoder
9 | from torch import Tensor, nn
  |

src\stk_search\geom3d\models\PNA\PNA.py:21:7: D101 Missing docstring in public class
   |
21 | class PNAConv(MessagePassing):
   |       ^^^^^^^ D101
22 |     def __init__(self, in_channels: int, out_channels: int,
23 |                  aggregators: List[str], scalers: List[str], deg: Tensor,
   |

src\stk_search\geom3d\models\PNA\PNA.py:22:9: PLR0913 Too many arguments in function definition (10 > 5)
   |
21 | class PNAConv(MessagePassing):
22 |     def __init__(self, in_channels: int, out_channels: int,
   |         ^^^^^^^^ PLR0913
23 |                  aggregators: List[str], scalers: List[str], deg: Tensor,
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
   |

src\stk_search\geom3d\models\PNA\PNA.py:22:9: ANN204 Missing return type annotation for special method `__init__`
   |
21 | class PNAConv(MessagePassing):
22 |     def __init__(self, in_channels: int, out_channels: int,
   |         ^^^^^^^^ ANN204
23 |                  aggregators: List[str], scalers: List[str], deg: Tensor,
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PNA\PNA.py:22:9: D107 Missing docstring in `__init__`
   |
21 | class PNAConv(MessagePassing):
22 |     def __init__(self, in_channels: int, out_channels: int,
   |         ^^^^^^^^ D107
23 |                  aggregators: List[str], scalers: List[str], deg: Tensor,
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
   |

src\stk_search\geom3d\models\PNA\PNA.py:23:31: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
21 | class PNAConv(MessagePassing):
22 |     def __init__(self, in_channels: int, out_channels: int,
23 |                  aggregators: List[str], scalers: List[str], deg: Tensor,
   |                               ^^^^ FA100
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
25 |                  pre_layers: int = 1, post_layers: int = 1,
   |

src\stk_search\geom3d\models\PNA\PNA.py:23:51: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
21 | class PNAConv(MessagePassing):
22 |     def __init__(self, in_channels: int, out_channels: int,
23 |                  aggregators: List[str], scalers: List[str], deg: Tensor,
   |                                                   ^^^^ FA100
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
25 |                  pre_layers: int = 1, post_layers: int = 1,
   |

src\stk_search\geom3d\models\PNA\PNA.py:24:28: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
22 |     def __init__(self, in_channels: int, out_channels: int,
23 |                  aggregators: List[str], scalers: List[str], deg: Tensor,
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
   |                            ^^^^^^^^ FA100
25 |                  pre_layers: int = 1, post_layers: int = 1,
26 |                  divide_input: bool = False, **kwargs):
   |

src\stk_search\geom3d\models\PNA\PNA.py:26:18: FBT001 Boolean-typed positional argument in function definition
   |
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
25 |                  pre_layers: int = 1, post_layers: int = 1,
26 |                  divide_input: bool = False, **kwargs):
   |                  ^^^^^^^^^^^^ FBT001
27 |         super(PNAConv, self).__init__(aggr=None, node_dim=0, **kwargs)
   |

src\stk_search\geom3d\models\PNA\PNA.py:26:18: FBT002 Boolean default positional argument in function definition
   |
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
25 |                  pre_layers: int = 1, post_layers: int = 1,
26 |                  divide_input: bool = False, **kwargs):
   |                  ^^^^^^^^^^^^ FBT002
27 |         super(PNAConv, self).__init__(aggr=None, node_dim=0, **kwargs)
   |

src\stk_search\geom3d\models\PNA\PNA.py:26:46: ANN003 Missing type annotation for `**kwargs`
   |
24 |                  edge_dim: Optional[int] = None, towers: int = 1,
25 |                  pre_layers: int = 1, post_layers: int = 1,
26 |                  divide_input: bool = False, **kwargs):
   |                                              ^^^^^^^^ ANN003
27 |         super(PNAConv, self).__init__(aggr=None, node_dim=0, **kwargs)
   |

src\stk_search\geom3d\models\PNA\PNA.py:27:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
25 |                  pre_layers: int = 1, post_layers: int = 1,
26 |                  divide_input: bool = False, **kwargs):
27 |         super(PNAConv, self).__init__(aggr=None, node_dim=0, **kwargs)
   |              ^^^^^^^^^^^^^^^ UP008
28 | 
29 |         if divide_input:
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\PNA\PNA.py:30:13: S101 Use of `assert` detected
   |
29 |         if divide_input:
30 |             assert in_channels % towers == 0
   |             ^^^^^^ S101
31 |         assert out_channels % towers == 0
   |

src\stk_search\geom3d\models\PNA\PNA.py:31:9: S101 Use of `assert` detected
   |
29 |         if divide_input:
30 |             assert in_channels % towers == 0
31 |         assert out_channels % towers == 0
   |         ^^^^^^ S101
32 | 
33 |         self.in_channels = in_channels
   |

src\stk_search\geom3d\models\PNA\PNA.py:47:23: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
45 |         total_no_vertices = deg.sum()
46 |         bin_degrees = torch.arange(len(deg))
47 |         self.avg_deg: Dict[str, float] = {
   |                       ^^^^ FA100
48 |             "lin": ((bin_degrees * deg).sum() / total_no_vertices).item(),
49 |             "log": (((bin_degrees + 1).log() * deg).sum() / total_no_vertices).item(),
   |

src\stk_search\geom3d\models\PNA\PNA.py:76:9: D102 Missing docstring in public method
   |
74 |         self.reset_parameters()
75 | 
76 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
77 |         for nn in self.pre_nns:
78 |             reset(nn)
   |

src\stk_search\geom3d\models\PNA\PNA.py:77:13: F402 Import `nn` from line 9 shadowed by loop variable
   |
76 |     def reset_parameters(self):
77 |         for nn in self.pre_nns:
   |             ^^ F402
78 |             reset(nn)
79 |         for nn in self.post_nns:
   |

src\stk_search\geom3d\models\PNA\PNA.py:83:9: D102 Missing docstring in public method
   |
81 |         self.lin.reset_parameters()
82 | 
83 |     def forward(self, x: Tensor, edge_index: Adj,
   |         ^^^^^^^ D102
84 |                 edge_attr: OptTensor = None) -> Tensor:
   |

src\stk_search\geom3d\models\PNA\PNA.py:99:9: D102 Missing docstring in public method
    |
 97 |         return self.lin(out)
 98 | 
 99 |     def message(self, x_i: Tensor, x_j: Tensor,
    |         ^^^^^^^ D102
100 |                 edge_attr: OptTensor) -> Tensor:
    |

src\stk_search\geom3d\models\PNA\PNA.py:114:9: D102 Missing docstring in public method
    |
112 |         return torch.stack(hs, dim=1)
113 | 
114 |     def aggregate(self, inputs: Tensor, index: Tensor,
    |         ^^^^^^^^^ D102
115 |                   dim_size: Optional[int] = None) -> Tensor:
116 |         outs = [aggr(inputs, index, dim_size) for aggr in self.aggregators]
    |

src\stk_search\geom3d\models\PNA\PNA.py:115:29: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
114 |     def aggregate(self, inputs: Tensor, index: Tensor,
115 |                   dim_size: Optional[int] = None) -> Tensor:
    |                             ^^^^^^^^ FA100
116 |         outs = [aggr(inputs, index, dim_size) for aggr in self.aggregators]
117 |         out = torch.cat(outs, dim=-1)
    |

src\stk_search\geom3d\models\PNA\PNA.py:124:7: D101 Missing docstring in public class
    |
124 | class PNA(nn.Module):
    |       ^^^ D101
125 |     def __init__(self, num_layer, emb_dim, dropout_ratio, deg):
126 |         super().__init__()
    |

src\stk_search\geom3d\models\PNA\PNA.py:125:9: ANN204 Missing return type annotation for special method `__init__`
    |
124 | class PNA(nn.Module):
125 |     def __init__(self, num_layer, emb_dim, dropout_ratio, deg):
    |         ^^^^^^^^ ANN204
126 |         super().__init__()
127 |         self.atom_encoder = AtomEncoder(emb_dim)
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PNA\PNA.py:125:9: D107 Missing docstring in `__init__`
    |
124 | class PNA(nn.Module):
125 |     def __init__(self, num_layer, emb_dim, dropout_ratio, deg):
    |         ^^^^^^^^ D107
126 |         super().__init__()
127 |         self.atom_encoder = AtomEncoder(emb_dim)
    |

src\stk_search\geom3d\models\PNA\PNA.py:142:9: D102 Missing docstring in public method
    |
140 |             self.batch_norms.append(BatchNorm(emb_dim))
141 | 
142 |     def get_graph_representation(self, batch):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
143 |         x = self.node_emb(batch.x)
    |

src\stk_search\geom3d\models\PNA\PNA.py:151:16: RET504 Unnecessary assignment to `h_graph` before `return` statement
    |
150 |         h_graph = global_mean_pool(x, batch.batch)
151 |         return h_graph
    |                ^^^^^^^ RET504
152 | 
153 |     def forward(self, *argv):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\PNA\PNA.py:153:9: D102 Missing docstring in public method
    |
151 |         return h_graph
152 | 
153 |     def forward(self, *argv):
    |         ^^^^^^^ D102
154 |         if len(argv) == 3:
155 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
    |

src\stk_search\geom3d\models\PNA\PNA.py:153:23: ANN002 Missing type annotation for `*argv`
    |
151 |         return h_graph
152 | 
153 |     def forward(self, *argv):
    |                       ^^^^^ ANN002
154 |         if len(argv) == 3:
155 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
    |

src\stk_search\geom3d\models\PNA\PNA.py:154:25: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
153 |     def forward(self, *argv):
154 |         if len(argv) == 3:
    |                         ^ PLR2004
155 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
156 |         elif len(argv) == 1:
    |

src\stk_search\geom3d\models\PNA\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\PNA\__init__.py:1:18: F401 `.PNA.PNA` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .PNA import PNA
  |                  ^^^ F401
  |
  = help: Use an explicit re-export: `PNA as PNA`

src\stk_search\geom3d\models\PNA\aggregators.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\PNA\aggregators.py:10:5: D103 Missing docstring in public function
   |
 8 | # For an example see https://github.com/rusty1s/pytorch_geometric/blob/master/examples/PNA.py
 9 | 
10 | def aggregate_sum(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |     ^^^^^^^^^^^^^ D103
11 |     return scatter(src, index, 0, None, dim_size, reduce="sum")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:10:57: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
 8 | # For an example see https://github.com/rusty1s/pytorch_geometric/blob/master/examples/PNA.py
 9 | 
10 | def aggregate_sum(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |                                                         ^^^^^^^^ FA100
11 |     return scatter(src, index, 0, None, dim_size, reduce="sum")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:14:5: D103 Missing docstring in public function
   |
14 | def aggregate_mean(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |     ^^^^^^^^^^^^^^ D103
15 |     return scatter(src, index, 0, None, dim_size, reduce="mean")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:14:58: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
14 | def aggregate_mean(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |                                                          ^^^^^^^^ FA100
15 |     return scatter(src, index, 0, None, dim_size, reduce="mean")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:18:5: D103 Missing docstring in public function
   |
18 | def aggregate_min(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |     ^^^^^^^^^^^^^ D103
19 |     return scatter(src, index, 0, None, dim_size, reduce="min")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:18:57: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
18 | def aggregate_min(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |                                                         ^^^^^^^^ FA100
19 |     return scatter(src, index, 0, None, dim_size, reduce="min")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:22:5: D103 Missing docstring in public function
   |
22 | def aggregate_max(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |     ^^^^^^^^^^^^^ D103
23 |     return scatter(src, index, 0, None, dim_size, reduce="max")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:22:57: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
22 | def aggregate_max(src: Tensor, index: Tensor, dim_size: Optional[int]):
   |                                                         ^^^^^^^^ FA100
23 |     return scatter(src, index, 0, None, dim_size, reduce="max")
   |

src\stk_search\geom3d\models\PNA\aggregators.py:26:5: D103 Missing docstring in public function
   |
26 | def aggregate_var(src, index, dim_size):
   |     ^^^^^^^^^^^^^ D103
27 |     mean = aggregate_mean(src, index, dim_size)
28 |     mean_squares = aggregate_mean(src * src, index, dim_size)
   |

src\stk_search\geom3d\models\PNA\aggregators.py:32:5: D103 Missing docstring in public function
   |
32 | def aggregate_std(src, index, dim_size):
   |     ^^^^^^^^^^^^^ D103
33 |     return torch.sqrt(torch.relu(aggregate_var(src, index, dim_size)) + 1e-5)
   |

src\stk_search\geom3d\models\PNA\scalers.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\PNA\scalers.py:9:5: D103 Missing docstring in public function
   |
 7 | # For an example see https://github.com/rusty1s/pytorch_geometric/blob/master/examples/PNA.py
 8 | 
 9 | def scale_identity(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |     ^^^^^^^^^^^^^^ D103
10 |     return src
   |

src\stk_search\geom3d\models\PNA\scalers.py:9:33: ARG001 Unused function argument: `deg`
   |
 7 | # For an example see https://github.com/rusty1s/pytorch_geometric/blob/master/examples/PNA.py
 8 | 
 9 | def scale_identity(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |                                 ^^^ ARG001
10 |     return src
   |

src\stk_search\geom3d\models\PNA\scalers.py:9:46: ARG001 Unused function argument: `avg_deg`
   |
 7 | # For an example see https://github.com/rusty1s/pytorch_geometric/blob/master/examples/PNA.py
 8 | 
 9 | def scale_identity(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |                                              ^^^^^^^ ARG001
10 |     return src
   |

src\stk_search\geom3d\models\PNA\scalers.py:9:55: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
 7 | # For an example see https://github.com/rusty1s/pytorch_geometric/blob/master/examples/PNA.py
 8 | 
 9 | def scale_identity(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |                                                       ^^^^ FA100
10 |     return src
   |

src\stk_search\geom3d\models\PNA\scalers.py:13:5: D103 Missing docstring in public function
   |
13 | def scale_amplification(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |     ^^^^^^^^^^^^^^^^^^^ D103
14 |     return src * (torch.log(deg + 1) / avg_deg["log"])
   |

src\stk_search\geom3d\models\PNA\scalers.py:13:60: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
13 | def scale_amplification(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |                                                            ^^^^ FA100
14 |     return src * (torch.log(deg + 1) / avg_deg["log"])
   |

src\stk_search\geom3d\models\PNA\scalers.py:17:5: D103 Missing docstring in public function
   |
17 | def scale_attenuation(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |     ^^^^^^^^^^^^^^^^^ D103
18 |     scale = avg_deg["log"] / torch.log(deg + 1)
19 |     scale[deg == 0] = 1
   |

src\stk_search\geom3d\models\PNA\scalers.py:17:58: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
17 | def scale_attenuation(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |                                                          ^^^^ FA100
18 |     scale = avg_deg["log"] / torch.log(deg + 1)
19 |     scale[deg == 0] = 1
   |

src\stk_search\geom3d\models\PNA\scalers.py:23:5: D103 Missing docstring in public function
   |
23 | def scale_linear(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |     ^^^^^^^^^^^^ D103
24 |     return src * (deg / avg_deg["lin"])
   |

src\stk_search\geom3d\models\PNA\scalers.py:23:53: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
23 | def scale_linear(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |                                                     ^^^^ FA100
24 |     return src * (deg / avg_deg["lin"])
   |

src\stk_search\geom3d\models\PNA\scalers.py:27:5: D103 Missing docstring in public function
   |
27 | def scale_inverse_linear(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |     ^^^^^^^^^^^^^^^^^^^^ D103
28 |     scale = avg_deg["lin"] / deg
29 |     scale[deg == 0] = 1
   |

src\stk_search\geom3d\models\PNA\scalers.py:27:61: FA100 Add `from __future__ import annotations` to simplify `typing.Dict`
   |
27 | def scale_inverse_linear(src: Tensor, deg: Tensor, avg_deg: Dict[str, float]):
   |                                                             ^^^^ FA100
28 |     scale = avg_deg["lin"] / deg
29 |     scale[deg == 0] = 1
   |

src\stk_search\geom3d\models\PaiNN.py:1:1: N999 Invalid module name: 'PaiNN'
src\stk_search\geom3d\models\PaiNN.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """credit to https://github.com/atomistic-machine-learning/SchNetpack/blob/dev/src/SchNetpack/representation/PaiNN.py
2 | | """
  | |___^ D200
3 |   from typing import Callable, Optional
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\PaiNN.py:1:1: D400 First line should end with a period
  |
1 | / """credit to https://github.com/atomistic-machine-learning/SchNetpack/blob/dev/src/SchNetpack/representation/PaiNN.py
2 | | """
  | |___^ D400
3 |   from typing import Callable, Optional
  |
  = help: Add period

src\stk_search\geom3d\models\PaiNN.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """credit to https://github.com/atomistic-machine-learning/SchNetpack/blob/dev/src/SchNetpack/representation/PaiNN.py
2 | | """
  | |___^ D415
3 |   from typing import Callable, Optional
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN.py:6:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
5 | import torch
6 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
7 | from torch import nn
8 | from torch_geometric.utils import scatter
  |

src\stk_search\geom3d\models\PaiNN.py:23:9: ANN204 Missing return type annotation for special method `__init__`
   |
21 |     r"""PaiNN interaction block for modeling equivariant interactions of atomistic systems."""
22 | 
23 |     def __init__(self, n_atom_basis: int, activation: Callable):
   |         ^^^^^^^^ ANN204
24 |         """Args:
25 |         ----
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PaiNN.py:24:9: D205 1 blank line required between summary line and description
   |
23 |       def __init__(self, n_atom_basis: int, activation: Callable):
24 |           """Args:
   |  _________^
25 | |         ----
26 | |             n_atom_basis: number of features to describe atomic environments.
27 | |             activation: if None, no activation function is used.
28 | |             epsilon: stability constant added in norm to prevent numerical instabilities
29 | | 
30 | |         """
   | |___________^ D205
31 |           super(PaiNNInteraction, self).__init__()
32 |           self.n_atom_basis = n_atom_basis
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN.py:24:9: D400 First line should end with a period
   |
23 |       def __init__(self, n_atom_basis: int, activation: Callable):
24 |           """Args:
   |  _________^
25 | |         ----
26 | |             n_atom_basis: number of features to describe atomic environments.
27 | |             activation: if None, no activation function is used.
28 | |             epsilon: stability constant added in norm to prevent numerical instabilities
29 | | 
30 | |         """
   | |___________^ D400
31 |           super(PaiNNInteraction, self).__init__()
32 |           self.n_atom_basis = n_atom_basis
   |
   = help: Add period

src\stk_search\geom3d\models\PaiNN.py:24:9: D415 First line should end with a period, question mark, or exclamation point
   |
23 |       def __init__(self, n_atom_basis: int, activation: Callable):
24 |           """Args:
   |  _________^
25 | |         ----
26 | |             n_atom_basis: number of features to describe atomic environments.
27 | |             activation: if None, no activation function is used.
28 | |             epsilon: stability constant added in norm to prevent numerical instabilities
29 | | 
30 | |         """
   | |___________^ D415
31 |           super(PaiNNInteraction, self).__init__()
32 |           self.n_atom_basis = n_atom_basis
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN.py:31:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
30 |         """
31 |         super(PaiNNInteraction, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
32 |         self.n_atom_basis = n_atom_basis
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\PaiNN.py:39:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
37 |         )
38 | 
39 |     def forward(
   |         ^^^^^^^ PLR0913
40 |         self,
41 |         q: torch.Tensor,
   |

src\stk_search\geom3d\models\PaiNN.py:39:9: D417 Missing argument descriptions in the docstring for `forward`: `Wij`, `dir_ij`, `idx_i`, `idx_j`, `mu`, `n_atoms`
   |
37 |         )
38 | 
39 |     def forward(
   |         ^^^^^^^ D417
40 |         self,
41 |         q: torch.Tensor,
   |

src\stk_search\geom3d\models\PaiNN.py:43:9: N803 Argument name `Wij` should be lowercase
   |
41 |         q: torch.Tensor,
42 |         mu: torch.Tensor,
43 |         Wij: torch.Tensor,
   |         ^^^^^^^^^^^^^^^^^ N803
44 |         dir_ij: torch.Tensor,
45 |         idx_i: torch.Tensor,
   |

src\stk_search\geom3d\models\PaiNN.py:68:13: N806 Variable `dmuR` in function should be lowercase
   |
66 |         x = Wij * xj
67 | 
68 |         dq, dmuR, dmumu = torch.split(x, self.n_atom_basis, dim=-1)
   |             ^^^^ N806
69 |         dq = scatter_add(dq, idx_i, dim_size=n_atoms)
70 |         dmu = dmuR * dir_ij[..., None] + dmumu * muj
   |

src\stk_search\geom3d\models\PaiNN.py:82:9: ANN204 Missing return type annotation for special method `__init__`
   |
80 |     r"""PaiNN interaction block for mixing on atom features."""
81 | 
82 |     def __init__(self, n_atom_basis: int, activation: Callable, epsilon: float = 1e-8):
   |         ^^^^^^^^ ANN204
83 |         """Args:
84 |         ----
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PaiNN.py:83:9: D205 1 blank line required between summary line and description
   |
82 |       def __init__(self, n_atom_basis: int, activation: Callable, epsilon: float = 1e-8):
83 |           """Args:
   |  _________^
84 | |         ----
85 | |             n_atom_basis: number of features to describe atomic environments.
86 | |             activation: if None, no activation function is used.
87 | |             epsilon: stability constant added in norm to prevent numerical instabilities
88 | | 
89 | |         """
   | |___________^ D205
90 |           super(PaiNNMixing, self).__init__()
91 |           self.n_atom_basis = n_atom_basis
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN.py:83:9: D400 First line should end with a period
   |
82 |       def __init__(self, n_atom_basis: int, activation: Callable, epsilon: float = 1e-8):
83 |           """Args:
   |  _________^
84 | |         ----
85 | |             n_atom_basis: number of features to describe atomic environments.
86 | |             activation: if None, no activation function is used.
87 | |             epsilon: stability constant added in norm to prevent numerical instabilities
88 | | 
89 | |         """
   | |___________^ D400
90 |           super(PaiNNMixing, self).__init__()
91 |           self.n_atom_basis = n_atom_basis
   |
   = help: Add period

src\stk_search\geom3d\models\PaiNN.py:83:9: D415 First line should end with a period, question mark, or exclamation point
   |
82 |       def __init__(self, n_atom_basis: int, activation: Callable, epsilon: float = 1e-8):
83 |           """Args:
   |  _________^
84 | |         ----
85 | |             n_atom_basis: number of features to describe atomic environments.
86 | |             activation: if None, no activation function is used.
87 | |             epsilon: stability constant added in norm to prevent numerical instabilities
88 | | 
89 | |         """
   | |___________^ D415
90 |           super(PaiNNMixing, self).__init__()
91 |           self.n_atom_basis = n_atom_basis
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN.py:90:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
89 |         """
90 |         super(PaiNNMixing, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^ UP008
91 |         self.n_atom_basis = n_atom_basis
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\PaiNN.py:102:9: D417 Missing argument description in the docstring for `forward`: `mu`
    |
100 |         self.epsilon = epsilon
101 | 
102 |     def forward(self, q: torch.Tensor, mu: torch.Tensor):
    |         ^^^^^^^ D417
103 |         """Compute intraatomic mixing.
    |

src\stk_search\geom3d\models\PaiNN.py:115:9: N806 Variable `mu_V` in function should be lowercase
    |
113 |         ## intra-atomic
114 |         mu_mix = self.mu_channel_mix(mu)
115 |         mu_V, mu_W = torch.split(mu_mix, self.n_atom_basis, dim=-1)
    |         ^^^^ N806
116 |         mu_Vn = torch.sqrt(torch.sum(mu_V ** 2, dim=-2, keepdim=True) + self.epsilon)
    |

src\stk_search\geom3d\models\PaiNN.py:115:15: N806 Variable `mu_W` in function should be lowercase
    |
113 |         ## intra-atomic
114 |         mu_mix = self.mu_channel_mix(mu)
115 |         mu_V, mu_W = torch.split(mu_mix, self.n_atom_basis, dim=-1)
    |               ^^^^ N806
116 |         mu_Vn = torch.sqrt(torch.sum(mu_V ** 2, dim=-2, keepdim=True) + self.epsilon)
    |

src\stk_search\geom3d\models\PaiNN.py:116:9: N806 Variable `mu_Vn` in function should be lowercase
    |
114 |         mu_mix = self.mu_channel_mix(mu)
115 |         mu_V, mu_W = torch.split(mu_mix, self.n_atom_basis, dim=-1)
116 |         mu_Vn = torch.sqrt(torch.sum(mu_V ** 2, dim=-2, keepdim=True) + self.epsilon)
    |         ^^^^^ N806
117 | 
118 |         ctx = torch.cat([q, mu_Vn], dim=-1)
    |

src\stk_search\geom3d\models\PaiNN.py:132:5: D205 1 blank line required between summary line and description
    |
131 |   class PaiNN(nn.Module):
132 |       """PaiNN - polarizable interaction neural network
    |  _____^
133 | |     References:
134 | |     .. [#PaiNN1] Schütt, Unke, Gastegger:
135 | |        Equivariant message passing for the prediction of tensorial properties and molecular spectra.
136 | |        ICML 2021, http://proceedings.mlr.press/v139/schutt21a.html
137 | |     """
    | |_______^ D205
138 |   
139 |       def __init__(
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN.py:132:5: D400 First line should end with a period
    |
131 |   class PaiNN(nn.Module):
132 |       """PaiNN - polarizable interaction neural network
    |  _____^
133 | |     References:
134 | |     .. [#PaiNN1] Schütt, Unke, Gastegger:
135 | |        Equivariant message passing for the prediction of tensorial properties and molecular spectra.
136 | |        ICML 2021, http://proceedings.mlr.press/v139/schutt21a.html
137 | |     """
    | |_______^ D400
138 |   
139 |       def __init__(
    |
    = help: Add period

src\stk_search\geom3d\models\PaiNN.py:132:5: D415 First line should end with a period, question mark, or exclamation point
    |
131 |   class PaiNN(nn.Module):
132 |       """PaiNN - polarizable interaction neural network
    |  _____^
133 | |     References:
134 | |     .. [#PaiNN1] Schütt, Unke, Gastegger:
135 | |        Equivariant message passing for the prediction of tensorial properties and molecular spectra.
136 | |        ICML 2021, http://proceedings.mlr.press/v139/schutt21a.html
137 | |     """
    | |_______^ D415
138 |   
139 |       def __init__(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN.py:139:9: PLR0913 Too many arguments in function definition (14 > 5)
    |
137 |     """
138 | 
139 |     def __init__(
    |         ^^^^^^^^ PLR0913
140 |         self,
141 |         n_atom_basis: int,
    |

src\stk_search\geom3d\models\PaiNN.py:139:9: ANN204 Missing return type annotation for special method `__init__`
    |
137 |     """
138 | 
139 |     def __init__(
    |         ^^^^^^^^ ANN204
140 |         self,
141 |         n_atom_basis: int,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PaiNN.py:147:16: RUF013 PEP 484 prohibits implicit `Optional`
    |
145 |         n_out: int,
146 |         readout: str,
147 |         gamma: float=None,
    |                ^^^^^ RUF013
148 |         n_out_hidden: int=None,
149 |         n_out_layers: int = 2,
    |
    = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\PaiNN.py:148:23: RUF013 PEP 484 prohibits implicit `Optional`
    |
146 |         readout: str,
147 |         gamma: float=None,
148 |         n_out_hidden: int=None,
    |                       ^^^ RUF013
149 |         n_out_layers: int = 2,
150 |         activation: Optional[Callable] = F.silu,
    |
    = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\PaiNN.py:150:21: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
148 |         n_out_hidden: int=None,
149 |         n_out_layers: int = 2,
150 |         activation: Optional[Callable] = F.silu,
    |                     ^^^^^^^^ FA100
151 |         max_z: int = 100,
152 |         shared_interactions: bool = False,
    |

src\stk_search\geom3d\models\PaiNN.py:152:9: FBT001 Boolean-typed positional argument in function definition
    |
150 |         activation: Optional[Callable] = F.silu,
151 |         max_z: int = 100,
152 |         shared_interactions: bool = False,
    |         ^^^^^^^^^^^^^^^^^^^ FBT001
153 |         shared_filters: bool = False,
154 |         epsilon: float = 1e-8,
    |

src\stk_search\geom3d\models\PaiNN.py:152:9: FBT002 Boolean default positional argument in function definition
    |
150 |         activation: Optional[Callable] = F.silu,
151 |         max_z: int = 100,
152 |         shared_interactions: bool = False,
    |         ^^^^^^^^^^^^^^^^^^^ FBT002
153 |         shared_filters: bool = False,
154 |         epsilon: float = 1e-8,
    |

src\stk_search\geom3d\models\PaiNN.py:153:9: FBT001 Boolean-typed positional argument in function definition
    |
151 |         max_z: int = 100,
152 |         shared_interactions: bool = False,
153 |         shared_filters: bool = False,
    |         ^^^^^^^^^^^^^^ FBT001
154 |         epsilon: float = 1e-8,
155 |     ):
    |

src\stk_search\geom3d\models\PaiNN.py:153:9: FBT002 Boolean default positional argument in function definition
    |
151 |         max_z: int = 100,
152 |         shared_interactions: bool = False,
153 |         shared_filters: bool = False,
    |         ^^^^^^^^^^^^^^ FBT002
154 |         epsilon: float = 1e-8,
155 |     ):
    |

src\stk_search\geom3d\models\PaiNN.py:156:9: D205 1 blank line required between summary line and description
    |
154 |           epsilon: float = 1e-8,
155 |       ):
156 |           """Args:
    |  _________^
157 | |         ----
158 | |             n_atom_basis: number of features to describe atomic environments.
159 | |                 This determines the size of each embedding vector; i.e. embeddings_dim.
160 | |             n_interactions: number of interaction blocks.
161 | |             radial_basis: layer for expanding interatomic distances in a basis set
162 | |             cutoff_fn: cutoff function
163 | |             activation: activation function
164 | |             shared_interactions: if True, share the weights across
165 | |                 interaction blocks.
166 | |             shared_interactions: if True, share the weights across
167 | |                 filter-generating networks.
168 | |             epsilon: stability constant added in norm to prevent numerical instabilities
169 | | 
170 | |         """
    | |___________^ D205
171 |           super(PaiNN, self).__init__()
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN.py:156:9: D400 First line should end with a period
    |
154 |           epsilon: float = 1e-8,
155 |       ):
156 |           """Args:
    |  _________^
157 | |         ----
158 | |             n_atom_basis: number of features to describe atomic environments.
159 | |                 This determines the size of each embedding vector; i.e. embeddings_dim.
160 | |             n_interactions: number of interaction blocks.
161 | |             radial_basis: layer for expanding interatomic distances in a basis set
162 | |             cutoff_fn: cutoff function
163 | |             activation: activation function
164 | |             shared_interactions: if True, share the weights across
165 | |                 interaction blocks.
166 | |             shared_interactions: if True, share the weights across
167 | |                 filter-generating networks.
168 | |             epsilon: stability constant added in norm to prevent numerical instabilities
169 | | 
170 | |         """
    | |___________^ D400
171 |           super(PaiNN, self).__init__()
    |
    = help: Add period

src\stk_search\geom3d\models\PaiNN.py:156:9: D415 First line should end with a period, question mark, or exclamation point
    |
154 |           epsilon: float = 1e-8,
155 |       ):
156 |           """Args:
    |  _________^
157 | |         ----
158 | |             n_atom_basis: number of features to describe atomic environments.
159 | |                 This determines the size of each embedding vector; i.e. embeddings_dim.
160 | |             n_interactions: number of interaction blocks.
161 | |             radial_basis: layer for expanding interatomic distances in a basis set
162 | |             cutoff_fn: cutoff function
163 | |             activation: activation function
164 | |             shared_interactions: if True, share the weights across
165 | |                 interaction blocks.
166 | |             shared_interactions: if True, share the weights across
167 | |                 filter-generating networks.
168 | |             epsilon: stability constant added in norm to prevent numerical instabilities
169 | | 
170 | |         """
    | |___________^ D415
171 |           super(PaiNN, self).__init__()
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN.py:171:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
170 |         """
171 |         super(PaiNN, self).__init__()
    |              ^^^^^^^^^^^^^ UP008
172 | 
173 |         self.n_atom_basis = n_atom_basis
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\PaiNN.py:218:9: D102 Missing docstring in public method
    |
216 |         )
217 | 
218 |     def create_output_layers(self):
    |         ^^^^^^^^^^^^^^^^^^^^ D102
219 |         outnet = build_mlp(
220 |             n_in=self.n_atom_basis,
    |

src\stk_search\geom3d\models\PaiNN.py:226:16: RET504 Unnecessary assignment to `outnet` before `return` statement
    |
224 |             activation=self.activation,
225 |         )
226 |         return outnet
    |                ^^^^^^ RET504
227 | 
228 |     def forward(self, x, positions, radius_edge_index, batch, return_latent=False, return_vector=False):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\PaiNN.py:228:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
226 |         return outnet
227 | 
228 |     def forward(self, x, positions, radius_edge_index, batch, return_latent=False, return_vector=False):
    |         ^^^^^^^ PLR0913
229 |         """Compute atomic representations/embeddings.
    |

src\stk_search\geom3d\models\PaiNN.py:228:9: D417 Missing argument descriptions in the docstring for `forward`: `batch`, `positions`, `radius_edge_index`, `return_latent`, `return_vector`, `x`
    |
226 |         return outnet
227 | 
228 |     def forward(self, x, positions, radius_edge_index, batch, return_latent=False, return_vector=False):
    |         ^^^^^^^ D417
229 |         """Compute atomic representations/embeddings.
    |

src\stk_search\geom3d\models\PaiNN.py:228:63: FBT002 Boolean default positional argument in function definition
    |
226 |         return outnet
227 | 
228 |     def forward(self, x, positions, radius_edge_index, batch, return_latent=False, return_vector=False):
    |                                                               ^^^^^^^^^^^^^ FBT002
229 |         """Compute atomic representations/embeddings.
    |

src\stk_search\geom3d\models\PaiNN.py:228:84: FBT002 Boolean default positional argument in function definition
    |
226 |         return outnet
227 | 
228 |     def forward(self, x, positions, radius_edge_index, batch, return_latent=False, return_vector=False):
    |                                                                                    ^^^^^^^^^^^^^ FBT002
229 |         """Compute atomic representations/embeddings.
    |

src\stk_search\geom3d\models\PaiNN.py:242:9: SIM108 Use ternary operator `atomic_numbers = x[:, 0] if x.dim() == 2 else x` instead of `if`-`else`-block
    |
241 |           """
242 |           if x.dim() == 2:
    |  _________^
243 | |             atomic_numbers = x[:, 0]
244 | |         else:
245 | |             atomic_numbers = x
    | |______________________________^ SIM108
246 |           n_atoms = atomic_numbers.size()[0]
    |
    = help: Replace `if`-`else`-block with `atomic_numbers = x[:, 0] if x.dim() == 2 else x`

src\stk_search\geom3d\models\PaiNN.py:242:23: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
241 |         """
242 |         if x.dim() == 2:
    |                       ^ PLR2004
243 |             atomic_numbers = x[:, 0]
244 |         else:
    |

src\stk_search\geom3d\models\PaiNN.py:283:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
281 |         return h
282 | 
283 |     def forward_with_gathered_index(self, gathered_x, positions, radius_edge_index, gathered_batch, periodic_index_mapping, return_latent=False, return_vector=False):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
284 |         idx_i, idx_j = radius_edge_index[0], radius_edge_index[1]
285 |         r_ij = positions[idx_i] - positions[idx_j]
    |

src\stk_search\geom3d\models\PaiNN.py:283:9: D102 Missing docstring in public method
    |
281 |         return h
282 | 
283 |     def forward_with_gathered_index(self, gathered_x, positions, radius_edge_index, gathered_batch, periodic_index_mapping, return_latent=False, return_vector=False):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
284 |         idx_i, idx_j = radius_edge_index[0], radius_edge_index[1]
285 |         r_ij = positions[idx_i] - positions[idx_j]
    |

src\stk_search\geom3d\models\PaiNN.py:283:125: FBT002 Boolean default positional argument in function definition
    |
281 |         return h
282 | 
283 |     def forward_with_gathered_index(self, gathered_x, positions, radius_edge_index, gathered_batch, periodic_index_mapping, return_latent=False, return_vector=False):
    |                                                                                                                             ^^^^^^^^^^^^^ FBT002
284 |         idx_i, idx_j = radius_edge_index[0], radius_edge_index[1]
285 |         r_ij = positions[idx_i] - positions[idx_j]
    |

src\stk_search\geom3d\models\PaiNN.py:283:146: FBT002 Boolean default positional argument in function definition
    |
281 |         return h
282 | 
283 |     def forward_with_gathered_index(self, gathered_x, positions, radius_edge_index, gathered_batch, periodic_index_mapping, return_latent=False, return_vector=False):
    |                                                                                                                                                  ^^^^^^^^^^^^^ FBT002
284 |         idx_i, idx_j = radius_edge_index[0], radius_edge_index[1]
285 |         r_ij = positions[idx_i] - positions[idx_j]
    |

src\stk_search\geom3d\models\PaiNN_utils.py:1:1: N999 Invalid module name: 'PaiNN_utils'
src\stk_search\geom3d\models\PaiNN_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\PaiNN_utils.py:5:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
4 | import torch
5 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
6 | from torch import nn
7 | from torch.nn.init import xavier_uniform_, zeros_
  |

src\stk_search\geom3d\models\PaiNN_utils.py:10:7: D101 Missing docstring in public class
   |
10 | class Dense(nn.Linear):
   |       ^^^^^ D101
11 |     def __init__(
12 |         self,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:11:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
10 | class Dense(nn.Linear):
11 |     def __init__(
   |         ^^^^^^^^ PLR0913
12 |         self,
13 |         in_features: int,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:11:9: ANN204 Missing return type annotation for special method `__init__`
   |
10 | class Dense(nn.Linear):
11 |     def __init__(
   |         ^^^^^^^^ ANN204
12 |         self,
13 |         in_features: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PaiNN_utils.py:11:9: D107 Missing docstring in `__init__`
   |
10 | class Dense(nn.Linear):
11 |     def __init__(
   |         ^^^^^^^^ D107
12 |         self,
13 |         in_features: int,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:15:9: FBT001 Boolean-typed positional argument in function definition
   |
13 |         in_features: int,
14 |         out_features: int,
15 |         bias: bool = True,
   |         ^^^^ FBT001
16 |         activation: Union[Callable, nn.Module] = None,
17 |         weight_init: Callable = xavier_uniform_,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:15:9: FBT002 Boolean default positional argument in function definition
   |
13 |         in_features: int,
14 |         out_features: int,
15 |         bias: bool = True,
   |         ^^^^ FBT002
16 |         activation: Union[Callable, nn.Module] = None,
17 |         weight_init: Callable = xavier_uniform_,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:16:21: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
14 |         out_features: int,
15 |         bias: bool = True,
16 |         activation: Union[Callable, nn.Module] = None,
   |                     ^^^^^ FA100
17 |         weight_init: Callable = xavier_uniform_,
18 |         bias_init: Callable = zeros_,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:22:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
20 |         self.weight_init = weight_init
21 |         self.bias_init = bias_init
22 |         super(Dense, self).__init__(in_features, out_features, bias)
   |              ^^^^^^^^^^^^^ UP008
23 | 
24 |         self.activation = activation
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\PaiNN_utils.py:28:9: D102 Missing docstring in public method
   |
26 |             self.activation = nn.Identity()
27 | 
28 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
29 |         self.weight_init(self.weight)
30 |         if self.bias is not None:
   |

src\stk_search\geom3d\models\PaiNN_utils.py:33:9: D102 Missing docstring in public method
   |
31 |             self.bias_init(self.bias)
32 | 
33 |     def forward(self, input: torch.Tensor):
   |         ^^^^^^^ D102
34 |         y = F.linear(input, self.weight, self.bias)
35 |         y = self.activation(y)
   |

src\stk_search\geom3d\models\PaiNN_utils.py:33:23: A002 Argument `input` is shadowing a Python builtin
   |
31 |             self.bias_init(self.bias)
32 | 
33 |     def forward(self, input: torch.Tensor):
   |                       ^^^^^ A002
34 |         y = F.linear(input, self.weight, self.bias)
35 |         y = self.activation(y)
   |

src\stk_search\geom3d\models\PaiNN_utils.py:36:16: RET504 Unnecessary assignment to `y` before `return` statement
   |
34 |         y = F.linear(input, self.weight, self.bias)
35 |         y = self.activation(y)
36 |         return y
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\PaiNN_utils.py:39:5: D103 Missing docstring in public function
   |
39 | def build_mlp(
   |     ^^^^^^^^^ D103
40 |     n_in: int,
41 |     n_out: int,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:42:15: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
40 |     n_in: int,
41 |     n_out: int,
42 |     n_hidden: Optional[Union[int, Sequence[int]]] = None,
   |               ^^^^^^^^ FA100
43 |     n_layers: int = 2,
44 |     activation: Callable = F.silu,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:42:24: FA100 Add `from __future__ import annotations` to simplify `typing.Union`
   |
40 |     n_in: int,
41 |     n_out: int,
42 |     n_hidden: Optional[Union[int, Sequence[int]]] = None,
   |                        ^^^^^ FA100
43 |     n_layers: int = 2,
44 |     activation: Callable = F.silu,
   |

src\stk_search\geom3d\models\PaiNN_utils.py:50:13: B007 Loop control variable `i` not used within loop body
   |
48 |         c_neurons = n_in
49 |         n_neurons = []
50 |         for i in range(n_layers):
   |             ^ B007
51 |             n_neurons.append(c_neurons)
52 |             c_neurons = max(n_out, c_neurons // 2)
   |
   = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\PaiNN_utils.py:60:21: RUF005 Consider `[n_in, *n_hidden, n_out]` instead of concatenation
   |
58 |         else:
59 |             n_hidden = list(n_hidden)
60 |         n_neurons = [n_in] + n_hidden + [n_out]
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF005
61 | 
62 |     # assign a Dense layer (with activation function) to each hidden layer
   |
   = help: Replace with `[n_in, *n_hidden, n_out]`

src\stk_search\geom3d\models\PaiNN_utils.py:71:12: RET504 Unnecessary assignment to `out_net` before `return` statement
   |
69 |     # put all layers together to make the network
70 |     out_net = nn.Sequential(*layers)
71 |     return out_net
   |            ^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\PaiNN_utils.py:74:5: D103 Missing docstring in public function
   |
74 | def scatter_add(
   |     ^^^^^^^^^^^ D103
75 |     x: torch.Tensor, idx_i: torch.Tensor, dim_size: int, dim: int = 0
76 | ) -> torch.Tensor:
   |

src\stk_search\geom3d\models\PaiNN_utils.py:87:12: RET504 Unnecessary assignment to `y` before `return` statement
   |
85 |     tmp = torch.zeros(shape, dtype=x.dtype, device=x.device)
86 |     y = tmp.index_add(dim, idx_i, x)
87 |     return y
   |            ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\PaiNN_utils.py:90:5: D103 Missing docstring in public function
   |
90 | def replicate_module(
   |     ^^^^^^^^^^^^^^^^ D103
91 |     module_factory: Callable[[], nn.Module], n: int, share_params: bool
92 | ):
   |

src\stk_search\geom3d\models\PaiNN_utils.py:91:54: FBT001 Boolean-typed positional argument in function definition
   |
90 | def replicate_module(
91 |     module_factory: Callable[[], nn.Module], n: int, share_params: bool
   |                                                      ^^^^^^^^^^^^ FBT001
92 | ):
93 |     if share_params:
   |

src\stk_search\geom3d\models\PaiNN_utils.py:103:9: ANN204 Missing return type annotation for special method `__init__`
    |
101 |     r"""Gaussian radial basis functions."""
102 | 
103 |     def __init__(self, n_rbf: int, cutoff: float, start: float=0.0, trainable: bool=False, gamma: float=None):
    |         ^^^^^^^^ ANN204
104 |         r"""Args:
105 |         ----
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PaiNN_utils.py:103:69: FBT001 Boolean-typed positional argument in function definition
    |
101 |     r"""Gaussian radial basis functions."""
102 | 
103 |     def __init__(self, n_rbf: int, cutoff: float, start: float=0.0, trainable: bool=False, gamma: float=None):
    |                                                                     ^^^^^^^^^ FBT001
104 |         r"""Args:
105 |         ----
    |

src\stk_search\geom3d\models\PaiNN_utils.py:103:69: FBT002 Boolean default positional argument in function definition
    |
101 |     r"""Gaussian radial basis functions."""
102 | 
103 |     def __init__(self, n_rbf: int, cutoff: float, start: float=0.0, trainable: bool=False, gamma: float=None):
    |                                                                     ^^^^^^^^^ FBT002
104 |         r"""Args:
105 |         ----
    |

src\stk_search\geom3d\models\PaiNN_utils.py:103:99: RUF013 PEP 484 prohibits implicit `Optional`
    |
101 |     r"""Gaussian radial basis functions."""
102 | 
103 |     def __init__(self, n_rbf: int, cutoff: float, start: float=0.0, trainable: bool=False, gamma: float=None):
    |                                                                                                   ^^^^^ RUF013
104 |         r"""Args:
105 |         ----
    |
    = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\PaiNN_utils.py:104:9: D205 1 blank line required between summary line and description
    |
103 |       def __init__(self, n_rbf: int, cutoff: float, start: float=0.0, trainable: bool=False, gamma: float=None):
104 |           r"""Args:
    |  _________^
105 | |         ----
106 | |             n_rbf: total number of Gaussian functions, :math:`N_g`.
107 | |             cutoff: center of last Gaussian function, :math:`\mu_{N_g}`
108 | |             start: center of first Gaussian function, :math:`\mu_0`.
109 | |             trainable: If True, widths and offset of Gaussian functions
110 | |                 are adjusted during training process.
111 | | 
112 | |         """
    | |___________^ D205
113 |           super(GaussianRBF, self).__init__()
114 |           self.n_rbf = n_rbf
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN_utils.py:104:9: D400 First line should end with a period
    |
103 |       def __init__(self, n_rbf: int, cutoff: float, start: float=0.0, trainable: bool=False, gamma: float=None):
104 |           r"""Args:
    |  _________^
105 | |         ----
106 | |             n_rbf: total number of Gaussian functions, :math:`N_g`.
107 | |             cutoff: center of last Gaussian function, :math:`\mu_{N_g}`
108 | |             start: center of first Gaussian function, :math:`\mu_0`.
109 | |             trainable: If True, widths and offset of Gaussian functions
110 | |                 are adjusted during training process.
111 | | 
112 | |         """
    | |___________^ D400
113 |           super(GaussianRBF, self).__init__()
114 |           self.n_rbf = n_rbf
    |
    = help: Add period

src\stk_search\geom3d\models\PaiNN_utils.py:104:9: D415 First line should end with a period, question mark, or exclamation point
    |
103 |       def __init__(self, n_rbf: int, cutoff: float, start: float=0.0, trainable: bool=False, gamma: float=None):
104 |           r"""Args:
    |  _________^
105 | |         ----
106 | |             n_rbf: total number of Gaussian functions, :math:`N_g`.
107 | |             cutoff: center of last Gaussian function, :math:`\mu_{N_g}`
108 | |             start: center of first Gaussian function, :math:`\mu_0`.
109 | |             trainable: If True, widths and offset of Gaussian functions
110 | |                 are adjusted during training process.
111 | | 
112 | |         """
    | |___________^ D415
113 |           super(GaussianRBF, self).__init__()
114 |           self.n_rbf = n_rbf
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN_utils.py:113:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
112 |         """
113 |         super(GaussianRBF, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^ UP008
114 |         self.n_rbf = n_rbf
115 |         self.gamma = gamma
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\PaiNN_utils.py:129:9: D102 Missing docstring in public method
    |
127 |             self.register_buffer("offsets", offset)
128 | 
129 |     def forward(self, inputs: torch.Tensor):
    |         ^^^^^^^ D102
130 |         if self.gamma is not None:
131 |             coeff = - self.gamma
    |

src\stk_search\geom3d\models\PaiNN_utils.py:137:5: D103 Missing docstring in public function
    |
137 | def gaussian_rbf(coeff, inputs, offsets):
    |     ^^^^^^^^^^^^ D103
138 |     diff = inputs[..., None] - offsets
139 |     y = torch.exp(coeff * torch.pow(diff, 2))
    |

src\stk_search\geom3d\models\PaiNN_utils.py:140:12: RET504 Unnecessary assignment to `y` before `return` statement
    |
138 |     diff = inputs[..., None] - offsets
139 |     y = torch.exp(coeff * torch.pow(diff, 2))
140 |     return y
    |            ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\PaiNN_utils.py:143:5: D417 Missing argument description in the docstring for `cosine_cutoff`: `input`
    |
143 | def cosine_cutoff(input: torch.Tensor, cutoff: torch.Tensor):
    |     ^^^^^^^^^^^^^ D417
144 |     """Behler-style cosine cutoff.
145 |     .. math::
    |

src\stk_search\geom3d\models\PaiNN_utils.py:143:19: A002 Argument `input` is shadowing a Python builtin
    |
143 | def cosine_cutoff(input: torch.Tensor, cutoff: torch.Tensor):
    |                   ^^^^^ A002
144 |     """Behler-style cosine cutoff.
145 |     .. math::
    |

src\stk_search\geom3d\models\PaiNN_utils.py:144:5: D205 1 blank line required between summary line and description
    |
143 |   def cosine_cutoff(input: torch.Tensor, cutoff: torch.Tensor):
144 |       """Behler-style cosine cutoff.
    |  _____^
145 | |     .. math::
146 | |        f(r) = \begin{cases}
147 | |         0.5 \times \\left[1 + \\cos\\left(\frac{\\pi r}{r_\text{cutoff}}\right)\right]
148 | |           & r < r_\text{cutoff} \\
149 | |             0 & r \\geqslant r_\text{cutoff} \\
150 | |             \\end{cases}
151 | | 
152 | |     Args:
153 | |     ----
154 | |         cutoff (float, optional): cutoff radius.
155 | | 
156 | |     """
    | |_______^ D205
157 |       # Compute values of cutoff function
158 |       input_cut = 0.5 * (torch.cos(input * math.pi / cutoff) + 1.0)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN_utils.py:144:5: D301 Use `r"""` if any backslashes in a docstring
    |
143 |   def cosine_cutoff(input: torch.Tensor, cutoff: torch.Tensor):
144 |       """Behler-style cosine cutoff.
    |  _____^
145 | |     .. math::
146 | |        f(r) = \begin{cases}
147 | |         0.5 \times \\left[1 + \\cos\\left(\frac{\\pi r}{r_\text{cutoff}}\right)\right]
148 | |           & r < r_\text{cutoff} \\
149 | |             0 & r \\geqslant r_\text{cutoff} \\
150 | |             \\end{cases}
151 | | 
152 | |     Args:
153 | |     ----
154 | |         cutoff (float, optional): cutoff radius.
155 | | 
156 | |     """
    | |_______^ D301
157 |       # Compute values of cutoff function
158 |       input_cut = 0.5 * (torch.cos(input * math.pi / cutoff) + 1.0)
    |
    = help: Add `r` prefix

src\stk_search\geom3d\models\PaiNN_utils.py:144:5: D400 First line should end with a period
    |
143 |   def cosine_cutoff(input: torch.Tensor, cutoff: torch.Tensor):
144 |       """Behler-style cosine cutoff.
    |  _____^
145 | |     .. math::
146 | |        f(r) = \begin{cases}
147 | |         0.5 \times \\left[1 + \\cos\\left(\frac{\\pi r}{r_\text{cutoff}}\right)\right]
148 | |           & r < r_\text{cutoff} \\
149 | |             0 & r \\geqslant r_\text{cutoff} \\
150 | |             \\end{cases}
151 | | 
152 | |     Args:
153 | |     ----
154 | |         cutoff (float, optional): cutoff radius.
155 | | 
156 | |     """
    | |_______^ D400
157 |       # Compute values of cutoff function
158 |       input_cut = 0.5 * (torch.cos(input * math.pi / cutoff) + 1.0)
    |
    = help: Add period

src\stk_search\geom3d\models\PaiNN_utils.py:144:5: D415 First line should end with a period, question mark, or exclamation point
    |
143 |   def cosine_cutoff(input: torch.Tensor, cutoff: torch.Tensor):
144 |       """Behler-style cosine cutoff.
    |  _____^
145 | |     .. math::
146 | |        f(r) = \begin{cases}
147 | |         0.5 \times \\left[1 + \\cos\\left(\frac{\\pi r}{r_\text{cutoff}}\right)\right]
148 | |           & r < r_\text{cutoff} \\
149 | |             0 & r \\geqslant r_\text{cutoff} \\
150 | |             \\end{cases}
151 | | 
152 | |     Args:
153 | |     ----
154 | |         cutoff (float, optional): cutoff radius.
155 | | 
156 | |     """
    | |_______^ D415
157 |       # Compute values of cutoff function
158 |       input_cut = 0.5 * (torch.cos(input * math.pi / cutoff) + 1.0)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN_utils.py:165:5: D205 1 blank line required between summary line and description
    |
164 |   class CosineCutoff(nn.Module):
165 |       r"""Behler-style cosine cutoff module.
    |  _____^
166 | |     .. math::
167 | |        f(r) = \begin{cases}
168 | |         0.5 \times \left[1 + \cos\left(\frac{\pi r}{r_\text{cutoff}}\right)\right]
169 | |           & r < r_\text{cutoff} \\
170 | |         0 & r \geqslant r_\text{cutoff} \\
171 | |         \end{cases}
172 | |     """
    | |_______^ D205
173 |   
174 |       def __init__(self, cutoff: float):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN_utils.py:165:5: D400 First line should end with a period
    |
164 |   class CosineCutoff(nn.Module):
165 |       r"""Behler-style cosine cutoff module.
    |  _____^
166 | |     .. math::
167 | |        f(r) = \begin{cases}
168 | |         0.5 \times \left[1 + \cos\left(\frac{\pi r}{r_\text{cutoff}}\right)\right]
169 | |           & r < r_\text{cutoff} \\
170 | |         0 & r \geqslant r_\text{cutoff} \\
171 | |         \end{cases}
172 | |     """
    | |_______^ D400
173 |   
174 |       def __init__(self, cutoff: float):
    |
    = help: Add period

src\stk_search\geom3d\models\PaiNN_utils.py:165:5: D415 First line should end with a period, question mark, or exclamation point
    |
164 |   class CosineCutoff(nn.Module):
165 |       r"""Behler-style cosine cutoff module.
    |  _____^
166 | |     .. math::
167 | |        f(r) = \begin{cases}
168 | |         0.5 \times \left[1 + \cos\left(\frac{\pi r}{r_\text{cutoff}}\right)\right]
169 | |           & r < r_\text{cutoff} \\
170 | |         0 & r \geqslant r_\text{cutoff} \\
171 | |         \end{cases}
172 | |     """
    | |_______^ D415
173 |   
174 |       def __init__(self, cutoff: float):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN_utils.py:174:9: ANN204 Missing return type annotation for special method `__init__`
    |
172 |     """
173 | 
174 |     def __init__(self, cutoff: float):
    |         ^^^^^^^^ ANN204
175 |         """Args:
176 |         ----
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\PaiNN_utils.py:175:9: D205 1 blank line required between summary line and description
    |
174 |       def __init__(self, cutoff: float):
175 |           """Args:
    |  _________^
176 | |         ----
177 | |             cutoff (float, optional): cutoff radius.
178 | | 
179 | |         """
    | |___________^ D205
180 |           super(CosineCutoff, self).__init__()
181 |           self.register_buffer("cutoff", torch.FloatTensor([cutoff]))
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\PaiNN_utils.py:175:9: D400 First line should end with a period
    |
174 |       def __init__(self, cutoff: float):
175 |           """Args:
    |  _________^
176 | |         ----
177 | |             cutoff (float, optional): cutoff radius.
178 | | 
179 | |         """
    | |___________^ D400
180 |           super(CosineCutoff, self).__init__()
181 |           self.register_buffer("cutoff", torch.FloatTensor([cutoff]))
    |
    = help: Add period

src\stk_search\geom3d\models\PaiNN_utils.py:175:9: D415 First line should end with a period, question mark, or exclamation point
    |
174 |       def __init__(self, cutoff: float):
175 |           """Args:
    |  _________^
176 | |         ----
177 | |             cutoff (float, optional): cutoff radius.
178 | | 
179 | |         """
    | |___________^ D415
180 |           super(CosineCutoff, self).__init__()
181 |           self.register_buffer("cutoff", torch.FloatTensor([cutoff]))
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\PaiNN_utils.py:180:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
179 |         """
180 |         super(CosineCutoff, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^ UP008
181 |         self.register_buffer("cutoff", torch.FloatTensor([cutoff]))
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\PaiNN_utils.py:183:9: D102 Missing docstring in public method
    |
181 |         self.register_buffer("cutoff", torch.FloatTensor([cutoff]))
182 | 
183 |     def forward(self, input: torch.Tensor):
    |         ^^^^^^^ D102
184 |         return cosine_cutoff(input, self.cutoff)
    |

src\stk_search\geom3d\models\PaiNN_utils.py:183:23: A002 Argument `input` is shadowing a Python builtin
    |
181 |         self.register_buffer("cutoff", torch.FloatTensor([cutoff]))
182 | 
183 |     def forward(self, input: torch.Tensor):
    |                       ^^^^^ A002
184 |         return cosine_cutoff(input, self.cutoff)
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:1:1: N999 Invalid module name: 'ProNet'
src\stk_search\geom3d\models\ProNet\ProNet.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Credit to https://github.com/divelab/DIG/blob/dig-stable/dig/threedgraph/method/ProNet/ProNet.py
2 | | """
  | |___^ D200
3 |   
4 |   import numpy as np
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\ProNet\ProNet.py:1:1: D400 First line should end with a period
  |
1 | / """Credit to https://github.com/divelab/DIG/blob/dig-stable/dig/threedgraph/method/ProNet/ProNet.py
2 | | """
  | |___^ D400
3 |   
4 |   import numpy as np
  |
  = help: Add period

src\stk_search\geom3d\models\ProNet\ProNet.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """Credit to https://github.com/divelab/DIG/blob/dig-stable/dig/threedgraph/method/ProNet/ProNet.py
2 | | """
  | |___^ D415
3 |   
4 |   import numpy as np
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\ProNet\ProNet.py:6:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
4 | import numpy as np
5 | import torch
6 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
7 | from torch import nn
8 | from torch.nn import Embedding
  |

src\stk_search\geom3d\models\ProNet\ProNet.py:20:5: D103 Missing docstring in public function
   |
18 | num_bb_embs = 6
19 | 
20 | def swish(x):
   |     ^^^^^ D103
21 |     return x * torch.sigmoid(x)
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:25:5: D400 First line should end with a period
   |
24 |   class Linear(torch.nn.Module):
25 |       """A linear method encapsulation similar to PyG's
   |  _____^
26 | | 
27 | |     Parameters
28 | |     ----------
29 | |     in_channels (int)
30 | |     out_channels (int)
31 | |     bias (int)
32 | |     weight_initializer (string): (glorot or zeros)
33 | | 
34 | |     """
   | |_______^ D400
35 |   
36 |       def __init__(self, in_channels, out_channels, bias=True, weight_initializer="glorot"):
   |
   = help: Add period

src\stk_search\geom3d\models\ProNet\ProNet.py:25:5: D415 First line should end with a period, question mark, or exclamation point
   |
24 |   class Linear(torch.nn.Module):
25 |       """A linear method encapsulation similar to PyG's
   |  _____^
26 | | 
27 | |     Parameters
28 | |     ----------
29 | |     in_channels (int)
30 | |     out_channels (int)
31 | |     bias (int)
32 | |     weight_initializer (string): (glorot or zeros)
33 | | 
34 | |     """
   | |_______^ D415
35 |   
36 |       def __init__(self, in_channels, out_channels, bias=True, weight_initializer="glorot"):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\ProNet\ProNet.py:36:9: ANN204 Missing return type annotation for special method `__init__`
   |
34 |     """
35 | 
36 |     def __init__(self, in_channels, out_channels, bias=True, weight_initializer="glorot"):
   |         ^^^^^^^^ ANN204
37 | 
38 |         super().__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ProNet\ProNet.py:36:9: D107 Missing docstring in `__init__`
   |
34 |     """
35 | 
36 |     def __init__(self, in_channels, out_channels, bias=True, weight_initializer="glorot"):
   |         ^^^^^^^^ D107
37 | 
38 |         super().__init__()
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:36:51: FBT002 Boolean default positional argument in function definition
   |
34 |     """
35 | 
36 |     def __init__(self, in_channels, out_channels, bias=True, weight_initializer="glorot"):
   |                                                   ^^^^ FBT002
37 | 
38 |         super().__init__()
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:52:9: D102 Missing docstring in public method
   |
50 |         self.reset_parameters()
51 | 
52 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
53 |         if self.weight_initializer == "glorot":
54 |             inits.glorot(self.weight)
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:61:9: D419 Docstring is empty
   |
60 |     def forward(self, x):
61 |         """"""
   |         ^^^^^^ D419
62 |         return F.linear(x, self.weight, self.bias)
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:66:5: D400 First line should end with a period
   |
65 |   class TwoLinear(torch.nn.Module):
66 |       """A layer with two linear modules
   |  _____^
67 | | 
68 | |     Parameters
69 | |     ----------
70 | |     in_channels (int)
71 | |     middle_channels (int)
72 | |     out_channels (int)
73 | |     bias (bool)
74 | |     act (bool)
75 | | 
76 | |     """
   | |_______^ D400
77 |   
78 |       def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\ProNet\ProNet.py:66:5: D415 First line should end with a period, question mark, or exclamation point
   |
65 |   class TwoLinear(torch.nn.Module):
66 |       """A layer with two linear modules
   |  _____^
67 | | 
68 | |     Parameters
69 | |     ----------
70 | |     in_channels (int)
71 | |     middle_channels (int)
72 | |     out_channels (int)
73 | |     bias (bool)
74 | |     act (bool)
75 | | 
76 | |     """
   | |_______^ D415
77 |   
78 |       def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\ProNet\ProNet.py:78:9: ANN204 Missing return type annotation for special method `__init__`
   |
76 |     """
77 | 
78 |     def __init__(
   |         ^^^^^^^^ ANN204
79 |             self,
80 |             in_channels,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ProNet\ProNet.py:78:9: D107 Missing docstring in `__init__`
   |
76 |     """
77 | 
78 |     def __init__(
   |         ^^^^^^^^ D107
79 |             self,
80 |             in_channels,
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:83:13: FBT002 Boolean default positional argument in function definition
   |
81 |             middle_channels,
82 |             out_channels,
83 |             bias=False,
   |             ^^^^ FBT002
84 |             act=False
85 |     ):
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:84:13: FBT002 Boolean default positional argument in function definition
   |
82 |             out_channels,
83 |             bias=False,
84 |             act=False
   |             ^^^ FBT002
85 |     ):
86 |         super(TwoLinear, self).__init__()
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:86:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
84 |             act=False
85 |     ):
86 |         super(TwoLinear, self).__init__()
   |              ^^^^^^^^^^^^^^^^^ UP008
87 |         self.lin1 = Linear(in_channels, middle_channels, bias=bias)
88 |         self.lin2 = Linear(middle_channels, out_channels, bias=bias)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ProNet\ProNet.py:91:9: D102 Missing docstring in public method
   |
89 |         self.act = act
90 | 
91 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
92 |         self.lin1.reset_parameters()
93 |         self.lin2.reset_parameters()
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:95:9: D102 Missing docstring in public method
   |
93 |         self.lin2.reset_parameters()
94 | 
95 |     def forward(self, x):
   |         ^^^^^^^ D102
96 |         x = self.lin1(x)
97 |         if self.act:
   |

src\stk_search\geom3d\models\ProNet\ProNet.py:106:5: D400 First line should end with a period
    |
105 |   class EdgeGraphConv(MessagePassing):
106 |       """Graph convolution similar to PyG's GraphConv(https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GraphConv)
    |  _____^
107 | | 
108 | |     The difference is that this module performs Hadamard product between node feature and edge feature
109 | | 
110 | |     Parameters
111 | |     ----------
112 | |     in_channels (int)
113 | |     out_channels (int)
114 | | 
115 | |     """
    | |_______^ D400
116 |   
117 |       def __init__(self, in_channels, out_channels):
    |
    = help: Add period

src\stk_search\geom3d\models\ProNet\ProNet.py:106:5: D415 First line should end with a period, question mark, or exclamation point
    |
105 |   class EdgeGraphConv(MessagePassing):
106 |       """Graph convolution similar to PyG's GraphConv(https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GraphConv)
    |  _____^
107 | | 
108 | |     The difference is that this module performs Hadamard product between node feature and edge feature
109 | | 
110 | |     Parameters
111 | |     ----------
112 | |     in_channels (int)
113 | |     out_channels (int)
114 | | 
115 | |     """
    | |_______^ D415
116 |   
117 |       def __init__(self, in_channels, out_channels):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\ProNet\ProNet.py:117:9: ANN204 Missing return type annotation for special method `__init__`
    |
115 |     """
116 | 
117 |     def __init__(self, in_channels, out_channels):
    |         ^^^^^^^^ ANN204
118 |         super(EdgeGraphConv, self).__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ProNet\ProNet.py:117:9: D107 Missing docstring in `__init__`
    |
115 |     """
116 | 
117 |     def __init__(self, in_channels, out_channels):
    |         ^^^^^^^^ D107
118 |         super(EdgeGraphConv, self).__init__()
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:118:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
117 |     def __init__(self, in_channels, out_channels):
118 |         super(EdgeGraphConv, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^ UP008
119 | 
120 |         self.in_channels = in_channels
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ProNet\ProNet.py:128:9: D102 Missing docstring in public method
    |
126 |         self.reset_parameters()
127 | 
128 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
129 |         self.lin_l.reset_parameters()
130 |         self.lin_r.reset_parameters()
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:132:9: D102 Missing docstring in public method
    |
130 |         self.lin_r.reset_parameters()
131 | 
132 |     def forward(self, x, edge_index, edge_weight, size=None):
    |         ^^^^^^^ D102
133 |         x = (x, x)
134 |         out = self.propagate(edge_index, x=x, edge_weight=edge_weight, size=size)
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:138:9: D102 Missing docstring in public method
    |
136 |         return out + self.lin_r(x[1])
137 | 
138 |     def message(self, x_j, edge_weight):
    |         ^^^^^^^ D102
139 |         return edge_weight * x_j
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:141:9: D102 Missing docstring in public method
    |
139 |         return edge_weight * x_j
140 | 
141 |     def message_and_aggregate(self, adj_t, x):
    |         ^^^^^^^^^^^^^^^^^^^^^ D102
142 |         return matmul(adj_t, x[0], reduce=self.aggr)
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:145:7: D101 Missing docstring in public class
    |
145 | class InteractionBlock(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^ D101
146 |     def __init__(
147 |             self,
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:146:9: PLR0913 Too many arguments in function definition (10 > 5)
    |
145 | class InteractionBlock(torch.nn.Module):
146 |     def __init__(
    |         ^^^^^^^^ PLR0913
147 |             self,
148 |             hidden_channels,
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:146:9: ANN204 Missing return type annotation for special method `__init__`
    |
145 | class InteractionBlock(torch.nn.Module):
146 |     def __init__(
    |         ^^^^^^^^ ANN204
147 |             self,
148 |             hidden_channels,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ProNet\ProNet.py:146:9: D107 Missing docstring in `__init__`
    |
145 | class InteractionBlock(torch.nn.Module):
146 |     def __init__(
    |         ^^^^^^^^ D107
147 |             self,
148 |             hidden_channels,
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:159:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
157 |             level="allatom"
158 |     ):
159 |         super(InteractionBlock, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
160 |         self.act = act
161 |         self.dropout = nn.Dropout(dropout)
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ProNet\ProNet.py:170:14: PLR1714 Consider merging multiple comparisons: `level in ("backbone", "allatom")`. Use a `set` if the elements are hashable.
    |
168 |         if level == "aminoacid":
169 |             self.lin_feature1 = TwoLinear(num_radial * num_spherical, mid_emb, hidden_channels)
170 |         elif level == "backbone" or level == "allatom":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR1714
171 |             self.lin_feature1 = TwoLinear(3 * num_radial * num_spherical, mid_emb, hidden_channels)
172 |         self.lin_feature2 = TwoLinear(num_pos_emb, mid_emb, hidden_channels)
    |
    = help: Merge multiple comparisons

src\stk_search\geom3d\models\ProNet\ProNet.py:193:9: D102 Missing docstring in public method
    |
191 |         self.reset_parameters()
192 | 
193 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
194 |         self.conv0.reset_parameters()
195 |         self.conv1.reset_parameters()
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:217:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
217 |     def forward(self, x, feature0, feature1, pos_emb, edge_index, batch):
    |         ^^^^^^^ PLR0913
218 |         x_lin_1 = self.act(self.lin_1(x))
219 |         x_lin_2 = self.act(self.lin_2(x))
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:217:9: D102 Missing docstring in public method
    |
217 |     def forward(self, x, feature0, feature1, pos_emb, edge_index, batch):
    |         ^^^^^^^ D102
218 |         x_lin_1 = self.act(self.lin_1(x))
219 |         x_lin_2 = self.act(self.lin_2(x))
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:217:67: ARG002 Unused method argument: `batch`
    |
217 |     def forward(self, x, feature0, feature1, pos_emb, edge_index, batch):
    |                                                                   ^^^^^ ARG002
218 |         x_lin_1 = self.act(self.lin_1(x))
219 |         x_lin_2 = self.act(self.lin_2(x))
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:248:16: RET504 Unnecessary assignment to `h` before `return` statement
    |
246 |             h = self.act(lin(h))
247 |         h = self.final(h)
248 |         return h
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ProNet\ProNet.py:253:1: W293 Blank line contains whitespace
    |
251 | class ProNet(nn.Module):
252 |     r"""The ProNet from the "Learning Protein Representations via Complete 3D Graph Networks" paper.
253 |         
    | ^^^^^^^^ W293
254 |     Args:
255 |     ----
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\ProNet\ProNet.py:271:1: W293 Blank line contains whitespace
    |
269 |         data_augment_eachlayer (bool, optional): Data augmentation tricks. If set to :obj:`True`, will add noise to the node features before each interaction block. (default: :obj:`False`)
270 |         euler_noise (bool, optional): Data augmentation tricks. If set to :obj:`True`, will add noise to Euler angles. (default: :obj:`False`)
271 |             
    | ^^^^^^^^^^^^ W293
272 |     """
    |
    = help: Remove whitespace from blank line

src\stk_search\geom3d\models\ProNet\ProNet.py:274:9: PLR0913 Too many arguments in function definition (15 > 5)
    |
272 |     """
273 | 
274 |     def __init__(
    |         ^^^^^^^^ PLR0913
275 |             self,
276 |             level="aminoacid",
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:274:9: ANN204 Missing return type annotation for special method `__init__`
    |
272 |     """
273 | 
274 |     def __init__(
    |         ^^^^^^^^ ANN204
275 |             self,
276 |             level="aminoacid",
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ProNet\ProNet.py:274:9: D107 Missing docstring in `__init__`
    |
272 |     """
273 | 
274 |     def __init__(
    |         ^^^^^^^^ D107
275 |             self,
276 |             level="aminoacid",
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:289:13: FBT002 Boolean default positional argument in function definition
    |
287 |             num_pos_emb=16,
288 |             dropout=0,
289 |             data_augment_eachlayer=False,
    |             ^^^^^^^^^^^^^^^^^^^^^^ FBT002
290 |             euler_noise = False,
291 |     ):
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:290:13: FBT002 Boolean default positional argument in function definition
    |
288 |             dropout=0,
289 |             data_augment_eachlayer=False,
290 |             euler_noise = False,
    |             ^^^^^^^^^^^ FBT002
291 |     ):
292 |         super(ProNet, self).__init__()
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:292:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
290 |             euler_noise = False,
291 |     ):
292 |         super(ProNet, self).__init__()
    |              ^^^^^^^^^^^^^^ UP008
293 |         self.cutoff = cutoff
294 |         self.max_num_neighbors = max_num_neighbors
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ProNet\ProNet.py:311:13: T201 `print` found
    |
309 |             self.embedding = torch.nn.Linear(num_aa_type + num_bb_embs + num_side_chain_embs, hidden_channels)
310 |         else:
311 |             print("No supported model!")
    |             ^^^^^ T201
312 | 
313 |         self.interaction_blocks = torch.nn.ModuleList(
    |
    = help: Remove `print`

src\stk_search\geom3d\models\ProNet\ProNet.py:341:9: D102 Missing docstring in public method
    |
339 |         self.reset_parameters()
340 | 
341 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
342 |         self.embedding.reset_parameters()
343 |         for interaction in self.interaction_blocks:
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:349:9: D102 Missing docstring in public method
    |
347 |         self.lin_out.reset_parameters()
348 | 
349 |     def pos_emb(self, edge_index, num_pos_emb=16):
    |         ^^^^^^^ D102
350 |         # From https://github.com/jingraham/neurips19-graph-protein-design
351 |         d = edge_index[0] - edge_index[1]
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:358:9: N806 Variable `E` in function should be lowercase
    |
356 |         )
357 |         angles = d.unsqueeze(-1) * frequency
358 |         E = torch.cat((torch.cos(angles), torch.sin(angles)), -1)
    |         ^ N806
359 |         return E
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:359:16: RET504 Unnecessary assignment to `E` before `return` statement
    |
357 |         angles = d.unsqueeze(-1) * frequency
358 |         E = torch.cat((torch.cos(angles), torch.sin(angles)), -1)
359 |         return E
    |                ^ RET504
360 | 
361 |     def forward(self, batch_data):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ProNet\ProNet.py:361:9: PLR0915 Too many statements (72 > 50)
    |
359 |         return E
360 | 
361 |     def forward(self, batch_data):
    |         ^^^^^^^ PLR0915
362 | 
363 |         z, pos, batch = torch.squeeze(batch_data.x.long()), batch_data.coords_ca, batch_data.batch
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:361:9: D102 Missing docstring in public method
    |
359 |         return E
360 | 
361 |     def forward(self, batch_data):
    |         ^^^^^^^ D102
362 | 
363 |         z, pos, batch = torch.squeeze(batch_data.x.long()), batch_data.coords_ca, batch_data.batch
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:380:13: T201 `print` found
    |
378 |             x = self.embedding(x)
379 |         else:
380 |             print("No supported model!")
    |             ^^^^^ T201
381 | 
382 |         edge_index = radius_graph(pos, r=self.cutoff, batch=batch, max_num_neighbors=self.max_num_neighbors)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\ProNet\ProNet.py:407:12: PLR1714 Consider merging multiple comparisons: `self.level in ("backbone", "allatom")`. Use a `set` if the elements are hashable.
    |
405 |         feature0 = self.feature0(dist, theta, phi)
406 | 
407 |         if self.level == "backbone" or self.level == "allatom":
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR1714
408 |             # Calculate Euler angles.
409 |             Or1_x = pos_n[i] - pos[i]
    |
    = help: Merge multiple comparisons

src\stk_search\geom3d\models\ProNet\ProNet.py:409:13: N806 Variable `Or1_x` in function should be lowercase
    |
407 |         if self.level == "backbone" or self.level == "allatom":
408 |             # Calculate Euler angles.
409 |             Or1_x = pos_n[i] - pos[i]
    |             ^^^^^ N806
410 |             Or1_z = torch.cross(Or1_x, torch.cross(Or1_x, pos_c[i] - pos[i]))
411 |             Or1_z_length = Or1_z.norm(dim=1) + 1e-7
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:410:13: N806 Variable `Or1_z` in function should be lowercase
    |
408 |             # Calculate Euler angles.
409 |             Or1_x = pos_n[i] - pos[i]
410 |             Or1_z = torch.cross(Or1_x, torch.cross(Or1_x, pos_c[i] - pos[i]))
    |             ^^^^^ N806
411 |             Or1_z_length = Or1_z.norm(dim=1) + 1e-7
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:411:13: N806 Variable `Or1_z_length` in function should be lowercase
    |
409 |             Or1_x = pos_n[i] - pos[i]
410 |             Or1_z = torch.cross(Or1_x, torch.cross(Or1_x, pos_c[i] - pos[i]))
411 |             Or1_z_length = Or1_z.norm(dim=1) + 1e-7
    |             ^^^^^^^^^^^^ N806
412 | 
413 |             Or2_x = pos_n[j] - pos[j]
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:413:13: N806 Variable `Or2_x` in function should be lowercase
    |
411 |             Or1_z_length = Or1_z.norm(dim=1) + 1e-7
412 | 
413 |             Or2_x = pos_n[j] - pos[j]
    |             ^^^^^ N806
414 |             Or2_z = torch.cross(Or2_x, torch.cross(Or2_x, pos_c[j] - pos[j]))
415 |             Or2_z_length = Or2_z.norm(dim=1) + 1e-7
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:414:13: N806 Variable `Or2_z` in function should be lowercase
    |
413 |             Or2_x = pos_n[j] - pos[j]
414 |             Or2_z = torch.cross(Or2_x, torch.cross(Or2_x, pos_c[j] - pos[j]))
    |             ^^^^^ N806
415 |             Or2_z_length = Or2_z.norm(dim=1) + 1e-7
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:415:13: N806 Variable `Or2_z_length` in function should be lowercase
    |
413 |             Or2_x = pos_n[j] - pos[j]
414 |             Or2_z = torch.cross(Or2_x, torch.cross(Or2_x, pos_c[j] - pos[j]))
415 |             Or2_z_length = Or2_z.norm(dim=1) + 1e-7
    |             ^^^^^^^^^^^^ N806
416 | 
417 |             Or1_Or2_N = torch.cross(Or1_z, Or2_z)
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:417:13: N806 Variable `Or1_Or2_N` in function should be lowercase
    |
415 |             Or2_z_length = Or2_z.norm(dim=1) + 1e-7
416 | 
417 |             Or1_Or2_N = torch.cross(Or1_z, Or2_z)
    |             ^^^^^^^^^ N806
418 | 
419 |             angle1 = torch.atan2((torch.cross(Or1_x, Or1_Or2_N) * Or1_z).sum(dim=-1)/Or1_z_length, (Or1_x * Or1_Or2_N).sum(dim=-1))
    |

src\stk_search\geom3d\models\ProNet\ProNet.py:465:16: RET504 Unnecessary assignment to `y` before `return` statement
    |
463 |             y = self.dropout(y)
464 |         y = self.lin_out(y)
465 |         return y
    |                ^ RET504
466 | 
467 |     @property
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ProNet\ProNet.py:468:9: D102 Missing docstring in public method
    |
467 |     @property
468 |     def num_params(self):
    |         ^^^^^^^^^^ D102
469 |         return sum(p.numel() for p in self.parameters())
    |

src\stk_search\geom3d\models\ProNet\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\ProNet\features.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\ProNet\features.py:12:5: N802 Function name `Jn` should be lowercase
   |
12 | def Jn(r, n):
   |     ^^ N802
13 |     """Numerical spherical bessel functions of order n
14 |     """
   |

src\stk_search\geom3d\models\ProNet\features.py:13:5: D200 One-line docstring should fit on one line
   |
12 |   def Jn(r, n):
13 |       """Numerical spherical bessel functions of order n
   |  _____^
14 | |     """
   | |_______^ D200
15 |       return sp.spherical_jn(n, r)
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\ProNet\features.py:13:5: D400 First line should end with a period
   |
12 |   def Jn(r, n):
13 |       """Numerical spherical bessel functions of order n
   |  _____^
14 | |     """
   | |_______^ D400
15 |       return sp.spherical_jn(n, r)
   |
   = help: Add period

src\stk_search\geom3d\models\ProNet\features.py:13:5: D415 First line should end with a period, question mark, or exclamation point
   |
12 |   def Jn(r, n):
13 |       """Numerical spherical bessel functions of order n
   |  _____^
14 | |     """
   | |_______^ D415
15 |       return sp.spherical_jn(n, r)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\ProNet\features.py:18:5: N802 Function name `Jn_zeros` should be lowercase
   |
18 | def Jn_zeros(n, k):
   |     ^^^^^^^^ N802
19 |     """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
20 |     """
   |

src\stk_search\geom3d\models\ProNet\features.py:19:5: D200 One-line docstring should fit on one line
   |
18 |   def Jn_zeros(n, k):
19 |       """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
   |  _____^
20 | |     """
   | |_______^ D200
21 |       zerosj = np.zeros((n, k), dtype="float32")
22 |       zerosj[0] = np.arange(1, k + 1) * np.pi
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\ProNet\features.py:19:5: D400 First line should end with a period
   |
18 |   def Jn_zeros(n, k):
19 |       """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
   |  _____^
20 | |     """
   | |_______^ D400
21 |       zerosj = np.zeros((n, k), dtype="float32")
22 |       zerosj[0] = np.arange(1, k + 1) * np.pi
   |
   = help: Add period

src\stk_search\geom3d\models\ProNet\features.py:19:5: D415 First line should end with a period, question mark, or exclamation point
   |
18 |   def Jn_zeros(n, k):
19 |       """Compute the first k zeros of the spherical bessel functions up to order n (excluded)
   |  _____^
20 | |     """
   | |_______^ D415
21 |       zerosj = np.zeros((n, k), dtype="float32")
22 |       zerosj[0] = np.arange(1, k + 1) * np.pi
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\ProNet\features.py:36:5: D200 One-line docstring should fit on one line
   |
35 |   def spherical_bessel_formulas(n):
36 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
37 | |     """
   | |_______^ D200
38 |       x = sym.symbols("x")
39 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\ProNet\features.py:36:5: D400 First line should end with a period
   |
35 |   def spherical_bessel_formulas(n):
36 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
37 | |     """
   | |_______^ D400
38 |       x = sym.symbols("x")
39 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |
   = help: Add period

src\stk_search\geom3d\models\ProNet\features.py:36:5: D401 First line of docstring should be in imperative mood: "Computes the sympy formulas for the spherical bessel functions up to order n (excluded)"
   |
35 |   def spherical_bessel_formulas(n):
36 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
37 | |     """
   | |_______^ D401
38 |       x = sym.symbols("x")
39 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |

src\stk_search\geom3d\models\ProNet\features.py:36:5: D415 First line should end with a period, question mark, or exclamation point
   |
35 |   def spherical_bessel_formulas(n):
36 |       """Computes the sympy formulas for the spherical bessel functions up to order n (excluded)
   |  _____^
37 | |     """
   | |_______^ D415
38 |       x = sym.symbols("x")
39 |       # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\ProNet\features.py:39:5: ERA001 Found commented-out code
   |
37 |     """
38 |     x = sym.symbols("x")
39 |     # j_i = (-x)^i * (1/x * d/dx)^î * sin(x)/x
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
40 |     j = [sym.sin(x) / x]  # j_0
41 |     a = sym.sin(x) / x
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\ProNet\features.py:50:5: D205 1 blank line required between summary line and description
   |
49 |   def bessel_basis(n, k):
50 |       """Compute the sympy formulas for the normalized and rescaled spherical bessel functions up to
   |  _____^
51 | |     order n (excluded) and maximum frequency k (excluded).
52 | | 
53 | |     Returns
54 | |     -------
55 | |         bess_basis: list
56 | |             Bessel basis formulas taking in a single argument x.
57 | |             Has length n where each element has length k. -> In total n*k many.
58 | | 
59 | |     """
   | |_______^ D205
60 |       zeros = Jn_zeros(n, k)
61 |       normalizer = []
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\ProNet\features.py:86:5: D417 Missing argument descriptions in the docstring for `sph_harm_prefactor`: `l`, `m`
   |
86 | def sph_harm_prefactor(l, m):
   |     ^^^^^^^^^^^^^^^^^^ D417
87 |     """Computes the constant pre-factor for the spherical harmonic of degree l and order m.
   |

src\stk_search\geom3d\models\ProNet\features.py:86:24: E741 Ambiguous variable name: `l`
   |
86 | def sph_harm_prefactor(l, m):
   |                        ^ E741
87 |     """Computes the constant pre-factor for the spherical harmonic of degree l and order m.
   |

src\stk_search\geom3d\models\ProNet\features.py:87:5: D401 First line of docstring should be in imperative mood: "Computes the constant pre-factor for the spherical harmonic of degree l and order m."
    |
 86 |   def sph_harm_prefactor(l, m):
 87 |       """Computes the constant pre-factor for the spherical harmonic of degree l and order m.
    |  _____^
 88 | | 
 89 | |     Parameters
 90 | |     ----------
 91 | |         l: int
 92 | |             Degree of the spherical harmonic. l >= 0
 93 | |         m: int
 94 | |             Order of the spherical harmonic. -l <= m <= l
 95 | | 
 96 | |     Returns
 97 | |     -------
 98 | |         factor: float
 99 | | 
100 | |     """
    | |_______^ D401
101 |       # sqrt((2*l+1)/4*pi * (l-m)!/(l+m)! )
102 |       return (
    |

src\stk_search\geom3d\models\ProNet\features.py:110:5: C901 `associated_legendre_polynomials` is too complex (11 > 10)
    |
110 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
111 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\ProNet\features.py:110:5: D417 Missing argument descriptions in the docstring for `associated_legendre_polynomials`: `L`, `pos_m_only`, `zero_m_only`
    |
110 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
111 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\ProNet\features.py:110:37: N803 Argument name `L` should be lowercase
    |
110 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |                                     ^ N803
111 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\ProNet\features.py:110:40: FBT002 Boolean default positional argument in function definition
    |
110 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |                                        ^^^^^^^^^^^ FBT002
111 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\ProNet\features.py:110:58: FBT002 Boolean default positional argument in function definition
    |
110 | def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
    |                                                          ^^^^^^^^^^ FBT002
111 |     """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |

src\stk_search\geom3d\models\ProNet\features.py:111:5: D401 First line of docstring should be in imperative mood: "Computes string formulas of the associated legendre polynomials up to degree L (excluded)."
    |
110 |   def associated_legendre_polynomials(L, zero_m_only=True, pos_m_only=True):
111 |       """Computes string formulas of the associated legendre polynomials up to degree L (excluded).
    |  _____^
112 | | 
113 | |     Parameters
114 | |     ----------
115 | |         L: int
116 | |             Degree up to which to calculate the associated legendre polynomials (degree L is excluded).
117 | |         zero_m_only: bool
118 | |             If True only calculate the polynomials for the polynomials where m=0.
119 | |         pos_m_only: bool
120 | |             If True only calculate the polynomials for the polynomials where m>=0. Overwritten by zero_m_only.
121 | | 
122 | |     Returns
123 | |     -------
124 | |         polynomials: list
125 | |             Contains the sympy functions of the polynomials (in total L many if zero_m_only is True else L^2 many).
126 | | 
127 | |     """
    | |_______^ D401
128 |       # calculations from http://web.cmb.usc.edu/people/alber/Software/tomominer/docs/cpp/group__legendre__polynomials.html
129 |       z = sym.symbols("z")
    |

src\stk_search\geom3d\models\ProNet\features.py:130:5: N806 Variable `P_l_m` in function should be lowercase
    |
128 |     # calculations from http://web.cmb.usc.edu/people/alber/Software/tomominer/docs/cpp/group__legendre__polynomials.html
129 |     z = sym.symbols("z")
130 |     P_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |     ^^^^^ N806
131 | 
132 |     P_l_m[0][0] = 1
    |

src\stk_search\geom3d\models\ProNet\features.py:130:36: E741 Ambiguous variable name: `l`
    |
128 |     # calculations from http://web.cmb.usc.edu/people/alber/Software/tomominer/docs/cpp/group__legendre__polynomials.html
129 |     z = sym.symbols("z")
130 |     P_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |                                    ^ E741
131 | 
132 |     P_l_m[0][0] = 1
    |

src\stk_search\geom3d\models\ProNet\features.py:133:5: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
132 |       P_l_m[0][0] = 1
133 |       if L > 0:
    |  _____^
134 | |         if zero_m_only:
135 | |             # m = 0
136 | |             P_l_m[1][0] = z
137 | |             for l in range(2, L):
138 | |                 P_l_m[l][0] = sym.simplify(
139 | |                     ((2 * l - 1) * z * P_l_m[l - 1][0] - (l - 1) * P_l_m[l - 2][0]) / l
140 | |                 )
141 | |             return P_l_m
142 | |         else:
143 | |             # for m >= 0
144 | |             for l in range(1, L):
145 | |                 P_l_m[l][l] = sym.simplify(
146 | |                     (1 - 2 * l) * (1 - z ** 2) ** 0.5 * P_l_m[l - 1][l - 1]
147 | |                 )  # P_00, P_11, P_22, P_33
148 | | 
149 | |             for m in range(L - 1):
150 | |                 P_l_m[m + 1][m] = sym.simplify(
151 | |                     (2 * m + 1) * z * P_l_m[m][m]
152 | |                 )  # P_10, P_21, P_32, P_43
153 | | 
154 | |             for l in range(2, L):
155 | |                 for m in range(l - 1):  # P_20, P_30, P_31
156 | |                     P_l_m[l][m] = sym.simplify(
157 | |                         (
158 | |                             (2 * l - 1) * z * P_l_m[l - 1][m]
159 | |                             - (l + m - 1) * P_l_m[l - 2][m]
160 | |                         )
161 | |                         / (l - m)
162 | |                     )
163 | | 
164 | |             if not pos_m_only:
165 | |                 # for m < 0: P_l(-m) = (-1)^m * (l-m)!/(l+m)! * P_lm
166 | |                 for l in range(1, L):
167 | |                     for m in range(1, l + 1):  # P_1(-1), P_2(-1) P_2(-2)
168 | |                         P_l_m[l][-m] = sym.simplify(
169 | |                             (-1) ** m
170 | |                             * np.math.factorial(l - m)
171 | |                             / np.math.factorial(l + m)
172 | |                             * P_l_m[l][m]
173 | |                         )
174 | | 
175 | |             return P_l_m
    | |________________________^ RET503
    |
    = help: Add explicit `return` statement

src\stk_search\geom3d\models\ProNet\features.py:135:13: ERA001 Found commented-out code
    |
133 |     if L > 0:
134 |         if zero_m_only:
135 |             # m = 0
    |             ^^^^^^^ ERA001
136 |             P_l_m[1][0] = z
137 |             for l in range(2, L):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ProNet\features.py:137:17: E741 Ambiguous variable name: `l`
    |
135 |             # m = 0
136 |             P_l_m[1][0] = z
137 |             for l in range(2, L):
    |                 ^ E741
138 |                 P_l_m[l][0] = sym.simplify(
139 |                     ((2 * l - 1) * z * P_l_m[l - 1][0] - (l - 1) * P_l_m[l - 2][0]) / l
    |

src\stk_search\geom3d\models\ProNet\features.py:142:9: RET505 Unnecessary `else` after `return` statement
    |
140 |                 )
141 |             return P_l_m
142 |         else:
    |         ^^^^ RET505
143 |             # for m >= 0
144 |             for l in range(1, L):
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\ProNet\features.py:144:17: E741 Ambiguous variable name: `l`
    |
142 |         else:
143 |             # for m >= 0
144 |             for l in range(1, L):
    |                 ^ E741
145 |                 P_l_m[l][l] = sym.simplify(
146 |                     (1 - 2 * l) * (1 - z ** 2) ** 0.5 * P_l_m[l - 1][l - 1]
    |

src\stk_search\geom3d\models\ProNet\features.py:154:17: E741 Ambiguous variable name: `l`
    |
152 |                 )  # P_10, P_21, P_32, P_43
153 | 
154 |             for l in range(2, L):
    |                 ^ E741
155 |                 for m in range(l - 1):  # P_20, P_30, P_31
156 |                     P_l_m[l][m] = sym.simplify(
    |

src\stk_search\geom3d\models\ProNet\features.py:166:21: E741 Ambiguous variable name: `l`
    |
164 |             if not pos_m_only:
165 |                 # for m < 0: P_l(-m) = (-1)^m * (l-m)!/(l+m)! * P_lm
166 |                 for l in range(1, L):
    |                     ^ E741
167 |                     for m in range(1, l + 1):  # P_1(-1), P_2(-1) P_2(-2)
168 |                         P_l_m[l][-m] = sym.simplify(
    |

src\stk_search\geom3d\models\ProNet\features.py:178:5: C901 `real_sph_harm` is too complex (14 > 10)
    |
178 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |     ^^^^^^^^^^^^^ C901
179 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
180 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\ProNet\features.py:178:5: PLR0912 Too many branches (14 > 12)
    |
178 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |     ^^^^^^^^^^^^^ PLR0912
179 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
180 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\ProNet\features.py:178:5: D417 Missing argument descriptions in the docstring for `real_sph_harm`: `L`, `spherical_coordinates`, `zero_m_only`
    |
178 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |     ^^^^^^^^^^^^^ D417
179 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
180 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\ProNet\features.py:178:19: N803 Argument name `L` should be lowercase
    |
178 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |                   ^ N803
179 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
180 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\ProNet\features.py:178:45: FBT002 Boolean default positional argument in function definition
    |
178 | def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
    |                                             ^^^^^^^^^^^ FBT002
179 |     """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
180 |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
    |

src\stk_search\geom3d\models\ProNet\features.py:179:5: D205 1 blank line required between summary line and description
    |
178 |   def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
179 |       """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
    |  _____^
180 | |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
181 | | 
182 | |     Parameters
183 | |     ----------
184 | |         L: int
185 | |             Degree up to which to calculate the spherical harmonics (degree L is excluded).
186 | |         spherical_coordinates: bool
187 | |             - True: Expects the input of the formula strings to be phi and theta.
188 | |             - False: Expects the input of the formula strings to be x, y and z.
189 | |         zero_m_only: bool
190 | |             If True only calculate the harmonics where m=0.
191 | | 
192 | |     Returns
193 | |     -------
194 | |         Y_lm_real: list
195 | |             Computes formula strings of the the real part of the spherical harmonics up
196 | |             to degree L (where degree L is not excluded).
197 | |             In total L^2 many sph harm exist up to degree L (excluded). However, if zero_m_only only is True then
198 | |             the total count is reduced to be only L many.
199 | | 
200 | |     """
    | |_______^ D205
201 |       z = sym.symbols("z")
202 |       P_l_m = associated_legendre_polynomials(L, zero_m_only)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\ProNet\features.py:179:5: D401 First line of docstring should be in imperative mood: "Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded)."
    |
178 |   def real_sph_harm(L, spherical_coordinates, zero_m_only=True):
179 |       """Computes formula strings of the the real part of the spherical harmonics up to degree L (excluded).
    |  _____^
180 | |     Variables are either spherical coordinates phi and theta (or cartesian coordinates x,y,z) on the UNIT SPHERE.
181 | | 
182 | |     Parameters
183 | |     ----------
184 | |         L: int
185 | |             Degree up to which to calculate the spherical harmonics (degree L is excluded).
186 | |         spherical_coordinates: bool
187 | |             - True: Expects the input of the formula strings to be phi and theta.
188 | |             - False: Expects the input of the formula strings to be x, y and z.
189 | |         zero_m_only: bool
190 | |             If True only calculate the harmonics where m=0.
191 | | 
192 | |     Returns
193 | |     -------
194 | |         Y_lm_real: list
195 | |             Computes formula strings of the the real part of the spherical harmonics up
196 | |             to degree L (where degree L is not excluded).
197 | |             In total L^2 many sph harm exist up to degree L (excluded). However, if zero_m_only only is True then
198 | |             the total count is reduced to be only L many.
199 | | 
200 | |     """
    | |_______^ D401
201 |       z = sym.symbols("z")
202 |       P_l_m = associated_legendre_polynomials(L, zero_m_only)
    |

src\stk_search\geom3d\models\ProNet\features.py:202:5: N806 Variable `P_l_m` in function should be lowercase
    |
200 |     """
201 |     z = sym.symbols("z")
202 |     P_l_m = associated_legendre_polynomials(L, zero_m_only)
    |     ^^^^^ N806
203 |     if zero_m_only:
204 |         # for all m != 0: Y_lm = 0
    |

src\stk_search\geom3d\models\ProNet\features.py:205:9: N806 Variable `Y_l_m` in function should be lowercase
    |
203 |     if zero_m_only:
204 |         # for all m != 0: Y_lm = 0
205 |         Y_l_m = [[0] for l in range(L)]
    |         ^^^^^ N806
206 |     else:
207 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |

src\stk_search\geom3d\models\ProNet\features.py:205:26: E741 Ambiguous variable name: `l`
    |
203 |     if zero_m_only:
204 |         # for all m != 0: Y_lm = 0
205 |         Y_l_m = [[0] for l in range(L)]
    |                          ^ E741
206 |     else:
207 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |

src\stk_search\geom3d\models\ProNet\features.py:207:9: N806 Variable `Y_l_m` in function should be lowercase
    |
205 |         Y_l_m = [[0] for l in range(L)]
206 |     else:
207 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |         ^^^^^ N806
208 | 
209 |     # convert expressions to spherical coordiantes
    |

src\stk_search\geom3d\models\ProNet\features.py:207:40: E741 Ambiguous variable name: `l`
    |
205 |         Y_l_m = [[0] for l in range(L)]
206 |     else:
207 |         Y_l_m = [[0] * (2 * l + 1) for l in range(L)]  # for order l: -l <= m <= l
    |                                        ^ E741
208 | 
209 |     # convert expressions to spherical coordiantes
    |

src\stk_search\geom3d\models\ProNet\features.py:213:13: E741 Ambiguous variable name: `l`
    |
211 |         # replace z by cos(theta)
212 |         theta = sym.symbols("theta")
213 |         for l in range(L):
    |             ^ E741
214 |             for m in range(len(P_l_m[l])):
215 |                 if not isinstance(P_l_m[l][m], int):
    |

src\stk_search\geom3d\models\ProNet\features.py:219:5: ERA001 Found commented-out code
    |
218 |     ## calculate Y_lm
219 |     # Y_lm = N * P_lm(cos(theta)) * exp(i*m*phi)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
220 |     #             { sqrt(2) * (-1)^m * N * P_l|m| * sin(|m|*phi)   if m < 0
221 |     # Y_lm_real = { Y_lm                                           if m = 0
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\ProNet\features.py:224:9: E741 Ambiguous variable name: `l`
    |
222 |     #             { sqrt(2) * (-1)^m * N * P_lm * cos(m*phi)       if m > 0
223 | 
224 |     for l in range(L):
    |         ^ E741
225 |         Y_l_m[l][0] = sym.simplify(sph_harm_prefactor(l, 0) * P_l_m[l][0])  # Y_l0
    |

src\stk_search\geom3d\models\ProNet\features.py:229:13: E741 Ambiguous variable name: `l`
    |
227 |     if not zero_m_only:
228 |         phi = sym.symbols("phi")
229 |         for l in range(1, L):
    |             ^ E741
230 |             # m > 0
231 |             for m in range(1, l + 1):
    |

src\stk_search\geom3d\models\ProNet\features.py:254:17: E741 Ambiguous variable name: `l`
    |
252 |             x = sym.symbols("x")
253 |             y = sym.symbols("y")
254 |             for l in range(L):
    |                 ^ E741
255 |                 for m in range(len(Y_l_m[l])):
256 |                     Y_l_m[l][m] = sym.simplify(Y_l_m[l][m].subs(phi, sym.atan2(y, x)))
    |

src\stk_search\geom3d\models\ProNet\features.py:260:7: N801 Class name `d_angle_emb` should use CapWords convention
    |
260 | class d_angle_emb(torch.nn.Module):
    |       ^^^^^^^^^^^ N801
261 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
262 |         super(d_angle_emb, self).__init__()
    |

src\stk_search\geom3d\models\ProNet\features.py:260:7: D101 Missing docstring in public class
    |
260 | class d_angle_emb(torch.nn.Module):
    |       ^^^^^^^^^^^ D101
261 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
262 |         super(d_angle_emb, self).__init__()
    |

src\stk_search\geom3d\models\ProNet\features.py:261:9: ANN204 Missing return type annotation for special method `__init__`
    |
260 | class d_angle_emb(torch.nn.Module):
261 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
    |         ^^^^^^^^ ANN204
262 |         super(d_angle_emb, self).__init__()
263 |         assert num_radial <= 64
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ProNet\features.py:261:9: D107 Missing docstring in `__init__`
    |
260 | class d_angle_emb(torch.nn.Module):
261 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
    |         ^^^^^^^^ D107
262 |         super(d_angle_emb, self).__init__()
263 |         assert num_radial <= 64
    |

src\stk_search\geom3d\models\ProNet\features.py:262:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
260 | class d_angle_emb(torch.nn.Module):
261 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
262 |         super(d_angle_emb, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^ UP008
263 |         assert num_radial <= 64
264 |         self.num_spherical = num_spherical
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ProNet\features.py:263:9: S101 Use of `assert` detected
    |
261 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
262 |         super(d_angle_emb, self).__init__()
263 |         assert num_radial <= 64
    |         ^^^^^^ S101
264 |         self.num_spherical = num_spherical
265 |         self.num_radial = num_radial
    |

src\stk_search\geom3d\models\ProNet\features.py:263:30: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
    |
261 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
262 |         super(d_angle_emb, self).__init__()
263 |         assert num_radial <= 64
    |                              ^^ PLR2004
264 |         self.num_spherical = num_spherical
265 |         self.num_radial = num_radial
    |

src\stk_search\geom3d\models\ProNet\features.py:269:9: N806 Variable `Y_lm` in function should be lowercase
    |
268 |         bessel_formulas = bessel_basis(num_spherical, num_radial)
269 |         Y_lm = real_sph_harm(
    |         ^^^^ N806
270 |             num_spherical, spherical_coordinates=True, zero_m_only=True
271 |         )
    |

src\stk_search\geom3d\models\ProNet\features.py:279:13: E741 Ambiguous variable name: `l`
    |
277 |         modules = {"sin": torch.sin, "cos": torch.cos, "sqrt": torch.sqrt}
278 |         m = 0
279 |         for l in range(len(Y_lm)):
    |             ^ E741
280 |             if l == 0:
281 |                 first_sph = sym.lambdify([theta], Y_lm[l][m], modules)
    |

src\stk_search\geom3d\models\ProNet\features.py:283:61: B023 Function definition does not bind loop variable `first_sph`
    |
281 |                 first_sph = sym.lambdify([theta], Y_lm[l][m], modules)
282 |                 self.sph_funcs.append(
283 |                     lambda theta: torch.zeros_like(theta) + first_sph(theta)
    |                                                             ^^^^^^^^^ B023
284 |                 )
285 |             else:
    |

src\stk_search\geom3d\models\ProNet\features.py:292:9: D102 Missing docstring in public method
    |
290 |                 )
291 | 
292 |     def forward(self, dist, angle):
    |         ^^^^^^^ D102
293 |         dist = dist / self.cutoff
294 |         rbf = torch.stack([f(dist) for f in self.bessel_funcs], dim=1)
    |

src\stk_search\geom3d\models\ProNet\features.py:298:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
296 |         n, k = self.num_spherical, self.num_radial
297 |         out = (rbf.view(-1, n, k) * sbf.view(-1, n, 1)).view(-1, n * k)
298 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\ProNet\features.py:301:7: N801 Class name `d_theta_phi_emb` should use CapWords convention
    |
301 | class d_theta_phi_emb(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^ N801
302 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
303 |         super(d_theta_phi_emb, self).__init__()
    |

src\stk_search\geom3d\models\ProNet\features.py:301:7: D101 Missing docstring in public class
    |
301 | class d_theta_phi_emb(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^ D101
302 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
303 |         super(d_theta_phi_emb, self).__init__()
    |

src\stk_search\geom3d\models\ProNet\features.py:302:9: ANN204 Missing return type annotation for special method `__init__`
    |
301 | class d_theta_phi_emb(torch.nn.Module):
302 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
    |         ^^^^^^^^ ANN204
303 |         super(d_theta_phi_emb, self).__init__()
304 |         assert num_radial <= 64
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\ProNet\features.py:302:9: D107 Missing docstring in `__init__`
    |
301 | class d_theta_phi_emb(torch.nn.Module):
302 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
    |         ^^^^^^^^ D107
303 |         super(d_theta_phi_emb, self).__init__()
304 |         assert num_radial <= 64
    |

src\stk_search\geom3d\models\ProNet\features.py:303:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
301 | class d_theta_phi_emb(torch.nn.Module):
302 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
303 |         super(d_theta_phi_emb, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^ UP008
304 |         assert num_radial <= 64
305 |         self.num_radial = num_radial
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\ProNet\features.py:304:9: S101 Use of `assert` detected
    |
302 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
303 |         super(d_theta_phi_emb, self).__init__()
304 |         assert num_radial <= 64
    |         ^^^^^^ S101
305 |         self.num_radial = num_radial
306 |         self.num_spherical = num_spherical
    |

src\stk_search\geom3d\models\ProNet\features.py:304:30: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
    |
302 |     def __init__(self, num_radial, num_spherical, cutoff=8.0):
303 |         super(d_theta_phi_emb, self).__init__()
304 |         assert num_radial <= 64
    |                              ^^ PLR2004
305 |         self.num_radial = num_radial
306 |         self.num_spherical = num_spherical
    |

src\stk_search\geom3d\models\ProNet\features.py:310:9: N806 Variable `Y_lm` in function should be lowercase
    |
309 |         bessel_formulas = bessel_basis(num_spherical, num_radial)
310 |         Y_lm = real_sph_harm(
    |         ^^^^ N806
311 |             num_spherical, spherical_coordinates=True, zero_m_only=False
312 |         )
    |

src\stk_search\geom3d\models\ProNet\features.py:320:13: E741 Ambiguous variable name: `l`
    |
318 |         phi = sym.symbols("phi")
319 |         modules = {"sin": torch.sin, "cos": torch.cos, "sqrt": torch.sqrt}
320 |         for l in range(len(Y_lm)):
    |             ^ E741
321 |             for m in range(len(Y_lm[l])):
322 |                 if (
    |

src\stk_search\geom3d\models\ProNet\features.py:328:46: B023 Function definition does not bind loop variable `first_sph`
    |
326 |                     self.sph_funcs.append(
327 |                         lambda theta, phi: torch.zeros_like(theta)
328 |                                            + first_sph(theta, phi)
    |                                              ^^^^^^^^^ B023
329 |                     )
330 |                 else:
    |

src\stk_search\geom3d\models\ProNet\features.py:343:9: D102 Missing docstring in public method
    |
341 |         )
342 | 
343 |     def forward(self, dist, theta, phi):
    |         ^^^^^^^ D102
344 |         dist = dist / self.cutoff
345 |         rbf = torch.stack([f(dist) for f in self.bessel_funcs], dim=1)
    |

src\stk_search\geom3d\models\ProNet\features.py:352:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
350 |         sbf = sbf.repeat_interleave(k, dim=1)
351 |         out = rbf * sbf
352 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SE3_Transformer.py:1:1: N999 Invalid module name: 'SE3_Transformer'
src\stk_search\geom3d\models\SE3_Transformer.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SE3_Transformer.py:11:5: D400 First line should end with a period
   |
10 | class SE3Transformer(nn.Module):
11 |     """SE(3) equivariant GCN with attention"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
12 | 
13 |     def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\SE3_Transformer.py:11:5: D415 First line should end with a period, question mark, or exclamation point
   |
10 | class SE3Transformer(nn.Module):
11 |     """SE(3) equivariant GCN with attention"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
12 | 
13 |     def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\SE3_Transformer.py:13:9: PLR0913 Too many arguments in function definition (8 > 5)
   |
11 |     """SE(3) equivariant GCN with attention"""
12 | 
13 |     def __init__(
   |         ^^^^^^^^ PLR0913
14 |         self,
15 |         num_layers,
   |

src\stk_search\geom3d\models\SE3_Transformer.py:13:9: ANN204 Missing return type annotation for special method `__init__`
   |
11 |     """SE(3) equivariant GCN with attention"""
12 | 
13 |     def __init__(
   |         ^^^^^^^^ ANN204
14 |         self,
15 |         num_layers,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer.py:13:9: D107 Missing docstring in `__init__`
   |
11 |     """SE(3) equivariant GCN with attention"""
12 | 
13 |     def __init__(
   |         ^^^^^^^^ D107
14 |         self,
15 |         num_layers,
   |

src\stk_search\geom3d\models\SE3_Transformer.py:43:13: B007 Loop control variable `i` not used within loop body
   |
41 |         layers = []
42 |         fin = self.fibers["in"]
43 |         for i in range(self.num_layers):
   |             ^ B007
44 |             layers.append(
45 |                 GSE3Res(
   |
   = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\SE3_Transformer.py:65:9: D102 Missing docstring in public method
   |
63 |         self.layers = nn.ModuleList(layers)
64 | 
65 |     def forward(self, x, positions, edge_index, edge_feat=None):
   |         ^^^^^^^ D102
66 |         # Compute equivariant weight basis from relative positions
67 |         row, col = edge_index
   |

src\stk_search\geom3d\models\SE3_Transformer.py:86:16: RET504 Unnecessary assignment to `h` before `return` statement
   |
84 |         h = h["0"].squeeze()
85 | 
86 |         return h
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SE3_Transformer_utils.py:1:1: N999 Invalid module name: 'SE3_Transformer_utils'
src\stk_search\geom3d\models\SE3_Transformer_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SE3_Transformer_utils.py:3:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import numpy as np
2 | import torch
3 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
4 | from torch import nn
5 | from torch_scatter import scatter_add
  |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:12:5: D400 First line should end with a period
   |
11 | class GSE3Res(nn.Module):
12 |     """Graph attention block with SE(3)-equivariance and skip connection"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
13 | 
14 |     def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\SE3_Transformer_utils.py:12:5: D415 First line should end with a period, question mark, or exclamation point
   |
11 | class GSE3Res(nn.Module):
12 |     """Graph attention block with SE(3)-equivariance and skip connection"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
13 | 
14 |     def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\SE3_Transformer_utils.py:14:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
12 |     """Graph attention block with SE(3)-equivariance and skip connection"""
13 | 
14 |     def __init__(
   |         ^^^^^^^^ PLR0913
15 |         self,
16 |         f_in,
   |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:14:9: ANN204 Missing return type annotation for special method `__init__`
   |
12 |     """Graph attention block with SE(3)-equivariance and skip connection"""
13 | 
14 |     def __init__(
   |         ^^^^^^^^ ANN204
15 |         self,
16 |         f_in,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:14:9: D107 Missing docstring in `__init__`
   |
12 |     """Graph attention block with SE(3)-equivariance and skip connection"""
13 | 
14 |     def __init__(
   |         ^^^^^^^^ D107
15 |         self,
16 |         f_in,
   |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:21:9: FBT002 Boolean default positional argument in function definition
   |
19 |         div=4,
20 |         n_heads=1,
21 |         learnable_skip=True,
   |         ^^^^^^^^^^^^^^ FBT002
22 |         skip="cat",
23 |         selfint="1x1",
   |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:74:17: S101 Use of `assert` detected
   |
72 |                 # more channels than the ouput (for at least one degree); this would
73 |                 # then cause a (hard to debug) error in the next layer
74 |                 assert (
   |                 ^^^^^^ S101
75 |                     self.add.f_out.structure_dict == f_out.structure_dict
76 |                 ), "skip connection would change output structure"
   |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:78:9: D102 Missing docstring in public method
   |
76 |                 ), "skip connection would change output structure"
77 | 
78 |     def forward(self, h, edge_index, **kwargs):
   |         ^^^^^^^ D102
79 |         # Embeddings
80 |         v = self.GMAB["v"](h, edge_index=edge_index, **kwargs)
   |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:78:38: ANN003 Missing type annotation for `**kwargs`
   |
76 |                 ), "skip connection would change output structure"
77 | 
78 |     def forward(self, h, edge_index, **kwargs):
   |                                      ^^^^^^^^ ANN003
79 |         # Embeddings
80 |         v = self.GMAB["v"](h, edge_index=edge_index, **kwargs)
   |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:98:5: D400 First line should end with a period
    |
 97 | class GConvSE3Partial(nn.Module):
 98 |     """Graph SE(3)-equivariant node -> edge layer"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
 99 | 
100 |     def __init__(self, f_in, f_out, edge_dim: int = 0, x_ij=None):
    |
    = help: Add period

src\stk_search\geom3d\models\SE3_Transformer_utils.py:98:5: D415 First line should end with a period, question mark, or exclamation point
    |
 97 | class GConvSE3Partial(nn.Module):
 98 |     """Graph SE(3)-equivariant node -> edge layer"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
 99 | 
100 |     def __init__(self, f_in, f_out, edge_dim: int = 0, x_ij=None):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\SE3_Transformer_utils.py:100:9: ANN204 Missing return type annotation for special method `__init__`
    |
 98 |     """Graph SE(3)-equivariant node -> edge layer"""
 99 | 
100 |     def __init__(self, f_in, f_out, edge_dim: int = 0, x_ij=None):
    |         ^^^^^^^^ ANN204
101 |         """SE(3)-equivariant partial convolution.
102 |         A partial convolution computes the inner product between a kernel and
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:100:9: D417 Missing argument descriptions in the docstring for `__init__`: `edge_dim`, `x_ij`
    |
 98 |     """Graph SE(3)-equivariant node -> edge layer"""
 99 | 
100 |     def __init__(self, f_in, f_out, edge_dim: int = 0, x_ij=None):
    |         ^^^^^^^^ D417
101 |         """SE(3)-equivariant partial convolution.
102 |         A partial convolution computes the inner product between a kernel and
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:101:9: D205 1 blank line required between summary line and description
    |
100 |       def __init__(self, f_in, f_out, edge_dim: int = 0, x_ij=None):
101 |           """SE(3)-equivariant partial convolution.
    |  _________^
102 | |         A partial convolution computes the inner product between a kernel and
103 | |         each input channel, without summing over the result from each input
104 | |         channel. This unfolded structure makes it amenable to be used for
105 | |         computing the value-embeddings of the attention mechanism.
106 | | 
107 | |         Args:
108 | |         ----
109 | |             f_in: list of tuples [(multiplicities, type),...]
110 | |             f_out: list of tuples [(multiplicities, type),...]
111 | | 
112 | |         """
    | |___________^ D205
113 |           super().__init__()
114 |           self.f_out = f_out
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\SE3_Transformer_utils.py:120:9: S101 Use of `assert` detected
    |
118 |         # 'cat' concatenates relative position & existing feature vector
119 |         # 'add' adds it, but only if multiplicity > 1
120 |         assert x_ij in [None, "cat", "add"]
    |         ^^^^^^ S101
121 |         self.x_ij = x_ij
122 |         if x_ij == "cat":
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:135:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
133 |                 )
134 | 
135 |     def forward(self, h, positions, r, basis, edge_index, edge_feat=None):
    |         ^^^^^^^ PLR0913
136 |         """Forward pass of the linear layer
137 |         Args:
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:136:9: D205 1 blank line required between summary line and description
    |
135 |       def forward(self, h, positions, r, basis, edge_index, edge_feat=None):
136 |           """Forward pass of the linear layer
    |  _________^
137 | |         Args:
138 | |             h: dict of node-features
139 | |             G: minibatch of (homo)graphs
140 | |             r: inter-atomic distances
141 | |             basis: pre-computed Q * Y
142 | |         Returns:
143 | |             tensor with new features [B, n_points, n_features_out]
144 | |         """
    | |___________^ D205
145 |           # Add node features to local graph scope
146 |           G = {}
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\SE3_Transformer_utils.py:136:9: D400 First line should end with a period
    |
135 |       def forward(self, h, positions, r, basis, edge_index, edge_feat=None):
136 |           """Forward pass of the linear layer
    |  _________^
137 | |         Args:
138 | |             h: dict of node-features
139 | |             G: minibatch of (homo)graphs
140 | |             r: inter-atomic distances
141 | |             basis: pre-computed Q * Y
142 | |         Returns:
143 | |             tensor with new features [B, n_points, n_features_out]
144 | |         """
    | |___________^ D400
145 |           # Add node features to local graph scope
146 |           G = {}
    |
    = help: Add period

src\stk_search\geom3d\models\SE3_Transformer_utils.py:136:9: D415 First line should end with a period, question mark, or exclamation point
    |
135 |       def forward(self, h, positions, r, basis, edge_index, edge_feat=None):
136 |           """Forward pass of the linear layer
    |  _________^
137 | |         Args:
138 | |             h: dict of node-features
139 | |             G: minibatch of (homo)graphs
140 | |             r: inter-atomic distances
141 | |             basis: pre-computed Q * Y
142 | |         Returns:
143 | |             tensor with new features [B, n_points, n_features_out]
144 | |         """
    | |___________^ D415
145 |           # Add node features to local graph scope
146 |           G = {}
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\SE3_Transformer_utils.py:146:9: N806 Variable `G` in function should be lowercase
    |
144 |         """
145 |         # Add node features to local graph scope
146 |         G = {}
    |         ^ N806
147 |         for k, v in h.items():
148 |             G[k] = v
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:148:13: PERF403 Use a dictionary comprehension instead of a for-loop
    |
146 |         G = {}
147 |         for k, v in h.items():
148 |             G[k] = v
    |             ^^^^^^^^ PERF403
149 | 
150 |         if edge_feat is not None:
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:150:9: SIM108 Use ternary operator `feat = torch.cat([edge_feat, r], -1) if edge_feat is not None else r` instead of `if`-`else`-block
    |
148 |               G[k] = v
149 |   
150 |           if edge_feat is not None:
    |  _________^
151 | |             feat = torch.cat([edge_feat, r], -1)
152 | |         else:
153 | |             feat = r
    | |____________________^ SIM108
154 |   
155 |           for (mi, di) in self.f_in.structure:
    |
    = help: Replace `if`-`else`-block with `feat = torch.cat([edge_feat, r], -1) if edge_feat is not None else r`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:155:14: B007 Loop control variable `mi` not used within loop body
    |
153 |             feat = r
154 | 
155 |         for (mi, di) in self.f_in.structure:
    |              ^^ B007
156 |             for (mo, do) in self.f_out.structure:
157 |                 etype = f"({di},{do})"
    |
    = help: Rename unused `mi` to `_mi`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:156:18: B007 Loop control variable `mo` not used within loop body
    |
155 |         for (mi, di) in self.f_in.structure:
156 |             for (mo, do) in self.f_out.structure:
    |                  ^^ B007
157 |                 etype = f"({di},{do})"
158 |                 G[etype] = self.kernel_unary[etype](feat, basis)
    |
    = help: Rename unused `mo` to `_mo`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:169:23: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
167 |                 # if type 1 and flag set, add relative position as feature
168 |                 if self.x_ij == "cat" and d_in == 1:
169 |                     # TODO: double-check
    |                       ^^^^ TD002
170 |                     # relative positions
171 |                     rel = (positions[row] - positions[col]).view(-1, 3, 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:169:23: TD003 Missing issue link on the line following this TODO
    |
167 |                 # if type 1 and flag set, add relative position as feature
168 |                 if self.x_ij == "cat" and d_in == 1:
169 |                     # TODO: double-check
    |                       ^^^^ TD003
170 |                     # relative positions
171 |                     rel = (positions[row] - positions[col]).view(-1, 3, 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:169:23: FIX002 Line contains TODO, consider resolving the issue
    |
167 |                 # if type 1 and flag set, add relative position as feature
168 |                 if self.x_ij == "cat" and d_in == 1:
169 |                     # TODO: double-check
    |                       ^^^^ FIX002
170 |                     # relative positions
171 |                     rel = (positions[row] - positions[col]).view(-1, 3, 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:178:27: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
176 |                         src = rel
177 |                     else:
178 |                         # TODO: double-check
    |                           ^^^^ TD002
179 |                         h_ = G[f"{d_in}"]
180 |                         # features of src node, shape [edges, m_in*(2l+1), 1]
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:178:27: TD003 Missing issue link on the line following this TODO
    |
176 |                         src = rel
177 |                     else:
178 |                         # TODO: double-check
    |                           ^^^^ TD003
179 |                         h_ = G[f"{d_in}"]
180 |                         # features of src node, shape [edges, m_in*(2l+1), 1]
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:178:27: FIX002 Line contains TODO, consider resolving the issue
    |
176 |                         src = rel
177 |                     else:
178 |                         # TODO: double-check
    |                           ^^^^ FIX002
179 |                         h_ = G[f"{d_in}"]
180 |                         # features of src node, shape [edges, m_in*(2l+1), 1]
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:185:23: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
183 |                         src = torch.cat([src, rel], dim=1)
184 |                 elif self.x_ij == "add" and d_in == 1 and m_in > 1:
185 |                     # TODO: double-check
    |                       ^^^^ TD002
186 |                     h_ = G[f"{d_in}"]
187 |                     src = h_[row].view(-1, m_in * (2 * d_in + 1), 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:185:23: TD003 Missing issue link on the line following this TODO
    |
183 |                         src = torch.cat([src, rel], dim=1)
184 |                 elif self.x_ij == "add" and d_in == 1 and m_in > 1:
185 |                     # TODO: double-check
    |                       ^^^^ TD003
186 |                     h_ = G[f"{d_in}"]
187 |                     src = h_[row].view(-1, m_in * (2 * d_in + 1), 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:185:23: FIX002 Line contains TODO, consider resolving the issue
    |
183 |                         src = torch.cat([src, rel], dim=1)
184 |                 elif self.x_ij == "add" and d_in == 1 and m_in > 1:
185 |                     # TODO: double-check
    |                       ^^^^ FIX002
186 |                     h_ = G[f"{d_in}"]
187 |                     src = h_[row].view(-1, m_in * (2 * d_in + 1), 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:202:9: ANN204 Missing return type annotation for special method `__repr__`
    |
200 |         return result
201 | 
202 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
203 |         return f"GConvSE3Partial(structure={self.f_out})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:202:9: D105 Missing docstring in magic method
    |
200 |         return result
201 | 
202 |     def __repr__(self):
    |         ^^^^^^^^ D105
203 |         return f"GConvSE3Partial(structure={self.f_out})"
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:207:5: D205 1 blank line required between summary line and description
    |
206 |   class G1x1SE3(nn.Module):
207 |       """Graph Linear SE(3)-equivariant layer, equivalent to a 1x1 convolution.
    |  _____^
208 | |     This is equivalent to a self-interaction layer in TensorField Networks.
209 | |     """
    | |_______^ D205
210 |   
211 |       def __init__(self, f_in, f_out, learnable=True):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\SE3_Transformer_utils.py:211:9: ANN204 Missing return type annotation for special method `__init__`
    |
209 |     """
210 | 
211 |     def __init__(self, f_in, f_out, learnable=True):
    |         ^^^^^^^^ ANN204
212 |         """SE(3)-equivariant 1x1 convolution.
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:211:9: D417 Missing argument description in the docstring for `__init__`: `learnable`
    |
209 |     """
210 | 
211 |     def __init__(self, f_in, f_out, learnable=True):
    |         ^^^^^^^^ D417
212 |         """SE(3)-equivariant 1x1 convolution.
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:211:37: FBT002 Boolean default positional argument in function definition
    |
209 |     """
210 | 
211 |     def __init__(self, f_in, f_out, learnable=True):
    |                                     ^^^^^^^^^ FBT002
212 |         """SE(3)-equivariant 1x1 convolution.
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:232:9: D102 Missing docstring in public method
    |
230 |             )
231 | 
232 |     def forward(self, features, **kwargs):
    |         ^^^^^^^ D102
233 |         output = {}
234 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:232:33: ANN003 Missing type annotation for `**kwargs`
    |
230 |             )
231 | 
232 |     def forward(self, features, **kwargs):
    |                                 ^^^^^^^^ ANN003
233 |         output = {}
234 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:232:35: ARG002 Unused method argument: `kwargs`
    |
230 |             )
231 | 
232 |     def forward(self, features, **kwargs):
    |                                   ^^^^^^ ARG002
233 |         output = {}
234 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:235:16: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
233 |         output = {}
234 |         for k, v in features.items():
235 |             if str(k) in self.transform.keys():
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
236 |                 output[k] = torch.matmul(self.transform[str(k)], v)
237 |         return output
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:239:9: ANN204 Missing return type annotation for special method `__repr__`
    |
237 |         return output
238 | 
239 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
240 |         return f"G1x1SE3(structure={self.f_out})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:239:9: D105 Missing docstring in magic method
    |
237 |         return output
238 | 
239 |     def __repr__(self):
    |         ^^^^^^^^ D105
240 |         return f"G1x1SE3(structure={self.f_out})"
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:246:9: ANN204 Missing return type annotation for special method `__init__`
    |
244 |     """An SE(3)-equivariant multi-headed self-attention module for DGL graphs."""
245 | 
246 |     def __init__(self, f_value, f_key, n_heads):
    |         ^^^^^^^^ ANN204
247 |         """SE(3)-equivariant MAB (multi-headed attention block) layer.
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:261:44: ANN003 Missing type annotation for `**kwargs`
    |
259 |         self.n_heads = n_heads
260 | 
261 |     def forward(self, v, k, q, edge_index, **kwargs):
    |                                            ^^^^^^^^ ANN003
262 |         """Forward pass of the linear layer
263 |         Args:
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:261:46: ARG002 Unused method argument: `kwargs`
    |
259 |         self.n_heads = n_heads
260 | 
261 |     def forward(self, v, k, q, edge_index, **kwargs):
    |                                              ^^^^^^ ARG002
262 |         """Forward pass of the linear layer
263 |         Args:
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:262:9: D205 1 blank line required between summary line and description
    |
261 |       def forward(self, v, k, q, edge_index, **kwargs):
262 |           """Forward pass of the linear layer
    |  _________^
263 | |         Args:
264 | |             G: minibatch of (homo)graphs
265 | |             v: dict of value edge-features
266 | |             k: dict of key edge-features
267 | |             q: dict of query node-features
268 | |         Returns:
269 | |             tensor with new features [B, n_points, n_features_out]
270 | |         """
    | |___________^ D205
271 |           # Add node features to local graph scope
272 |           ## We use the stacked tensor representation for attention
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\SE3_Transformer_utils.py:262:9: D400 First line should end with a period
    |
261 |       def forward(self, v, k, q, edge_index, **kwargs):
262 |           """Forward pass of the linear layer
    |  _________^
263 | |         Args:
264 | |             G: minibatch of (homo)graphs
265 | |             v: dict of value edge-features
266 | |             k: dict of key edge-features
267 | |             q: dict of query node-features
268 | |         Returns:
269 | |             tensor with new features [B, n_points, n_features_out]
270 | |         """
    | |___________^ D400
271 |           # Add node features to local graph scope
272 |           ## We use the stacked tensor representation for attention
    |
    = help: Add period

src\stk_search\geom3d\models\SE3_Transformer_utils.py:262:9: D415 First line should end with a period, question mark, or exclamation point
    |
261 |       def forward(self, v, k, q, edge_index, **kwargs):
262 |           """Forward pass of the linear layer
    |  _________^
263 | |         Args:
264 | |             G: minibatch of (homo)graphs
265 | |             v: dict of value edge-features
266 | |             k: dict of key edge-features
267 | |             q: dict of query node-features
268 | |         Returns:
269 | |             tensor with new features [B, n_points, n_features_out]
270 | |         """
    | |___________^ D415
271 |           # Add node features to local graph scope
272 |           ## We use the stacked tensor representation for attention
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\SE3_Transformer_utils.py:273:9: N806 Variable `G` in function should be lowercase
    |
271 |         # Add node features to local graph scope
272 |         ## We use the stacked tensor representation for attention
273 |         G = {}
    |         ^ N806
274 |         for m, d in self.f_value.structure:
275 |             G[f"v{d}"] = v[f"{d}"].view(-1, self.n_heads, m // self.n_heads, 2 * d + 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:282:9: N806 Variable `N` in function should be lowercase
    |
280 |             q, self.n_heads, self.f_key, squeeze=True
281 |         )  # [nodes, heads, channels](?)
282 |         N = G["q"].size()[0]
    |         ^ N806
283 | 
284 |         # Compute attention weights
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:289:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
287 |         e = (G["k"] * G["q"][col]).sum(2)
288 | 
289 |         # TODO: need double-check
    |           ^^^^ TD002
290 |         e = e / np.sqrt(self.f_key.n_features)
291 |         e = e.exp()
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:289:11: TD003 Missing issue link on the line following this TODO
    |
287 |         e = (G["k"] * G["q"][col]).sum(2)
288 | 
289 |         # TODO: need double-check
    |           ^^^^ TD003
290 |         e = e / np.sqrt(self.f_key.n_features)
291 |         e = e.exp()
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:289:11: FIX002 Line contains TODO, consider resolving the issue
    |
287 |         e = (G["k"] * G["q"][col]).sum(2)
288 | 
289 |         # TODO: need double-check
    |           ^^^^ FIX002
290 |         e = e / np.sqrt(self.f_key.n_features)
291 |         e = e.exp()
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:302:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
300 |             msg = attn * value
301 | 
302 |             # TODO: row or col?
    |               ^^^^ TD002
303 |             G[f"out{d_out}"] = scatter_add(msg, col, dim=0, dim_size=N)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:302:15: TD003 Missing issue link on the line following this TODO
    |
300 |             msg = attn * value
301 | 
302 |             # TODO: row or col?
    |               ^^^^ TD003
303 |             G[f"out{d_out}"] = scatter_add(msg, col, dim=0, dim_size=N)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:302:15: FIX002 Line contains TODO, consider resolving the issue
    |
300 |             msg = attn * value
301 | 
302 |             # TODO: row or col?
    |               ^^^^ FIX002
303 |             G[f"out{d_out}"] = scatter_add(msg, col, dim=0, dim_size=N)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:311:9: ANN204 Missing return type annotation for special method `__repr__`
    |
309 |         return result
310 | 
311 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
312 |         return f"GMABSE3(n_heads={self.n_heads}, structure={self.f_value})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:311:9: D105 Missing docstring in magic method
    |
309 |         return result
310 | 
311 |     def __repr__(self):
    |         ^^^^^^^^ D105
312 |         return f"GMABSE3(n_heads={self.n_heads}, structure={self.f_value})"
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:315:7: D101 Missing docstring in public class
    |
315 | class GAttentiveSelfInt(nn.Module):
    |       ^^^^^^^^^^^^^^^^^ D101
316 |     def __init__(self, f_in, f_out):
317 |         """SE(3)-equivariant 1x1 convolution.
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:316:9: ANN204 Missing return type annotation for special method `__init__`
    |
315 | class GAttentiveSelfInt(nn.Module):
316 |     def __init__(self, f_in, f_out):
    |         ^^^^^^^^ ANN204
317 |         """SE(3)-equivariant 1x1 convolution.
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:338:9: ANN202 Missing return type annotation for private function `_build_net`
    |
336 |             self.transform[str(o)] = self._build_net(m_in, m_out)
337 | 
338 |     def _build_net(self, m_in: int, m_out):
    |         ^^^^^^^^^^ ANN202
339 |         n_hidden = m_in * m_out
340 |         cur_inpt = m_in * m_in
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\SE3_Transformer_utils.py:345:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
343 |             net.append(nn.LayerNorm(int(cur_inpt)))
344 |             net.append(self.nonlin)
345 |             # TODO: implement cleaner init
    |               ^^^^ TD002
346 |             net.append(nn.Linear(cur_inpt, n_hidden, bias=(i == self.num_layers - 1)))
347 |             nn.init.kaiming_uniform_(net[-1].weight)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:345:15: TD003 Missing issue link on the line following this TODO
    |
343 |             net.append(nn.LayerNorm(int(cur_inpt)))
344 |             net.append(self.nonlin)
345 |             # TODO: implement cleaner init
    |               ^^^^ TD003
346 |             net.append(nn.Linear(cur_inpt, n_hidden, bias=(i == self.num_layers - 1)))
347 |             nn.init.kaiming_uniform_(net[-1].weight)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:345:15: FIX002 Line contains TODO, consider resolving the issue
    |
343 |             net.append(nn.LayerNorm(int(cur_inpt)))
344 |             net.append(self.nonlin)
345 |             # TODO: implement cleaner init
    |               ^^^^ FIX002
346 |             net.append(nn.Linear(cur_inpt, n_hidden, bias=(i == self.num_layers - 1)))
347 |             nn.init.kaiming_uniform_(net[-1].weight)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:351:9: D102 Missing docstring in public method
    |
349 |         return nn.Sequential(*net)
350 | 
351 |     def forward(self, features, **kwargs):
    |         ^^^^^^^ D102
352 |         output = {}
353 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:351:33: ANN003 Missing type annotation for `**kwargs`
    |
349 |         return nn.Sequential(*net)
350 | 
351 |     def forward(self, features, **kwargs):
    |                                 ^^^^^^^^ ANN003
352 |         output = {}
353 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:351:35: ARG002 Unused method argument: `kwargs`
    |
349 |         return nn.Sequential(*net)
350 | 
351 |     def forward(self, features, **kwargs):
    |                                   ^^^^^^ ARG002
352 |         output = {}
353 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:358:13: S101 Use of `assert` detected
    |
356 |             m_in = self.f_in.structure_dict[int(k)]
357 |             m_out = self.f_out.structure_dict[int(k)]
358 |             assert v.shape[-2] == m_in
    |             ^^^^^^ S101
359 |             assert v.shape[-1] == 2 * int(k) + 1
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:359:13: S101 Use of `assert` detected
    |
357 |             m_out = self.f_out.structure_dict[int(k)]
358 |             assert v.shape[-2] == m_in
359 |             assert v.shape[-1] == 2 * int(k) + 1
    |             ^^^^^^ S101
360 | 
361 |             # Compute the norms and normalized features
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:362:13: ERA001 Found commented-out code
    |
361 |             # Compute the norms and normalized features
362 |             # norm = v.norm(p=2, dim=-1, keepdim=True).clamp_min(self.eps).expand_as(v)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
363 |             # phase = v / norm # [..., m, 2*k+1]
364 |             scalars = torch.einsum("...ac,...bc->...ab", [v, v])  # [..., m_in, m_in]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SE3_Transformer_utils.py:363:13: ERA001 Found commented-out code
    |
361 |             # Compute the norms and normalized features
362 |             # norm = v.norm(p=2, dim=-1, keepdim=True).clamp_min(self.eps).expand_as(v)
363 |             # phase = v / norm # [..., m, 2*k+1]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
364 |             scalars = torch.einsum("...ac,...bc->...ab", [v, v])  # [..., m_in, m_in]
365 |             scalars = scalars.view(*first_dims, m_in * m_in)  # [..., m_in*m_in]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SE3_Transformer_utils.py:376:13: ERA001 Found commented-out code
    |
374 |             )  # [..., m_out, m_in]
375 |             att_weights = F.softmax(input=att_weights, dim=-1)
376 |             # shape [..., m_out, 2*k+1]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
377 |             # output[k] = torch.einsum('...nm,...md->...nd', [att_weights, phase])
378 |             output[k] = torch.einsum("...nm,...md->...nd", [att_weights, v])
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SE3_Transformer_utils.py:377:13: ERA001 Found commented-out code
    |
375 |             att_weights = F.softmax(input=att_weights, dim=-1)
376 |             # shape [..., m_out, 2*k+1]
377 |             # output[k] = torch.einsum('...nm,...md->...nd', [att_weights, phase])
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
378 |             output[k] = torch.einsum("...nm,...md->...nd", [att_weights, v])
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SE3_Transformer_utils.py:382:9: ANN204 Missing return type annotation for special method `__repr__`
    |
380 |         return output
381 | 
382 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
383 |         return f"AttentiveSelfInteractionSE3(in={self.f_in}, out={self.f_out})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:382:9: D105 Missing docstring in magic method
    |
380 |         return output
381 | 
382 |     def __repr__(self):
    |         ^^^^^^^^ D105
383 |         return f"AttentiveSelfInteractionSE3(in={self.f_in}, out={self.f_out})"
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:389:9: ANN204 Missing return type annotation for special method `__init__`
    |
387 |     """SE(3)-equvariant graph residual sum function."""
388 | 
389 |     def __init__(self, f_x: Fiber, f_y: Fiber):
    |         ^^^^^^^^ ANN204
390 |         """SE(3)-equvariant graph residual sum function.
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:403:9: ANN204 Missing return type annotation for special method `__repr__`
    |
401 |         self.f_out = Fiber.combine_max(f_x, f_y)
402 | 
403 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
404 |         return f"GSum(structure={self.f_out})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:403:9: D105 Missing docstring in magic method
    |
401 |         self.f_out = Fiber.combine_max(f_x, f_y)
402 | 
403 |     def __repr__(self):
    |         ^^^^^^^^ D105
404 |         return f"GSum(structure={self.f_out})"
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:406:9: D102 Missing docstring in public method
    |
404 |         return f"GSum(structure={self.f_out})"
405 | 
406 |     def forward(self, x, y):
    |         ^^^^^^^ D102
407 |         out = {}
408 |         for k in self.f_out.degrees:
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:409:13: PLW2901 `for` loop variable `k` overwritten by assignment target
    |
407 |         out = {}
408 |         for k in self.f_out.degrees:
409 |             k = str(k)
    |             ^ PLW2901
410 |             if (k in x) and (k in y):
411 |                 if x[k].shape[1] > y[k].shape[1]:
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:433:5: D400 First line should end with a period
    |
432 | class GCat(nn.Module):
433 |     """Concat only degrees which are in f_x"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
434 | 
435 |     def __init__(self, f_x: Fiber, f_y: Fiber):
    |
    = help: Add period

src\stk_search\geom3d\models\SE3_Transformer_utils.py:433:5: D415 First line should end with a period, question mark, or exclamation point
    |
432 | class GCat(nn.Module):
433 |     """Concat only degrees which are in f_x"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
434 | 
435 |     def __init__(self, f_x: Fiber, f_y: Fiber):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\SE3_Transformer_utils.py:435:9: ANN204 Missing return type annotation for special method `__init__`
    |
433 |     """Concat only degrees which are in f_x"""
434 | 
435 |     def __init__(self, f_x: Fiber, f_y: Fiber):
    |         ^^^^^^^^ ANN204
436 |         super().__init__()
437 |         self.f_x = f_x
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:435:9: D107 Missing docstring in `__init__`
    |
433 |     """Concat only degrees which are in f_x"""
434 | 
435 |     def __init__(self, f_x: Fiber, f_y: Fiber):
    |         ^^^^^^^^ D107
436 |         super().__init__()
437 |         self.f_x = f_x
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:446:9: D102 Missing docstring in public method
    |
444 |         self.f_out = Fiber(dictionary=f_out)
445 | 
446 |     def forward(self, x, y):
    |         ^^^^^^^ D102
447 |         out = {}
448 |         for k in self.f_out.degrees:
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:449:13: PLW2901 `for` loop variable `k` overwritten by assignment target
    |
447 |         out = {}
448 |         for k in self.f_out.degrees:
449 |             k = str(k)
    |             ^ PLW2901
450 |             if k in y:
451 |                 out[k] = torch.cat([x[k], y[k]], 1)
    |

src\stk_search\geom3d\models\SE3_Transformer_utils.py:456:9: ANN204 Missing return type annotation for special method `__repr__`
    |
454 |         return out
455 | 
456 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
457 |         return f"GCat(structure={self.f_out})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SE3_Transformer_utils.py:456:9: D105 Missing docstring in magic method
    |
454 |         return out
455 | 
456 |     def __repr__(self):
    |         ^^^^^^^^ D105
457 |         return f"GCat(structure={self.f_out})"
    |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:1:1: N999 Invalid module name: 'SEGNN'
src\stk_search\geom3d\models\SEGNN\SEGNN.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SEGNN\SEGNN.py:3:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import numpy as np
2 | import torch
3 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
4 | from e3nn.nn import BatchNorm
5 | from e3nn.o3 import Irreps, spherical_harmonics
  |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:20:7: D101 Missing docstring in public class
   |
20 | class SEGNNModel(nn.Module):
   |       ^^^^^^^^^^ D101
21 |     def __init__(self, input_features, output_features, hidden_features, N, norm, lmax_h, lmax_pos=None, pool="avg", edge_inference=False):
22 |         super(SEGNNModel, self).__init__()
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:21:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
20 | class SEGNNModel(nn.Module):
21 |     def __init__(self, input_features, output_features, hidden_features, N, norm, lmax_h, lmax_pos=None, pool="avg", edge_inference=False):
   |         ^^^^^^^^ PLR0913
22 |         super(SEGNNModel, self).__init__()
23 |         self.num_classes = input_features
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:21:9: ANN204 Missing return type annotation for special method `__init__`
   |
20 | class SEGNNModel(nn.Module):
21 |     def __init__(self, input_features, output_features, hidden_features, N, norm, lmax_h, lmax_pos=None, pool="avg", edge_inference=False):
   |         ^^^^^^^^ ANN204
22 |         super(SEGNNModel, self).__init__()
23 |         self.num_classes = input_features
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SEGNN\SEGNN.py:21:9: D107 Missing docstring in `__init__`
   |
20 | class SEGNNModel(nn.Module):
21 |     def __init__(self, input_features, output_features, hidden_features, N, norm, lmax_h, lmax_pos=None, pool="avg", edge_inference=False):
   |         ^^^^^^^^ D107
22 |         super(SEGNNModel, self).__init__()
23 |         self.num_classes = input_features
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:21:74: N803 Argument name `N` should be lowercase
   |
20 | class SEGNNModel(nn.Module):
21 |     def __init__(self, input_features, output_features, hidden_features, N, norm, lmax_h, lmax_pos=None, pool="avg", edge_inference=False):
   |                                                                          ^ N803
22 |         super(SEGNNModel, self).__init__()
23 |         self.num_classes = input_features
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:21:118: FBT002 Boolean default positional argument in function definition
   |
20 | class SEGNNModel(nn.Module):
21 |     def __init__(self, input_features, output_features, hidden_features, N, norm, lmax_h, lmax_pos=None, pool="avg", edge_inference=False):
   |                                                                                                                      ^^^^^^^^^^^^^^ FBT002
22 |         super(SEGNNModel, self).__init__()
23 |         self.num_classes = input_features
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:22:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
20 | class SEGNNModel(nn.Module):
21 |     def __init__(self, input_features, output_features, hidden_features, N, norm, lmax_h, lmax_pos=None, pool="avg", edge_inference=False):
22 |         super(SEGNNModel, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^ UP008
23 |         self.num_classes = input_features
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SEGNN\SEGNN.py:25:24: E711 Comparison to `None` should be `cond is None`
   |
23 |         self.num_classes = input_features
24 | 
25 |         if lmax_pos == None:
   |                        ^^^^ E711
26 |             lmax_pos = lmax_h
27 |         self.pool = pool
   |
   = help: Replace with `cond is None`

src\stk_search\geom3d\models\SEGNN\SEGNN.py:40:53: FBT003 Boolean positional value in function call
   |
38 |         # Irreps for the hidden activations (s.t. the nr of weights in the TP approx that of a standard linear layer)
39 |         node_hidden_irreps = WeightBalancedIrreps(
40 |             node_hidden_irreps_scalar, attr_irreps, True, lmax=lmax_h)  # True: copies of sh
   |                                                     ^^^^ FBT003
41 |         self.node_hidden_irreps = node_hidden_irreps
42 |         # Network for computing the node attributes
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:55:13: B007 Loop control variable `i` not used within loop body
   |
53 |         # The main layers
54 |         self.layers = []
55 |         for i in range(N):
   |             ^ B007
56 |             self.layers.append(SEGNN(node_hidden_irreps,  # in
57 |                                      node_hidden_irreps,  # hidden
   |
   = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\SEGNN\SEGNN.py:75:9: D102 Missing docstring in public method
   |
73 |                                                       node_out_irreps_scalar)
74 | 
75 |     def forward(self, *argv):
   |         ^^^^^^^ D102
76 |         if len(argv) == 4:
77 |             x, pos, edge_index, batch = argv[0], argv[1], argv[2], argv[3]
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:75:23: ANN002 Missing type annotation for `*argv`
   |
73 |                                                       node_out_irreps_scalar)
74 | 
75 |     def forward(self, *argv):
   |                       ^^^^^ ANN002
76 |         if len(argv) == 4:
77 |             x, pos, edge_index, batch = argv[0], argv[1], argv[2], argv[3]
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:76:25: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
   |
75 |     def forward(self, *argv):
76 |         if len(argv) == 4:
   |                         ^ PLR2004
77 |             x, pos, edge_index, batch = argv[0], argv[1], argv[2], argv[3]
78 |             graph = Data(x=x, pos=pos, radius_edge_index=edge_index, batch=batch)
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:97:9: S101 Use of `assert` detected
   |
95 |         edge_index_max = edge_index.max().item()
96 |         num_nodes = graph.num_nodes
97 |         assert num_nodes == x.size()[0]
   |         ^^^^^^ S101
98 |         if (graph.has_isolated_nodes() and edge_index_max + 1 != num_nodes):
99 |             nr_add_attr = num_nodes - (edge_index_max + 1)
   |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:125:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
123 |         x = self.head_post_pool_layer_1(x)
124 |         x = self.head_post_pool_layer_2(x)
125 |         return x
    |                ^ RET504
126 | 
127 |     def forward_with_gathered_index(self, x, pos, edge_index, batch, periodic_index_mapping, graph):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SEGNN\SEGNN.py:127:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
125 |         return x
126 | 
127 |     def forward_with_gathered_index(self, x, pos, edge_index, batch, periodic_index_mapping, graph):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
128 | 
129 |         if x.dim() > 1:
    |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:127:9: D102 Missing docstring in public method
    |
125 |         return x
126 | 
127 |     def forward_with_gathered_index(self, x, pos, edge_index, batch, periodic_index_mapping, graph):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
128 | 
129 |         if x.dim() > 1:
    |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:174:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
172 |         x = self.head_post_pool_layer_1(x)
173 |         x = self.head_post_pool_layer_2(x)
174 |         return x
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SEGNN\SEGNN.py:178:5: D200 One-line docstring should fit on one line
    |
177 |   class SEGNN(MessagePassing):
178 |       """E(3) equivariant message passing layer.
    |  _____^
179 | |     """
    | |_______^ D200
180 |   
181 |       def __init__(self, node_in_irreps, node_hidden_irreps, node_out_irreps, attr_irreps, norm, edge_inference):
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\SEGNN\SEGNN.py:181:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
179 |     """
180 | 
181 |     def __init__(self, node_in_irreps, node_hidden_irreps, node_out_irreps, attr_irreps, norm, edge_inference):
    |         ^^^^^^^^ PLR0913
182 |         super(SEGNN, self).__init__(node_dim=-2, aggr="add")
    |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:181:9: ANN204 Missing return type annotation for special method `__init__`
    |
179 |     """
180 | 
181 |     def __init__(self, node_in_irreps, node_hidden_irreps, node_out_irreps, attr_irreps, norm, edge_inference):
    |         ^^^^^^^^ ANN204
182 |         super(SEGNN, self).__init__(node_dim=-2, aggr="add")
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SEGNN\SEGNN.py:181:9: D107 Missing docstring in `__init__`
    |
179 |     """
180 | 
181 |     def __init__(self, node_in_irreps, node_hidden_irreps, node_out_irreps, attr_irreps, norm, edge_inference):
    |         ^^^^^^^^ D107
182 |         super(SEGNN, self).__init__(node_dim=-2, aggr="add")
    |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:182:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
181 |     def __init__(self, node_in_irreps, node_hidden_irreps, node_out_irreps, attr_irreps, norm, edge_inference):
182 |         super(SEGNN, self).__init__(node_dim=-2, aggr="add")
    |              ^^^^^^^^^^^^^ UP008
183 | 
184 |         self.norm = norm
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SEGNN\SEGNN.py:217:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
215 |             self.inference_layer = O3TensorProduct(node_hidden_irreps, Irreps("1x0e"), attr_irreps)
216 | 
217 |     def forward(self, x, pos, edge_index, edge_dist, edge_attr, node_attr, batch):
    |         ^^^^^^^ PLR0913
218 |         """Propagate messages along edges"""
219 |         x, pos = self.propagate(edge_index, x=x, pos=pos, edge_dist=edge_dist,
    |

src\stk_search\geom3d\models\SEGNN\SEGNN.py:218:9: D400 First line should end with a period
    |
217 |     def forward(self, x, pos, edge_index, edge_dist, edge_attr, node_attr, batch):
218 |         """Propagate messages along edges"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
219 |         x, pos = self.propagate(edge_index, x=x, pos=pos, edge_dist=edge_dist,
220 |                                 node_attr=node_attr, edge_attr=edge_attr)
    |
    = help: Add period

src\stk_search\geom3d\models\SEGNN\SEGNN.py:218:9: D415 First line should end with a period, question mark, or exclamation point
    |
217 |     def forward(self, x, pos, edge_index, edge_dist, edge_attr, node_attr, batch):
218 |         """Propagate messages along edges"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
219 |         x, pos = self.propagate(edge_index, x=x, pos=pos, edge_dist=edge_dist,
220 |                                 node_attr=node_attr, edge_attr=edge_attr)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\SEGNN.py:232:9: D400 First line should end with a period
    |
231 |     def message(self, x_i, x_j, edge_dist, edge_attr):
232 |         """Create messages"""
    |         ^^^^^^^^^^^^^^^^^^^^^ D400
233 |         message = self.message_layer_1(torch.cat((x_i, x_j, edge_dist), dim=-1), edge_attr)
234 |         message = self.message_layer_2(message, edge_attr)
    |
    = help: Add period

src\stk_search\geom3d\models\SEGNN\SEGNN.py:232:9: D415 First line should end with a period, question mark, or exclamation point
    |
231 |     def message(self, x_i, x_j, edge_dist, edge_attr):
232 |         """Create messages"""
    |         ^^^^^^^^^^^^^^^^^^^^^ D415
233 |         message = self.message_layer_1(torch.cat((x_i, x_j, edge_dist), dim=-1), edge_attr)
234 |         message = self.message_layer_2(message, edge_attr)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\SEGNN.py:244:9: D400 First line should end with a period
    |
243 |     def update(self, message, x, pos, node_attr):
244 |         """Update note features"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
245 |         update = self.update_layer_1(torch.cat((x, message), dim=-1), node_attr)
246 |         update = self.update_layer_2(update, node_attr)
    |
    = help: Add period

src\stk_search\geom3d\models\SEGNN\SEGNN.py:244:9: D415 First line should end with a period, question mark, or exclamation point
    |
243 |     def update(self, message, x, pos, node_attr):
244 |         """Update note features"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
245 |         update = self.update_layer_1(torch.cat((x, message), dim=-1), node_attr)
246 |         update = self.update_layer_2(update, node_attr)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\SEGNN\__init__.py:1:20: F401 `.SEGNN.SEGNNModel` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .SEGNN import SEGNNModel
  |                    ^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `SEGNNModel as SEGNNModel`

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:4:5: N802 Function name `BalancedIrreps` should be lowercase
  |
4 | def BalancedIrreps(lmax, vec_dim, sh_type=True):
  |     ^^^^^^^^^^^^^^ N802
5 |     """Allocates irreps equally along channel budget, resulting
6 |         in unequal numbers of irreps in ratios of 2l_i + 1 to 2l_j + 1.
  |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:4:35: FBT002 Boolean default positional argument in function definition
  |
4 | def BalancedIrreps(lmax, vec_dim, sh_type=True):
  |                                   ^^^^^^^ FBT002
5 |     """Allocates irreps equally along channel budget, resulting
6 |         in unequal numbers of irreps in ratios of 2l_i + 1 to 2l_j + 1.
  |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:5:5: D205 1 blank line required between summary line and description
   |
 4 |   def BalancedIrreps(lmax, vec_dim, sh_type=True):
 5 |       """Allocates irreps equally along channel budget, resulting
   |  _____^
 6 | |         in unequal numbers of irreps in ratios of 2l_i + 1 to 2l_j + 1.
 7 | | 
 8 | |     Parameters
 9 | |     ----------
10 | |     lmax : int
11 | |         Maximum order of irreps.
12 | |     vec_dim : int
13 | |         Dim of feature vector.
14 | |     sh_type : bool
15 | |         if true, use spherical harmonics. Else the full set of irreps (with redundance).
16 | | 
17 | |     Returns
18 | |     -------
19 | |     Irreps
20 | |         Resulting irreps for feature vectors.
21 | | 
22 | |     """
   | |_______^ D205
23 |       irrep_spec = "0e"
24 |       for l in range(1, lmax + 1):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:24:9: E741 Ambiguous variable name: `l`
   |
22 |     """
23 |     irrep_spec = "0e"
24 |     for l in range(1, lmax + 1):
   |         ^ E741
25 |         if sh_type:
26 |             irrep_spec += f" + {l}" + ("e" if (l % 2) == 0 else "o")
   |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:50:5: N802 Function name `WeightBalancedIrreps` should be lowercase
   |
50 | def WeightBalancedIrreps(irreps_in1_scalar, irreps_in2, sh=True, lmax=None):
   |     ^^^^^^^^^^^^^^^^^^^^ N802
51 |     """Determines an irreps_in1 type of order irreps_in2.lmax that when used in a tensor product
52 |     irreps_in1 x irreps_in2 -> irreps_in1
   |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:50:57: FBT002 Boolean default positional argument in function definition
   |
50 | def WeightBalancedIrreps(irreps_in1_scalar, irreps_in2, sh=True, lmax=None):
   |                                                         ^^ FBT002
51 |     """Determines an irreps_in1 type of order irreps_in2.lmax that when used in a tensor product
52 |     irreps_in1 x irreps_in2 -> irreps_in1
   |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:51:5: D205 1 blank line required between summary line and description
   |
50 |   def WeightBalancedIrreps(irreps_in1_scalar, irreps_in2, sh=True, lmax=None):
51 |       """Determines an irreps_in1 type of order irreps_in2.lmax that when used in a tensor product
   |  _____^
52 | |     irreps_in1 x irreps_in2 -> irreps_in1
53 | |     would have the same number of weights as for a standard linear layer, e.g. a tensor product
54 | |     irreps_in1_scalar x "1x0e" -> irreps_in1_scalar
55 | | 
56 | |     Parameters
57 | |     ----------
58 | |     irreps_in1_scalar : o3.Irreps
59 | |         Number of hidden features, represented by zeroth order irreps.
60 | |     irreps_in2 : o3.Irreps
61 | |         Irreps related to edge attributes.
62 | |     sh : bool
63 | |         if true, yields equal number of every order. Else returns balanced irrep.
64 | |     lmax : int
65 | |         Maximum order irreps to be considered.
66 | | 
67 | |     Returns
68 | |     -------
69 | |     o3.Irreps
70 | |         Irreps for hidden feaure vectors. 
71 | | 
72 | |     """
   | |_______^ D205
73 |       n = 1
74 |       if lmax == None:
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:51:5: D400 First line should end with a period
   |
50 |   def WeightBalancedIrreps(irreps_in1_scalar, irreps_in2, sh=True, lmax=None):
51 |       """Determines an irreps_in1 type of order irreps_in2.lmax that when used in a tensor product
   |  _____^
52 | |     irreps_in1 x irreps_in2 -> irreps_in1
53 | |     would have the same number of weights as for a standard linear layer, e.g. a tensor product
54 | |     irreps_in1_scalar x "1x0e" -> irreps_in1_scalar
55 | | 
56 | |     Parameters
57 | |     ----------
58 | |     irreps_in1_scalar : o3.Irreps
59 | |         Number of hidden features, represented by zeroth order irreps.
60 | |     irreps_in2 : o3.Irreps
61 | |         Irreps related to edge attributes.
62 | |     sh : bool
63 | |         if true, yields equal number of every order. Else returns balanced irrep.
64 | |     lmax : int
65 | |         Maximum order irreps to be considered.
66 | | 
67 | |     Returns
68 | |     -------
69 | |     o3.Irreps
70 | |         Irreps for hidden feaure vectors. 
71 | | 
72 | |     """
   | |_______^ D400
73 |       n = 1
74 |       if lmax == None:
   |
   = help: Add period

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:51:5: D401 First line of docstring should be in imperative mood: "Determines an irreps_in1 type of order irreps_in2.lmax that when used in a tensor product"
   |
50 |   def WeightBalancedIrreps(irreps_in1_scalar, irreps_in2, sh=True, lmax=None):
51 |       """Determines an irreps_in1 type of order irreps_in2.lmax that when used in a tensor product
   |  _____^
52 | |     irreps_in1 x irreps_in2 -> irreps_in1
53 | |     would have the same number of weights as for a standard linear layer, e.g. a tensor product
54 | |     irreps_in1_scalar x "1x0e" -> irreps_in1_scalar
55 | | 
56 | |     Parameters
57 | |     ----------
58 | |     irreps_in1_scalar : o3.Irreps
59 | |         Number of hidden features, represented by zeroth order irreps.
60 | |     irreps_in2 : o3.Irreps
61 | |         Irreps related to edge attributes.
62 | |     sh : bool
63 | |         if true, yields equal number of every order. Else returns balanced irrep.
64 | |     lmax : int
65 | |         Maximum order irreps to be considered.
66 | | 
67 | |     Returns
68 | |     -------
69 | |     o3.Irreps
70 | |         Irreps for hidden feaure vectors. 
71 | | 
72 | |     """
   | |_______^ D401
73 |       n = 1
74 |       if lmax == None:
   |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:51:5: D415 First line should end with a period, question mark, or exclamation point
   |
50 |   def WeightBalancedIrreps(irreps_in1_scalar, irreps_in2, sh=True, lmax=None):
51 |       """Determines an irreps_in1 type of order irreps_in2.lmax that when used in a tensor product
   |  _____^
52 | |     irreps_in1 x irreps_in2 -> irreps_in1
53 | |     would have the same number of weights as for a standard linear layer, e.g. a tensor product
54 | |     irreps_in1_scalar x "1x0e" -> irreps_in1_scalar
55 | | 
56 | |     Parameters
57 | |     ----------
58 | |     irreps_in1_scalar : o3.Irreps
59 | |         Number of hidden features, represented by zeroth order irreps.
60 | |     irreps_in2 : o3.Irreps
61 | |         Irreps related to edge attributes.
62 | |     sh : bool
63 | |         if true, yields equal number of every order. Else returns balanced irrep.
64 | |     lmax : int
65 | |         Maximum order irreps to be considered.
66 | | 
67 | |     Returns
68 | |     -------
69 | |     o3.Irreps
70 | |         Irreps for hidden feaure vectors. 
71 | | 
72 | |     """
   | |_______^ D415
73 |       n = 1
74 |       if lmax == None:
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:70:42: W291 Trailing whitespace
   |
68 |     -------
69 |     o3.Irreps
70 |         Irreps for hidden feaure vectors. 
   |                                          ^ W291
71 | 
72 |     """
   |
   = help: Remove trailing whitespace

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:74:16: E711 Comparison to `None` should be `cond is None`
   |
72 |     """
73 |     n = 1
74 |     if lmax == None:
   |                ^^^^ E711
75 |         lmax = irreps_in2.lmax
76 |     irreps_in1 = (Irreps.spherical_harmonics(lmax) * n).sort().irreps.simplify() if sh else BalancedIrreps(lmax, n)
   |
   = help: Replace with `cond is None`

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:79:51: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
77 |     weight_numel1 = FullyConnectedTensorProduct(irreps_in1, irreps_in2, irreps_in1).weight_numel
78 |     weight_numel_scalar = FullyConnectedTensorProduct(irreps_in1_scalar, Irreps("1x0e"), irreps_in1_scalar).weight_numel
79 |     while weight_numel1 < weight_numel_scalar:  # TODO: somewhat suboptimal implementation...
   |                                                   ^^^^ TD002
80 |         n += 1
81 |         irreps_in1 = (Irreps.spherical_harmonics(lmax) * n).sort().irreps.simplify() if sh else BalancedIrreps(lmax, n)
   |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:79:51: TD003 Missing issue link on the line following this TODO
   |
77 |     weight_numel1 = FullyConnectedTensorProduct(irreps_in1, irreps_in2, irreps_in1).weight_numel
78 |     weight_numel_scalar = FullyConnectedTensorProduct(irreps_in1_scalar, Irreps("1x0e"), irreps_in1_scalar).weight_numel
79 |     while weight_numel1 < weight_numel_scalar:  # TODO: somewhat suboptimal implementation...
   |                                                   ^^^^ TD003
80 |         n += 1
81 |         irreps_in1 = (Irreps.spherical_harmonics(lmax) * n).sort().irreps.simplify() if sh else BalancedIrreps(lmax, n)
   |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:79:51: FIX002 Line contains TODO, consider resolving the issue
   |
77 |     weight_numel1 = FullyConnectedTensorProduct(irreps_in1, irreps_in2, irreps_in1).weight_numel
78 |     weight_numel_scalar = FullyConnectedTensorProduct(irreps_in1_scalar, Irreps("1x0e"), irreps_in1_scalar).weight_numel
79 |     while weight_numel1 < weight_numel_scalar:  # TODO: somewhat suboptimal implementation...
   |                                                   ^^^^ FIX002
80 |         n += 1
81 |         irreps_in1 = (Irreps.spherical_harmonics(lmax) * n).sort().irreps.simplify() if sh else BalancedIrreps(lmax, n)
   |

src\stk_search\geom3d\models\SEGNN\balanced_irreps.py:83:5: T201 `print` found
   |
81 |         irreps_in1 = (Irreps.spherical_harmonics(lmax) * n).sort().irreps.simplify() if sh else BalancedIrreps(lmax, n)
82 |         weight_numel1 = FullyConnectedTensorProduct(irreps_in1, irreps_in2, irreps_in1).weight_numel
83 |     print("Determined irrep type:", irreps_in1)
   |     ^^^^^ T201
84 |     return Irreps(irreps_in1)
   |
   = help: Remove `print`

src\stk_search\geom3d\models\SEGNN\instance_norm.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SEGNN\instance_norm.py:8:5: D205 1 blank line required between summary line and description
   |
 7 |   class InstanceNorm(nn.Module):
 8 |       """Instance normalization for orthonormal representations
   |  _____^
 9 | |     It normalizes by the norm of the representations.
10 | |     Note that the norm is invariant only for orthonormal representations.
11 | |     Irreducible representations `wigner_D` are orthonormal.
12 | | 
13 | |     Parameters
14 | |     ----------
15 | |     irreps : `Irreps`
16 | |         representation
17 | |     eps : float
18 | |         avoid division by zero when we normalize by the variance
19 | |     affine : bool
20 | |         do we have weight and bias parameters
21 | |     reduce : {'mean', 'max'}
22 | |         method used to reduce
23 | | 
24 | |     """
   | |_______^ D205
25 |   
26 |       def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\SEGNN\instance_norm.py:26:9: ANN204 Missing return type annotation for special method `__init__`
   |
24 |     """
25 | 
26 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |         ^^^^^^^^ ANN204
27 |         super().__init__()
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SEGNN\instance_norm.py:26:9: D107 Missing docstring in `__init__`
   |
24 |     """
25 | 
26 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |         ^^^^^^^^ D107
27 |         super().__init__()
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:26:42: FBT002 Boolean default positional argument in function definition
   |
24 |     """
25 | 
26 |     def __init__(self, irreps, eps=1e-5, affine=True, reduce="mean", normalization="component"):
   |                                          ^^^^^^ FBT002
27 |         super().__init__()
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:43:9: S101 Use of `assert` detected
   |
41 |             self.register_parameter("bias", None)
42 | 
43 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
   |         ^^^^^^ S101
44 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
45 |         self.reduce = reduce
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:44:9: S101 Use of `assert` detected
   |
43 |         assert isinstance(reduce, str), "reduce should be passed as a string value"
44 |         assert reduce in ["mean", "max"], "reduce needs to be 'mean' or 'max'"
   |         ^^^^^^ S101
45 |         self.reduce = reduce
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:47:9: S101 Use of `assert` detected
   |
45 |         self.reduce = reduce
46 | 
47 |         assert normalization in ["norm", "component"], "normalization needs to be 'norm' or 'component'"
   |         ^^^^^^ S101
48 |         self.normalization = normalization
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:50:9: ANN204 Missing return type annotation for special method `__repr__`
   |
48 |         self.normalization = normalization
49 | 
50 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
51 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SEGNN\instance_norm.py:50:9: D105 Missing docstring in magic method
   |
48 |         self.normalization = normalization
49 | 
50 |     def __repr__(self):
   |         ^^^^^^^^ D105
51 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:53:9: D417 Missing argument description in the docstring for `forward`: `batch`
   |
51 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
52 | 
53 |     def forward(self, input, batch):
   |         ^^^^^^^ D417
54 |         """evaluate
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:53:23: A002 Argument `input` is shadowing a Python builtin
   |
51 |         return f"{self.__class__.__name__} ({self.irreps}, eps={self.eps})"
52 | 
53 |     def forward(self, input, batch):
   |                       ^^^^^ A002
54 |         """evaluate
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:54:9: D400 First line should end with a period
   |
53 |       def forward(self, input, batch):
54 |           """evaluate
   |  _________^
55 | | 
56 | |         Parameters
57 | |         ----------
58 | |         input : `torch.Tensor`
59 | |             tensor of shape ``(batch, ..., irreps.dim)``
60 | | 
61 | |         Returns
62 | |         -------
63 | |         `torch.Tensor`
64 | |             tensor of shape ``(batch, ..., irreps.dim)``
65 | | 
66 | |         """
   | |___________^ D400
67 |           # batch, *size, dim = input.shape  # TODO: deal with batch
68 |           # input = input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |
   = help: Add period

src\stk_search\geom3d\models\SEGNN\instance_norm.py:54:9: D415 First line should end with a period, question mark, or exclamation point
   |
53 |       def forward(self, input, batch):
54 |           """evaluate
   |  _________^
55 | | 
56 | |         Parameters
57 | |         ----------
58 | |         input : `torch.Tensor`
59 | |             tensor of shape ``(batch, ..., irreps.dim)``
60 | | 
61 | |         Returns
62 | |         -------
63 | |         `torch.Tensor`
64 | |             tensor of shape ``(batch, ..., irreps.dim)``
65 | | 
66 | |         """
   | |___________^ D415
67 |           # batch, *size, dim = input.shape  # TODO: deal with batch
68 |           # input = input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\instance_norm.py:67:9: ERA001 Found commented-out code
   |
66 |         """
67 |         # batch, *size, dim = input.shape  # TODO: deal with batch
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
68 |         # input = input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
69 |         # input has shape [batch * nodes, dim], but with variable nr of nodes.
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\SEGNN\instance_norm.py:67:46: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
66 |         """
67 |         # batch, *size, dim = input.shape  # TODO: deal with batch
   |                                              ^^^^ TD002
68 |         # input = input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
69 |         # input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:67:46: TD003 Missing issue link on the line following this TODO
   |
66 |         """
67 |         # batch, *size, dim = input.shape  # TODO: deal with batch
   |                                              ^^^^ TD003
68 |         # input = input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
69 |         # input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:67:46: FIX002 Line contains TODO, consider resolving the issue
   |
66 |         """
67 |         # batch, *size, dim = input.shape  # TODO: deal with batch
   |                                              ^^^^ FIX002
68 |         # input = input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
69 |         # input has shape [batch * nodes, dim], but with variable nr of nodes.
   |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:68:9: ERA001 Found commented-out code
   |
66 |         """
67 |         # batch, *size, dim = input.shape  # TODO: deal with batch
68 |         # input = input.reshape(batch, -1, dim)  # [batch, sample, stacked features]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
69 |         # input has shape [batch * nodes, dim], but with variable nr of nodes.
70 |         # the input batch slices this into separate graphs
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\SEGNN\instance_norm.py:83:13: ERA001 Found commented-out code
   |
81 |             ix += mul * d
82 | 
83 |             # [batch * sample, mul, repr]
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
84 |             field = field.reshape(-1, mul, d)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\SEGNN\instance_norm.py:100:23: TRY003 Avoid specifying long messages outside the exception class
    |
 98 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
 99 |             else:
100 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
101 |             # Reduction method
102 |             if self.reduce == "mean":
    |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:100:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
 98 |                 field_norm = field.pow(2).mean(-1)  # [batch * sample, mul]
 99 |             else:
100 |                 raise ValueError(f"Invalid normalization option {self.normalization}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
101 |             # Reduction method
102 |             if self.reduce == "mean":
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\SEGNN\instance_norm.py:107:23: TRY003 Avoid specifying long messages outside the exception class
    |
105 |                 field_norm = global_max_pool(field_norm, batch)  # [batch, mul]
106 |             else:
107 |                 raise ValueError(f"Invalid reduce option {self.reduce}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
108 | 
109 |             # Then apply the rescaling (divide by the sqrt of the squared_norm, i.e., divide by the norm
    |

src\stk_search\geom3d\models\SEGNN\instance_norm.py:107:34: EM102 Exception must not use an f-string literal, assign to variable first
    |
105 |                 field_norm = global_max_pool(field_norm, batch)  # [batch, mul]
106 |             else:
107 |                 raise ValueError(f"Invalid reduce option {self.reduce}")
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
108 | 
109 |             # Then apply the rescaling (divide by the sqrt of the squared_norm, i.e., divide by the norm
    |
    = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\SEGNN\instance_norm.py:133:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
132 |         output = torch.cat(fields, dim=-1)  # [batch * sample, stacked features]
133 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:5:5: D200 One-line docstring should fit on one line
  |
4 |   class NodeAttributeNetwork(MessagePassing):
5 |       """Computes the node and edge attributes based on relative positions
  |  _____^
6 | |     """
  | |_______^ D200
7 |   
8 |       def __init__(self):
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:5:5: D400 First line should end with a period
  |
4 |   class NodeAttributeNetwork(MessagePassing):
5 |       """Computes the node and edge attributes based on relative positions
  |  _____^
6 | |     """
  | |_______^ D400
7 |   
8 |       def __init__(self):
  |
  = help: Add period

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:5:5: D415 First line should end with a period, question mark, or exclamation point
  |
4 |   class NodeAttributeNetwork(MessagePassing):
5 |       """Computes the node and edge attributes based on relative positions
  |  _____^
6 | |     """
  | |_______^ D415
7 |   
8 |       def __init__(self):
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:8:9: ANN204 Missing return type annotation for special method `__init__`
  |
6 |     """
7 | 
8 |     def __init__(self):
  |         ^^^^^^^^ ANN204
9 |         super(NodeAttributeNetwork, self).__init__(node_dim=-2, aggr="mean")  # <---- Mean of all edge features
  |
  = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:8:9: D107 Missing docstring in `__init__`
  |
6 |     """
7 | 
8 |     def __init__(self):
  |         ^^^^^^^^ D107
9 |         super(NodeAttributeNetwork, self).__init__(node_dim=-2, aggr="mean")  # <---- Mean of all edge features
  |

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:9:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
 8 |     def __init__(self):
 9 |         super(NodeAttributeNetwork, self).__init__(node_dim=-2, aggr="mean")  # <---- Mean of all edge features
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
10 | 
11 |     def forward(self, edge_index, edge_attr):
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:12:9: D400 First line should end with a period
   |
11 |     def forward(self, edge_index, edge_attr):
12 |         """Simply sums the edge attributes"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
13 |         node_attr = self.propagate(edge_index, edge_attr=edge_attr)  # TODO: continue here!
14 |         return node_attr
   |
   = help: Add period

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:12:9: D415 First line should end with a period, question mark, or exclamation point
   |
11 |     def forward(self, edge_index, edge_attr):
12 |         """Simply sums the edge attributes"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
13 |         node_attr = self.propagate(edge_index, edge_attr=edge_attr)  # TODO: continue here!
14 |         return node_attr
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:13:72: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
11 |     def forward(self, edge_index, edge_attr):
12 |         """Simply sums the edge attributes"""
13 |         node_attr = self.propagate(edge_index, edge_attr=edge_attr)  # TODO: continue here!
   |                                                                        ^^^^ TD002
14 |         return node_attr
   |

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:13:72: TD003 Missing issue link on the line following this TODO
   |
11 |     def forward(self, edge_index, edge_attr):
12 |         """Simply sums the edge attributes"""
13 |         node_attr = self.propagate(edge_index, edge_attr=edge_attr)  # TODO: continue here!
   |                                                                        ^^^^ TD003
14 |         return node_attr
   |

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:13:72: FIX002 Line contains TODO, consider resolving the issue
   |
11 |     def forward(self, edge_index, edge_attr):
12 |         """Simply sums the edge attributes"""
13 |         node_attr = self.propagate(edge_index, edge_attr=edge_attr)  # TODO: continue here!
   |                                                                        ^^^^ FIX002
14 |         return node_attr
   |

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:14:16: RET504 Unnecessary assignment to `node_attr` before `return` statement
   |
12 |         """Simply sums the edge attributes"""
13 |         node_attr = self.propagate(edge_index, edge_attr=edge_attr)  # TODO: continue here!
14 |         return node_attr
   |                ^^^^^^^^^ RET504
15 | 
16 |     def message(self, edge_attr):
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:17:9: D400 First line should end with a period
   |
16 |     def message(self, edge_attr):
17 |         """The message is the edge attribute"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
18 |         return edge_attr
   |
   = help: Add period

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:17:9: D401 First line of docstring should be in imperative mood: "The message is the edge attribute"
   |
16 |     def message(self, edge_attr):
17 |         """The message is the edge attribute"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
18 |         return edge_attr
   |

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:17:9: D415 First line should end with a period, question mark, or exclamation point
   |
16 |     def message(self, edge_attr):
17 |         """The message is the edge attribute"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
18 |         return edge_attr
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:21:9: D400 First line should end with a period
   |
20 |     def update(self, node_attr):
21 |         """The input to update is the aggregated messages, and thus the node attribute"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
22 |         return node_attr
   |
   = help: Add period

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:21:9: D401 First line of docstring should be in imperative mood: "The input to update is the aggregated messages, and thus the node attribute"
   |
20 |     def update(self, node_attr):
21 |         """The input to update is the aggregated messages, and thus the node attribute"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
22 |         return node_attr
   |

src\stk_search\geom3d\models\SEGNN\node_attribute_network.py:21:9: D415 First line should end with a period, question mark, or exclamation point
   |
20 |     def update(self, node_attr):
21 |         """The input to update is the aggregated messages, and thus the node attribute"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
22 |         return node_attr
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:10:7: D101 Missing docstring in public class
   |
10 | class O3TensorProduct(torch.nn.Module):
   |       ^^^^^^^^^^^^^^^ D101
11 |     def __init__(self, irreps_in1, irreps_out, irreps_in2=None, tp_rescale=True) -> None:
12 |         super().__init__()
   |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:11:9: D107 Missing docstring in `__init__`
   |
10 | class O3TensorProduct(torch.nn.Module):
11 |     def __init__(self, irreps_in1, irreps_out, irreps_in2=None, tp_rescale=True) -> None:
   |         ^^^^^^^^ D107
12 |         super().__init__()
   |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:11:65: FBT002 Boolean default positional argument in function definition
   |
10 | class O3TensorProduct(torch.nn.Module):
11 |     def __init__(self, irreps_in1, irreps_out, irreps_in2=None, tp_rescale=True) -> None:
   |                                                                 ^^^^^^^^^^ FBT002
12 |         super().__init__()
   |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:17:26: E711 Comparison to `None` should be `cond is None`
   |
15 |         self.irreps_out = irreps_out
16 |         # Init irreps_in2
17 |         if irreps_in2 == None:
   |                          ^^^^ E711
18 |             self.irreps_in2_provided = False
19 |             self.irreps_in2 = Irreps("1x0e")
   |
   = help: Replace with `cond is None`

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:56:9: D102 Missing docstring in public method
   |
54 |         self.tensor_product_init()
55 | 
56 |     def tensor_product_init(self) -> None:
   |         ^^^^^^^^^^^^^^^^^^^ D102
57 |         with torch.no_grad():
58 |             # Determine fan_in for each slice, it could be that each output slice is updated via several instructions
   |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:81:33: B007 Loop control variable `out_slice` not used within loop body
   |
80 |             # Initialize the biases
81 |             for (out_slice_idx, out_slice, out_bias) in zip(self.biases_slice_idx, self.biases_slices, self.biases):
   |                                 ^^^^^^^^^ B007
82 |                 sqrt_k = 1 / slices_fan_in[out_slice_idx] ** 0.5
83 |                 out_bias.uniform_(-sqrt_k, sqrt_k)
   |
   = help: Rename unused `out_slice` to `_out_slice`

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:85:9: D102 Missing docstring in public method
   |
83 |                 out_bias.uniform_(-sqrt_k, sqrt_k)
84 | 
85 |     def forward_tp_rescale_bias(self, data_in1, data_in2=None) -> torch.Tensor:
   |         ^^^^^^^^^^^^^^^^^^^^^^^ D102
86 |         if data_in2 == None:
87 |             data_in2 = torch.ones_like(data_in1[:, 0:1])
   |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:86:24: E711 Comparison to `None` should be `cond is None`
   |
85 |     def forward_tp_rescale_bias(self, data_in1, data_in2=None) -> torch.Tensor:
86 |         if data_in2 == None:
   |                        ^^^^ E711
87 |             data_in2 = torch.ones_like(data_in1[:, 0:1])
   |
   = help: Replace with `cond is None`

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:92:18: A001 Variable `slice` is shadowing a Python builtin
   |
90 |         # Apply corrections
91 |         if self.tp_rescale:
92 |             for (slice, slice_sqrt_k) in self.slices_sqrt_k.values():
   |                  ^^^^^ A001
93 |                 data_out[:, slice] /= slice_sqrt_k
94 |         # Add the biases
   |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:95:17: A001 Variable `slice` is shadowing a Python builtin
   |
93 |                 data_out[:, slice] /= slice_sqrt_k
94 |         # Add the biases
95 |         for (_, slice, bias) in zip(self.biases_slice_idx, self.biases_slices, self.biases):
   |                 ^^^^^ A001
96 |             data_out[:, slice] += bias
97 |         # Return result
   |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:100:9: D102 Missing docstring in public method
    |
 98 |         return data_out
 99 | 
100 |     def forward(self, data_in1, data_in2=None) -> torch.Tensor:
    |         ^^^^^^^ D102
101 |         # Apply the tensor product, the rescaling and the bias
102 |         data_out = self.forward_tp_rescale_bias(data_in1, data_in2)
    |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:103:16: RET504 Unnecessary assignment to `data_out` before `return` statement
    |
101 |         # Apply the tensor product, the rescaling and the bias
102 |         data_out = self.forward_tp_rescale_bias(data_in1, data_in2)
103 |         return data_out
    |                ^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:106:7: D101 Missing docstring in public class
    |
106 | class O3TensorProductSwishGate(O3TensorProduct):
    |       ^^^^^^^^^^^^^^^^^^^^^^^^ D101
107 |     def __init__(self, irreps_in1, irreps_out, irreps_in2=None) -> None:
108 |         # For the gate the output of the linear needs to have an extra number of scalar irreps equal to the amount of
    |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:107:9: D107 Missing docstring in `__init__`
    |
106 | class O3TensorProductSwishGate(O3TensorProduct):
107 |     def __init__(self, irreps_in1, irreps_out, irreps_in2=None) -> None:
    |         ^^^^^^^^ D107
108 |         # For the gate the output of the linear needs to have an extra number of scalar irreps equal to the amount of
109 |         # non scalar irreps:
    |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:119:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
118 |         # Build the layers
119 |         super(O3TensorProductSwishGate, self).__init__(irreps_in1, irreps_g, irreps_in2)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
120 |         if irreps_g_gated.num_irreps > 0:
121 |             self.gate = Gate(irreps_g_scalars, [nn.SiLU()], irreps_g_gate, [torch.sigmoid], irreps_g_gated)
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:125:9: D102 Missing docstring in public method
    |
123 |             self.gate = nn.SiLU()
124 | 
125 |     def forward(self, data_in1, data_in2=None) -> torch.Tensor:
    |         ^^^^^^^ D102
126 |         # Apply the tensor product, the rescaling and the bias
127 |         data_out = self.forward_tp_rescale_bias(data_in1, data_in2)
    |

src\stk_search\geom3d\models\SEGNN\o3_building_blocks.py:131:16: RET504 Unnecessary assignment to `data_out` before `return` statement
    |
129 |         data_out = self.gate(data_out)
130 |         # Return result
131 |         return data_out
    |                ^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SchNet.py:1:1: N999 Invalid module name: 'SchNet'
src\stk_search\geom3d\models\SchNet.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SchNet.py:4:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
2 | import ase
3 | import torch
4 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
5 | from torch.nn import Embedding, Linear, ModuleList, Sequential
6 | from torch_cluster import radius_graph
  |

src\stk_search\geom3d\models\SchNet.py:11:7: D101 Missing docstring in public class
   |
11 | class SchNet(torch.nn.Module):
   |       ^^^^^^ D101
12 |     def __init__(
13 |         self,
   |

src\stk_search\geom3d\models\SchNet.py:12:9: PLR0913 Too many arguments in function definition (12 > 5)
   |
11 | class SchNet(torch.nn.Module):
12 |     def __init__(
   |         ^^^^^^^^ PLR0913
13 |         self,
14 |         hidden_channels=128,
   |

src\stk_search\geom3d\models\SchNet.py:12:9: ANN204 Missing return type annotation for special method `__init__`
   |
11 | class SchNet(torch.nn.Module):
12 |     def __init__(
   |         ^^^^^^^^ ANN204
13 |         self,
14 |         hidden_channels=128,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SchNet.py:12:9: D107 Missing docstring in `__init__`
   |
11 | class SchNet(torch.nn.Module):
12 |     def __init__(
   |         ^^^^^^^^ D107
13 |         self,
14 |         hidden_channels=128,
   |

src\stk_search\geom3d\models\SchNet.py:21:9: FBT002 Boolean default positional argument in function definition
   |
19 |         node_class=None,
20 |         readout="mean",
21 |         dipole=False,
   |         ^^^^^^ FBT002
22 |         mean=None,
23 |         std=None,
   |

src\stk_search\geom3d\models\SchNet.py:27:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
25 |         gamma=None,
26 |     ):
27 |         super(SchNet, self).__init__()
   |              ^^^^^^^^^^^^^^ UP008
28 | 
29 |         assert readout in ["add", "sum", "mean"]
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SchNet.py:29:9: S101 Use of `assert` detected
   |
27 |         super(SchNet, self).__init__()
28 | 
29 |         assert readout in ["add", "sum", "mean"]
   |         ^^^^^^ S101
30 | 
31 |         self.hidden_channels = hidden_channels
   |

src\stk_search\geom3d\models\SchNet.py:46:9: ERA001 Found commented-out code
   |
44 |         self.register_buffer("atomic_mass", atomic_mass)
45 | 
46 |         # self.embedding = Embedding(100, hidden_channels)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
47 |         self.embedding = Embedding(node_class, hidden_channels)
48 |         self.distance_expansion = GaussianSmearing(0.0, cutoff, num_gaussians, gamma=gamma)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\SchNet.py:57:11: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
   |
55 |             self.interactions.append(block)
56 | 
57 |         # TODO: double-check hidden size
   |           ^^^^ TD002
58 |         self.lin1 = Linear(hidden_channels, hidden_channels)
59 |         self.act = ShiftedSoftplus()
   |

src\stk_search\geom3d\models\SchNet.py:57:11: TD003 Missing issue link on the line following this TODO
   |
55 |             self.interactions.append(block)
56 | 
57 |         # TODO: double-check hidden size
   |           ^^^^ TD003
58 |         self.lin1 = Linear(hidden_channels, hidden_channels)
59 |         self.act = ShiftedSoftplus()
   |

src\stk_search\geom3d\models\SchNet.py:57:11: FIX002 Line contains TODO, consider resolving the issue
   |
55 |             self.interactions.append(block)
56 | 
57 |         # TODO: double-check hidden size
   |           ^^^^ FIX002
58 |         self.lin1 = Linear(hidden_channels, hidden_channels)
59 |         self.act = ShiftedSoftplus()
   |

src\stk_search\geom3d\models\SchNet.py:70:9: D102 Missing docstring in public method
   |
68 |         self.reset_parameters()
69 | 
70 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
71 |         self.embedding.reset_parameters()
72 |         for interaction in self.interactions:
   |

src\stk_search\geom3d\models\SchNet.py:81:9: D102 Missing docstring in public method
   |
79 |             self.atomref.weight.data.copy_(self.initial_atomref)
80 | 
81 |     def forward(self, z, pos, batch=None, edge_index=None, return_latent=False):
   |         ^^^^^^^ D102
82 |         if z.dim() == 1:
83 |             assert z.dim() == 1 and z.dtype == torch.long
   |

src\stk_search\geom3d\models\SchNet.py:81:60: FBT002 Boolean default positional argument in function definition
   |
79 |             self.atomref.weight.data.copy_(self.initial_atomref)
80 | 
81 |     def forward(self, z, pos, batch=None, edge_index=None, return_latent=False):
   |                                                            ^^^^^^^^^^^^^ FBT002
82 |         if z.dim() == 1:
83 |             assert z.dim() == 1 and z.dtype == torch.long
   |

src\stk_search\geom3d\models\SchNet.py:83:13: S101 Use of `assert` detected
   |
81 |     def forward(self, z, pos, batch=None, edge_index=None, return_latent=False):
82 |         if z.dim() == 1:
83 |             assert z.dim() == 1 and z.dtype == torch.long
   |             ^^^^^^ S101
84 |             h = self.embedding(z)
85 |         else:  # When the input z is one-hot
   |

src\stk_search\geom3d\models\SchNet.py:83:13: PT018 Assertion should be broken down into multiple parts
   |
81 |     def forward(self, z, pos, batch=None, edge_index=None, return_latent=False):
82 |         if z.dim() == 1:
83 |             assert z.dim() == 1 and z.dtype == torch.long
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT018
84 |             h = self.embedding(z)
85 |         else:  # When the input z is one-hot
   |
   = help: Break down assertion into multiple parts

src\stk_search\geom3d\models\SchNet.py:86:13: S101 Use of `assert` detected
   |
84 |             h = self.embedding(z)
85 |         else:  # When the input z is one-hot
86 |             assert z.dim() == 2
   |             ^^^^^^ S101
87 |             h = torch.matmul(z, self.embedding.weight)
88 |         batch = torch.zeros_like(z) if batch is None else batch
   |

src\stk_search\geom3d\models\SchNet.py:86:31: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
84 |             h = self.embedding(z)
85 |         else:  # When the input z is one-hot
86 |             assert z.dim() == 2
   |                               ^ PLR2004
87 |             h = torch.matmul(z, self.embedding.weight)
88 |         batch = torch.zeros_like(z) if batch is None else batch
   |

src\stk_search\geom3d\models\SchNet.py:128:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
126 |         return out
127 | 
128 |     def forward_with_gathered_index(self, gathered_z, pos, batch, edge_index, gathered_batch, periodic_index_mapping, return_latent=False):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
129 |         gathered_h = self.embedding(gathered_z)
130 |         batch = torch.zeros_like(gathered_z) if batch is None else batch
    |

src\stk_search\geom3d\models\SchNet.py:128:9: D102 Missing docstring in public method
    |
126 |         return out
127 | 
128 |     def forward_with_gathered_index(self, gathered_z, pos, batch, edge_index, gathered_batch, periodic_index_mapping, return_latent=False):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
129 |         gathered_h = self.embedding(gathered_z)
130 |         batch = torch.zeros_like(gathered_z) if batch is None else batch
    |

src\stk_search\geom3d\models\SchNet.py:128:119: FBT002 Boolean default positional argument in function definition
    |
126 |         return out
127 | 
128 |     def forward_with_gathered_index(self, gathered_z, pos, batch, edge_index, gathered_batch, periodic_index_mapping, return_latent=False):
    |                                                                                                                       ^^^^^^^^^^^^^ FBT002
129 |         gathered_h = self.embedding(gathered_z)
130 |         batch = torch.zeros_like(gathered_z) if batch is None else batch
    |

src\stk_search\geom3d\models\SchNet.py:155:9: ANN204 Missing return type annotation for special method `__repr__`
    |
153 |         return out
154 | 
155 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
156 |         return (
157 |             f"{self.__class__.__name__}("
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\SchNet.py:155:9: D105 Missing docstring in magic method
    |
153 |         return out
154 | 
155 |     def __repr__(self):
    |         ^^^^^^^^ D105
156 |         return (
157 |             f"{self.__class__.__name__}("
    |

src\stk_search\geom3d\models\SchNet.py:166:7: D101 Missing docstring in public class
    |
166 | class InteractionBlock(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^ D101
167 |     def __init__(self, hidden_channels, num_gaussians, num_filters, cutoff):
168 |         super(InteractionBlock, self).__init__()
    |

src\stk_search\geom3d\models\SchNet.py:167:9: ANN204 Missing return type annotation for special method `__init__`
    |
166 | class InteractionBlock(torch.nn.Module):
167 |     def __init__(self, hidden_channels, num_gaussians, num_filters, cutoff):
    |         ^^^^^^^^ ANN204
168 |         super(InteractionBlock, self).__init__()
169 |         self.mlp = Sequential(
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SchNet.py:167:9: D107 Missing docstring in `__init__`
    |
166 | class InteractionBlock(torch.nn.Module):
167 |     def __init__(self, hidden_channels, num_gaussians, num_filters, cutoff):
    |         ^^^^^^^^ D107
168 |         super(InteractionBlock, self).__init__()
169 |         self.mlp = Sequential(
    |

src\stk_search\geom3d\models\SchNet.py:168:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
166 | class InteractionBlock(torch.nn.Module):
167 |     def __init__(self, hidden_channels, num_gaussians, num_filters, cutoff):
168 |         super(InteractionBlock, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
169 |         self.mlp = Sequential(
170 |             Linear(num_gaussians, num_filters),
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SchNet.py:182:9: D102 Missing docstring in public method
    |
180 |         self.reset_parameters()
181 | 
182 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
183 |         torch.nn.init.xavier_uniform_(self.mlp[0].weight)
184 |         self.mlp[0].bias.data.fill_(0)
    |

src\stk_search\geom3d\models\SchNet.py:191:9: D102 Missing docstring in public method
    |
189 |         self.lin.bias.data.fill_(0)
190 | 
191 |     def forward(self, x, edge_index, edge_weight, edge_attr):
    |         ^^^^^^^ D102
192 |         x = self.conv(x, edge_index, edge_weight, edge_attr)
193 |         x = self.act(x)
    |

src\stk_search\geom3d\models\SchNet.py:195:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
193 |         x = self.act(x)
194 |         x = self.lin(x)
195 |         return x
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SchNet.py:198:7: D101 Missing docstring in public class
    |
198 | class CFConv(MessagePassing):
    |       ^^^^^^ D101
199 |     def __init__(self, in_channels, out_channels, num_filters, nn, cutoff):
200 |         super(CFConv, self).__init__(aggr="add")
    |

src\stk_search\geom3d\models\SchNet.py:199:9: ANN204 Missing return type annotation for special method `__init__`
    |
198 | class CFConv(MessagePassing):
199 |     def __init__(self, in_channels, out_channels, num_filters, nn, cutoff):
    |         ^^^^^^^^ ANN204
200 |         super(CFConv, self).__init__(aggr="add")
201 |         self.lin1 = Linear(in_channels, num_filters, bias=False)
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SchNet.py:199:9: D107 Missing docstring in `__init__`
    |
198 | class CFConv(MessagePassing):
199 |     def __init__(self, in_channels, out_channels, num_filters, nn, cutoff):
    |         ^^^^^^^^ D107
200 |         super(CFConv, self).__init__(aggr="add")
201 |         self.lin1 = Linear(in_channels, num_filters, bias=False)
    |

src\stk_search\geom3d\models\SchNet.py:200:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
198 | class CFConv(MessagePassing):
199 |     def __init__(self, in_channels, out_channels, num_filters, nn, cutoff):
200 |         super(CFConv, self).__init__(aggr="add")
    |              ^^^^^^^^^^^^^^ UP008
201 |         self.lin1 = Linear(in_channels, num_filters, bias=False)
202 |         self.lin2 = Linear(num_filters, out_channels)
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SchNet.py:208:9: D102 Missing docstring in public method
    |
206 |         self.reset_parameters()
207 | 
208 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
209 |         torch.nn.init.xavier_uniform_(self.lin1.weight)
210 |         torch.nn.init.xavier_uniform_(self.lin2.weight)
    |

src\stk_search\geom3d\models\SchNet.py:213:9: D102 Missing docstring in public method
    |
211 |         self.lin2.bias.data.fill_(0)
212 | 
213 |     def forward(self, x, edge_index, edge_weight, edge_attr):
    |         ^^^^^^^ D102
214 |         C = 0.5 * (torch.cos(edge_weight * 3.14 / self.cutoff) + 1.0)
    |

src\stk_search\geom3d\models\SchNet.py:214:9: N806 Variable `C` in function should be lowercase
    |
213 |     def forward(self, x, edge_index, edge_weight, edge_attr):
214 |         C = 0.5 * (torch.cos(edge_weight * 3.14 / self.cutoff) + 1.0)
    |         ^ N806
215 | 
216 |         W = self.nn(edge_attr) * C.view(-1, 1)
    |

src\stk_search\geom3d\models\SchNet.py:216:9: N806 Variable `W` in function should be lowercase
    |
214 |         C = 0.5 * (torch.cos(edge_weight * 3.14 / self.cutoff) + 1.0)
215 | 
216 |         W = self.nn(edge_attr) * C.view(-1, 1)
    |         ^ N806
217 |         x = self.lin1(x)
218 |         # propagate_type: ( x: Tensor, W: Tensor )
    |

src\stk_search\geom3d\models\SchNet.py:221:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
219 |         x = self.propagate(edge_index, x=x, W=W)
220 |         x = self.lin2(x)
221 |         return x
    |                ^ RET504
222 | 
223 |     def message(self, x_j, W):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SchNet.py:223:9: D102 Missing docstring in public method
    |
221 |         return x
222 | 
223 |     def message(self, x_j, W):
    |         ^^^^^^^ D102
224 |         return x_j * W
    |

src\stk_search\geom3d\models\SchNet.py:223:28: N803 Argument name `W` should be lowercase
    |
221 |         return x
222 | 
223 |     def message(self, x_j, W):
    |                            ^ N803
224 |         return x_j * W
    |

src\stk_search\geom3d\models\SchNet.py:227:7: D101 Missing docstring in public class
    |
227 | class GaussianSmearing(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^ D101
228 |     def __init__(self, start=0.0, stop=5.0, num_gaussians=50, gamma=None):
229 |         super(GaussianSmearing, self).__init__()
    |

src\stk_search\geom3d\models\SchNet.py:228:9: ANN204 Missing return type annotation for special method `__init__`
    |
227 | class GaussianSmearing(torch.nn.Module):
228 |     def __init__(self, start=0.0, stop=5.0, num_gaussians=50, gamma=None):
    |         ^^^^^^^^ ANN204
229 |         super(GaussianSmearing, self).__init__()
230 |         offset = torch.linspace(start, stop, num_gaussians)
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SchNet.py:228:9: D107 Missing docstring in `__init__`
    |
227 | class GaussianSmearing(torch.nn.Module):
228 |     def __init__(self, start=0.0, stop=5.0, num_gaussians=50, gamma=None):
    |         ^^^^^^^^ D107
229 |         super(GaussianSmearing, self).__init__()
230 |         offset = torch.linspace(start, stop, num_gaussians)
    |

src\stk_search\geom3d\models\SchNet.py:229:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
227 | class GaussianSmearing(torch.nn.Module):
228 |     def __init__(self, start=0.0, stop=5.0, num_gaussians=50, gamma=None):
229 |         super(GaussianSmearing, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
230 |         offset = torch.linspace(start, stop, num_gaussians)
231 |         if gamma is None:
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SchNet.py:237:9: D102 Missing docstring in public method
    |
235 |         self.register_buffer("offset", offset)
236 | 
237 |     def forward(self, dist):
    |         ^^^^^^^ D102
238 |         dist = dist.view(-1, 1) - self.offset.view(1, -1)
239 |         return torch.exp(self.coeff * torch.pow(dist, 2))
    |

src\stk_search\geom3d\models\SchNet.py:242:7: D101 Missing docstring in public class
    |
242 | class ShiftedSoftplus(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^ D101
243 |     def __init__(self):
244 |         super(ShiftedSoftplus, self).__init__()
    |

src\stk_search\geom3d\models\SchNet.py:243:9: ANN204 Missing return type annotation for special method `__init__`
    |
242 | class ShiftedSoftplus(torch.nn.Module):
243 |     def __init__(self):
    |         ^^^^^^^^ ANN204
244 |         super(ShiftedSoftplus, self).__init__()
245 |         self.shift = torch.log(torch.tensor(2.0)).item()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SchNet.py:243:9: D107 Missing docstring in `__init__`
    |
242 | class ShiftedSoftplus(torch.nn.Module):
243 |     def __init__(self):
    |         ^^^^^^^^ D107
244 |         super(ShiftedSoftplus, self).__init__()
245 |         self.shift = torch.log(torch.tensor(2.0)).item()
    |

src\stk_search\geom3d\models\SchNet.py:244:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
242 | class ShiftedSoftplus(torch.nn.Module):
243 |     def __init__(self):
244 |         super(ShiftedSoftplus, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^ UP008
245 |         self.shift = torch.log(torch.tensor(2.0)).item()
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SchNet.py:247:9: D102 Missing docstring in public method
    |
245 |         self.shift = torch.log(torch.tensor(2.0)).item()
246 | 
247 |     def forward(self, x):
    |         ^^^^^^^ D102
248 |         return F.softplus(x) - self.shift
    |

src\stk_search\geom3d\models\SphereNet.py:1:1: N999 Invalid module name: 'SphereNet'
src\stk_search\geom3d\models\SphereNet.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SphereNet.py:1:18: N812 Lowercase `pi` imported as non-lowercase `PI`
  |
1 | from math import pi as PI
  |                  ^^^^^^^^ N812
2 | from math import sqrt
  |

src\stk_search\geom3d\models\SphereNet.py:18:7: N801 Class name `emb` should use CapWords convention
   |
18 | class emb(torch.nn.Module):
   |       ^^^ N801
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
20 |         super(emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet.py:18:7: D101 Missing docstring in public class
   |
18 | class emb(torch.nn.Module):
   |       ^^^ D101
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
20 |         super(emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet.py:19:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 | class emb(torch.nn.Module):
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
   |         ^^^^^^^^ ANN204
20 |         super(emb, self).__init__()
21 |         self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet.py:19:9: D107 Missing docstring in `__init__`
   |
18 | class emb(torch.nn.Module):
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
   |         ^^^^^^^^ D107
20 |         super(emb, self).__init__()
21 |         self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |

src\stk_search\geom3d\models\SphereNet.py:20:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
18 | class emb(torch.nn.Module):
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
20 |         super(emb, self).__init__()
   |              ^^^^^^^^^^^ UP008
21 |         self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
22 |         self.angle_emb = angle_emb(num_spherical, num_radial, cutoff, envelope_exponent)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet.py:28:9: D102 Missing docstring in public method
   |
26 |         self.reset_parameters()
27 | 
28 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
29 |         self.dist_emb.reset_parameters()
   |

src\stk_search\geom3d\models\SphereNet.py:31:9: D102 Missing docstring in public method
   |
29 |         self.dist_emb.reset_parameters()
30 | 
31 |     def forward(self, dist, angle, torsion, idx_kj):
   |         ^^^^^^^ D102
32 |         dist_emb = self.dist_emb(dist)
33 |         angle_emb = self.angle_emb(dist, angle, idx_kj)
   |

src\stk_search\geom3d\models\SphereNet.py:38:7: N801 Class name `init` should use CapWords convention
   |
38 | class init(torch.nn.Module):
   |       ^^^^ N801
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
40 |         super(init, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet.py:38:7: D101 Missing docstring in public class
   |
38 | class init(torch.nn.Module):
   |       ^^^^ D101
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
40 |         super(init, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet.py:39:9: ANN204 Missing return type annotation for special method `__init__`
   |
38 | class init(torch.nn.Module):
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
   |         ^^^^^^^^ ANN204
40 |         super(init, self).__init__()
41 |         self.act = act
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet.py:39:9: D107 Missing docstring in `__init__`
   |
38 | class init(torch.nn.Module):
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
   |         ^^^^^^^^ D107
40 |         super(init, self).__init__()
41 |         self.act = act
   |

src\stk_search\geom3d\models\SphereNet.py:40:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
38 | class init(torch.nn.Module):
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
40 |         super(init, self).__init__()
   |              ^^^^^^^^^^^^ UP008
41 |         self.act = act
42 |         self.emb = Embedding(95, hidden_channels)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet.py:48:9: D102 Missing docstring in public method
   |
46 |         self.reset_parameters()
47 | 
48 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
49 |         self.emb.weight.data.uniform_(-sqrt(3), sqrt(3))
50 |         self.lin_rbf_0.reset_parameters()
   |

src\stk_search\geom3d\models\SphereNet.py:54:9: D102 Missing docstring in public method
   |
52 |         glorot_orthogonal(self.lin_rbf_1.weight, scale=2.0)
53 | 
54 |     def forward(self, x, emb, i, j):
   |         ^^^^^^^ D102
55 |         rbf, _, _ = emb
56 |         x = self.emb(x)
   |

src\stk_search\geom3d\models\SphereNet.py:64:7: N801 Class name `update_e` should use CapWords convention
   |
64 | class update_e(torch.nn.Module):
   |       ^^^^^^^^ N801
65 |     def __init__(
66 |         self,
   |

src\stk_search\geom3d\models\SphereNet.py:64:7: D101 Missing docstring in public class
   |
64 | class update_e(torch.nn.Module):
   |       ^^^^^^^^ D101
65 |     def __init__(
66 |         self,
   |

src\stk_search\geom3d\models\SphereNet.py:65:9: PLR0913 Too many arguments in function definition (10 > 5)
   |
64 | class update_e(torch.nn.Module):
65 |     def __init__(
   |         ^^^^^^^^ PLR0913
66 |         self,
67 |         hidden_channels,
   |

src\stk_search\geom3d\models\SphereNet.py:65:9: ANN204 Missing return type annotation for special method `__init__`
   |
64 | class update_e(torch.nn.Module):
65 |     def __init__(
   |         ^^^^^^^^ ANN204
66 |         self,
67 |         hidden_channels,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet.py:65:9: D107 Missing docstring in `__init__`
   |
64 | class update_e(torch.nn.Module):
65 |     def __init__(
   |         ^^^^^^^^ D107
66 |         self,
67 |         hidden_channels,
   |

src\stk_search\geom3d\models\SphereNet.py:78:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
76 |         act="swish",
77 |     ):
78 |         super(update_e, self).__init__()
   |              ^^^^^^^^^^^^^^^^ UP008
79 |         self.act = act
80 |         self.lin_rbf1 = nn.Linear(num_radial, basis_emb_size_dist, bias=False)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet.py:110:9: D102 Missing docstring in public method
    |
108 |         self.reset_parameters()
109 | 
110 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
111 |         glorot_orthogonal(self.lin_rbf1.weight, scale=2.0)
112 |         glorot_orthogonal(self.lin_rbf2.weight, scale=2.0)
    |

src\stk_search\geom3d\models\SphereNet.py:135:9: D102 Missing docstring in public method
    |
133 |         glorot_orthogonal(self.lin_rbf.weight, scale=2.0)
134 | 
135 |     def forward(self, x, emb, idx_kj, idx_ji):
    |         ^^^^^^^ D102
136 |         rbf0, sbf, t = emb
137 |         x1, _ = x
    |

src\stk_search\geom3d\models\SphereNet.py:170:7: N801 Class name `update_v` should use CapWords convention
    |
170 | class update_v(torch.nn.Module):
    |       ^^^^^^^^ N801
171 |     def __init__(
172 |         self,
    |

src\stk_search\geom3d\models\SphereNet.py:170:7: D101 Missing docstring in public class
    |
170 | class update_v(torch.nn.Module):
    |       ^^^^^^^^ D101
171 |     def __init__(
172 |         self,
    |

src\stk_search\geom3d\models\SphereNet.py:171:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
170 | class update_v(torch.nn.Module):
171 |     def __init__(
    |         ^^^^^^^^ PLR0913
172 |         self,
173 |         hidden_channels,
    |

src\stk_search\geom3d\models\SphereNet.py:171:9: ANN204 Missing return type annotation for special method `__init__`
    |
170 | class update_v(torch.nn.Module):
171 |     def __init__(
    |         ^^^^^^^^ ANN204
172 |         self,
173 |         hidden_channels,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet.py:171:9: D107 Missing docstring in `__init__`
    |
170 | class update_v(torch.nn.Module):
171 |     def __init__(
    |         ^^^^^^^^ D107
172 |         self,
173 |         hidden_channels,
    |

src\stk_search\geom3d\models\SphereNet.py:180:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
178 |         output_init,
179 |     ):
180 |         super(update_v, self).__init__()
    |              ^^^^^^^^^^^^^^^^ UP008
181 |         self.act = act
182 |         self.output_init = output_init
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet.py:192:9: D102 Missing docstring in public method
    |
190 |         self.reset_parameters()
191 | 
192 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
193 |         glorot_orthogonal(self.lin_up.weight, scale=2.0)
194 |         for lin in self.lins:
    |

src\stk_search\geom3d\models\SphereNet.py:202:9: D102 Missing docstring in public method
    |
200 |             glorot_orthogonal(self.lin.weight, scale=2.0)
201 | 
202 |     def forward(self, e, i):
    |         ^^^^^^^ D102
203 |         _, e2 = e
204 |         v = scatter(e2, i, dim=0)
    |

src\stk_search\geom3d\models\SphereNet.py:209:16: RET504 Unnecessary assignment to `v` before `return` statement
    |
207 |             v = self.act(lin(v))
208 |         v = self.lin(v)
209 |         return v
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SphereNet.py:212:7: N801 Class name `update_u` should use CapWords convention
    |
212 | class update_u(torch.nn.Module):
    |       ^^^^^^^^ N801
213 |     def __init__(self):
214 |         super(update_u, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet.py:212:7: D101 Missing docstring in public class
    |
212 | class update_u(torch.nn.Module):
    |       ^^^^^^^^ D101
213 |     def __init__(self):
214 |         super(update_u, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet.py:213:9: ANN204 Missing return type annotation for special method `__init__`
    |
212 | class update_u(torch.nn.Module):
213 |     def __init__(self):
    |         ^^^^^^^^ ANN204
214 |         super(update_u, self).__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet.py:213:9: D107 Missing docstring in `__init__`
    |
212 | class update_u(torch.nn.Module):
213 |     def __init__(self):
    |         ^^^^^^^^ D107
214 |         super(update_u, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet.py:214:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
212 | class update_u(torch.nn.Module):
213 |     def __init__(self):
214 |         super(update_u, self).__init__()
    |              ^^^^^^^^^^^^^^^^ UP008
215 | 
216 |     def forward(self, u, v, batch):
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet.py:216:9: D102 Missing docstring in public method
    |
214 |         super(update_u, self).__init__()
215 | 
216 |     def forward(self, u, v, batch):
    |         ^^^^^^^ D102
217 |         u += scatter(v, batch, dim=0)
218 |         return u
    |

src\stk_search\geom3d\models\SphereNet.py:247:9: PLR0913 Too many arguments in function definition (18 > 5)
    |
245 |     """
246 | 
247 |     def __init__(
    |         ^^^^^^^^ PLR0913
248 |         self,
249 |         energy_and_force=False,
    |

src\stk_search\geom3d\models\SphereNet.py:247:9: ANN204 Missing return type annotation for special method `__init__`
    |
245 |     """
246 | 
247 |     def __init__(
    |         ^^^^^^^^ ANN204
248 |         self,
249 |         energy_and_force=False,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet.py:247:9: D107 Missing docstring in `__init__`
    |
245 |     """
246 | 
247 |     def __init__(
    |         ^^^^^^^^ D107
248 |         self,
249 |         energy_and_force=False,
    |

src\stk_search\geom3d\models\SphereNet.py:249:9: FBT002 Boolean default positional argument in function definition
    |
247 |     def __init__(
248 |         self,
249 |         energy_and_force=False,
    |         ^^^^^^^^^^^^^^^^ FBT002
250 |         cutoff=5.0,
251 |         num_layers=4,
    |

src\stk_search\geom3d\models\SphereNet.py:268:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
266 |         output_init="GlorotOrthogonal",
267 |     ):
268 |         super(SphereNet, self).__init__()
    |              ^^^^^^^^^^^^^^^^^ UP008
269 | 
270 |         self.cutoff = cutoff
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet.py:321:9: D102 Missing docstring in public method
    |
319 |         self.reset_parameters()
320 | 
321 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
322 |         self.init_e.reset_parameters()
323 |         self.init_v.reset_parameters()
    |

src\stk_search\geom3d\models\SphereNet.py:330:9: D417 Missing argument descriptions in the docstring for `triplets`: `edge_index`, `num_nodes`
    |
328 |             update_v.reset_parameters()
329 | 
330 |     def triplets(self, pos, edge_index, num_nodes, use_torsion=False):
    |         ^^^^^^^^ D417
331 |         """Compute the diatance, angle, and torsion from geometric information.
    |

src\stk_search\geom3d\models\SphereNet.py:330:52: FBT002 Boolean default positional argument in function definition
    |
328 |             update_v.reset_parameters()
329 | 
330 |     def triplets(self, pos, edge_index, num_nodes, use_torsion=False):
    |                                                    ^^^^^^^^^^^ FBT002
331 |         """Compute the diatance, angle, and torsion from geometric information.
    |

src\stk_search\geom3d\models\SphereNet.py:375:9: ERA001 Found commented-out code
    |
373 |         repeat = num_triplets - 1
374 |         num_triplets_t = num_triplets.repeat_interleave(repeat)
375 |         #num_triplets_t = num_triplets.repeat_interleave(num_triplets) - 1
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
376 | 
377 |         #debug
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SphereNet.py:378:9: T201 `print` found
    |
377 |         #debug
378 |         print("Sizes before repeat_interleave:")
    |         ^^^^^ T201
379 |         print("idx_i size:", idx_i.size())
380 |         print("num_triplets_t size:", num_triplets_t.size())
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:379:9: T201 `print` found
    |
377 |         #debug
378 |         print("Sizes before repeat_interleave:")
379 |         print("idx_i size:", idx_i.size())
    |         ^^^^^ T201
380 |         print("num_triplets_t size:", num_triplets_t.size())
381 |         print("num_triplets size:", num_triplets.size())
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:380:9: T201 `print` found
    |
378 |         print("Sizes before repeat_interleave:")
379 |         print("idx_i size:", idx_i.size())
380 |         print("num_triplets_t size:", num_triplets_t.size())
    |         ^^^^^ T201
381 |         print("num_triplets size:", num_triplets.size())
382 |         print("idx_j size:", idx_j.size())
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:381:9: T201 `print` found
    |
379 |         print("idx_i size:", idx_i.size())
380 |         print("num_triplets_t size:", num_triplets_t.size())
381 |         print("num_triplets size:", num_triplets.size())
    |         ^^^^^ T201
382 |         print("idx_j size:", idx_j.size())
383 |         print("idx_k size:", idx_k.size())
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:382:9: T201 `print` found
    |
380 |         print("num_triplets_t size:", num_triplets_t.size())
381 |         print("num_triplets size:", num_triplets.size())
382 |         print("idx_j size:", idx_j.size())
    |         ^^^^^ T201
383 |         print("idx_k size:", idx_k.size())
384 |         print("idx_batch size:", idx_batch.size())
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:383:9: T201 `print` found
    |
381 |         print("num_triplets size:", num_triplets.size())
382 |         print("idx_j size:", idx_j.size())
383 |         print("idx_k size:", idx_k.size())
    |         ^^^^^ T201
384 |         print("idx_batch size:", idx_batch.size())
385 |         print("idx_k_n size:", idx_k_n.size())
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:384:9: T201 `print` found
    |
382 |         print("idx_j size:", idx_j.size())
383 |         print("idx_k size:", idx_k.size())
384 |         print("idx_batch size:", idx_batch.size())
    |         ^^^^^ T201
385 |         print("idx_k_n size:", idx_k_n.size())
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:385:9: T201 `print` found
    |
383 |         print("idx_k size:", idx_k.size())
384 |         print("idx_batch size:", idx_batch.size())
385 |         print("idx_k_n size:", idx_k_n.size())
    |         ^^^^^ T201
386 | 
387 |         idx_i_t = idx_i.repeat_interleave(num_triplets_t)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\SphereNet.py:416:9: RET505 Unnecessary `else` after `return` statement
    |
414 |             return dist, angle, torsion, i, j, idx_kj, idx_ji
415 | 
416 |         else:
    |         ^^^^ RET505
417 |             return dist, angle, i, j, idx_kj, idx_ji
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\SphereNet.py:419:9: D102 Missing docstring in public method
    |
417 |             return dist, angle, i, j, idx_kj, idx_ji
418 | 
419 |     def forward(self, z, pos, batch):
    |         ^^^^^^^ D102
420 |         if self.energy_and_force:
421 |             pos.requires_grad_()
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:1:1: N999 Invalid module name: 'SphereNet_periodic'
src\stk_search\geom3d\models\SphereNet_periodic.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SphereNet_periodic.py:1:18: N812 Lowercase `pi` imported as non-lowercase `PI`
  |
1 | from math import pi as PI
  |                  ^^^^^^^^ N812
2 | from math import sqrt
  |

src\stk_search\geom3d\models\SphereNet_periodic.py:18:7: N801 Class name `emb` should use CapWords convention
   |
18 | class emb(torch.nn.Module):
   |       ^^^ N801
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
20 |         super(emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:18:7: D101 Missing docstring in public class
   |
18 | class emb(torch.nn.Module):
   |       ^^^ D101
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
20 |         super(emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:19:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 | class emb(torch.nn.Module):
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
   |         ^^^^^^^^ ANN204
20 |         super(emb, self).__init__()
21 |         self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_periodic.py:19:9: D107 Missing docstring in `__init__`
   |
18 | class emb(torch.nn.Module):
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
   |         ^^^^^^^^ D107
20 |         super(emb, self).__init__()
21 |         self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:20:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
18 | class emb(torch.nn.Module):
19 |     def __init__(self, num_spherical, num_radial, cutoff, envelope_exponent):
20 |         super(emb, self).__init__()
   |              ^^^^^^^^^^^ UP008
21 |         self.dist_emb = dist_emb(num_radial, cutoff, envelope_exponent)
22 |         self.angle_emb = angle_emb(num_spherical, num_radial, cutoff, envelope_exponent)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_periodic.py:28:9: D102 Missing docstring in public method
   |
26 |         self.reset_parameters()
27 | 
28 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
29 |         self.dist_emb.reset_parameters()
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:31:9: D102 Missing docstring in public method
   |
29 |         self.dist_emb.reset_parameters()
30 | 
31 |     def forward(self, dist, angle, torsion, idx_kj):
   |         ^^^^^^^ D102
32 |         dist_emb = self.dist_emb(dist)
33 |         angle_emb = self.angle_emb(dist, angle, idx_kj)
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:38:7: N801 Class name `init` should use CapWords convention
   |
38 | class init(torch.nn.Module):
   |       ^^^^ N801
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
40 |         super(init, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:38:7: D101 Missing docstring in public class
   |
38 | class init(torch.nn.Module):
   |       ^^^^ D101
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
40 |         super(init, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:39:9: ANN204 Missing return type annotation for special method `__init__`
   |
38 | class init(torch.nn.Module):
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
   |         ^^^^^^^^ ANN204
40 |         super(init, self).__init__()
41 |         self.act = act
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_periodic.py:39:9: D107 Missing docstring in `__init__`
   |
38 | class init(torch.nn.Module):
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
   |         ^^^^^^^^ D107
40 |         super(init, self).__init__()
41 |         self.act = act
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:40:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
38 | class init(torch.nn.Module):
39 |     def __init__(self, num_radial, hidden_channels, act="swish"):
40 |         super(init, self).__init__()
   |              ^^^^^^^^^^^^ UP008
41 |         self.act = act
42 |         self.emb = Embedding(95, hidden_channels)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_periodic.py:48:9: D102 Missing docstring in public method
   |
46 |         self.reset_parameters()
47 | 
48 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
49 |         self.emb.weight.data.uniform_(-sqrt(3), sqrt(3))
50 |         self.lin_rbf_0.reset_parameters()
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:54:9: D102 Missing docstring in public method
   |
52 |         glorot_orthogonal(self.lin_rbf_1.weight, scale=2.0)
53 | 
54 |     def forward(self, x, emb, i, j):
   |         ^^^^^^^ D102
55 |         rbf, _, _ = emb
56 |         x = self.emb(x)
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:64:7: N801 Class name `update_e` should use CapWords convention
   |
64 | class update_e(torch.nn.Module):
   |       ^^^^^^^^ N801
65 |     def __init__(
66 |         self,
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:64:7: D101 Missing docstring in public class
   |
64 | class update_e(torch.nn.Module):
   |       ^^^^^^^^ D101
65 |     def __init__(
66 |         self,
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:65:9: PLR0913 Too many arguments in function definition (10 > 5)
   |
64 | class update_e(torch.nn.Module):
65 |     def __init__(
   |         ^^^^^^^^ PLR0913
66 |         self,
67 |         hidden_channels,
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:65:9: ANN204 Missing return type annotation for special method `__init__`
   |
64 | class update_e(torch.nn.Module):
65 |     def __init__(
   |         ^^^^^^^^ ANN204
66 |         self,
67 |         hidden_channels,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_periodic.py:65:9: D107 Missing docstring in `__init__`
   |
64 | class update_e(torch.nn.Module):
65 |     def __init__(
   |         ^^^^^^^^ D107
66 |         self,
67 |         hidden_channels,
   |

src\stk_search\geom3d\models\SphereNet_periodic.py:78:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
76 |         act="swish",
77 |     ):
78 |         super(update_e, self).__init__()
   |              ^^^^^^^^^^^^^^^^ UP008
79 |         self.act = act
80 |         self.lin_rbf1 = nn.Linear(num_radial, basis_emb_size_dist, bias=False)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_periodic.py:110:9: D102 Missing docstring in public method
    |
108 |         self.reset_parameters()
109 | 
110 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
111 |         glorot_orthogonal(self.lin_rbf1.weight, scale=2.0)
112 |         glorot_orthogonal(self.lin_rbf2.weight, scale=2.0)
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:135:9: D102 Missing docstring in public method
    |
133 |         glorot_orthogonal(self.lin_rbf.weight, scale=2.0)
134 | 
135 |     def forward(self, x, emb, idx_kj, idx_ji):
    |         ^^^^^^^ D102
136 |         rbf0, sbf, t = emb
137 |         x1, _ = x
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:170:7: N801 Class name `update_v` should use CapWords convention
    |
170 | class update_v(torch.nn.Module):
    |       ^^^^^^^^ N801
171 |     def __init__(
172 |         self,
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:170:7: D101 Missing docstring in public class
    |
170 | class update_v(torch.nn.Module):
    |       ^^^^^^^^ D101
171 |     def __init__(
172 |         self,
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:171:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
170 | class update_v(torch.nn.Module):
171 |     def __init__(
    |         ^^^^^^^^ PLR0913
172 |         self,
173 |         hidden_channels,
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:171:9: ANN204 Missing return type annotation for special method `__init__`
    |
170 | class update_v(torch.nn.Module):
171 |     def __init__(
    |         ^^^^^^^^ ANN204
172 |         self,
173 |         hidden_channels,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_periodic.py:171:9: D107 Missing docstring in `__init__`
    |
170 | class update_v(torch.nn.Module):
171 |     def __init__(
    |         ^^^^^^^^ D107
172 |         self,
173 |         hidden_channels,
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:180:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
178 |         output_init,
179 |     ):
180 |         super(update_v, self).__init__()
    |              ^^^^^^^^^^^^^^^^ UP008
181 |         self.act = act
182 |         self.output_init = output_init
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_periodic.py:192:9: D102 Missing docstring in public method
    |
190 |         self.reset_parameters()
191 | 
192 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
193 |         glorot_orthogonal(self.lin_up.weight, scale=2.0)
194 |         for lin in self.lins:
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:202:9: D102 Missing docstring in public method
    |
200 |             glorot_orthogonal(self.lin.weight, scale=2.0)
201 | 
202 |     def forward(self, e, i, dim_size=None):
    |         ^^^^^^^ D102
203 |         if dim_size == None:
204 |             dim_size = i.max().item() + 1
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:203:24: E711 Comparison to `None` should be `cond is None`
    |
202 |     def forward(self, e, i, dim_size=None):
203 |         if dim_size == None:
    |                        ^^^^ E711
204 |             dim_size = i.max().item() + 1
205 |         _, e2 = e
    |
    = help: Replace with `cond is None`

src\stk_search\geom3d\models\SphereNet_periodic.py:211:16: RET504 Unnecessary assignment to `v` before `return` statement
    |
209 |             v = self.act(lin(v))
210 |         v = self.lin(v)
211 |         return v
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SphereNet_periodic.py:214:7: N801 Class name `update_u` should use CapWords convention
    |
214 | class update_u(torch.nn.Module):
    |       ^^^^^^^^ N801
215 |     def __init__(self):
216 |         super(update_u, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:214:7: D101 Missing docstring in public class
    |
214 | class update_u(torch.nn.Module):
    |       ^^^^^^^^ D101
215 |     def __init__(self):
216 |         super(update_u, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:215:9: ANN204 Missing return type annotation for special method `__init__`
    |
214 | class update_u(torch.nn.Module):
215 |     def __init__(self):
    |         ^^^^^^^^ ANN204
216 |         super(update_u, self).__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_periodic.py:215:9: D107 Missing docstring in `__init__`
    |
214 | class update_u(torch.nn.Module):
215 |     def __init__(self):
    |         ^^^^^^^^ D107
216 |         super(update_u, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:216:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
214 | class update_u(torch.nn.Module):
215 |     def __init__(self):
216 |         super(update_u, self).__init__()
    |              ^^^^^^^^^^^^^^^^ UP008
217 | 
218 |     def forward(self, u, v, batch):
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_periodic.py:218:9: D102 Missing docstring in public method
    |
216 |         super(update_u, self).__init__()
217 | 
218 |     def forward(self, u, v, batch):
    |         ^^^^^^^ D102
219 |         u += scatter(v, batch, dim=0, reduce=REDUCE)
220 |         return u
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:249:9: PLR0913 Too many arguments in function definition (18 > 5)
    |
247 |     """
248 | 
249 |     def __init__(
    |         ^^^^^^^^ PLR0913
250 |         self,
251 |         energy_and_force=False,
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:249:9: ANN204 Missing return type annotation for special method `__init__`
    |
247 |     """
248 | 
249 |     def __init__(
    |         ^^^^^^^^ ANN204
250 |         self,
251 |         energy_and_force=False,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_periodic.py:249:9: D107 Missing docstring in `__init__`
    |
247 |     """
248 | 
249 |     def __init__(
    |         ^^^^^^^^ D107
250 |         self,
251 |         energy_and_force=False,
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:251:9: FBT002 Boolean default positional argument in function definition
    |
249 |     def __init__(
250 |         self,
251 |         energy_and_force=False,
    |         ^^^^^^^^^^^^^^^^ FBT002
252 |         cutoff=5.0,
253 |         num_layers=4,
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:270:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
268 |         output_init="GlorotOrthogonal",
269 |     ):
270 |         super(SphereNetPeriodic, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ UP008
271 | 
272 |         self.cutoff = cutoff
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_periodic.py:323:9: D102 Missing docstring in public method
    |
321 |         self.reset_parameters()
322 | 
323 |     def reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^ D102
324 |         self.init_e.reset_parameters()
325 |         self.init_v.reset_parameters()
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:332:9: D417 Missing argument descriptions in the docstring for `triplets`: `edge_index`, `num_nodes`
    |
330 |             update_v.reset_parameters()
331 | 
332 |     def triplets(self, pos, edge_index, num_nodes, use_torsion=False):
    |         ^^^^^^^^ D417
333 |         """Compute the diatance, angle, and torsion from geometric information.
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:332:52: FBT002 Boolean default positional argument in function definition
    |
330 |             update_v.reset_parameters()
331 | 
332 |     def triplets(self, pos, edge_index, num_nodes, use_torsion=False):
    |                                                    ^^^^^^^^^^^ FBT002
333 |         """Compute the diatance, angle, and torsion from geometric information.
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:406:9: RET505 Unnecessary `else` after `return` statement
    |
404 |             return dist, angle, torsion, i, j, idx_kj, idx_ji
405 | 
406 |         else:
    |         ^^^^ RET505
407 |             return dist, angle, i, j, idx_kj, idx_ji
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\SphereNet_periodic.py:409:9: D102 Missing docstring in public method
    |
407 |             return dist, angle, i, j, idx_kj, idx_ji
408 | 
409 |     def forward(self, z, pos, edge_index, batch):
    |         ^^^^^^^ D102
410 |         if self.energy_and_force:
411 |             pos.requires_grad_()
    |

src\stk_search\geom3d\models\SphereNet_periodic.py:432:9: D102 Missing docstring in public method
    |
430 |         return u
431 | 
432 |     def forward_with_gathered_index(self, z, pos, edge_index, batch, periodic_index_mapping):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
433 |         if self.energy_and_force:
434 |             pos.requires_grad_()
    |

src\stk_search\geom3d\models\SphereNet_utils.py:1:1: N999 Invalid module name: 'SphereNet_utils'
src\stk_search\geom3d\models\SphereNet_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\SphereNet_utils.py:1:18: N812 Lowercase `pi` imported as non-lowercase `PI`
  |
1 | from math import pi as PI
  |                  ^^^^^^^^ N812
2 | 
3 | import sympy as sym
  |

src\stk_search\geom3d\models\SphereNet_utils.py:14:5: C901 `real_sph_harm` is too complex (16 > 10)
   |
14 | def real_sph_harm(l, zero_m_only=False, spherical_coordinates=True):
   |     ^^^^^^^^^^^^^ C901
15 |     """Computes formula strings of the the real part of the spherical harmonics up to order l (excluded).
16 |     Variables are either cartesian coordinates x,y,z on the unit sphere or spherical coordinates phi and theta.
   |

src\stk_search\geom3d\models\SphereNet_utils.py:14:5: PLR0912 Too many branches (15 > 12)
   |
14 | def real_sph_harm(l, zero_m_only=False, spherical_coordinates=True):
   |     ^^^^^^^^^^^^^ PLR0912
15 |     """Computes formula strings of the the real part of the spherical harmonics up to order l (excluded).
16 |     Variables are either cartesian coordinates x,y,z on the unit sphere or spherical coordinates phi and theta.
   |

src\stk_search\geom3d\models\SphereNet_utils.py:14:19: E741 Ambiguous variable name: `l`
   |
14 | def real_sph_harm(l, zero_m_only=False, spherical_coordinates=True):
   |                   ^ E741
15 |     """Computes formula strings of the the real part of the spherical harmonics up to order l (excluded).
16 |     Variables are either cartesian coordinates x,y,z on the unit sphere or spherical coordinates phi and theta.
   |

src\stk_search\geom3d\models\SphereNet_utils.py:14:22: FBT002 Boolean default positional argument in function definition
   |
14 | def real_sph_harm(l, zero_m_only=False, spherical_coordinates=True):
   |                      ^^^^^^^^^^^ FBT002
15 |     """Computes formula strings of the the real part of the spherical harmonics up to order l (excluded).
16 |     Variables are either cartesian coordinates x,y,z on the unit sphere or spherical coordinates phi and theta.
   |

src\stk_search\geom3d\models\SphereNet_utils.py:14:41: FBT002 Boolean default positional argument in function definition
   |
14 | def real_sph_harm(l, zero_m_only=False, spherical_coordinates=True):
   |                                         ^^^^^^^^^^^^^^^^^^^^^ FBT002
15 |     """Computes formula strings of the the real part of the spherical harmonics up to order l (excluded).
16 |     Variables are either cartesian coordinates x,y,z on the unit sphere or spherical coordinates phi and theta.
   |

src\stk_search\geom3d\models\SphereNet_utils.py:15:5: D205 1 blank line required between summary line and description
   |
14 |   def real_sph_harm(l, zero_m_only=False, spherical_coordinates=True):
15 |       """Computes formula strings of the the real part of the spherical harmonics up to order l (excluded).
   |  _____^
16 | |     Variables are either cartesian coordinates x,y,z on the unit sphere or spherical coordinates phi and theta.
17 | |     """
   | |_______^ D205
18 |       if not zero_m_only:
19 |           x = sym.symbols("x")
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\SphereNet_utils.py:15:5: D401 First line of docstring should be in imperative mood: "Computes formula strings of the the real part of the spherical harmonics up to order l (excluded)."
   |
14 |   def real_sph_harm(l, zero_m_only=False, spherical_coordinates=True):
15 |       """Computes formula strings of the the real part of the spherical harmonics up to order l (excluded).
   |  _____^
16 | |     Variables are either cartesian coordinates x,y,z on the unit sphere or spherical coordinates phi and theta.
17 | |     """
   | |_______^ D401
18 |       if not zero_m_only:
19 |           x = sym.symbols("x")
   |

src\stk_search\geom3d\models\SphereNet_utils.py:21:9: N806 Variable `S_m` in function should be lowercase
   |
19 |         x = sym.symbols("x")
20 |         y = sym.symbols("y")
21 |         S_m = [x * 0]
   |         ^^^ N806
22 |         C_m = [1 + 0 * x]
23 |         # S_m = [0]
   |

src\stk_search\geom3d\models\SphereNet_utils.py:22:9: N806 Variable `C_m` in function should be lowercase
   |
20 |         y = sym.symbols("y")
21 |         S_m = [x * 0]
22 |         C_m = [1 + 0 * x]
   |         ^^^ N806
23 |         # S_m = [0]
24 |         # C_m = [1]
   |

src\stk_search\geom3d\models\SphereNet_utils.py:23:9: ERA001 Found commented-out code
   |
21 |         S_m = [x * 0]
22 |         C_m = [1 + 0 * x]
23 |         # S_m = [0]
   |         ^^^^^^^^^^^ ERA001
24 |         # C_m = [1]
25 |         for i in range(1, l):
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\SphereNet_utils.py:24:9: ERA001 Found commented-out code
   |
22 |         C_m = [1 + 0 * x]
23 |         # S_m = [0]
24 |         # C_m = [1]
   |         ^^^^^^^^^^^ ERA001
25 |         for i in range(1, l):
26 |             x = sym.symbols("x")
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\SphereNet_utils.py:28:13: N806 Variable `S_m` in function should be lowercase
   |
26 |             x = sym.symbols("x")
27 |             y = sym.symbols("y")
28 |             S_m += [x * S_m[i - 1] + y * C_m[i - 1]]
   |             ^^^ N806
29 |             C_m += [x * C_m[i - 1] - y * S_m[i - 1]]
   |

src\stk_search\geom3d\models\SphereNet_utils.py:29:13: N806 Variable `C_m` in function should be lowercase
   |
27 |             y = sym.symbols("y")
28 |             S_m += [x * S_m[i - 1] + y * C_m[i - 1]]
29 |             C_m += [x * C_m[i - 1] - y * S_m[i - 1]]
   |             ^^^ N806
30 | 
31 |     P_l_m = associated_legendre_polynomials(l, zero_m_only)
   |

src\stk_search\geom3d\models\SphereNet_utils.py:31:5: N806 Variable `P_l_m` in function should be lowercase
   |
29 |             C_m += [x * C_m[i - 1] - y * S_m[i - 1]]
30 | 
31 |     P_l_m = associated_legendre_polynomials(l, zero_m_only)
   |     ^^^^^ N806
32 |     if spherical_coordinates:
33 |         theta = sym.symbols("theta")
   |

src\stk_search\geom3d\models\SphereNet_utils.py:37:20: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   |
35 |         for i in range(len(P_l_m)):
36 |             for j in range(len(P_l_m[i])):
37 |                 if type(P_l_m[i][j]) != int:
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ E721
38 |                     P_l_m[i][j] = P_l_m[i][j].subs(z, sym.cos(theta))
39 |         if not zero_m_only:
   |

src\stk_search\geom3d\models\SphereNet_utils.py:54:5: N806 Variable `Y_func_l_m` in function should be lowercase
   |
52 |                 )
53 | 
54 |     Y_func_l_m = [["0"] * (2 * j + 1) for j in range(l)]
   |     ^^^^^^^^^^ N806
55 |     for i in range(l):
56 |         Y_func_l_m[i][0] = sym.simplify(sph_harm_prefactor(i, 0) * P_l_m[i][0])
   |

src\stk_search\geom3d\models\SphereNet_utils.py:73:7: N801 Class name `dist_emb` should use CapWords convention
   |
73 | class dist_emb(torch.nn.Module):
   |       ^^^^^^^^ N801
74 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
75 |         super(dist_emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_utils.py:73:7: D101 Missing docstring in public class
   |
73 | class dist_emb(torch.nn.Module):
   |       ^^^^^^^^ D101
74 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
75 |         super(dist_emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_utils.py:74:9: ANN204 Missing return type annotation for special method `__init__`
   |
73 | class dist_emb(torch.nn.Module):
74 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ ANN204
75 |         super(dist_emb, self).__init__()
76 |         self.cutoff = cutoff
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_utils.py:74:9: D107 Missing docstring in `__init__`
   |
73 | class dist_emb(torch.nn.Module):
74 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ D107
75 |         super(dist_emb, self).__init__()
76 |         self.cutoff = cutoff
   |

src\stk_search\geom3d\models\SphereNet_utils.py:75:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
73 | class dist_emb(torch.nn.Module):
74 |     def __init__(self, num_radial, cutoff=5.0, envelope_exponent=5):
75 |         super(dist_emb, self).__init__()
   |              ^^^^^^^^^^^^^^^^ UP008
76 |         self.cutoff = cutoff
77 |         self.envelope = Envelope(envelope_exponent)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_utils.py:83:9: D102 Missing docstring in public method
   |
81 |         self.reset_parameters()
82 | 
83 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
84 |         with torch.no_grad(): torch.arange(1, self.freq.numel() + 1, out=self.freq).mul_(PI)
   |

src\stk_search\geom3d\models\SphereNet_utils.py:84:29: E701 Multiple statements on one line (colon)
   |
83 |     def reset_parameters(self):
84 |         with torch.no_grad(): torch.arange(1, self.freq.numel() + 1, out=self.freq).mul_(PI)
   |                             ^ E701
85 | 
86 |     def forward(self, dist):
   |

src\stk_search\geom3d\models\SphereNet_utils.py:86:9: D102 Missing docstring in public method
   |
84 |         with torch.no_grad(): torch.arange(1, self.freq.numel() + 1, out=self.freq).mul_(PI)
85 | 
86 |     def forward(self, dist):
   |         ^^^^^^^ D102
87 |         dist = dist.unsqueeze(-1) / self.cutoff
88 |         return self.envelope(dist) * (self.freq * dist).sin()
   |

src\stk_search\geom3d\models\SphereNet_utils.py:91:7: N801 Class name `angle_emb` should use CapWords convention
   |
91 | class angle_emb(torch.nn.Module):
   |       ^^^^^^^^^ N801
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
93 |         super(angle_emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_utils.py:91:7: D101 Missing docstring in public class
   |
91 | class angle_emb(torch.nn.Module):
   |       ^^^^^^^^^ D101
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
93 |         super(angle_emb, self).__init__()
   |

src\stk_search\geom3d\models\SphereNet_utils.py:92:9: ANN204 Missing return type annotation for special method `__init__`
   |
91 | class angle_emb(torch.nn.Module):
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ ANN204
93 |         super(angle_emb, self).__init__()
94 |         assert num_radial <= 64
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_utils.py:92:9: D107 Missing docstring in `__init__`
   |
91 | class angle_emb(torch.nn.Module):
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
   |         ^^^^^^^^ D107
93 |         super(angle_emb, self).__init__()
94 |         assert num_radial <= 64
   |

src\stk_search\geom3d\models\SphereNet_utils.py:92:63: ARG002 Unused method argument: `envelope_exponent`
   |
91 | class angle_emb(torch.nn.Module):
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
   |                                                               ^^^^^^^^^^^^^^^^^ ARG002
93 |         super(angle_emb, self).__init__()
94 |         assert num_radial <= 64
   |

src\stk_search\geom3d\models\SphereNet_utils.py:93:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
91 | class angle_emb(torch.nn.Module):
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
93 |         super(angle_emb, self).__init__()
   |              ^^^^^^^^^^^^^^^^^ UP008
94 |         assert num_radial <= 64
95 |         self.num_spherical = num_spherical
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_utils.py:94:9: S101 Use of `assert` detected
   |
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
93 |         super(angle_emb, self).__init__()
94 |         assert num_radial <= 64
   |         ^^^^^^ S101
95 |         self.num_spherical = num_spherical
96 |         self.num_radial = num_radial
   |

src\stk_search\geom3d\models\SphereNet_utils.py:94:30: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
   |
92 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
93 |         super(angle_emb, self).__init__()
94 |         assert num_radial <= 64
   |                              ^^ PLR2004
95 |         self.num_spherical = num_spherical
96 |         self.num_radial = num_radial
   |

src\stk_search\geom3d\models\SphereNet_utils.py:98:9: ERA001 Found commented-out code
    |
 96 |         self.num_radial = num_radial
 97 |         self.cutoff = cutoff
 98 |         # self.envelope = Envelope(envelope_exponent)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
 99 | 
100 |         bessel_forms = bessel_basis(num_spherical, num_radial)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SphereNet_utils.py:110:71: B023 Function definition does not bind loop variable `sph1`
    |
108 |             if i == 0:
109 |                 sph1 = sym.lambdify([theta], sph_harm_forms[i][0], modules)(0)
110 |                 self.sph_funcs.append(lambda x: torch.zeros_like(x) + sph1)
    |                                                                       ^^^^ B023
111 |             else:
112 |                 sph = sym.lambdify([theta], sph_harm_forms[i][0], modules)
    |

src\stk_search\geom3d\models\SphereNet_utils.py:118:9: D102 Missing docstring in public method
    |
116 |                 self.bessel_funcs.append(bessel)
117 | 
118 |     def forward(self, dist, angle, idx_kj):
    |         ^^^^^^^ D102
119 |         dist = dist / self.cutoff
120 |         rbf = torch.stack([f(dist) for f in self.bessel_funcs], dim=1)
    |

src\stk_search\geom3d\models\SphereNet_utils.py:121:9: ERA001 Found commented-out code
    |
119 |         dist = dist / self.cutoff
120 |         rbf = torch.stack([f(dist) for f in self.bessel_funcs], dim=1)
121 |         # rbf = self.envelope(dist).unsqueeze(-1) * rbf
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
122 | 
123 |         cbf = torch.stack([f(angle) for f in self.sph_funcs], dim=1)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SphereNet_utils.py:127:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
125 |         n, k = self.num_spherical, self.num_radial
126 |         out = (rbf[idx_kj].view(-1, n, k) * cbf.view(-1, n, 1)).view(-1, n * k)
127 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\SphereNet_utils.py:130:7: N801 Class name `torsion_emb` should use CapWords convention
    |
130 | class torsion_emb(torch.nn.Module):
    |       ^^^^^^^^^^^ N801
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
132 |         super(torsion_emb, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet_utils.py:130:7: D101 Missing docstring in public class
    |
130 | class torsion_emb(torch.nn.Module):
    |       ^^^^^^^^^^^ D101
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
132 |         super(torsion_emb, self).__init__()
    |

src\stk_search\geom3d\models\SphereNet_utils.py:131:9: ANN204 Missing return type annotation for special method `__init__`
    |
130 | class torsion_emb(torch.nn.Module):
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
    |         ^^^^^^^^ ANN204
132 |         super(torsion_emb, self).__init__()
133 |         assert num_radial <= 64
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\SphereNet_utils.py:131:9: D107 Missing docstring in `__init__`
    |
130 | class torsion_emb(torch.nn.Module):
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
    |         ^^^^^^^^ D107
132 |         super(torsion_emb, self).__init__()
133 |         assert num_radial <= 64
    |

src\stk_search\geom3d\models\SphereNet_utils.py:131:63: ARG002 Unused method argument: `envelope_exponent`
    |
130 | class torsion_emb(torch.nn.Module):
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
    |                                                               ^^^^^^^^^^^^^^^^^ ARG002
132 |         super(torsion_emb, self).__init__()
133 |         assert num_radial <= 64
    |

src\stk_search\geom3d\models\SphereNet_utils.py:132:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
130 | class torsion_emb(torch.nn.Module):
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
132 |         super(torsion_emb, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^ UP008
133 |         assert num_radial <= 64
134 |         self.num_spherical = num_spherical
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\SphereNet_utils.py:133:9: S101 Use of `assert` detected
    |
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
132 |         super(torsion_emb, self).__init__()
133 |         assert num_radial <= 64
    |         ^^^^^^ S101
134 |         self.num_spherical = num_spherical
135 |         self.num_radial = num_radial
    |

src\stk_search\geom3d\models\SphereNet_utils.py:133:30: PLR2004 Magic value used in comparison, consider replacing `64` with a constant variable
    |
131 |     def __init__(self, num_spherical, num_radial, cutoff=5.0, envelope_exponent=5):
132 |         super(torsion_emb, self).__init__()
133 |         assert num_radial <= 64
    |                              ^^ PLR2004
134 |         self.num_spherical = num_spherical
135 |         self.num_radial = num_radial
    |

src\stk_search\geom3d\models\SphereNet_utils.py:137:9: ERA001 Found commented-out code
    |
135 |         self.num_radial = num_radial
136 |         self.cutoff = cutoff
137 |         # self.envelope = Envelope(envelope_exponent)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
138 | 
139 |         bessel_forms = bessel_basis(num_spherical, num_radial)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\SphereNet_utils.py:152:78: B023 Function definition does not bind loop variable `sph1`
    |
150 |                 sph1 = sym.lambdify([theta, phi], sph_harm_forms[i][0], modules)
151 |                 self.sph_funcs.append(
152 |                     lambda x, y: torch.zeros_like(x) + torch.zeros_like(y) + sph1(0, 0)
    |                                                                              ^^^^ B023
153 |                 )  # torch.zeros_like(x) + torch.zeros_like(y)
154 |             else:
    |

src\stk_search\geom3d\models\SphereNet_utils.py:162:9: D102 Missing docstring in public method
    |
160 |                 self.bessel_funcs.append(bessel)
161 | 
162 |     def forward(self, dist, angle, phi, idx_kj):
    |         ^^^^^^^ D102
163 |         dist = dist / self.cutoff
164 |         rbf = torch.stack([f(dist) for f in self.bessel_funcs], dim=1)
    |

src\stk_search\geom3d\models\SphereNet_utils.py:171:16: RET504 Unnecessary assignment to `out` before `return` statement
    |
169 |             -1, n * n * k
170 |         )
171 |         return out
    |                ^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\TFN.py:1:1: N999 Invalid module name: 'TFN'
src\stk_search\geom3d\models\TFN.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TFN.py:10:7: D101 Missing docstring in public class
   |
10 | class TFN(nn.Module):
   |       ^^^ D101
11 |     def __init__(
12 |         self,
   |

src\stk_search\geom3d\models\TFN.py:11:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
10 | class TFN(nn.Module):
11 |     def __init__(
   |         ^^^^^^^^ PLR0913
12 |         self,
13 |         num_layers,
   |

src\stk_search\geom3d\models\TFN.py:11:9: ANN204 Missing return type annotation for special method `__init__`
   |
10 | class TFN(nn.Module):
11 |     def __init__(
   |         ^^^^^^^^ ANN204
12 |         self,
13 |         num_layers,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TFN.py:11:9: D107 Missing docstring in `__init__`
   |
10 | class TFN(nn.Module):
11 |     def __init__(
   |         ^^^^^^^^ D107
12 |         self,
13 |         num_layers,
   |

src\stk_search\geom3d\models\TFN.py:36:13: B007 Loop control variable `i` not used within loop body
   |
34 |         block0 = []
35 |         fin = self.fibers["in"]
36 |         for i in range(self.num_layers - 1):
   |             ^ B007
37 |             block0.append(
38 |                 GConvSE3(
   |
   = help: Rename unused `i` to `_i`

src\stk_search\geom3d\models\TFN.py:58:9: D102 Missing docstring in public method
   |
58 |     def forward(self, x, positions, edge_index, edge_feat=None):
   |         ^^^^^^^ D102
59 |         # Compute equivariant weight basis from relative positions
60 |         row, col = edge_index
   |

src\stk_search\geom3d\models\TFN.py:73:16: RET504 Unnecessary assignment to `h` before `return` statement
   |
71 |         h = h["0"].squeeze()
72 | 
73 |         return h
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\TFN_utils.py:1:1: N999 Invalid module name: 'TFN_utils'
src\stk_search\geom3d\models\TFN_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TFN_utils.py:7:5: D400 First line should end with a period
  |
6 | class BN(nn.Module):
7 |     """SE(3)-equvariant batch/layer normalization"""
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
8 | 
9 |     def __init__(self, m):
  |
  = help: Add period

src\stk_search\geom3d\models\TFN_utils.py:7:5: D415 First line should end with a period, question mark, or exclamation point
  |
6 | class BN(nn.Module):
7 |     """SE(3)-equvariant batch/layer normalization"""
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
8 | 
9 |     def __init__(self, m):
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\TFN_utils.py:9:9: ANN204 Missing return type annotation for special method `__init__`
   |
 7 |     """SE(3)-equvariant batch/layer normalization"""
 8 | 
 9 |     def __init__(self, m):
   |         ^^^^^^^^ ANN204
10 |         """SE(3)-equvariant batch/layer normalization
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TFN_utils.py:10:9: D400 First line should end with a period
   |
 9 |       def __init__(self, m):
10 |           """SE(3)-equvariant batch/layer normalization
   |  _________^
11 | | 
12 | |         Args:
13 | |         ----
14 | |             m: int for number of output channels
15 | | 
16 | |         """
   | |___________^ D400
17 |           super().__init__()
18 |           self.bn = nn.LayerNorm(m)
   |
   = help: Add period

src\stk_search\geom3d\models\TFN_utils.py:10:9: D415 First line should end with a period, question mark, or exclamation point
   |
 9 |       def __init__(self, m):
10 |           """SE(3)-equvariant batch/layer normalization
   |  _________^
11 | | 
12 | |         Args:
13 | |         ----
14 | |             m: int for number of output channels
15 | | 
16 | |         """
   | |___________^ D415
17 |           super().__init__()
18 |           self.bn = nn.LayerNorm(m)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\TFN_utils.py:20:9: D102 Missing docstring in public method
   |
18 |         self.bn = nn.LayerNorm(m)
19 | 
20 |     def forward(self, x):
   |         ^^^^^^^ D102
21 |         return self.bn(x)
   |

src\stk_search\geom3d\models\TFN_utils.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 |     """NN parameterized radial profile function."""
26 | 
27 |     def __init__(self, num_freq, in_dim, out_dim, edge_dim: int = 0):
   |         ^^^^^^^^ ANN204
28 |         """NN parameterized radial profile function.
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TFN_utils.py:59:9: D102 Missing docstring in public method
   |
57 |         nn.init.kaiming_uniform_(self.net[6].weight)
58 | 
59 |     def forward(self, x):
   |         ^^^^^^^ D102
60 |         y = self.net(x)
61 |         return y.view(-1, self.out_dim, 1, self.in_dim, 1, self.num_freq)
   |

src\stk_search\geom3d\models\TFN_utils.py:63:9: ANN204 Missing return type annotation for special method `__repr__`
   |
61 |         return y.view(-1, self.out_dim, 1, self.in_dim, 1, self.num_freq)
62 | 
63 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
64 |         return f"RadialFunc(edge_dim={self.edge_dim}, in_dim={self.in_dim}, out_dim={self.out_dim})"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\TFN_utils.py:63:9: D105 Missing docstring in magic method
   |
61 |         return y.view(-1, self.out_dim, 1, self.in_dim, 1, self.num_freq)
62 | 
63 |     def __repr__(self):
   |         ^^^^^^^^ D105
64 |         return f"RadialFunc(edge_dim={self.edge_dim}, in_dim={self.in_dim}, out_dim={self.out_dim})"
   |

src\stk_search\geom3d\models\TFN_utils.py:68:5: D400 First line should end with a period
   |
67 | class PairwiseConv(nn.Module):
68 |     """SE(3)-equivariant convolution between two single-type features"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
69 | 
70 |     def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\TFN_utils.py:68:5: D415 First line should end with a period, question mark, or exclamation point
   |
67 | class PairwiseConv(nn.Module):
68 |     """SE(3)-equivariant convolution between two single-type features"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
69 | 
70 |     def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\TFN_utils.py:70:9: ANN204 Missing return type annotation for special method `__init__`
   |
68 |     """SE(3)-equivariant convolution between two single-type features"""
69 | 
70 |     def __init__(
   |         ^^^^^^^^ ANN204
71 |         self,
72 |         degree_in: int,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TFN_utils.py:107:9: D102 Missing docstring in public method
    |
105 |         self.rp = RadialFunc(self.num_freq, nc_in, nc_out, self.edge_dim)
106 | 
107 |     def forward(self, feat, basis):
    |         ^^^^^^^ D102
108 |         # Get radial weights
109 |         R = self.rp(feat)
    |

src\stk_search\geom3d\models\TFN_utils.py:109:9: N806 Variable `R` in function should be lowercase
    |
107 |     def forward(self, feat, basis):
108 |         # Get radial weights
109 |         R = self.rp(feat)
    |         ^ N806
110 |         kernel = torch.sum(R * basis[f"{self.degree_in},{self.degree_out}"], -1)
111 |         return kernel.view(kernel.shape[0], self.d_out * self.nc_out, -1)
    |

src\stk_search\geom3d\models\TFN_utils.py:113:9: ANN204 Missing return type annotation for special method `__repr__`
    |
111 |         return kernel.view(kernel.shape[0], self.d_out * self.nc_out, -1)
112 | 
113 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
114 |         return f"PairwiseConv(edge_dim={self.edge_dim}, degree_in={self.degree_in}, degree_out={self.degree_out})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\TFN_utils.py:113:9: D105 Missing docstring in magic method
    |
111 |         return kernel.view(kernel.shape[0], self.d_out * self.nc_out, -1)
112 | 
113 |     def __repr__(self):
    |         ^^^^^^^^ D105
114 |         return f"PairwiseConv(edge_dim={self.edge_dim}, degree_in={self.degree_in}, degree_out={self.degree_out})"
    |

src\stk_search\geom3d\models\TFN_utils.py:118:5: D205 1 blank line required between summary line and description
    |
117 |   class GConvSE3(nn.Module):
118 |       """A tensor field network layer as a DGL module.
    |  _____^
119 | |     GConvSE3 stands for a Graph Convolution SE(3)-equivariant layer. It is the
120 | |     equivalent of a linear layer in an MLP, a conv layer in a CNN, or a graph
121 | |     conv layer in a GCN.
122 | |     At each node, the activations are split into different "feature types",
123 | |     indexed by the SE(3) representation type: non-negative integers 0, 1, 2, ..
124 | |     """
    | |_______^ D205
125 |   
126 |       def __init__(self, f_in, f_out, self_interaction=False, edge_dim=0, flavor="skip"):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\TFN_utils.py:126:9: ANN204 Missing return type annotation for special method `__init__`
    |
124 |     """
125 | 
126 |     def __init__(self, f_in, f_out, self_interaction=False, edge_dim=0, flavor="skip"):
    |         ^^^^^^^^ ANN204
127 |         """SE(3)-equivariant Graph Conv Layer
128 |         Args:
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TFN_utils.py:126:37: FBT002 Boolean default positional argument in function definition
    |
124 |     """
125 | 
126 |     def __init__(self, f_in, f_out, self_interaction=False, edge_dim=0, flavor="skip"):
    |                                     ^^^^^^^^^^^^^^^^ FBT002
127 |         """SE(3)-equivariant Graph Conv Layer
128 |         Args:
    |

src\stk_search\geom3d\models\TFN_utils.py:127:9: D205 1 blank line required between summary line and description
    |
126 |       def __init__(self, f_in, f_out, self_interaction=False, edge_dim=0, flavor="skip"):
127 |           """SE(3)-equivariant Graph Conv Layer
    |  _________^
128 | |         Args:
129 | |             f_in: list of tuples [(multiplicities, type),...]
130 | |             f_out: list of tuples [(multiplicities, type),...]
131 | |             self_interaction: include self-interaction in convolution
132 | |             edge_dim: number of dimensions for edge embedding
133 | |             flavor: allows ['TFN', 'skip'], where 'skip' adds a skip connection
134 | |         """
    | |___________^ D205
135 |           super().__init__()
136 |           self.f_in = f_in
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\TFN_utils.py:127:9: D400 First line should end with a period
    |
126 |       def __init__(self, f_in, f_out, self_interaction=False, edge_dim=0, flavor="skip"):
127 |           """SE(3)-equivariant Graph Conv Layer
    |  _________^
128 | |         Args:
129 | |             f_in: list of tuples [(multiplicities, type),...]
130 | |             f_out: list of tuples [(multiplicities, type),...]
131 | |             self_interaction: include self-interaction in convolution
132 | |             edge_dim: number of dimensions for edge embedding
133 | |             flavor: allows ['TFN', 'skip'], where 'skip' adds a skip connection
134 | |         """
    | |___________^ D400
135 |           super().__init__()
136 |           self.f_in = f_in
    |
    = help: Add period

src\stk_search\geom3d\models\TFN_utils.py:127:9: D415 First line should end with a period, question mark, or exclamation point
    |
126 |       def __init__(self, f_in, f_out, self_interaction=False, edge_dim=0, flavor="skip"):
127 |           """SE(3)-equivariant Graph Conv Layer
    |  _________^
128 | |         Args:
129 | |             f_in: list of tuples [(multiplicities, type),...]
130 | |             f_out: list of tuples [(multiplicities, type),...]
131 | |             self_interaction: include self-interaction in convolution
132 | |             edge_dim: number of dimensions for edge embedding
133 | |             flavor: allows ['TFN', 'skip'], where 'skip' adds a skip connection
134 | |         """
    | |___________^ D415
135 |           super().__init__()
136 |           self.f_in = f_in
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\TFN_utils.py:153:13: S101 Use of `assert` detected
    |
151 |         self.kernel_self = nn.ParameterDict()
152 |         if self_interaction:
153 |             assert self.flavor in ["TFN", "skip"]
    |             ^^^^^^ S101
154 |             if self.flavor == "TFN":
155 |                 for m_out, d_out in self.f_out.structure:
    |

src\stk_search\geom3d\models\TFN_utils.py:156:21: N806 Variable `W` in function should be lowercase
    |
154 |             if self.flavor == "TFN":
155 |                 for m_out, d_out in self.f_out.structure:
156 |                     W = nn.Parameter(torch.randn(1, m_out, m_out) / np.sqrt(m_out))
    |                     ^ N806
157 |                     self.kernel_self[f"{d_out}"] = W
158 |             elif self.flavor == "skip":
    |

src\stk_search\geom3d\models\TFN_utils.py:162:25: N806 Variable `W` in function should be lowercase
    |
160 |                     if d_in in self.f_out.degrees:
161 |                         m_out = self.f_out.structure_dict[d_in]
162 |                         W = nn.Parameter(torch.randn(1, m_out, m_in) / np.sqrt(m_in))
    |                         ^ N806
163 |                         self.kernel_self[f"{d_in}"] = W
    |

src\stk_search\geom3d\models\TFN_utils.py:166:9: C901 `forward` is too complex (11 > 10)
    |
165 |     # def forward(self, h, G=None, r=None, basis=None, **kwargs):
166 |     def forward(self, h, r, basis, edge_index, edge_feat=None, **kwargs):
    |         ^^^^^^^ C901
167 |         """Forward pass of the linear layer
168 |         Args:
    |

src\stk_search\geom3d\models\TFN_utils.py:166:64: ANN003 Missing type annotation for `**kwargs`
    |
165 |     # def forward(self, h, G=None, r=None, basis=None, **kwargs):
166 |     def forward(self, h, r, basis, edge_index, edge_feat=None, **kwargs):
    |                                                                ^^^^^^^^ ANN003
167 |         """Forward pass of the linear layer
168 |         Args:
    |

src\stk_search\geom3d\models\TFN_utils.py:166:66: ARG002 Unused method argument: `kwargs`
    |
165 |     # def forward(self, h, G=None, r=None, basis=None, **kwargs):
166 |     def forward(self, h, r, basis, edge_index, edge_feat=None, **kwargs):
    |                                                                  ^^^^^^ ARG002
167 |         """Forward pass of the linear layer
168 |         Args:
    |

src\stk_search\geom3d\models\TFN_utils.py:167:9: D205 1 blank line required between summary line and description
    |
165 |       # def forward(self, h, G=None, r=None, basis=None, **kwargs):
166 |       def forward(self, h, r, basis, edge_index, edge_feat=None, **kwargs):
167 |           """Forward pass of the linear layer
    |  _________^
168 | |         Args:
169 | |             G: minibatch of (homo)graphs
170 | |             h: dict of features
171 | |             r: inter-atomic distances
172 | |             basis: pre-computed Q * Y
173 | |         Returns:
174 | |             tensor with new features [B, n_points, n_features_out]
175 | |         """
    | |___________^ D205
176 |           # Add node features to local graph scope
177 |           G = {}
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\TFN_utils.py:167:9: D400 First line should end with a period
    |
165 |       # def forward(self, h, G=None, r=None, basis=None, **kwargs):
166 |       def forward(self, h, r, basis, edge_index, edge_feat=None, **kwargs):
167 |           """Forward pass of the linear layer
    |  _________^
168 | |         Args:
169 | |             G: minibatch of (homo)graphs
170 | |             h: dict of features
171 | |             r: inter-atomic distances
172 | |             basis: pre-computed Q * Y
173 | |         Returns:
174 | |             tensor with new features [B, n_points, n_features_out]
175 | |         """
    | |___________^ D400
176 |           # Add node features to local graph scope
177 |           G = {}
    |
    = help: Add period

src\stk_search\geom3d\models\TFN_utils.py:167:9: D415 First line should end with a period, question mark, or exclamation point
    |
165 |       # def forward(self, h, G=None, r=None, basis=None, **kwargs):
166 |       def forward(self, h, r, basis, edge_index, edge_feat=None, **kwargs):
167 |           """Forward pass of the linear layer
    |  _________^
168 | |         Args:
169 | |             G: minibatch of (homo)graphs
170 | |             h: dict of features
171 | |             r: inter-atomic distances
172 | |             basis: pre-computed Q * Y
173 | |         Returns:
174 | |             tensor with new features [B, n_points, n_features_out]
175 | |         """
    | |___________^ D415
176 |           # Add node features to local graph scope
177 |           G = {}
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\TFN_utils.py:177:9: N806 Variable `G` in function should be lowercase
    |
175 |         """
176 |         # Add node features to local graph scope
177 |         G = {}
    |         ^ N806
178 |         N = h["0"].size()[0]
179 |         for k, v in h.items():
    |

src\stk_search\geom3d\models\TFN_utils.py:178:9: N806 Variable `N` in function should be lowercase
    |
176 |         # Add node features to local graph scope
177 |         G = {}
178 |         N = h["0"].size()[0]
    |         ^ N806
179 |         for k, v in h.items():
180 |             G[k] = v
    |

src\stk_search\geom3d\models\TFN_utils.py:180:13: PERF403 Use a dictionary comprehension instead of a for-loop
    |
178 |         N = h["0"].size()[0]
179 |         for k, v in h.items():
180 |             G[k] = v
    |             ^^^^^^^^ PERF403
181 | 
182 |         if edge_feat is not None:
    |

src\stk_search\geom3d\models\TFN_utils.py:182:9: SIM108 Use ternary operator `feat = torch.cat([edge_feat, r], -1) if edge_feat is not None else r` instead of `if`-`else`-block
    |
180 |               G[k] = v
181 |   
182 |           if edge_feat is not None:
    |  _________^
183 | |             feat = torch.cat([edge_feat, r], -1)
184 | |         else:
185 | |             feat = r
    | |____________________^ SIM108
186 |   
187 |           for (mi, di) in self.f_in.structure:
    |
    = help: Replace `if`-`else`-block with `feat = torch.cat([edge_feat, r], -1) if edge_feat is not None else r`

src\stk_search\geom3d\models\TFN_utils.py:187:14: B007 Loop control variable `mi` not used within loop body
    |
185 |             feat = r
186 | 
187 |         for (mi, di) in self.f_in.structure:
    |              ^^ B007
188 |             for (mo, do) in self.f_out.structure:
189 |                 etype = f"({di},{do})"
    |
    = help: Rename unused `mi` to `_mi`

src\stk_search\geom3d\models\TFN_utils.py:188:18: B007 Loop control variable `mo` not used within loop body
    |
187 |         for (mi, di) in self.f_in.structure:
188 |             for (mo, do) in self.f_out.structure:
    |                  ^^ B007
189 |                 etype = f"({di},{do})"
190 |                 G[etype] = self.kernel_unary[etype](feat, basis)
    |
    = help: Rename unused `mo` to `_mo`

src\stk_search\geom3d\models\TFN_utils.py:207:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
206 |               # Center -> center messages
207 |               if self.self_interaction:
    |  _____________^
208 | |                 if f"{d_out}" in self.kernel_self.keys():
    | |_________________________________________________________^ SIM102
209 |                       if self.flavor == "TFN":
210 |                           W = self.kernel_self[f"{d_out}"]
    |
    = help: Combine `if` statements using `and`

src\stk_search\geom3d\models\TFN_utils.py:208:20: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
206 |             # Center -> center messages
207 |             if self.self_interaction:
208 |                 if f"{d_out}" in self.kernel_self.keys():
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
209 |                     if self.flavor == "TFN":
210 |                         W = self.kernel_self[f"{d_out}"]
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\models\TFN_utils.py:210:25: N806 Variable `W` in function should be lowercase
    |
208 |                 if f"{d_out}" in self.kernel_self.keys():
209 |                     if self.flavor == "TFN":
210 |                         W = self.kernel_self[f"{d_out}"]
    |                         ^ N806
211 |                         msg = torch.matmul(W, msg)
212 |                     if self.flavor == "skip":
    |

src\stk_search\geom3d\models\TFN_utils.py:215:25: N806 Variable `W` in function should be lowercase
    |
213 |                         h_ = G[f"{d_out}"]
214 |                         dst = h_[col]
215 |                         W = self.kernel_self[f"{d_out}"]
    |                         ^ N806
216 |                         msg = msg + torch.matmul(W, dst)
217 |             msg = msg.view(msg.shape[0], -1, 2 * d_out + 1)
    |

src\stk_search\geom3d\models\TFN_utils.py:219:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
217 |             msg = msg.view(msg.shape[0], -1, 2 * d_out + 1)
218 | 
219 |             # TODO: row or col?
    |               ^^^^ TD002
220 |             result[f"{d_out}"] = scatter_mean(msg, col, dim=0, dim_size=N)
221 |         return result
    |

src\stk_search\geom3d\models\TFN_utils.py:219:15: TD003 Missing issue link on the line following this TODO
    |
217 |             msg = msg.view(msg.shape[0], -1, 2 * d_out + 1)
218 | 
219 |             # TODO: row or col?
    |               ^^^^ TD003
220 |             result[f"{d_out}"] = scatter_mean(msg, col, dim=0, dim_size=N)
221 |         return result
    |

src\stk_search\geom3d\models\TFN_utils.py:219:15: FIX002 Line contains TODO, consider resolving the issue
    |
217 |             msg = msg.view(msg.shape[0], -1, 2 * d_out + 1)
218 | 
219 |             # TODO: row or col?
    |               ^^^^ FIX002
220 |             result[f"{d_out}"] = scatter_mean(msg, col, dim=0, dim_size=N)
221 |         return result
    |

src\stk_search\geom3d\models\TFN_utils.py:220:34: F821 Undefined name `scatter_mean`
    |
219 |             # TODO: row or col?
220 |             result[f"{d_out}"] = scatter_mean(msg, col, dim=0, dim_size=N)
    |                                  ^^^^^^^^^^^^ F821
221 |         return result
    |

src\stk_search\geom3d\models\TFN_utils.py:223:9: ANN204 Missing return type annotation for special method `__repr__`
    |
221 |         return result
222 | 
223 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
224 |         return f"GConvSE3(structure={self.f_out}, self_interaction={self.self_interaction})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\TFN_utils.py:223:9: D105 Missing docstring in magic method
    |
221 |         return result
222 | 
223 |     def __repr__(self):
    |         ^^^^^^^^ D105
224 |         return f"GConvSE3(structure={self.f_out}, self_interaction={self.self_interaction})"
    |

src\stk_search\geom3d\models\TFN_utils.py:228:5: D205 1 blank line required between summary line and description
    |
227 |   class GNormSE3(nn.Module):
228 |       """Graph Norm-based SE(3)-equivariant nonlinearity.
    |  _____^
229 | |     Nonlinearities are important in SE(3) equivariant GCNs. They are also quite
230 | |     expensive to compute, so it is convenient for them to share resources with
231 | |     other layers, such as normalization. The general workflow is as follows:
232 | |     > for feature type in features:
233 | |     >    norm, phase <- feature
234 | |     >    output = fnc(norm) * phase
235 | |     where fnc: {R+}^m -> R^m is a learnable map from m norms to m scalars.
236 | |     """
    | |_______^ D205
237 |   
238 |       def __init__(self, fiber, nonlin=nn.ReLU(inplace=True), num_layers: int = 0):
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\TFN_utils.py:238:9: ANN204 Missing return type annotation for special method `__init__`
    |
236 |     """
237 | 
238 |     def __init__(self, fiber, nonlin=nn.ReLU(inplace=True), num_layers: int = 0):
    |         ^^^^^^^^ ANN204
239 |         """Initializer.
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TFN_utils.py:238:38: B008 Do not perform function call `nn.ReLU` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
236 |     """
237 | 
238 |     def __init__(self, fiber, nonlin=nn.ReLU(inplace=True), num_layers: int = 0):
    |                                      ^^^^^^^^^^^^^^^^^^^^^ B008
239 |         """Initializer.
    |

src\stk_search\geom3d\models\TFN_utils.py:239:9: D401 First line of docstring should be in imperative mood: "Initializer."
    |
238 |       def __init__(self, fiber, nonlin=nn.ReLU(inplace=True), num_layers: int = 0):
239 |           """Initializer.
    |  _________^
240 | | 
241 | |         Args:
242 | |         ----
243 | |             fiber: Fiber() of feature multiplicities and types
244 | |             nonlin: nonlinearity to use everywhere
245 | |             num_layers: non-negative number of linear layers in fnc
246 | | 
247 | |         """
    | |___________^ D401
248 |           super().__init__()
249 |           self.fiber = fiber
    |

src\stk_search\geom3d\models\TFN_utils.py:261:9: ANN202 Missing return type annotation for private function `_build_net`
    |
259 |             self.transform[str(d)] = self._build_net(int(m))
260 | 
261 |     def _build_net(self, m: int):
    |         ^^^^^^^^^^ ANN202
262 |         net = []
263 |         for i in range(self.num_layers):
    |
    = help: Add return type annotation

src\stk_search\geom3d\models\TFN_utils.py:266:15: TD002 Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    |
264 |             net.append(BN(int(m)))
265 |             net.append(self.nonlin)
266 |             # TODO: implement cleaner init
    |               ^^^^ TD002
267 |             net.append(nn.Linear(m, m, bias=(i == self.num_layers - 1)))
268 |             nn.init.kaiming_uniform_(net[-1].weight)
    |

src\stk_search\geom3d\models\TFN_utils.py:266:15: TD003 Missing issue link on the line following this TODO
    |
264 |             net.append(BN(int(m)))
265 |             net.append(self.nonlin)
266 |             # TODO: implement cleaner init
    |               ^^^^ TD003
267 |             net.append(nn.Linear(m, m, bias=(i == self.num_layers - 1)))
268 |             nn.init.kaiming_uniform_(net[-1].weight)
    |

src\stk_search\geom3d\models\TFN_utils.py:266:15: FIX002 Line contains TODO, consider resolving the issue
    |
264 |             net.append(BN(int(m)))
265 |             net.append(self.nonlin)
266 |             # TODO: implement cleaner init
    |               ^^^^ FIX002
267 |             net.append(nn.Linear(m, m, bias=(i == self.num_layers - 1)))
268 |             nn.init.kaiming_uniform_(net[-1].weight)
    |

src\stk_search\geom3d\models\TFN_utils.py:274:9: D102 Missing docstring in public method
    |
272 |         return nn.Sequential(*net)
273 | 
274 |     def forward(self, features, **kwargs):
    |         ^^^^^^^ D102
275 |         output = {}
276 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\TFN_utils.py:274:33: ANN003 Missing type annotation for `**kwargs`
    |
272 |         return nn.Sequential(*net)
273 | 
274 |     def forward(self, features, **kwargs):
    |                                 ^^^^^^^^ ANN003
275 |         output = {}
276 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\TFN_utils.py:274:35: ARG002 Unused method argument: `kwargs`
    |
272 |         return nn.Sequential(*net)
273 | 
274 |     def forward(self, features, **kwargs):
    |                                   ^^^^^^ ARG002
275 |         output = {}
276 |         for k, v in features.items():
    |

src\stk_search\geom3d\models\TFN_utils.py:290:9: ANN204 Missing return type annotation for special method `__repr__`
    |
288 |         return output
289 | 
290 |     def __repr__(self):
    |         ^^^^^^^^ ANN204
291 |         return f"GNormSE3(num_layers={self.num_layers}, nonlin={self.nonlin})"
    |
    = help: Add return type annotation: `str`

src\stk_search\geom3d\models\TFN_utils.py:290:9: D105 Missing docstring in magic method
    |
288 |         return output
289 | 
290 |     def __repr__(self):
    |         ^^^^^^^^ D105
291 |         return f"GNormSE3(num_layers={self.num_layers}, nonlin={self.nonlin})"
    |

src\stk_search\geom3d\models\TransformerM\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\TransformerM\__init__.py:1:28: F401 `.transformer_m.TransformerM` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .transformer_m import TransformerM
  |                            ^^^^^^^^^^^^ F401
2 | from .transformer_m_encoder import TransformerMEncoder, init_params
  |
  = help: Use an explicit re-export: `TransformerM as TransformerM`

src\stk_search\geom3d\models\TransformerM\__init__.py:2:36: F401 `.transformer_m_encoder.TransformerMEncoder` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .transformer_m import TransformerM
2 | from .transformer_m_encoder import TransformerMEncoder, init_params
  |                                    ^^^^^^^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `TransformerMEncoder as TransformerMEncoder`

src\stk_search\geom3d\models\TransformerM\__init__.py:2:57: F401 `.transformer_m_encoder.init_params` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .transformer_m import TransformerM
2 | from .transformer_m_encoder import TransformerMEncoder, init_params
  |                                                         ^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `init_params as init_params`

src\stk_search\geom3d\models\TransformerM\layers\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\TransformerM\layers\__init__.py:1:34: F401 `.multihead_attention.MultiheadAttention` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .multihead_attention import MultiheadAttention
  |                                  ^^^^^^^^^^^^^^^^^^ F401
2 | from .transformer_m_encoder_layer import TransformerMEncoderLayer
3 | from .transformer_m_layers import AtomFeature, Molecule3DBias, MoleculeAttnBias
  |
  = help: Use an explicit re-export: `MultiheadAttention as MultiheadAttention`

src\stk_search\geom3d\models\TransformerM\layers\__init__.py:2:42: F401 `.transformer_m_encoder_layer.TransformerMEncoderLayer` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .multihead_attention import MultiheadAttention
2 | from .transformer_m_encoder_layer import TransformerMEncoderLayer
  |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ F401
3 | from .transformer_m_layers import AtomFeature, Molecule3DBias, MoleculeAttnBias
  |
  = help: Use an explicit re-export: `TransformerMEncoderLayer as TransformerMEncoderLayer`

src\stk_search\geom3d\models\TransformerM\layers\__init__.py:3:35: F401 `.transformer_m_layers.AtomFeature` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .multihead_attention import MultiheadAttention
2 | from .transformer_m_encoder_layer import TransformerMEncoderLayer
3 | from .transformer_m_layers import AtomFeature, Molecule3DBias, MoleculeAttnBias
  |                                   ^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `AtomFeature as AtomFeature`

src\stk_search\geom3d\models\TransformerM\layers\__init__.py:3:48: F401 `.transformer_m_layers.Molecule3DBias` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .multihead_attention import MultiheadAttention
2 | from .transformer_m_encoder_layer import TransformerMEncoderLayer
3 | from .transformer_m_layers import AtomFeature, Molecule3DBias, MoleculeAttnBias
  |                                                ^^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `Molecule3DBias as Molecule3DBias`

src\stk_search\geom3d\models\TransformerM\layers\__init__.py:3:64: F401 `.transformer_m_layers.MoleculeAttnBias` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .multihead_attention import MultiheadAttention
2 | from .transformer_m_encoder_layer import TransformerMEncoderLayer
3 | from .transformer_m_layers import AtomFeature, Molecule3DBias, MoleculeAttnBias
  |                                                                ^^^^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `MoleculeAttnBias as MoleculeAttnBias`

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:19:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
17 |     """
18 | 
19 |     def __init__(
   |         ^^^^^^^^ PLR0913
20 |         self,
21 |         embed_dim,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:19:9: ANN204 Missing return type annotation for special method `__init__`
   |
17 |     """
18 | 
19 |     def __init__(
   |         ^^^^^^^^ ANN204
20 |         self,
21 |         embed_dim,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:19:9: D107 Missing docstring in `__init__`
   |
17 |     """
18 | 
19 |     def __init__(
   |         ^^^^^^^^ D107
20 |         self,
21 |         embed_dim,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:26:9: FBT002 Boolean default positional argument in function definition
   |
24 |         vdim=None,
25 |         dropout=0.0,
26 |         bias=True,
   |         ^^^^ FBT002
27 |         self_attention=False,
28 |         q_noise=0.0,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:27:9: FBT002 Boolean default positional argument in function definition
   |
25 |         dropout=0.0,
26 |         bias=True,
27 |         self_attention=False,
   |         ^^^^^^^^^^^^^^ FBT002
28 |         q_noise=0.0,
29 |         qn_block_size=8,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:43:9: S101 Use of `assert` detected
   |
42 |         self.head_dim = embed_dim // num_heads
43 |         assert (
   |         ^^^^^^ S101
44 |             self.head_dim * num_heads == self.embed_dim
45 |         ), "embed_dim must be divisible by num_heads"
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:50:9: S101 Use of `assert` detected
   |
48 |         self.self_attention = self_attention
49 | 
50 |         assert self.self_attention, "Only support self attention"
   |         ^^^^^^ S101
51 | 
52 |         assert not self.self_attention or self.qkv_same_dim, (
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:52:9: S101 Use of `assert` detected
   |
50 |         assert self.self_attention, "Only support self attention"
51 | 
52 |         assert not self.self_attention or self.qkv_same_dim, (
   |         ^^^^^^ S101
53 |             "Self-attention requires query, key and " "value to be of the same size"
54 |         )
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:74:9: D102 Missing docstring in public method
   |
72 |         self.onnx_trace = False
73 | 
74 |     def prepare_for_onnx_export_(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
75 |         raise NotImplementedError
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:77:9: D102 Missing docstring in public method
   |
75 |         raise NotImplementedError
76 | 
77 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
78 |         if self.qkv_same_dim:
79 |             # Empirically observed the convergence to be much better with
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:93:9: C901 `forward` is too complex (14 > 10)
   |
91 |             nn.init.constant_(self.out_proj.bias, 0.0)
92 | 
93 |     def forward(
   |         ^^^^^^^ C901
94 |         self,
95 |         query,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:93:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
91 |             nn.init.constant_(self.out_proj.bias, 0.0)
92 | 
93 |     def forward(
   |         ^^^^^^^ PLR0913
94 |         self,
95 |         query,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:93:9: PLR0912 Too many branches (13 > 12)
   |
91 |             nn.init.constant_(self.out_proj.bias, 0.0)
92 | 
93 |     def forward(
   |         ^^^^^^^ PLR0912
94 |         self,
95 |         query,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:93:9: PLR0915 Too many statements (55 > 50)
   |
91 |             nn.init.constant_(self.out_proj.bias, 0.0)
92 | 
93 |     def forward(
   |         ^^^^^^^ PLR0915
94 |         self,
95 |         query,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:93:9: D417 Missing argument descriptions in the docstring for `forward`: `attn_bias`, `key`, `query`, `value`
   |
91 |             nn.init.constant_(self.out_proj.bias, 0.0)
92 | 
93 |     def forward(
   |         ^^^^^^^ D417
94 |         self,
95 |         query,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:96:14: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
94 |         self,
95 |         query,
96 |         key: Optional[Tensor],
   |              ^^^^^^^^ FA100
97 |         value: Optional[Tensor],
98 |         attn_bias: Optional[Tensor],
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:97:16: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
95 |         query,
96 |         key: Optional[Tensor],
97 |         value: Optional[Tensor],
   |                ^^^^^^^^ FA100
98 |         attn_bias: Optional[Tensor],
99 |         key_padding_mask: Optional[Tensor] = None,
   |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:98:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
 96 |         key: Optional[Tensor],
 97 |         value: Optional[Tensor],
 98 |         attn_bias: Optional[Tensor],
    |                    ^^^^^^^^ FA100
 99 |         key_padding_mask: Optional[Tensor] = None,
100 |         need_weights: bool = True,
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:99:27: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
 97 |         value: Optional[Tensor],
 98 |         attn_bias: Optional[Tensor],
 99 |         key_padding_mask: Optional[Tensor] = None,
    |                           ^^^^^^^^ FA100
100 |         need_weights: bool = True,
101 |         attn_mask: Optional[Tensor] = None,
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:100:9: FBT001 Boolean-typed positional argument in function definition
    |
 98 |         attn_bias: Optional[Tensor],
 99 |         key_padding_mask: Optional[Tensor] = None,
100 |         need_weights: bool = True,
    |         ^^^^^^^^^^^^ FBT001
101 |         attn_mask: Optional[Tensor] = None,
102 |         before_softmax: bool = False,
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:100:9: FBT002 Boolean default positional argument in function definition
    |
 98 |         attn_bias: Optional[Tensor],
 99 |         key_padding_mask: Optional[Tensor] = None,
100 |         need_weights: bool = True,
    |         ^^^^^^^^^^^^ FBT002
101 |         attn_mask: Optional[Tensor] = None,
102 |         before_softmax: bool = False,
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:101:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
 99 |         key_padding_mask: Optional[Tensor] = None,
100 |         need_weights: bool = True,
101 |         attn_mask: Optional[Tensor] = None,
    |                    ^^^^^^^^ FA100
102 |         before_softmax: bool = False,
103 |         need_head_weights: bool = False,
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:102:9: FBT001 Boolean-typed positional argument in function definition
    |
100 |         need_weights: bool = True,
101 |         attn_mask: Optional[Tensor] = None,
102 |         before_softmax: bool = False,
    |         ^^^^^^^^^^^^^^ FBT001
103 |         need_head_weights: bool = False,
104 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:102:9: FBT002 Boolean default positional argument in function definition
    |
100 |         need_weights: bool = True,
101 |         attn_mask: Optional[Tensor] = None,
102 |         before_softmax: bool = False,
    |         ^^^^^^^^^^^^^^ FBT002
103 |         need_head_weights: bool = False,
104 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:103:9: FBT001 Boolean-typed positional argument in function definition
    |
101 |         attn_mask: Optional[Tensor] = None,
102 |         before_softmax: bool = False,
103 |         need_head_weights: bool = False,
    |         ^^^^^^^^^^^^^^^^^ FBT001
104 |     ) -> Tuple[Tensor, Optional[Tensor]]:
105 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:103:9: FBT002 Boolean default positional argument in function definition
    |
101 |         attn_mask: Optional[Tensor] = None,
102 |         before_softmax: bool = False,
103 |         need_head_weights: bool = False,
    |         ^^^^^^^^^^^^^^^^^ FBT002
104 |     ) -> Tuple[Tensor, Optional[Tensor]]:
105 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:104:10: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
102 |         before_softmax: bool = False,
103 |         need_head_weights: bool = False,
104 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |          ^^^^^ FA100
105 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:104:24: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
102 |         before_softmax: bool = False,
103 |         need_head_weights: bool = False,
104 |     ) -> Tuple[Tensor, Optional[Tensor]]:
    |                        ^^^^^^^^ FA100
105 |         """Input shape: Time x Batch x Channel
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:105:9: D400 First line should end with a period
    |
103 |           need_head_weights: bool = False,
104 |       ) -> Tuple[Tensor, Optional[Tensor]]:
105 |           """Input shape: Time x Batch x Channel
    |  _________^
106 | | 
107 | |         Args:
108 | |         ----
109 | |             key_padding_mask (ByteTensor, optional): mask to exclude
110 | |                 keys that are pads, of shape `(batch, src_len)`, where
111 | |                 padding elements are indicated by 1s.
112 | |             need_weights (bool, optional): return the attention weights,
113 | |                 averaged over heads (default: False).
114 | |             attn_mask (ByteTensor, optional): typically used to
115 | |                 implement causal attention, where the mask prevents the
116 | |                 attention from looking forward in time (default: None).
117 | |             before_softmax (bool, optional): return the raw attention
118 | |                 weights and values before the attention softmax.
119 | |             need_head_weights (bool, optional): return the attention
120 | |                 weights for each head. Implies *need_weights*. Default:
121 | |                 return the average attention weights over all heads.
122 | | 
123 | |         """
    | |___________^ D400
124 |           if need_head_weights:
125 |               need_weights = True
    |
    = help: Add period

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:105:9: D415 First line should end with a period, question mark, or exclamation point
    |
103 |           need_head_weights: bool = False,
104 |       ) -> Tuple[Tensor, Optional[Tensor]]:
105 |           """Input shape: Time x Batch x Channel
    |  _________^
106 | | 
107 | |         Args:
108 | |         ----
109 | |             key_padding_mask (ByteTensor, optional): mask to exclude
110 | |                 keys that are pads, of shape `(batch, src_len)`, where
111 | |                 padding elements are indicated by 1s.
112 | |             need_weights (bool, optional): return the attention weights,
113 | |                 averaged over heads (default: False).
114 | |             attn_mask (ByteTensor, optional): typically used to
115 | |                 implement causal attention, where the mask prevents the
116 | |                 attention from looking forward in time (default: None).
117 | |             before_softmax (bool, optional): return the raw attention
118 | |                 weights and values before the attention softmax.
119 | |             need_head_weights (bool, optional): return the attention
120 | |                 weights for each head. Implies *need_weights*. Default:
121 | |                 return the average attention weights over all heads.
122 | | 
123 | |         """
    | |___________^ D415
124 |           if need_head_weights:
125 |               need_weights = True
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:129:9: S101 Use of `assert` detected
    |
127 |         tgt_len, bsz, embed_dim = query.size()
128 |         src_len = tgt_len
129 |         assert embed_dim == self.embed_dim, f"query dim {embed_dim} != {self.embed_dim}"
    |         ^^^^^^ S101
130 |         assert list(query.size()) == [tgt_len, bsz, embed_dim]
131 |         if key is not None:
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:130:9: S101 Use of `assert` detected
    |
128 |         src_len = tgt_len
129 |         assert embed_dim == self.embed_dim, f"query dim {embed_dim} != {self.embed_dim}"
130 |         assert list(query.size()) == [tgt_len, bsz, embed_dim]
    |         ^^^^^^ S101
131 |         if key is not None:
132 |             src_len, key_bsz, _ = key.size()
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:134:17: S101 Use of `assert` detected
    |
132 |             src_len, key_bsz, _ = key.size()
133 |             if not torch.jit.is_scripting():
134 |                 assert key_bsz == bsz
    |                 ^^^^^^ S101
135 |                 assert value is not None
136 |                 assert src_len, bsz == value.shape[:2]
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:135:17: S101 Use of `assert` detected
    |
133 |             if not torch.jit.is_scripting():
134 |                 assert key_bsz == bsz
135 |                 assert value is not None
    |                 ^^^^^^ S101
136 |                 assert src_len, bsz == value.shape[:2]
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:136:17: S101 Use of `assert` detected
    |
134 |                 assert key_bsz == bsz
135 |                 assert value is not None
136 |                 assert src_len, bsz == value.shape[:2]
    |                 ^^^^^^ S101
137 | 
138 |         q = self.q_proj(query)
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:161:9: S101 Use of `assert` detected
    |
159 |             )
160 | 
161 |         assert k is not None
    |         ^^^^^^ S101
162 |         assert k.size(1) == src_len
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:162:9: S101 Use of `assert` detected
    |
161 |         assert k is not None
162 |         assert k.size(1) == src_len
    |         ^^^^^^ S101
163 | 
164 |         # This is part of a workaround to get around fork/join parallelism
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:170:13: S101 Use of `assert` detected
    |
169 |         if key_padding_mask is not None:
170 |             assert key_padding_mask.size(0) == bsz
    |             ^^^^^^ S101
171 |             assert key_padding_mask.size(1) == src_len
172 |         attn_weights = torch.bmm(q, k.transpose(1, 2))
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:171:13: S101 Use of `assert` detected
    |
169 |         if key_padding_mask is not None:
170 |             assert key_padding_mask.size(0) == bsz
171 |             assert key_padding_mask.size(1) == src_len
    |             ^^^^^^ S101
172 |         attn_weights = torch.bmm(q, k.transpose(1, 2))
173 |         attn_weights = self.apply_sparse_mask(attn_weights, tgt_len, src_len, bsz)
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:175:9: S101 Use of `assert` detected
    |
173 |         attn_weights = self.apply_sparse_mask(attn_weights, tgt_len, src_len, bsz)
174 | 
175 |         assert list(attn_weights.size()) == [bsz * self.num_heads, tgt_len, src_len]
    |         ^^^^^^ S101
176 | 
177 |         if attn_bias is not None:
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:202:9: S101 Use of `assert` detected
    |
200 |         attn_probs = self.dropout_module(attn_weights)
201 | 
202 |         assert v is not None
    |         ^^^^^^ S101
203 |         attn = torch.bmm(attn_probs, v)
204 |         assert list(attn.size()) == [bsz * self.num_heads, tgt_len, self.head_dim]
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:204:9: S101 Use of `assert` detected
    |
202 |         assert v is not None
203 |         attn = torch.bmm(attn_probs, v)
204 |         assert list(attn.size()) == [bsz * self.num_heads, tgt_len, self.head_dim]
    |         ^^^^^^ S101
205 | 
206 |         attn = attn.transpose(0, 1).contiguous().view(tgt_len, bsz, embed_dim)
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:209:23: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
207 |         attn = self.out_proj(attn)
208 | 
209 |         attn_weights: Optional[Tensor] = None
    |                       ^^^^^^^^ FA100
210 |         if need_weights:
211 |             attn_weights = attn_weights_float.view(
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:220:9: D102 Missing docstring in public method
    |
218 |         return attn, attn_weights
219 | 
220 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |         ^^^^^^^^^^^^^^^^^ D102
221 |         return attn_weights
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:220:47: ARG002 Unused method argument: `tgt_len`
    |
218 |         return attn, attn_weights
219 | 
220 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |                                               ^^^^^^^ ARG002
221 |         return attn_weights
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:220:61: ARG002 Unused method argument: `src_len`
    |
218 |         return attn, attn_weights
219 | 
220 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |                                                             ^^^^^^^ ARG002
221 |         return attn_weights
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:220:75: ARG002 Unused method argument: `bsz`
    |
218 |         return attn, attn_weights
219 | 
220 |     def apply_sparse_mask(self, attn_weights, tgt_len: int, src_len: int, bsz: int):
    |                                                                           ^^^ ARG002
221 |         return attn_weights
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:223:9: D102 Missing docstring in public method
    |
221 |         return attn_weights
222 | 
223 |     def upgrade_state_dict_named(self, state_dict, name):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
224 |         prefix = name + "." if name != "" else ""
225 |         items_to_add = {}
    |

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:227:13: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
225 |         items_to_add = {}
226 |         keys_to_remove = []
227 |         for k in state_dict.keys():
    |             ^^^^^^^^^^^^^^^^^^^^^^ SIM118
228 |             if k.endswith(prefix + "in_proj_weight"):
229 |                 # in_proj_weight used to be q + k + v with same dimensions
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\models\TransformerM\layers\multihead_attention.py:238:20: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
237 |                 k_bias = prefix + "in_proj_bias"
238 |                 if k_bias in state_dict.keys():
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
239 |                     dim = int(state_dict[k].shape[0] / 3)
240 |                     items_to_add[prefix + "q_proj.bias"] = state_dict[k_bias][:dim]
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:17:5: D200 One-line docstring should fit on one line
   |
16 |   class TransformerMEncoderLayer(nn.Module):
17 |       """Implements a Transformer-M Encoder Layer.
   |  _____^
18 | |     """
   | |_______^ D200
19 |   
20 |       def __init__(
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:20:9: PLR0913 Too many arguments in function definition (13 > 5)
   |
18 |     """
19 | 
20 |     def __init__(
   |         ^^^^^^^^ PLR0913
21 |         self,
22 |         embedding_dim: int = 768,
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:20:9: D107 Missing docstring in `__init__`
   |
18 |     """
19 | 
20 |     def __init__(
   |         ^^^^^^^^ D107
21 |         self,
22 |         embedding_dim: int = 768,
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:29:9: FBT001 Boolean-typed positional argument in function definition
   |
27 |         activation_dropout: float = 0.1,
28 |         activation_fn: str = "relu",
29 |         export: bool = False,
   |         ^^^^^^ FBT001
30 |         q_noise: float = 0.0,
31 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:29:9: FBT002 Boolean default positional argument in function definition
   |
27 |         activation_dropout: float = 0.1,
28 |         activation_fn: str = "relu",
29 |         export: bool = False,
   |         ^^^^^^ FBT002
30 |         q_noise: float = 0.0,
31 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:32:18: RUF013 PEP 484 prohibits implicit `Optional`
   |
30 |         q_noise: float = 0.0,
31 |         qn_block_size: int = 8,
32 |         init_fn: Callable = None,
   |                  ^^^^^^^^ RUF013
33 |         sandwich_ln: bool = False,
34 |         droppath_prob: float = 0.0,
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:33:9: FBT001 Boolean-typed positional argument in function definition
   |
31 |         qn_block_size: int = 8,
32 |         init_fn: Callable = None,
33 |         sandwich_ln: bool = False,
   |         ^^^^^^^^^^^ FBT001
34 |         droppath_prob: float = 0.0,
35 |     ) -> None:
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:33:9: FBT002 Boolean default positional argument in function definition
   |
31 |         qn_block_size: int = 8,
32 |         init_fn: Callable = None,
33 |         sandwich_ln: bool = False,
   |         ^^^^^^^^^^^ FBT002
34 |         droppath_prob: float = 0.0,
35 |     ) -> None:
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:96:9: D102 Missing docstring in public method
   |
94 |         self.final_sandwich_layer_norm = LayerNorm(self.embedding_dim, export=export) if self.sandwich_ln else None
95 | 
96 |     def build_fc1(self, input_dim, output_dim, q_noise, qn_block_size):
   |         ^^^^^^^^^ D102
97 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:99:9: D102 Missing docstring in public method
    |
 97 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
 98 | 
 99 |     def build_fc2(self, input_dim, output_dim, q_noise, qn_block_size):
    |         ^^^^^^^^^ D102
100 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:102:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
100 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
101 | 
102 |     def build_self_attention(
    |         ^^^^^^^^^^^^^^^^^^^^ PLR0913
103 |         self,
104 |         embed_dim,
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:102:9: D102 Missing docstring in public method
    |
100 |         return quant_noise(nn.Linear(input_dim, output_dim), q_noise, qn_block_size)
101 | 
102 |     def build_self_attention(
    |         ^^^^^^^^^^^^^^^^^^^^ D102
103 |         self,
104 |         embed_dim,
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:107:9: ARG002 Unused method argument: `self_attention`
    |
105 |         num_attention_heads,
106 |         dropout,
107 |         self_attention,
    |         ^^^^^^^^^^^^^^ ARG002
108 |         q_noise,
109 |         qn_block_size,
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:123:25: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
121 |         self,
122 |         x: torch.Tensor,
123 |         self_attn_bias: Optional[torch.Tensor] = None,
    |                         ^^^^^^^^ FA100
124 |         self_attn_mask: Optional[torch.Tensor] = None,
125 |         self_attn_padding_mask: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:124:25: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
122 |         x: torch.Tensor,
123 |         self_attn_bias: Optional[torch.Tensor] = None,
124 |         self_attn_mask: Optional[torch.Tensor] = None,
    |                         ^^^^^^^^ FA100
125 |         self_attn_padding_mask: Optional[torch.Tensor] = None,
126 |     ):
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:125:33: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
123 |         self_attn_bias: Optional[torch.Tensor] = None,
124 |         self_attn_mask: Optional[torch.Tensor] = None,
125 |         self_attn_padding_mask: Optional[torch.Tensor] = None,
    |                                 ^^^^^^^^ FA100
126 |     ):
127 |         """LayerNorm is applied either before or after the self-attention/ffn
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_encoder_layer.py:127:9: D205 1 blank line required between summary line and description
    |
125 |           self_attn_padding_mask: Optional[torch.Tensor] = None,
126 |       ):
127 |           """LayerNorm is applied either before or after the self-attention/ffn
    |  _________^
128 | |         modules similar to the original Transformer implementation.
129 | |         """
    | |___________^ D205
130 |           # x: T x B x C
131 |           residual = x
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:5:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
4 | import torch
5 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
6 | from stk_search.geom3d.models.TransformerM.modules import FairseqDropout, utils
7 | from torch import Tensor, nn
  |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:10:5: D103 Missing docstring in public function
   |
10 | def init_params(module, n_layers):
   |     ^^^^^^^^^^^ D103
11 |     if isinstance(module, nn.Linear):
12 |         module.weight.data.normal_(mean=0.0, std=0.02 / math.sqrt(n_layers))
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:20:5: D200 One-line docstring should fit on one line
   |
19 |   class AtomFeature(nn.Module):
20 |       """Compute atom features for each atom in the molecule.
   |  _____^
21 | |     """
   | |_______^ D200
22 |   
23 |       def __init__(self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers, no_2d=False):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:23:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
21 |     """
22 | 
23 |     def __init__(self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers, no_2d=False):
   |         ^^^^^^^^ PLR0913
24 |         super(AtomFeature, self).__init__()
25 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:23:9: ANN204 Missing return type annotation for special method `__init__`
   |
21 |     """
22 | 
23 |     def __init__(self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers, no_2d=False):
   |         ^^^^^^^^ ANN204
24 |         super(AtomFeature, self).__init__()
25 |         self.num_heads = num_heads
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:23:9: D107 Missing docstring in `__init__`
   |
21 |     """
22 | 
23 |     def __init__(self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers, no_2d=False):
   |         ^^^^^^^^ D107
24 |         super(AtomFeature, self).__init__()
25 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:23:99: FBT002 Boolean default positional argument in function definition
   |
21 |     """
22 | 
23 |     def __init__(self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers, no_2d=False):
   |                                                                                                   ^^^^^ FBT002
24 |         super(AtomFeature, self).__init__()
25 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:24:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
23 |     def __init__(self, num_heads, num_atoms, num_in_degree, num_out_degree, hidden_dim, n_layers, no_2d=False):
24 |         super(AtomFeature, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^ UP008
25 |         self.num_heads = num_heads
26 |         self.num_atoms = num_atoms
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:38:9: D102 Missing docstring in public method
   |
36 |         self.apply(lambda module: init_params(module, n_layers=n_layers))
37 | 
38 |     def forward(self, batched_data, mask_2d=None):
   |         ^^^^^^^ D102
39 |         x, in_degree, out_degree = batched_data["x"],batched_data["in_degree"], batched_data["out_degree"]
40 |         n_graph, n_node = x.size()[:2]
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:55:16: RET504 Unnecessary assignment to `graph_node_feature` before `return` statement
   |
53 |         graph_node_feature = torch.cat([graph_token_feature, node_feature], dim=1)
54 | 
55 |         return graph_node_feature
   |                ^^^^^^^^^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:59:5: D200 One-line docstring should fit on one line
   |
58 |   class MoleculeAttnBias(nn.Module):
59 |       """Compute attention bias for each head.
   |  _____^
60 | |     """
   | |_______^ D200
61 |   
62 |       def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:62:9: PLR0913 Too many arguments in function definition (10 > 5)
   |
60 |     """
61 | 
62 |     def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
   |         ^^^^^^^^ PLR0913
63 |         super(MoleculeAttnBias, self).__init__()
64 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:62:9: ANN204 Missing return type annotation for special method `__init__`
   |
60 |     """
61 | 
62 |     def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
   |         ^^^^^^^^ ANN204
63 |         super(MoleculeAttnBias, self).__init__()
64 |         self.num_heads = num_heads
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:62:9: D107 Missing docstring in `__init__`
   |
60 |     """
61 | 
62 |     def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
   |         ^^^^^^^^ D107
63 |         super(MoleculeAttnBias, self).__init__()
64 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:62:35: ARG002 Unused method argument: `num_atoms`
   |
60 |     """
61 | 
62 |     def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
   |                                   ^^^^^^^^^ ARG002
63 |         super(MoleculeAttnBias, self).__init__()
64 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:62:84: ARG002 Unused method argument: `hidden_dim`
   |
60 |     """
61 | 
62 |     def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
   |                                                                                    ^^^^^^^^^^ ARG002
63 |         super(MoleculeAttnBias, self).__init__()
64 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:62:137: FBT002 Boolean default positional argument in function definition
   |
60 |     """
61 | 
62 |     def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
   |                                                                                                                                         ^^^^^ FBT002
63 |         super(MoleculeAttnBias, self).__init__()
64 |         self.num_heads = num_heads
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:63:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
62 |     def __init__(self, num_heads, num_atoms, num_edges, num_spatial, num_edge_dis, hidden_dim, edge_type, multi_hop_max_dist, n_layers, no_2d=False):
63 |         super(MoleculeAttnBias, self).__init__()
   |              ^^^^^^^^^^^^^^^^^^^^^^^^ UP008
64 |         self.num_heads = num_heads
65 |         self.multi_hop_max_dist = multi_hop_max_dist
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:80:9: D102 Missing docstring in public method
   |
78 |         self.apply(lambda module: init_params(module, n_layers=n_layers))
79 | 
80 |     def forward(self, batched_data, mask_2d=None):
   |         ^^^^^^^ D102
81 |         attn_bias, spatial_pos, x = batched_data["attn_bias"], batched_data["spatial_pos"], batched_data["x"]
82 |         edge_input, attn_edge_type = batched_data["edge_input"], batched_data["attn_edge_type"]
   |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:113:17: ERA001 Found commented-out code
    |
111 |                     spatial_pos_ = spatial_pos_.clamp(0, self.multi_hop_max_dist)
112 |                     edge_input = edge_input[:, :, :, :self.multi_hop_max_dist, :]
113 |                 # [n_graph, n_node, n_node, max_dist, n_head]
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
114 |                 edge_input = self.edge_encoder(edge_input).mean(-2)
115 |                 max_dist = edge_input.size(-2)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:137:16: RET504 Unnecessary assignment to `graph_attn_bias` before `return` statement
    |
135 |         graph_attn_bias = graph_attn_bias + attn_bias.unsqueeze(1)  # reset
136 | 
137 |         return graph_attn_bias
    |                ^^^^^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:141:5: D200 One-line docstring should fit on one line
    |
140 |   class Molecule3DBias(nn.Module):
141 |       """Compute 3D attention bias according to the position information for each head.
    |  _____^
142 | |     """
    | |_______^ D200
143 |   
144 |       def __init__(self, num_heads, num_edges, n_layers, embed_dim, num_kernel, no_share_rpe=False):
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:144:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
142 |     """
143 | 
144 |     def __init__(self, num_heads, num_edges, n_layers, embed_dim, num_kernel, no_share_rpe=False):
    |         ^^^^^^^^ PLR0913
145 |         super(Molecule3DBias, self).__init__()
146 |         self.num_heads = num_heads
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:144:9: ANN204 Missing return type annotation for special method `__init__`
    |
142 |     """
143 | 
144 |     def __init__(self, num_heads, num_edges, n_layers, embed_dim, num_kernel, no_share_rpe=False):
    |         ^^^^^^^^ ANN204
145 |         super(Molecule3DBias, self).__init__()
146 |         self.num_heads = num_heads
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:144:9: D107 Missing docstring in `__init__`
    |
142 |     """
143 | 
144 |     def __init__(self, num_heads, num_edges, n_layers, embed_dim, num_kernel, no_share_rpe=False):
    |         ^^^^^^^^ D107
145 |         super(Molecule3DBias, self).__init__()
146 |         self.num_heads = num_heads
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:144:79: FBT002 Boolean default positional argument in function definition
    |
142 |     """
143 | 
144 |     def __init__(self, num_heads, num_edges, n_layers, embed_dim, num_kernel, no_share_rpe=False):
    |                                                                               ^^^^^^^^^^^^ FBT002
145 |         super(Molecule3DBias, self).__init__()
146 |         self.num_heads = num_heads
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:145:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
144 |     def __init__(self, num_heads, num_edges, n_layers, embed_dim, num_kernel, no_share_rpe=False):
145 |         super(Molecule3DBias, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^^ UP008
146 |         self.num_heads = num_heads
147 |         self.num_edges = num_edges
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:163:9: D102 Missing docstring in public method
    |
161 |             self.edge_proj = None
162 | 
163 |     def forward(self, batched_data):
    |         ^^^^^^^ D102
164 | 
165 |         pos, x, node_type_edge = batched_data["pos"], batched_data["x"], batched_data["node_type_edge"] # pos shape: [n_graphs, n_nodes, 3]
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:166:9: ERA001 Found commented-out code
    |
165 |         pos, x, node_type_edge = batched_data["pos"], batched_data["x"], batched_data["node_type_edge"] # pos shape: [n_graphs, n_nodes, 3]
166 |         # pos.requires_grad_(True)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
167 | 
168 |         padding_mask = x.eq(0).all(dim=-1)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:194:5: D103 Missing docstring in public function
    |
193 | @torch.jit.script
194 | def gaussian(x, mean, std):
    |     ^^^^^^^^ D103
195 |     pi = 3.14159
196 |     a = (2*pi) ** 0.5
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:199:7: D101 Missing docstring in public class
    |
197 |     return torch.exp(-0.5 * (((x - mean) / std) ** 2)) / (a * std)
198 | 
199 | class GaussianLayer(nn.Module):
    |       ^^^^^^^^^^^^^ D101
200 |     def __init__(self, K=128, edge_types=512*3):
201 |         super().__init__()
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:200:9: ANN204 Missing return type annotation for special method `__init__`
    |
199 | class GaussianLayer(nn.Module):
200 |     def __init__(self, K=128, edge_types=512*3):
    |         ^^^^^^^^ ANN204
201 |         super().__init__()
202 |         self.K = K
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:200:9: D107 Missing docstring in `__init__`
    |
199 | class GaussianLayer(nn.Module):
200 |     def __init__(self, K=128, edge_types=512*3):
    |         ^^^^^^^^ D107
201 |         super().__init__()
202 |         self.K = K
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:200:24: N803 Argument name `K` should be lowercase
    |
199 | class GaussianLayer(nn.Module):
200 |     def __init__(self, K=128, edge_types=512*3):
    |                        ^ N803
201 |         super().__init__()
202 |         self.K = K
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:212:9: D102 Missing docstring in public method
    |
210 |         nn.init.constant_(self.mul.weight, 1)
211 | 
212 |     def forward(self, x, edge_types):
    |         ^^^^^^^ D102
213 |         mul = self.mul(edge_types).sum(dim=-2)
214 |         bias = self.bias(edge_types).sum(dim=-2)
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:221:7: D101 Missing docstring in public class
    |
219 |         return gaussian(x.float(), mean, std).type_as(self.means.weight)
220 | 
221 | class NonLinear(nn.Module):
    |       ^^^^^^^^^ D101
222 |     def __init__(self, input, output_size, hidden=None):
223 |         super(NonLinear, self).__init__()
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:222:9: ANN204 Missing return type annotation for special method `__init__`
    |
221 | class NonLinear(nn.Module):
222 |     def __init__(self, input, output_size, hidden=None):
    |         ^^^^^^^^ ANN204
223 |         super(NonLinear, self).__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:222:9: D107 Missing docstring in `__init__`
    |
221 | class NonLinear(nn.Module):
222 |     def __init__(self, input, output_size, hidden=None):
    |         ^^^^^^^^ D107
223 |         super(NonLinear, self).__init__()
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:222:24: A002 Argument `input` is shadowing a Python builtin
    |
221 | class NonLinear(nn.Module):
222 |     def __init__(self, input, output_size, hidden=None):
    |                        ^^^^^ A002
223 |         super(NonLinear, self).__init__()
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:223:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
221 | class NonLinear(nn.Module):
222 |     def __init__(self, input, output_size, hidden=None):
223 |         super(NonLinear, self).__init__()
    |              ^^^^^^^^^^^^^^^^^ UP008
224 | 
225 |         if hidden is None:
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:230:9: D102 Missing docstring in public method
    |
228 |         self.layer2 = nn.Linear(hidden, output_size)
229 | 
230 |     def forward(self, x):
    |         ^^^^^^^ D102
231 |         x = self.layer1(x)
232 |         x = F.gelu(x)
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:234:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
232 |         x = F.gelu(x)
233 |         x = self.layer2(x)
234 |         return x
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:237:7: D101 Missing docstring in public class
    |
237 | class AtomTaskHead(nn.Module):
    |       ^^^^^^^^^^^^ D101
238 |     def __init__(
239 |         self,
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:238:9: ANN204 Missing return type annotation for special method `__init__`
    |
237 | class AtomTaskHead(nn.Module):
238 |     def __init__(
    |         ^^^^^^^^ ANN204
239 |         self,
240 |         embed_dim: int,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:238:9: D107 Missing docstring in `__init__`
    |
237 | class AtomTaskHead(nn.Module):
238 |     def __init__(
    |         ^^^^^^^^ D107
239 |         self,
240 |         embed_dim: int,
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:258:9: D102 Missing docstring in public method
    |
256 |         )
257 | 
258 |     def forward(
    |         ^^^^^^^ D102
259 |         self,
260 |         query: Tensor,
    |

src\stk_search\geom3d\models\TransformerM\layers\transformer_m_layers.py:286:16: RET504 Unnecessary assignment to `cur_force` before `return` statement
    |
284 |         f3 = self.force_proj3(x[:, :, 2, :]).view(bsz, n_node, 1)
285 |         cur_force = torch.cat([f1, f2, f3], dim=-1).float()
286 |         return cur_force
    |                ^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\TransformerM\modules\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\TransformerM\modules\__init__.py:1:23: F401 `.droppath.DropPath` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .droppath import DropPath
  |                       ^^^^^^^^ F401
2 | from .fairseq_dropout import FairseqDropout
3 | from .layer_drop import LayerDropModuleList
  |
  = help: Use an explicit re-export: `DropPath as DropPath`

src\stk_search\geom3d\models\TransformerM\modules\__init__.py:2:30: F401 `.fairseq_dropout.FairseqDropout` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .droppath import DropPath
2 | from .fairseq_dropout import FairseqDropout
  |                              ^^^^^^^^^^^^^^ F401
3 | from .layer_drop import LayerDropModuleList
4 | from .layer_norm import LayerNorm
  |
  = help: Use an explicit re-export: `FairseqDropout as FairseqDropout`

src\stk_search\geom3d\models\TransformerM\modules\__init__.py:3:25: F401 `.layer_drop.LayerDropModuleList` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .droppath import DropPath
2 | from .fairseq_dropout import FairseqDropout
3 | from .layer_drop import LayerDropModuleList
  |                         ^^^^^^^^^^^^^^^^^^^ F401
4 | from .layer_norm import LayerNorm
5 | from .quant_noise import quant_noise
  |
  = help: Use an explicit re-export: `LayerDropModuleList as LayerDropModuleList`

src\stk_search\geom3d\models\TransformerM\modules\__init__.py:4:25: F401 `.layer_norm.LayerNorm` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | from .fairseq_dropout import FairseqDropout
3 | from .layer_drop import LayerDropModuleList
4 | from .layer_norm import LayerNorm
  |                         ^^^^^^^^^ F401
5 | from .quant_noise import quant_noise
  |
  = help: Use an explicit re-export: `LayerNorm as LayerNorm`

src\stk_search\geom3d\models\TransformerM\modules\__init__.py:5:26: F401 `.quant_noise.quant_noise` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
3 | from .layer_drop import LayerDropModuleList
4 | from .layer_norm import LayerNorm
5 | from .quant_noise import quant_noise
  |                          ^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `quant_noise as quant_noise`

src\stk_search\geom3d\models\TransformerM\modules\droppath.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\modules\droppath.py:7:9: ANN204 Missing return type annotation for special method `__init__`
  |
5 |     """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks)."""
6 | 
7 |     def __init__(self, prob=None):
  |         ^^^^^^^^ ANN204
8 |         super(DropPath, self).__init__()
9 |         self.drop_prob = prob
  |
  = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\modules\droppath.py:7:9: D107 Missing docstring in `__init__`
  |
5 |     """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks)."""
6 | 
7 |     def __init__(self, prob=None):
  |         ^^^^^^^^ D107
8 |         super(DropPath, self).__init__()
9 |         self.drop_prob = prob
  |

src\stk_search\geom3d\models\TransformerM\modules\droppath.py:8:14: UP008 Use `super()` instead of `super(__class__, self)`
  |
7 |     def __init__(self, prob=None):
8 |         super(DropPath, self).__init__()
  |              ^^^^^^^^^^^^^^^^ UP008
9 |         self.drop_prob = prob
  |
  = help: Remove `__super__` parameters

src\stk_search\geom3d\models\TransformerM\modules\droppath.py:11:9: D102 Missing docstring in public method
   |
 9 |         self.drop_prob = prob
10 | 
11 |     def forward(self, x):
   |         ^^^^^^^ D102
12 |         if self.drop_prob == 0.0 or not self.training:
13 |             return x
   |

src\stk_search\geom3d\models\TransformerM\modules\droppath.py:21:16: RET504 Unnecessary assignment to `output` before `return` statement
   |
19 |         random_tensor.floor_()  # binarize
20 |         output = x.div(keep_prob) * random_tensor
21 |         return output
   |                ^^^^^^ RET504
22 | 
23 |     def extra_repr(self) -> str:
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\TransformerM\modules\droppath.py:23:9: D102 Missing docstring in public method
   |
21 |         return output
22 | 
23 |     def extra_repr(self) -> str:
   |         ^^^^^^^^^^ D102
24 |         return f"prob={self.drop_prob}"
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:3:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | from typing import List, Optional
2 | 
3 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
4 | from torch import nn
  |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:7:7: D101 Missing docstring in public class
  |
7 | class FairseqDropout(nn.Module):
  |       ^^^^^^^^^^^^^^ D101
8 |     def __init__(self, p, module_name=None):
9 |         super().__init__()
  |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:8:9: ANN204 Missing return type annotation for special method `__init__`
   |
 7 | class FairseqDropout(nn.Module):
 8 |     def __init__(self, p, module_name=None):
   |         ^^^^^^^^ ANN204
 9 |         super().__init__()
10 |         self.p = p
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:8:9: D107 Missing docstring in `__init__`
   |
 7 | class FairseqDropout(nn.Module):
 8 |     def __init__(self, p, module_name=None):
   |         ^^^^^^^^ D107
 9 |         super().__init__()
10 |         self.p = p
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:14:9: D102 Missing docstring in public method
   |
12 |         self.apply_during_inference = False
13 | 
14 |     def forward(self, x, inplace: bool = False):
   |         ^^^^^^^ D102
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:14:26: FBT001 Boolean-typed positional argument in function definition
   |
12 |         self.apply_during_inference = False
13 | 
14 |     def forward(self, x, inplace: bool = False):
   |                          ^^^^^^^ FBT001
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:14:26: FBT002 Boolean default positional argument in function definition
   |
12 |         self.apply_during_inference = False
13 | 
14 |     def forward(self, x, inplace: bool = False):
   |                          ^^^^^^^ FBT002
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:17:9: RET505 Unnecessary `else` after `return` statement
   |
15 |         if self.p > 0 and (self.training or self.apply_during_inference):
16 |             return F.dropout(x, p=self.p, training=True, inplace=inplace)
17 |         else:
   |         ^^^^ RET505
18 |             return x
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:20:9: D102 Missing docstring in public method
   |
18 |             return x
19 | 
20 |     def make_generation_fast_(
   |         ^^^^^^^^^^^^^^^^^^^^^ D102
21 |         self,
22 |         name: str,
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:22:9: ARG002 Unused method argument: `name`
   |
20 |     def make_generation_fast_(
21 |         self,
22 |         name: str,
   |         ^^^^ ARG002
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:23:9: FBT001 Boolean-typed positional argument in function definition
   |
21 |         self,
22 |         name: str,
23 |         retain_dropout: bool = False,
   |         ^^^^^^^^^^^^^^ FBT001
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:23:9: FBT002 Boolean default positional argument in function definition
   |
21 |         self,
22 |         name: str,
23 |         retain_dropout: bool = False,
   |         ^^^^^^^^^^^^^^ FBT002
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:24:33: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
   |
22 |         name: str,
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
   |                                 ^^^^^^^^ FA100
25 |         **kwargs
26 |     ):
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:24:42: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
22 |         name: str,
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
   |                                          ^^^^ FA100
25 |         **kwargs
26 |     ):
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:25:9: ANN003 Missing type annotation for `**kwargs`
   |
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |         ^^^^^^^^ ANN003
26 |     ):
27 |         if retain_dropout:
   |

src\stk_search\geom3d\models\TransformerM\modules\fairseq_dropout.py:25:11: ARG002 Unused method argument: `kwargs`
   |
23 |         retain_dropout: bool = False,
24 |         retain_dropout_modules: Optional[List[str]] = None,
25 |         **kwargs
   |           ^^^^^^ ARG002
26 |     ):
27 |         if retain_dropout:
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:7:5: D205 1 blank line required between summary line and description
   |
 6 |   class LayerDropModuleList(nn.ModuleList):
 7 |       """A LayerDrop implementation based on :class:`torch.nn.ModuleList`.
   |  _____^
 8 | |     We refresh the choice of which layers to drop every time we iterate
 9 | |     over the LayerDropModuleList instance. During evaluation we always
10 | |     iterate over all layers.
11 | |     Usage::
12 | |         layers = LayerDropList(p=0.5, modules=[layer1, layer2, layer3])
13 | |         for layer in layers:  # this might iterate over layers 1 and 3
14 | |             x = layer(x)
15 | |         for layer in layers:  # this might iterate over all layers
16 | |             x = layer(x)
17 | |         for layer in layers:  # this might not iterate over any layers
18 | |             x = layer(x)
19 | | 
20 | |     Args:
21 | |     ----
22 | |         p (float): probability of dropping out each layer
23 | |         modules (iterable, optional): an iterable of modules to add
24 | | 
25 | |     """
   | |_______^ D205
26 |   
27 |       def __init__(self, p, modules=None):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:7:5: D400 First line should end with a period
   |
 6 |   class LayerDropModuleList(nn.ModuleList):
 7 |       """A LayerDrop implementation based on :class:`torch.nn.ModuleList`.
   |  _____^
 8 | |     We refresh the choice of which layers to drop every time we iterate
 9 | |     over the LayerDropModuleList instance. During evaluation we always
10 | |     iterate over all layers.
11 | |     Usage::
12 | |         layers = LayerDropList(p=0.5, modules=[layer1, layer2, layer3])
13 | |         for layer in layers:  # this might iterate over layers 1 and 3
14 | |             x = layer(x)
15 | |         for layer in layers:  # this might iterate over all layers
16 | |             x = layer(x)
17 | |         for layer in layers:  # this might not iterate over any layers
18 | |             x = layer(x)
19 | | 
20 | |     Args:
21 | |     ----
22 | |         p (float): probability of dropping out each layer
23 | |         modules (iterable, optional): an iterable of modules to add
24 | | 
25 | |     """
   | |_______^ D400
26 |   
27 |       def __init__(self, p, modules=None):
   |
   = help: Add period

src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:7:5: D415 First line should end with a period, question mark, or exclamation point
   |
 6 |   class LayerDropModuleList(nn.ModuleList):
 7 |       """A LayerDrop implementation based on :class:`torch.nn.ModuleList`.
   |  _____^
 8 | |     We refresh the choice of which layers to drop every time we iterate
 9 | |     over the LayerDropModuleList instance. During evaluation we always
10 | |     iterate over all layers.
11 | |     Usage::
12 | |         layers = LayerDropList(p=0.5, modules=[layer1, layer2, layer3])
13 | |         for layer in layers:  # this might iterate over layers 1 and 3
14 | |             x = layer(x)
15 | |         for layer in layers:  # this might iterate over all layers
16 | |             x = layer(x)
17 | |         for layer in layers:  # this might not iterate over any layers
18 | |             x = layer(x)
19 | | 
20 | |     Args:
21 | |     ----
22 | |         p (float): probability of dropping out each layer
23 | |         modules (iterable, optional): an iterable of modules to add
24 | | 
25 | |     """
   | |_______^ D415
26 |   
27 |       def __init__(self, p, modules=None):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:27:9: ANN204 Missing return type annotation for special method `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, p, modules=None):
   |         ^^^^^^^^ ANN204
28 |         super().__init__(modules)
29 |         self.p = p
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:27:9: D107 Missing docstring in `__init__`
   |
25 |     """
26 | 
27 |     def __init__(self, p, modules=None):
   |         ^^^^^^^^ D107
28 |         super().__init__(modules)
29 |         self.p = p
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:31:9: ANN204 Missing return type annotation for special method `__iter__`
   |
29 |         self.p = p
30 | 
31 |     def __iter__(self):
   |         ^^^^^^^^ ANN204
32 |         dropout_probs = torch.empty(len(self)).uniform_()
33 |         for i, m in enumerate(super().__iter__()):
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\TransformerM\modules\layer_drop.py:31:9: D105 Missing docstring in magic method
   |
29 |         self.p = p
30 | 
31 |     def __iter__(self):
   |         ^^^^^^^^ D105
32 |         dropout_probs = torch.empty(len(self)).uniform_()
33 |         for i, m in enumerate(super().__iter__()):
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:9:11: D101 Missing docstring in public class
   |
 7 |     has_fused_layernorm = True
 8 | 
 9 |     class FusedLayerNorm(_FusedLayerNorm):
   |           ^^^^^^^^^^^^^^ D101
10 |         @torch.jit.unused
11 |         def forward(self, x):
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:11:13: D102 Missing docstring in public method
   |
 9 |     class FusedLayerNorm(_FusedLayerNorm):
10 |         @torch.jit.unused
11 |         def forward(self, x):
   |             ^^^^^^^ D102
12 |             if not x.is_cuda:
13 |                 return super().forward(x)
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:14:13: RET505 Unnecessary `else` after `return` statement
   |
12 |             if not x.is_cuda:
13 |                 return super().forward(x)
14 |             else:
   |             ^^^^ RET505
15 |                 with torch.cuda.device(x.device):
16 |                     return super().forward(x)
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:22:5: N802 Function name `LayerNorm` should be lowercase
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |     ^^^^^^^^^ N802
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:22:5: D103 Missing docstring in public function
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |     ^^^^^^^^^ D103
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:22:43: FBT002 Boolean default positional argument in function definition
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |                                           ^^^^^^^^^^^^^^^^^^ FBT002
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\TransformerM\modules\layer_norm.py:22:68: FBT002 Boolean default positional argument in function definition
   |
22 | def LayerNorm(normalized_shape, eps=1e-5, elementwise_affine=True, export=False):
   |                                                                    ^^^^^^ FBT002
23 |     if torch.jit.is_scripting() or torch.jit.is_tracing():
24 |         export = True
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:7:5: D205 1 blank line required between summary line and description
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D205
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:7:5: D400 First line should end with a period
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D400
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |
   = help: Add period

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:7:5: D401 First line of docstring should be in imperative mood: "Wraps modules and applies quantization noise to the weights for"
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D401
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:7:5: D415 First line should end with a period, question mark, or exclamation point
   |
 6 |   def quant_noise(module, p, block_size):
 7 |       """Wraps modules and applies quantization noise to the weights for
   |  _____^
 8 | |     subsequent quantization with Iterative Product Quantization as
 9 | |     described in "Training with Quantization Noise for Extreme Model Compression"
10 | |     Args:
11 | |         - module: nn.Module
12 | |         - p: amount of Quantization Noise
13 | |         - block_size: size of the blocks for subsequent quantization with iPQ
14 | |     Remarks:
15 | |         - Module weights must have the right sizes wrt the block size
16 | |         - Only Linear, Embedding and Conv2d modules are supported for the moment
17 | |         - For more detail on how to quantize by blocks with convolutional weights,
18 | |           see "And the Bit Goes Down: Revisiting the Quantization of Neural Networks"
19 | |         - We implement the simplest form of noise here as stated in the paper
20 | |           which consists in randomly dropping blocks
21 | |     """
   | |_______^ D415
22 |       # if no quantization noise, don't register hook
23 |       if p <= 0:
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:27:5: S101 Use of `assert` detected
   |
26 |     # supported modules
27 |     assert isinstance(module, (nn.Linear, nn.Embedding, nn.Conv2d))
   |     ^^^^^^ S101
28 | 
29 |     # test whether module.weight has the right sizes wrt block_size
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:30:37: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
   |
29 |     # test whether module.weight has the right sizes wrt block_size
30 |     is_conv = module.weight.ndim == 4
   |                                     ^ PLR2004
31 | 
32 |     # 2D matrix
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:34:9: S101 Use of `assert` detected
   |
32 |     # 2D matrix
33 |     if not is_conv:
34 |         assert (
   |         ^^^^^^ S101
35 |             module.weight.size(1) % block_size == 0
36 |         ), "Input features must be a multiple of block sizes"
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:40:9: S101 Use of `assert` detected
   |
38 |     # 4D matrix
39 |     elif module.kernel_size == (1, 1):
40 |         assert (
   |         ^^^^^^ S101
41 |             module.in_channels % block_size == 0
42 |         ), "Input channels must be a multiple of block sizes"
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:46:9: S101 Use of `assert` detected
   |
44 |     else:
45 |         k = module.kernel_size[0] * module.kernel_size[1]
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
   |         ^^^^^^ S101
47 | 
48 |     def _forward_pre_hook(mod, input):
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:48:9: ANN202 Missing return type annotation for private function `_forward_pre_hook`
   |
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
47 | 
48 |     def _forward_pre_hook(mod, input):
   |         ^^^^^^^^^^^^^^^^^ ANN202
49 |         # no noise for evaluation
50 |         if mod.training:
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:48:32: A002 Argument `input` is shadowing a Python builtin
   |
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
47 | 
48 |     def _forward_pre_hook(mod, input):
   |                                ^^^^^ A002
49 |         # no noise for evaluation
50 |         if mod.training:
   |

src\stk_search\geom3d\models\TransformerM\modules\quant_noise.py:48:32: ARG001 Unused function argument: `input`
   |
46 |         assert k % block_size == 0, "Kernel size must be a multiple of block size"
47 | 
48 |     def _forward_pre_hook(mod, input):
   |                                ^^^^^ ARG001
49 |         # no noise for evaluation
50 |         if mod.training:
   |

src\stk_search\geom3d\models\TransformerM\modules\utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\modules\utils.py:5:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
4 | import torch
5 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
  |

src\stk_search\geom3d\models\TransformerM\modules\utils.py:8:5: D103 Missing docstring in public function
   |
 8 | def softmax(x, dim: int, onnx_trace: bool = False):
   |     ^^^^^^^ D103
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
   |

src\stk_search\geom3d\models\TransformerM\modules\utils.py:8:26: FBT001 Boolean-typed positional argument in function definition
   |
 8 | def softmax(x, dim: int, onnx_trace: bool = False):
   |                          ^^^^^^^^^^ FBT001
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
   |

src\stk_search\geom3d\models\TransformerM\modules\utils.py:8:26: FBT002 Boolean default positional argument in function definition
   |
 8 | def softmax(x, dim: int, onnx_trace: bool = False):
   |                          ^^^^^^^^^^ FBT002
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
   |

src\stk_search\geom3d\models\TransformerM\modules\utils.py:11:5: RET505 Unnecessary `else` after `return` statement
   |
 9 |     if onnx_trace:
10 |         return F.softmax(x.float(), dim=dim)
11 |     else:
   |     ^^^^ RET505
12 |         return F.softmax(x, dim=dim, dtype=torch.float32)
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\models\TransformerM\modules\utils.py:16:5: D400 First line should end with a period
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
17 |     # from fairseq.modules import gelu, gelu_accurate
   |
   = help: Add period

src\stk_search\geom3d\models\TransformerM\modules\utils.py:16:5: D401 First line of docstring should be in imperative mood: "Returns the activation function corresponding to `activation`"
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
17 |     # from fairseq.modules import gelu, gelu_accurate
   |

src\stk_search\geom3d\models\TransformerM\modules\utils.py:16:5: D415 First line should end with a period, question mark, or exclamation point
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
17 |     # from fairseq.modules import gelu, gelu_accurate
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\TransformerM\modules\utils.py:17:5: ERA001 Found commented-out code
   |
15 | def get_activation_fn(activation: str) -> Callable:
16 |     """Returns the activation function corresponding to `activation`"""
17 |     # from fairseq.modules import gelu, gelu_accurate
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
18 | 
19 |     if activation == "relu":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:21:5: ERA001 Found commented-out code
   |
19 |     if activation == "relu":
20 |         return F.relu
21 |     # elif activation == "relu_squared":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
22 |     #     return relu_squared
23 |     # elif activation == "gelu":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:22:5: ERA001 Found commented-out code
   |
20 |         return F.relu
21 |     # elif activation == "relu_squared":
22 |     #     return relu_squared
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
23 |     # elif activation == "gelu":
24 |     #     return gelu
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:23:5: ERA001 Found commented-out code
   |
21 |     # elif activation == "relu_squared":
22 |     #     return relu_squared
23 |     # elif activation == "gelu":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
24 |     #     return gelu
25 |     # elif activation == "gelu_fast":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:24:5: ERA001 Found commented-out code
   |
22 |     #     return relu_squared
23 |     # elif activation == "gelu":
24 |     #     return gelu
   |     ^^^^^^^^^^^^^^^^^ ERA001
25 |     # elif activation == "gelu_fast":
26 |     #     deprecation_warning(
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:25:5: ERA001 Found commented-out code
   |
23 |     # elif activation == "gelu":
24 |     #     return gelu
25 |     # elif activation == "gelu_fast":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
26 |     #     deprecation_warning(
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:27:5: ERA001 Found commented-out code
   |
25 |     # elif activation == "gelu_fast":
26 |     #     deprecation_warning(
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
28 |     #     )
29 |     #     return gelu_accurate
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:28:5: ERA001 Found commented-out code
   |
26 |     #     deprecation_warning(
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
28 |     #     )
   |     ^^^^^^^ ERA001
29 |     #     return gelu_accurate
30 |     # elif activation == "gelu_accurate":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:29:5: ERA001 Found commented-out code
   |
27 |     #         "--activation-fn=gelu_fast has been renamed to gelu_accurate"
28 |     #     )
29 |     #     return gelu_accurate
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
30 |     # elif activation == "gelu_accurate":
31 |     #     return gelu_accurate
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:30:5: ERA001 Found commented-out code
   |
28 |     #     )
29 |     #     return gelu_accurate
30 |     # elif activation == "gelu_accurate":
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
31 |     #     return gelu_accurate
32 |     elif activation == "tanh":
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:31:5: ERA001 Found commented-out code
   |
29 |     #     return gelu_accurate
30 |     # elif activation == "gelu_accurate":
31 |     #     return gelu_accurate
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
32 |     elif activation == "tanh":
33 |         return torch.tanh
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\TransformerM\modules\utils.py:32:5: RET505 Unnecessary `elif` after `return` statement
   |
30 |     # elif activation == "gelu_accurate":
31 |     #     return gelu_accurate
32 |     elif activation == "tanh":
   |     ^^^^ RET505
33 |         return torch.tanh
34 |     elif activation == "linear":
   |
   = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\TransformerM\modules\utils.py:39:15: TRY003 Avoid specifying long messages outside the exception class
   |
37 |         return torch.nn.SiLU
38 |     else:
39 |         raise RuntimeError(f"--activation-fn {activation} not supported")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
   |

src\stk_search\geom3d\models\TransformerM\modules\utils.py:39:28: EM102 Exception must not use an f-string literal, assign to variable first
   |
37 |         return torch.nn.SiLU
38 |     else:
39 |         raise RuntimeError(f"--activation-fn {activation} not supported")
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
   |
   = help: Assign to variable; remove f-string literal

src\stk_search\geom3d\models\TransformerM\transformer_m.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\transformer_m.py:8:7: D101 Missing docstring in public class
   |
 8 | class TransformerM(nn.Module):
   |       ^^^^^^^^^^^^ D101
 9 | 
10 |     def __init__(self, args):
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:10:9: ANN204 Missing return type annotation for special method `__init__`
   |
 8 | class TransformerM(nn.Module):
 9 | 
10 |     def __init__(self, args):
   |         ^^^^^^^^ ANN204
11 |         super().__init__()
12 |         self.max_nodes = args.max_nodes
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\transformer_m.py:10:9: D107 Missing docstring in `__init__`
   |
 8 | class TransformerM(nn.Module):
 9 | 
10 |     def __init__(self, args):
   |         ^^^^^^^^ D107
11 |         super().__init__()
12 |         self.max_nodes = args.max_nodes
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:60:9: D102 Missing docstring in public method
   |
58 |         )
59 | 
60 |     def forward(self, batched_data, perturb=None, segment_labels=None, masked_tokens=None, **unused):
   |         ^^^^^^^ D102
61 | 
62 |         inner_states, atom_output = self.molecule_encoder(
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:60:72: ARG002 Unused method argument: `masked_tokens`
   |
58 |         )
59 | 
60 |     def forward(self, batched_data, perturb=None, segment_labels=None, masked_tokens=None, **unused):
   |                                                                        ^^^^^^^^^^^^^ ARG002
61 | 
62 |         inner_states, atom_output = self.molecule_encoder(
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:60:92: ANN003 Missing type annotation for `**unused`
   |
58 |         )
59 | 
60 |     def forward(self, batched_data, perturb=None, segment_labels=None, masked_tokens=None, **unused):
   |                                                                                            ^^^^^^^^ ANN003
61 | 
62 |         inner_states, atom_output = self.molecule_encoder(
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:60:94: ARG002 Unused method argument: `unused`
   |
58 |         )
59 | 
60 |     def forward(self, batched_data, perturb=None, segment_labels=None, masked_tokens=None, **unused):
   |                                                                                              ^^^^^^ ARG002
61 | 
62 |         inner_states, atom_output = self.molecule_encoder(
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:80:9: D102 Missing docstring in public method
   |
78 |         return self.max_nodes
79 | 
80 |     def upgrade_state_dict_named(self, state_dict, name):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
81 |         return state_dict
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:80:52: ARG002 Unused method argument: `name`
   |
78 |         return self.max_nodes
79 | 
80 |     def upgrade_state_dict_named(self, state_dict, name):
   |                                                    ^^^^ ARG002
81 |         return state_dict
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:84:5: D103 Missing docstring in public function
   |
83 | # only for reference
84 | def base_architecture(args):
   |     ^^^^^^^^^^^^^^^^^ D103
85 |     args.dropout = getattr(args, "dropout", 0.1)
86 |     args.attention_dropout = getattr(args, "attention_dropout", 0.1)
   |

src\stk_search\geom3d\models\TransformerM\transformer_m.py:117:5: D103 Missing docstring in public function
    |
116 | # only for reference
117 | def bert_base_architecture(args):
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
118 |     args.encoder_embed_dim = getattr(args, "encoder_embed_dim", 768)
119 |     args.share_encoder_input_output_embed = getattr(
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:19:5: D103 Missing docstring in public function
   |
19 | def init_params(module):
   |     ^^^^^^^^^^^ D103
20 | 
21 |     def normal_(data):
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:21:9: ANN202 Missing return type annotation for private function `normal_`
   |
19 | def init_params(module):
20 | 
21 |     def normal_(data):
   |         ^^^^^^^ ANN202
22 |         # with FSDP, module params will be on CUDA, so we cast them back to CPU
23 |         # so that the RNG is consistent with and without FSDP
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:42:7: D101 Missing docstring in public class
   |
42 | class TransformerMEncoder(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^^ D101
43 | 
44 |     def __init__(
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:44:9: PLR0913 Too many arguments in function definition (34 > 5)
   |
42 | class TransformerMEncoder(nn.Module):
43 | 
44 |     def __init__(
   |         ^^^^^^^^ PLR0913
45 |         self,
46 |         num_atoms: int,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:44:9: D107 Missing docstring in `__init__`
   |
42 | class TransformerMEncoder(nn.Module):
43 | 
44 |     def __init__(
   |         ^^^^^^^^ D107
45 |         self,
46 |         num_atoms: int,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:64:9: FBT001 Boolean-typed positional argument in function definition
   |
62 |         max_seq_len: int = 256,
63 |         num_segments: int = 2,
64 |         use_position_embeddings: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ FBT001
65 |         encoder_normalize_before: bool = False,
66 |         apply_init: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:64:9: FBT002 Boolean default positional argument in function definition
   |
62 |         max_seq_len: int = 256,
63 |         num_segments: int = 2,
64 |         use_position_embeddings: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ FBT002
65 |         encoder_normalize_before: bool = False,
66 |         apply_init: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:65:9: FBT001 Boolean-typed positional argument in function definition
   |
63 |         num_segments: int = 2,
64 |         use_position_embeddings: bool = True,
65 |         encoder_normalize_before: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ FBT001
66 |         apply_init: bool = False,
67 |         activation_fn: str = "relu",
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:65:9: FBT002 Boolean default positional argument in function definition
   |
63 |         num_segments: int = 2,
64 |         use_position_embeddings: bool = True,
65 |         encoder_normalize_before: bool = False,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ FBT002
66 |         apply_init: bool = False,
67 |         activation_fn: str = "relu",
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:66:9: FBT001 Boolean-typed positional argument in function definition
   |
64 |         use_position_embeddings: bool = True,
65 |         encoder_normalize_before: bool = False,
66 |         apply_init: bool = False,
   |         ^^^^^^^^^^ FBT001
67 |         activation_fn: str = "relu",
68 |         learned_pos_embedding: bool = True,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:66:9: FBT002 Boolean default positional argument in function definition
   |
64 |         use_position_embeddings: bool = True,
65 |         encoder_normalize_before: bool = False,
66 |         apply_init: bool = False,
   |         ^^^^^^^^^^ FBT002
67 |         activation_fn: str = "relu",
68 |         learned_pos_embedding: bool = True,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:68:9: FBT001 Boolean-typed positional argument in function definition
   |
66 |         apply_init: bool = False,
67 |         activation_fn: str = "relu",
68 |         learned_pos_embedding: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^ FBT001
69 |         embed_scale: float = None,
70 |         export: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:68:9: FBT002 Boolean default positional argument in function definition
   |
66 |         apply_init: bool = False,
67 |         activation_fn: str = "relu",
68 |         learned_pos_embedding: bool = True,
   |         ^^^^^^^^^^^^^^^^^^^^^ FBT002
69 |         embed_scale: float = None,
70 |         export: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:69:22: RUF013 PEP 484 prohibits implicit `Optional`
   |
67 |         activation_fn: str = "relu",
68 |         learned_pos_embedding: bool = True,
69 |         embed_scale: float = None,
   |                      ^^^^^ RUF013
70 |         export: bool = False,
71 |         traceable: bool = False,
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:70:9: FBT001 Boolean-typed positional argument in function definition
   |
68 |         learned_pos_embedding: bool = True,
69 |         embed_scale: float = None,
70 |         export: bool = False,
   |         ^^^^^^ FBT001
71 |         traceable: bool = False,
72 |         q_noise: float = 0.0,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:70:9: FBT002 Boolean default positional argument in function definition
   |
68 |         learned_pos_embedding: bool = True,
69 |         embed_scale: float = None,
70 |         export: bool = False,
   |         ^^^^^^ FBT002
71 |         traceable: bool = False,
72 |         q_noise: float = 0.0,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:71:9: FBT001 Boolean-typed positional argument in function definition
   |
69 |         embed_scale: float = None,
70 |         export: bool = False,
71 |         traceable: bool = False,
   |         ^^^^^^^^^ FBT001
72 |         q_noise: float = 0.0,
73 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:71:9: FBT002 Boolean default positional argument in function definition
   |
69 |         embed_scale: float = None,
70 |         export: bool = False,
71 |         traceable: bool = False,
   |         ^^^^^^^^^ FBT002
72 |         q_noise: float = 0.0,
73 |         qn_block_size: int = 8,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:74:9: FBT001 Boolean-typed positional argument in function definition
   |
72 |         q_noise: float = 0.0,
73 |         qn_block_size: int = 8,
74 |         sandwich_ln: bool = False,
   |         ^^^^^^^^^^^ FBT001
75 |         droppath_prob: float = 0.0,
76 |         add_3d: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:74:9: FBT002 Boolean default positional argument in function definition
   |
72 |         q_noise: float = 0.0,
73 |         qn_block_size: int = 8,
74 |         sandwich_ln: bool = False,
   |         ^^^^^^^^^^^ FBT002
75 |         droppath_prob: float = 0.0,
76 |         add_3d: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:76:9: FBT001 Boolean-typed positional argument in function definition
   |
74 |         sandwich_ln: bool = False,
75 |         droppath_prob: float = 0.0,
76 |         add_3d: bool = False,
   |         ^^^^^^ FBT001
77 |         num_3d_bias_kernel: int = 128,
78 |         no_2d: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:76:9: FBT002 Boolean default positional argument in function definition
   |
74 |         sandwich_ln: bool = False,
75 |         droppath_prob: float = 0.0,
76 |         add_3d: bool = False,
   |         ^^^^^^ FBT002
77 |         num_3d_bias_kernel: int = 128,
78 |         no_2d: bool = False,
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:78:9: FBT001 Boolean-typed positional argument in function definition
   |
76 |         add_3d: bool = False,
77 |         num_3d_bias_kernel: int = 128,
78 |         no_2d: bool = False,
   |         ^^^^^ FBT001
79 |         mode_prob: str = "0.2,0.2,0.6",
80 |     ) -> None:
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:78:9: FBT002 Boolean default positional argument in function definition
   |
76 |         add_3d: bool = False,
77 |         num_3d_bias_kernel: int = 128,
78 |         no_2d: bool = False,
   |         ^^^^^ FBT002
79 |         mode_prob: str = "0.2,0.2,0.6",
80 |     ) -> None:
   |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:98:13: S101 Use of `assert` detected
    |
 96 |         try:
 97 |             mode_prob = [float(item) for item in mode_prob.split(",")]
 98 |             assert len(mode_prob) == 3
    |             ^^^^^^ S101
 99 |             assert sum(mode_prob) == 1.0
100 |         except:
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:98:38: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
 96 |         try:
 97 |             mode_prob = [float(item) for item in mode_prob.split(",")]
 98 |             assert len(mode_prob) == 3
    |                                      ^ PLR2004
 99 |             assert sum(mode_prob) == 1.0
100 |         except:
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:99:13: S101 Use of `assert` detected
    |
 97 |             mode_prob = [float(item) for item in mode_prob.split(",")]
 98 |             assert len(mode_prob) == 3
 99 |             assert sum(mode_prob) == 1.0
    |             ^^^^^^ S101
100 |         except:
101 |             mode_prob = [0.2, 0.2, 0.6]
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:100:9: E722 Do not use bare `except`
    |
 98 |             assert len(mode_prob) == 3
 99 |             assert sum(mode_prob) == 1.0
100 |         except:
    |         ^^^^^^ E722
101 |             mode_prob = [0.2, 0.2, 0.6]
102 |         self.mode_prob = mode_prob
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:188:9: PLR0913 Too many arguments in function definition (12 > 5)
    |
186 |             self.apply(init_params)
187 | 
188 |     def build_transformer_m_encoder_layer(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
189 |         self,
190 |         embedding_dim,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:188:9: D102 Missing docstring in public method
    |
186 |             self.apply(init_params)
187 | 
188 |     def build_transformer_m_encoder_layer(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D102
189 |         self,
190 |         embedding_dim,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:218:9: C901 `forward` is too complex (16 > 10)
    |
216 |         )
217 | 
218 |     def forward(
    |         ^^^^^^^ C901
219 |         self,
220 |         batched_data,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:218:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
216 |         )
217 | 
218 |     def forward(
    |         ^^^^^^^ PLR0913
219 |         self,
220 |         batched_data,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:218:9: PLR0912 Too many branches (17 > 12)
    |
216 |         )
217 | 
218 |     def forward(
    |         ^^^^^^^ PLR0912
219 |         self,
220 |         batched_data,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:218:9: PLR0915 Too many statements (52 > 50)
    |
216 |         )
217 | 
218 |     def forward(
    |         ^^^^^^^ PLR0915
219 |         self,
220 |         batched_data,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:218:9: D102 Missing docstring in public method
    |
216 |         )
217 | 
218 |     def forward(
    |         ^^^^^^^ D102
219 |         self,
220 |         batched_data,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:222:9: ARG002 Unused method argument: `segment_labels`
    |
220 |         batched_data,
221 |         perturb=None,
222 |         segment_labels: torch.Tensor = None,
    |         ^^^^^^^^^^^^^^ ARG002
223 |         last_state_only: bool = False,
224 |         positions: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:223:9: FBT001 Boolean-typed positional argument in function definition
    |
221 |         perturb=None,
222 |         segment_labels: torch.Tensor = None,
223 |         last_state_only: bool = False,
    |         ^^^^^^^^^^^^^^^ FBT001
224 |         positions: Optional[torch.Tensor] = None,
225 |         token_embeddings: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:223:9: FBT002 Boolean default positional argument in function definition
    |
221 |         perturb=None,
222 |         segment_labels: torch.Tensor = None,
223 |         last_state_only: bool = False,
    |         ^^^^^^^^^^^^^^^ FBT002
224 |         positions: Optional[torch.Tensor] = None,
225 |         token_embeddings: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:224:9: ARG002 Unused method argument: `positions`
    |
222 |         segment_labels: torch.Tensor = None,
223 |         last_state_only: bool = False,
224 |         positions: Optional[torch.Tensor] = None,
    |         ^^^^^^^^^ ARG002
225 |         token_embeddings: Optional[torch.Tensor] = None,
226 |         attn_mask: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:224:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
222 |         segment_labels: torch.Tensor = None,
223 |         last_state_only: bool = False,
224 |         positions: Optional[torch.Tensor] = None,
    |                    ^^^^^^^^ FA100
225 |         token_embeddings: Optional[torch.Tensor] = None,
226 |         attn_mask: Optional[torch.Tensor] = None,
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:225:27: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
223 |         last_state_only: bool = False,
224 |         positions: Optional[torch.Tensor] = None,
225 |         token_embeddings: Optional[torch.Tensor] = None,
    |                           ^^^^^^^^ FA100
226 |         attn_mask: Optional[torch.Tensor] = None,
227 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:226:20: FA100 Add `from __future__ import annotations` to simplify `typing.Optional`
    |
224 |         positions: Optional[torch.Tensor] = None,
225 |         token_embeddings: Optional[torch.Tensor] = None,
226 |         attn_mask: Optional[torch.Tensor] = None,
    |                    ^^^^^^^^ FA100
227 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
228 |         is_tpu = False
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:227:10: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
    |
225 |         token_embeddings: Optional[torch.Tensor] = None,
226 |         attn_mask: Optional[torch.Tensor] = None,
227 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
    |          ^^^^^ FA100
228 |         is_tpu = False
229 |         # compute padding mask. This is needed for multi-head attention
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:228:9: F841 Local variable `is_tpu` is assigned to but never used
    |
226 |         attn_mask: Optional[torch.Tensor] = None,
227 |     ) -> Tuple[torch.Tensor, torch.Tensor]:
228 |         is_tpu = False
    |         ^^^^^^ F841
229 |         # compute padding mask. This is needed for multi-head attention
    |
    = help: Remove assignment to unused variable `is_tpu`

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:240:27: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
238 |         mask_2d = mask_3d = None
239 |         if self.training:
240 |             mask_choice = np.random.choice(np.arange(3), n_mol, p=self.mode_prob)
    |                           ^^^^^^^^^^^^^^^^ NPY002
241 |             mask = torch.tensor([mask_dict[i] for i in mask_choice]).to(batched_data["pos"])
242 |             mask_2d = mask[:, 0]
    |

src\stk_search\geom3d\models\TransformerM\transformer_m_encoder.py:303:9: RET505 Unnecessary `else` after `return` statement
    |
301 |         if self.traceable:
302 |             return torch.stack(inner_states), atom_output
303 |         else:
    |         ^^^^ RET505
304 |             return inner_states, atom_output
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\__init__.py:1:8: F401 `torch` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | import torch
  |        ^^^^^ F401
2 | import torch.nn.functional as F
3 | from torch import nn
  |
  = help: Remove unused import: `torch`

src\stk_search\geom3d\models\__init__.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | from torch import nn
4 | from torch_geometric.nn import GATConv, GCNConv
  |

src\stk_search\geom3d\models\__init__.py:2:31: F401 `torch.nn.functional` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | import torch
2 | import torch.nn.functional as F
  |                               ^ F401
3 | from torch import nn
4 | from torch_geometric.nn import GATConv, GCNConv
  |
  = help: Remove unused import: `torch.nn.functional`

src\stk_search\geom3d\models\__init__.py:3:19: F401 `torch.nn` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | import torch
2 | import torch.nn.functional as F
3 | from torch import nn
  |                   ^^ F401
4 | from torch_geometric.nn import GATConv, GCNConv
  |
  = help: Remove unused import: `torch.nn`

src\stk_search\geom3d\models\__init__.py:4:32: F401 `torch_geometric.nn.GATConv` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | import torch.nn.functional as F
3 | from torch import nn
4 | from torch_geometric.nn import GATConv, GCNConv
  |                                ^^^^^^^ F401
5 | 
6 | from .AutoEncoder import AutoEncoder, VariationalAutoEncoder
  |
  = help: Remove unused import

src\stk_search\geom3d\models\__init__.py:4:41: F401 `torch_geometric.nn.GCNConv` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | import torch.nn.functional as F
3 | from torch import nn
4 | from torch_geometric.nn import GATConv, GCNConv
  |                                         ^^^^^^^ F401
5 | 
6 | from .AutoEncoder import AutoEncoder, VariationalAutoEncoder
  |
  = help: Remove unused import

src\stk_search\geom3d\models\__init__.py:6:26: F401 `.AutoEncoder.AutoEncoder` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
4 | from torch_geometric.nn import GATConv, GCNConv
5 | 
6 | from .AutoEncoder import AutoEncoder, VariationalAutoEncoder
  |                          ^^^^^^^^^^^ F401
7 | from .AWARE import AWARE
8 | from .BERT import BertForSequenceRegression
  |
  = help: Use an explicit re-export: `AutoEncoder as AutoEncoder`

src\stk_search\geom3d\models\__init__.py:6:39: F401 `.AutoEncoder.VariationalAutoEncoder` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
4 | from torch_geometric.nn import GATConv, GCNConv
5 | 
6 | from .AutoEncoder import AutoEncoder, VariationalAutoEncoder
  |                                       ^^^^^^^^^^^^^^^^^^^^^^ F401
7 | from .AWARE import AWARE
8 | from .BERT import BertForSequenceRegression
  |
  = help: Use an explicit re-export: `VariationalAutoEncoder as VariationalAutoEncoder`

src\stk_search\geom3d\models\__init__.py:7:20: F401 `.AWARE.AWARE` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
6 | from .AutoEncoder import AutoEncoder, VariationalAutoEncoder
7 | from .AWARE import AWARE
  |                    ^^^^^ F401
8 | from .BERT import BertForSequenceRegression
9 | from .ClofNet import ClofNet
  |
  = help: Use an explicit re-export: `AWARE as AWARE`

src\stk_search\geom3d\models\__init__.py:8:19: F401 `.BERT.BertForSequenceRegression` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
 6 | from .AutoEncoder import AutoEncoder, VariationalAutoEncoder
 7 | from .AWARE import AWARE
 8 | from .BERT import BertForSequenceRegression
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ F401
 9 | from .ClofNet import ClofNet
10 | from .CNN import CNN
   |
   = help: Use an explicit re-export: `BertForSequenceRegression as BertForSequenceRegression`

src\stk_search\geom3d\models\__init__.py:9:22: F401 `.ClofNet.ClofNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
 7 | from .AWARE import AWARE
 8 | from .BERT import BertForSequenceRegression
 9 | from .ClofNet import ClofNet
   |                      ^^^^^^^ F401
10 | from .CNN import CNN
11 | from .DimeNet import DimeNet
   |
   = help: Use an explicit re-export: `ClofNet as ClofNet`

src\stk_search\geom3d\models\__init__.py:10:18: F401 `.CNN.CNN` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
 8 | from .BERT import BertForSequenceRegression
 9 | from .ClofNet import ClofNet
10 | from .CNN import CNN
   |                  ^^^ F401
11 | from .DimeNet import DimeNet
12 | from .DimeNetPlusPlus import DimeNetPlusPlus
   |
   = help: Use an explicit re-export: `CNN as CNN`

src\stk_search\geom3d\models\__init__.py:11:22: F401 `.DimeNet.DimeNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
 9 | from .ClofNet import ClofNet
10 | from .CNN import CNN
11 | from .DimeNet import DimeNet
   |                      ^^^^^^^ F401
12 | from .DimeNetPlusPlus import DimeNetPlusPlus
13 | from .DMPNN import DMPNN
   |
   = help: Use an explicit re-export: `DimeNet as DimeNet`

src\stk_search\geom3d\models\__init__.py:12:30: F401 `.DimeNetPlusPlus.DimeNetPlusPlus` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
10 | from .CNN import CNN
11 | from .DimeNet import DimeNet
12 | from .DimeNetPlusPlus import DimeNetPlusPlus
   |                              ^^^^^^^^^^^^^^^ F401
13 | from .DMPNN import DMPNN
14 | from .EGNN import EGNN
   |
   = help: Use an explicit re-export: `DimeNetPlusPlus as DimeNetPlusPlus`

src\stk_search\geom3d\models\__init__.py:13:20: F401 `.DMPNN.DMPNN` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
11 | from .DimeNet import DimeNet
12 | from .DimeNetPlusPlus import DimeNetPlusPlus
13 | from .DMPNN import DMPNN
   |                    ^^^^^ F401
14 | from .EGNN import EGNN
15 | from .ENN import ENN_S2S
   |
   = help: Use an explicit re-export: `DMPNN as DMPNN`

src\stk_search\geom3d\models\__init__.py:14:19: F401 `.EGNN.EGNN` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
12 | from .DimeNetPlusPlus import DimeNetPlusPlus
13 | from .DMPNN import DMPNN
14 | from .EGNN import EGNN
   |                   ^^^^ F401
15 | from .ENN import ENN_S2S
16 | from .Equiformer import (
   |
   = help: Use an explicit re-export: `EGNN as EGNN`

src\stk_search\geom3d\models\__init__.py:15:18: F401 `.ENN.ENN_S2S` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
13 | from .DMPNN import DMPNN
14 | from .EGNN import EGNN
15 | from .ENN import ENN_S2S
   |                  ^^^^^^^ F401
16 | from .Equiformer import (
17 |     EquiformerEnergy,
   |
   = help: Use an explicit re-export: `ENN_S2S as ENN_S2S`

src\stk_search\geom3d\models\__init__.py:17:5: F401 `.Equiformer.EquiformerEnergy` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
15 | from .ENN import ENN_S2S
16 | from .Equiformer import (
17 |     EquiformerEnergy,
   |     ^^^^^^^^^^^^^^^^ F401
18 |     EquiformerEnergyForce,
19 |     EquiformerEnergyPeriodic,
   |
   = help: Use an explicit re-export: `EquiformerEnergy as EquiformerEnergy`

src\stk_search\geom3d\models\__init__.py:18:5: F401 `.Equiformer.EquiformerEnergyForce` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
16 | from .Equiformer import (
17 |     EquiformerEnergy,
18 |     EquiformerEnergyForce,
   |     ^^^^^^^^^^^^^^^^^^^^^ F401
19 |     EquiformerEnergyPeriodic,
20 | )
   |
   = help: Use an explicit re-export: `EquiformerEnergyForce as EquiformerEnergyForce`

src\stk_search\geom3d\models\__init__.py:19:5: F401 `.Equiformer.EquiformerEnergyPeriodic` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
17 |     EquiformerEnergy,
18 |     EquiformerEnergyForce,
19 |     EquiformerEnergyPeriodic,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ F401
20 | )
21 | from .GearNet import GearNet
   |
   = help: Use an explicit re-export: `EquiformerEnergyPeriodic as EquiformerEnergyPeriodic`

src\stk_search\geom3d\models\__init__.py:21:22: F401 `.GearNet.GearNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
19 |     EquiformerEnergyPeriodic,
20 | )
21 | from .GearNet import GearNet
   |                      ^^^^^^^ F401
22 | from .GemNet import GemNet
23 | from .GeoSSL_DDM import GeoSSL_DDM
   |
   = help: Use an explicit re-export: `GearNet as GearNet`

src\stk_search\geom3d\models\__init__.py:22:21: F401 `.GemNet.GemNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
20 | )
21 | from .GearNet import GearNet
22 | from .GemNet import GemNet
   |                     ^^^^^^ F401
23 | from .GeoSSL_DDM import GeoSSL_DDM
24 | from .GeoSSL_PDM import GeoSSL_PDM
   |
   = help: Use an explicit re-export: `GemNet as GemNet`

src\stk_search\geom3d\models\__init__.py:23:25: F401 `.GeoSSL_DDM.GeoSSL_DDM` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
21 | from .GearNet import GearNet
22 | from .GemNet import GemNet
23 | from .GeoSSL_DDM import GeoSSL_DDM
   |                         ^^^^^^^^^^ F401
24 | from .GeoSSL_PDM import GeoSSL_PDM
25 | from .GPS import GPSModel
   |
   = help: Use an explicit re-export: `GeoSSL_DDM as GeoSSL_DDM`

src\stk_search\geom3d\models\__init__.py:24:25: F401 `.GeoSSL_PDM.GeoSSL_PDM` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
22 | from .GemNet import GemNet
23 | from .GeoSSL_DDM import GeoSSL_DDM
24 | from .GeoSSL_PDM import GeoSSL_PDM
   |                         ^^^^^^^^^^ F401
25 | from .GPS import GPSModel
26 | from .Graphormer import Graphormer
   |
   = help: Use an explicit re-export: `GeoSSL_PDM as GeoSSL_PDM`

src\stk_search\geom3d\models\__init__.py:25:18: F401 `.GPS.GPSModel` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
23 | from .GeoSSL_DDM import GeoSSL_DDM
24 | from .GeoSSL_PDM import GeoSSL_PDM
25 | from .GPS import GPSModel
   |                  ^^^^^^^^ F401
26 | from .Graphormer import Graphormer
27 | from .GVP import GVP_GNN
   |
   = help: Use an explicit re-export: `GPSModel as GPSModel`

src\stk_search\geom3d\models\__init__.py:26:25: F401 `.Graphormer.Graphormer` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
24 | from .GeoSSL_PDM import GeoSSL_PDM
25 | from .GPS import GPSModel
26 | from .Graphormer import Graphormer
   |                         ^^^^^^^^^^ F401
27 | from .GVP import GVP_GNN
28 | from .MLP import MLP
   |
   = help: Use an explicit re-export: `Graphormer as Graphormer`

src\stk_search\geom3d\models\__init__.py:27:18: F401 `.GVP.GVP_GNN` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
25 | from .GPS import GPSModel
26 | from .Graphormer import Graphormer
27 | from .GVP import GVP_GNN
   |                  ^^^^^^^ F401
28 | from .MLP import MLP
29 | from .molecule_gnn_model import GNN, GNN_graphpred
   |
   = help: Use an explicit re-export: `GVP_GNN as GVP_GNN`

src\stk_search\geom3d\models\__init__.py:28:18: F401 `.MLP.MLP` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
26 | from .Graphormer import Graphormer
27 | from .GVP import GVP_GNN
28 | from .MLP import MLP
   |                  ^^^ F401
29 | from .molecule_gnn_model import GNN, GNN_graphpred
30 | from .molecule_gnn_model_simplified import GNNSimplified
   |
   = help: Use an explicit re-export: `MLP as MLP`

src\stk_search\geom3d\models\__init__.py:29:33: F401 `.molecule_gnn_model.GNN` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
27 | from .GVP import GVP_GNN
28 | from .MLP import MLP
29 | from .molecule_gnn_model import GNN, GNN_graphpred
   |                                 ^^^ F401
30 | from .molecule_gnn_model_simplified import GNNSimplified
31 | from .PaiNN import PaiNN
   |
   = help: Use an explicit re-export: `GNN as GNN`

src\stk_search\geom3d\models\__init__.py:29:38: F401 `.molecule_gnn_model.GNN_graphpred` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
27 | from .GVP import GVP_GNN
28 | from .MLP import MLP
29 | from .molecule_gnn_model import GNN, GNN_graphpred
   |                                      ^^^^^^^^^^^^^ F401
30 | from .molecule_gnn_model_simplified import GNNSimplified
31 | from .PaiNN import PaiNN
   |
   = help: Use an explicit re-export: `GNN_graphpred as GNN_graphpred`

src\stk_search\geom3d\models\__init__.py:30:44: F401 `.molecule_gnn_model_simplified.GNNSimplified` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
28 | from .MLP import MLP
29 | from .molecule_gnn_model import GNN, GNN_graphpred
30 | from .molecule_gnn_model_simplified import GNNSimplified
   |                                            ^^^^^^^^^^^^^ F401
31 | from .PaiNN import PaiNN
32 | from .PNA import PNA
   |
   = help: Use an explicit re-export: `GNNSimplified as GNNSimplified`

src\stk_search\geom3d\models\__init__.py:31:20: F401 `.PaiNN.PaiNN` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
29 | from .molecule_gnn_model import GNN, GNN_graphpred
30 | from .molecule_gnn_model_simplified import GNNSimplified
31 | from .PaiNN import PaiNN
   |                    ^^^^^ F401
32 | from .PNA import PNA
33 | from .ProNet import ProNet
   |
   = help: Use an explicit re-export: `PaiNN as PaiNN`

src\stk_search\geom3d\models\__init__.py:32:18: F401 `.PNA.PNA` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
30 | from .molecule_gnn_model_simplified import GNNSimplified
31 | from .PaiNN import PaiNN
32 | from .PNA import PNA
   |                  ^^^ F401
33 | from .ProNet import ProNet
34 | from .SchNet import SchNet
   |
   = help: Use an explicit re-export: `PNA as PNA`

src\stk_search\geom3d\models\__init__.py:33:21: F401 `.ProNet.ProNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
31 | from .PaiNN import PaiNN
32 | from .PNA import PNA
33 | from .ProNet import ProNet
   |                     ^^^^^^ F401
34 | from .SchNet import SchNet
35 | from .SE3_Transformer import SE3Transformer
   |
   = help: Use an explicit re-export: `ProNet as ProNet`

src\stk_search\geom3d\models\__init__.py:34:21: F401 `.SchNet.SchNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
32 | from .PNA import PNA
33 | from .ProNet import ProNet
34 | from .SchNet import SchNet
   |                     ^^^^^^ F401
35 | from .SE3_Transformer import SE3Transformer
36 | from .SEGNN import SEGNNModel as SEGNN
   |
   = help: Use an explicit re-export: `SchNet as SchNet`

src\stk_search\geom3d\models\__init__.py:35:30: F401 `.SE3_Transformer.SE3Transformer` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
33 | from .ProNet import ProNet
34 | from .SchNet import SchNet
35 | from .SE3_Transformer import SE3Transformer
   |                              ^^^^^^^^^^^^^^ F401
36 | from .SEGNN import SEGNNModel as SEGNN
37 | from .SphereNet import SphereNet
   |
   = help: Use an explicit re-export: `SE3Transformer as SE3Transformer`

src\stk_search\geom3d\models\__init__.py:36:20: N814 Camelcase `SEGNNModel` imported as constant `SEGNN`
   |
34 | from .SchNet import SchNet
35 | from .SE3_Transformer import SE3Transformer
36 | from .SEGNN import SEGNNModel as SEGNN
   |                    ^^^^^^^^^^^^^^^^^^^ N814
37 | from .SphereNet import SphereNet
38 | from .SphereNet_periodic import SphereNetPeriodic
   |

src\stk_search\geom3d\models\__init__.py:36:34: F401 `.SEGNN.SEGNNModel` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
34 | from .SchNet import SchNet
35 | from .SE3_Transformer import SE3Transformer
36 | from .SEGNN import SEGNNModel as SEGNN
   |                                  ^^^^^ F401
37 | from .SphereNet import SphereNet
38 | from .SphereNet_periodic import SphereNetPeriodic
   |
   = help: Use an explicit re-export: `SEGNNModel as SEGNNModel`

src\stk_search\geom3d\models\__init__.py:37:24: F401 `.SphereNet.SphereNet` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
35 | from .SE3_Transformer import SE3Transformer
36 | from .SEGNN import SEGNNModel as SEGNN
37 | from .SphereNet import SphereNet
   |                        ^^^^^^^^^ F401
38 | from .SphereNet_periodic import SphereNetPeriodic
39 | from .TFN import TFN
   |
   = help: Use an explicit re-export: `SphereNet as SphereNet`

src\stk_search\geom3d\models\__init__.py:38:33: F401 `.SphereNet_periodic.SphereNetPeriodic` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
36 | from .SEGNN import SEGNNModel as SEGNN
37 | from .SphereNet import SphereNet
38 | from .SphereNet_periodic import SphereNetPeriodic
   |                                 ^^^^^^^^^^^^^^^^^ F401
39 | from .TFN import TFN
40 | from .TransformerM import TransformerM
   |
   = help: Use an explicit re-export: `SphereNetPeriodic as SphereNetPeriodic`

src\stk_search\geom3d\models\__init__.py:39:18: F401 `.TFN.TFN` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
37 | from .SphereNet import SphereNet
38 | from .SphereNet_periodic import SphereNetPeriodic
39 | from .TFN import TFN
   |                  ^^^ F401
40 | from .TransformerM import TransformerM
   |
   = help: Use an explicit re-export: `TFN as TFN`

src\stk_search\geom3d\models\__init__.py:40:27: F401 `.TransformerM.TransformerM` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
   |
38 | from .SphereNet_periodic import SphereNetPeriodic
39 | from .TFN import TFN
40 | from .TransformerM import TransformerM
   |                           ^^^^^^^^^^^^ F401
   |
   = help: Use an explicit re-export: `TransformerM as TransformerM`

src\stk_search\geom3d\models\fibers.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\fibers.py:9:5: D400 First line should end with a period
   |
 8 | class Fiber:
 9 |     """A Handy Data Structure for Fibers"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
10 | 
11 |     def __init__(
   |
   = help: Add period

src\stk_search\geom3d\models\fibers.py:9:5: D415 First line should end with a period, question mark, or exclamation point
   |
 8 | class Fiber:
 9 |     """A Handy Data Structure for Fibers"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
10 | 
11 |     def __init__(
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\fibers.py:11:9: ANN204 Missing return type annotation for special method `__init__`
   |
 9 |     """A Handy Data Structure for Fibers"""
10 | 
11 |     def __init__(
   |         ^^^^^^^^ ANN204
12 |         self,
13 |         num_degrees: int = None,
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\fibers.py:13:22: RUF013 PEP 484 prohibits implicit `Optional`
   |
11 |     def __init__(
12 |         self,
13 |         num_degrees: int = None,
   |                      ^^^ RUF013
14 |         num_channels: int = None,
15 |         structure: List[Tuple[int, int]] = None,
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\fibers.py:14:23: RUF013 PEP 484 prohibits implicit `Optional`
   |
12 |         self,
13 |         num_degrees: int = None,
14 |         num_channels: int = None,
   |                       ^^^ RUF013
15 |         structure: List[Tuple[int, int]] = None,
16 |         dictionary=None,
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\fibers.py:15:20: FA100 Add `from __future__ import annotations` to simplify `typing.List`
   |
13 |         num_degrees: int = None,
14 |         num_channels: int = None,
15 |         structure: List[Tuple[int, int]] = None,
   |                    ^^^^ FA100
16 |         dictionary=None,
17 |     ):
   |

src\stk_search\geom3d\models\fibers.py:15:20: RUF013 PEP 484 prohibits implicit `Optional`
   |
13 |         num_degrees: int = None,
14 |         num_channels: int = None,
15 |         structure: List[Tuple[int, int]] = None,
   |                    ^^^^^^^^^^^^^^^^^^^^^ RUF013
16 |         dictionary=None,
17 |     ):
   |
   = help: Convert to `Optional[T]`

src\stk_search\geom3d\models\fibers.py:15:25: FA100 Add `from __future__ import annotations` to simplify `typing.Tuple`
   |
13 |         num_degrees: int = None,
14 |         num_channels: int = None,
15 |         structure: List[Tuple[int, int]] = None,
   |                         ^^^^^ FA100
16 |         dictionary=None,
17 |     ):
   |

src\stk_search\geom3d\models\fibers.py:18:9: D205 1 blank line required between summary line and description
   |
16 |           dictionary=None,
17 |       ):
18 |           """Define fiber structure; use one num_degrees & num_channels OR structure
   |  _________^
19 | |         OR dictionary
20 | | 
21 | |         :param num_degrees: degrees will be [0, ..., num_degrees-1]
22 | |         :param num_channels: number of channels, same for each degree
23 | |         :param structure: e.g. [(32, 0),(16, 1),(16,2)]
24 | |         :param dictionary: e.g. {0:32, 1:16, 2:16}
25 | |         """
   | |___________^ D205
26 |           if structure:
27 |               self.structure = structure
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\fibers.py:18:9: D400 First line should end with a period
   |
16 |           dictionary=None,
17 |       ):
18 |           """Define fiber structure; use one num_degrees & num_channels OR structure
   |  _________^
19 | |         OR dictionary
20 | | 
21 | |         :param num_degrees: degrees will be [0, ..., num_degrees-1]
22 | |         :param num_channels: number of channels, same for each degree
23 | |         :param structure: e.g. [(32, 0),(16, 1),(16,2)]
24 | |         :param dictionary: e.g. {0:32, 1:16, 2:16}
25 | |         """
   | |___________^ D400
26 |           if structure:
27 |               self.structure = structure
   |
   = help: Add period

src\stk_search\geom3d\models\fibers.py:18:9: D415 First line should end with a period, question mark, or exclamation point
   |
16 |           dictionary=None,
17 |       ):
18 |           """Define fiber structure; use one num_degrees & num_channels OR structure
   |  _________^
19 | |         OR dictionary
20 | | 
21 | |         :param num_degrees: degrees will be [0, ..., num_degrees-1]
22 | |         :param num_channels: number of channels, same for each degree
23 | |         :param structure: e.g. [(32, 0),(16, 1),(16,2)]
24 | |         :param dictionary: e.g. {0:32, 1:16, 2:16}
25 | |         """
   | |___________^ D415
26 |           if structure:
27 |               self.structure = structure
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\fibers.py:40:9: ANN205 Missing return type annotation for staticmethod `combine`
   |
39 |     @staticmethod
40 |     def combine(f1, f2):
   |         ^^^^^^^ ANN205
41 |         new_dict = copy.deepcopy(f1.structure_dict)
42 |         for k, m in f2.structure_dict.items():
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\fibers.py:40:9: D102 Missing docstring in public method
   |
39 |     @staticmethod
40 |     def combine(f1, f2):
   |         ^^^^^^^ D102
41 |         new_dict = copy.deepcopy(f1.structure_dict)
42 |         for k, m in f2.structure_dict.items():
   |

src\stk_search\geom3d\models\fibers.py:43:16: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
41 |         new_dict = copy.deepcopy(f1.structure_dict)
42 |         for k, m in f2.structure_dict.items():
43 |             if k in new_dict.keys():
   |                ^^^^^^^^^^^^^^^^^^^^ SIM118
44 |                 new_dict[k] += m
45 |             else:
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\models\fibers.py:51:9: ANN205 Missing return type annotation for staticmethod `combine_max`
   |
50 |     @staticmethod
51 |     def combine_max(f1, f2):
   |         ^^^^^^^^^^^ ANN205
52 |         new_dict = copy.deepcopy(f1.structure_dict)
53 |         for k, m in f2.structure_dict.items():
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\fibers.py:51:9: D102 Missing docstring in public method
   |
50 |     @staticmethod
51 |     def combine_max(f1, f2):
   |         ^^^^^^^^^^^ D102
52 |         new_dict = copy.deepcopy(f1.structure_dict)
53 |         for k, m in f2.structure_dict.items():
   |

src\stk_search\geom3d\models\fibers.py:54:16: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
52 |         new_dict = copy.deepcopy(f1.structure_dict)
53 |         for k, m in f2.structure_dict.items():
54 |             if k in new_dict.keys():
   |                ^^^^^^^^^^^^^^^^^^^^ SIM118
55 |                 new_dict[k] = max(m, new_dict[k])
56 |             else:
   |
   = help: Remove `.keys()`

src\stk_search\geom3d\models\fibers.py:61:9: ANN204 Missing return type annotation for special method `__repr__`
   |
59 |         return Fiber(structure=structure)
60 | 
61 |     def __repr__(self):
   |         ^^^^^^^^ ANN204
62 |         return f"{self.structure}"
   |
   = help: Add return type annotation: `str`

src\stk_search\geom3d\models\fibers.py:61:9: D105 Missing docstring in magic method
   |
59 |         return Fiber(structure=structure)
60 | 
61 |     def __repr__(self):
   |         ^^^^^^^^ D105
62 |         return f"{self.structure}"
   |

src\stk_search\geom3d\models\fibers.py:65:5: D103 Missing docstring in public function
   |
65 | def fiber2head(F, h, structure, squeeze=False):
   |     ^^^^^^^^^^ D103
66 |     if squeeze:
67 |         fibers = [
   |

src\stk_search\geom3d\models\fibers.py:65:16: N803 Argument name `F` should be lowercase
   |
65 | def fiber2head(F, h, structure, squeeze=False):
   |                ^ N803
66 |     if squeeze:
67 |         fibers = [
   |

src\stk_search\geom3d\models\fibers.py:65:33: FBT002 Boolean default positional argument in function definition
   |
65 | def fiber2head(F, h, structure, squeeze=False):
   |                                 ^^^^^^^ FBT002
66 |     if squeeze:
67 |         fibers = [
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:1:1: N999 Invalid module name: 'SO3'
src\stk_search\geom3d\models\from_se3cnn\SO3.py:2:1: D400 First line should end with a period
  |
1 |   # pylint: disable=C,E1101,E1102
2 | / """Some functions related to SO3 and his usual representations
3 | | 
4 | | Using ZYZ Euler angles parametrisation
5 | | """
  | |___^ D400
6 |   
7 |   import numpy as np
  |
  = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:2:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 |   # pylint: disable=C,E1101,E1102
2 | / """Some functions related to SO3 and his usual representations
3 | | 
4 | | Using ZYZ Euler angles parametrisation
5 | | """
  | |___^ D415
6 |   
7 |   import numpy as np
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:11:7: N801 Class name `torch_default_dtype` should use CapWords convention
   |
11 | class torch_default_dtype:
   |       ^^^^^^^^^^^^^^^^^^^ N801
12 |     def __init__(self, dtype):
13 |         self.saved_dtype = None
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:11:7: D101 Missing docstring in public class
   |
11 | class torch_default_dtype:
   |       ^^^^^^^^^^^^^^^^^^^ D101
12 |     def __init__(self, dtype):
13 |         self.saved_dtype = None
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:12:9: ANN204 Missing return type annotation for special method `__init__`
   |
11 | class torch_default_dtype:
12 |     def __init__(self, dtype):
   |         ^^^^^^^^ ANN204
13 |         self.saved_dtype = None
14 |         self.dtype = dtype
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:12:9: D107 Missing docstring in `__init__`
   |
11 | class torch_default_dtype:
12 |     def __init__(self, dtype):
   |         ^^^^^^^^ D107
13 |         self.saved_dtype = None
14 |         self.dtype = dtype
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:16:9: ANN204 Missing return type annotation for special method `__enter__`
   |
14 |         self.dtype = dtype
15 | 
16 |     def __enter__(self):
   |         ^^^^^^^^^ ANN204
17 |         self.saved_dtype = torch.get_default_dtype()
18 |         torch.set_default_dtype(self.dtype)
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:16:9: D105 Missing docstring in magic method
   |
14 |         self.dtype = dtype
15 | 
16 |     def __enter__(self):
   |         ^^^^^^^^^ D105
17 |         self.saved_dtype = torch.get_default_dtype()
18 |         torch.set_default_dtype(self.dtype)
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:20:9: ANN204 Missing return type annotation for special method `__exit__`
   |
18 |         torch.set_default_dtype(self.dtype)
19 | 
20 |     def __exit__(self, exc_type, exc_value, traceback):
   |         ^^^^^^^^ ANN204
21 |         torch.set_default_dtype(self.saved_dtype)
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:20:9: D105 Missing docstring in magic method
   |
18 |         torch.set_default_dtype(self.dtype)
19 | 
20 |     def __exit__(self, exc_type, exc_value, traceback):
   |         ^^^^^^^^ D105
21 |         torch.set_default_dtype(self.saved_dtype)
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:25:5: D200 One-line docstring should fit on one line
   |
24 |   def rot_z(gamma):
25 |       """Rotation around Z axis
   |  _____^
26 | |     """
   | |_______^ D200
27 |       if not torch.is_tensor(gamma):
28 |           gamma = torch.tensor(gamma, dtype=torch.get_default_dtype())
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:25:5: D400 First line should end with a period
   |
24 |   def rot_z(gamma):
25 |       """Rotation around Z axis
   |  _____^
26 | |     """
   | |_______^ D400
27 |       if not torch.is_tensor(gamma):
28 |           gamma = torch.tensor(gamma, dtype=torch.get_default_dtype())
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:25:5: D415 First line should end with a period, question mark, or exclamation point
   |
24 |   def rot_z(gamma):
25 |       """Rotation around Z axis
   |  _____^
26 | |     """
   | |_______^ D415
27 |       if not torch.is_tensor(gamma):
28 |           gamma = torch.tensor(gamma, dtype=torch.get_default_dtype())
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:40:5: D200 One-line docstring should fit on one line
   |
39 |   def rot_y(beta):
40 |       """Rotation around Y axis
   |  _____^
41 | |     """
   | |_______^ D200
42 |       if not torch.is_tensor(beta):
43 |           beta = torch.tensor(beta, dtype=torch.get_default_dtype())
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:40:5: D400 First line should end with a period
   |
39 |   def rot_y(beta):
40 |       """Rotation around Y axis
   |  _____^
41 | |     """
   | |_______^ D400
42 |       if not torch.is_tensor(beta):
43 |           beta = torch.tensor(beta, dtype=torch.get_default_dtype())
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:40:5: D415 First line should end with a period, question mark, or exclamation point
   |
39 |   def rot_y(beta):
40 |       """Rotation around Y axis
   |  _____^
41 | |     """
   | |_______^ D415
42 |       if not torch.is_tensor(beta):
43 |           beta = torch.tensor(beta, dtype=torch.get_default_dtype())
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:55:5: D200 One-line docstring should fit on one line
   |
54 |   def rot(alpha, beta, gamma):
55 |       """ZYZ Eurler angles rotation
   |  _____^
56 | |     """
   | |_______^ D200
57 |       return rot_z(alpha) @ rot_y(beta) @ rot_z(gamma)
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:55:5: D400 First line should end with a period
   |
54 |   def rot(alpha, beta, gamma):
55 |       """ZYZ Eurler angles rotation
   |  _____^
56 | |     """
   | |_______^ D400
57 |       return rot_z(alpha) @ rot_y(beta) @ rot_z(gamma)
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:55:5: D415 First line should end with a period, question mark, or exclamation point
   |
54 |   def rot(alpha, beta, gamma):
55 |       """ZYZ Eurler angles rotation
   |  _____^
56 | |     """
   | |_______^ D415
57 |       return rot_z(alpha) @ rot_y(beta) @ rot_z(gamma)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:61:5: D200 One-line docstring should fit on one line
   |
60 |   def x_to_alpha_beta(x):
61 |       """Convert point (x, y, z) on the sphere into (alpha, beta)
   |  _____^
62 | |     """
   | |_______^ D200
63 |       if not torch.is_tensor(x):
64 |           x = torch.tensor(x, dtype=torch.get_default_dtype())
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:61:5: D400 First line should end with a period
   |
60 |   def x_to_alpha_beta(x):
61 |       """Convert point (x, y, z) on the sphere into (alpha, beta)
   |  _____^
62 | |     """
   | |_______^ D400
63 |       if not torch.is_tensor(x):
64 |           x = torch.tensor(x, dtype=torch.get_default_dtype())
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:61:5: D415 First line should end with a period, question mark, or exclamation point
   |
60 |   def x_to_alpha_beta(x):
61 |       """Convert point (x, y, z) on the sphere into (alpha, beta)
   |  _____^
62 | |     """
   | |_______^ D415
63 |       if not torch.is_tensor(x):
64 |           x = torch.tensor(x, dtype=torch.get_default_dtype())
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:72:1: ERA001 Found commented-out code
   |
71 | # These functions (x_to_alpha_beta and rot) satisfies that
72 | # rot(*x_to_alpha_beta([x, y, z]), 0) @ np.array([[0], [0], [1]])
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
73 | # is proportional to
74 | # [x, y, z]
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:74:1: ERA001 Found commented-out code
   |
72 | # rot(*x_to_alpha_beta([x, y, z]), 0) @ np.array([[0], [0], [1]])
73 | # is proportional to
74 | # [x, y, z]
   | ^^^^^^^^^^^ ERA001
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:78:5: D205 1 blank line required between summary line and description
   |
77 |   def irr_repr(order, alpha, beta, gamma, dtype=None):
78 |       """Irreducible representation of SO3
   |  _____^
79 | |     - compatible with compose and spherical_harmonics
80 | |     """
   | |_______^ D205
81 |       # from from_lielearn_SO3.wigner_d import wigner_D_matrix
82 |       from lie_learn.representations.SO3.wigner_d import wigner_D_matrix
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:78:5: D400 First line should end with a period
   |
77 |   def irr_repr(order, alpha, beta, gamma, dtype=None):
78 |       """Irreducible representation of SO3
   |  _____^
79 | |     - compatible with compose and spherical_harmonics
80 | |     """
   | |_______^ D400
81 |       # from from_lielearn_SO3.wigner_d import wigner_D_matrix
82 |       from lie_learn.representations.SO3.wigner_d import wigner_D_matrix
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:78:5: D415 First line should end with a period, question mark, or exclamation point
   |
77 |   def irr_repr(order, alpha, beta, gamma, dtype=None):
78 |       """Irreducible representation of SO3
   |  _____^
79 | |     - compatible with compose and spherical_harmonics
80 | |     """
   | |_______^ D415
81 |       # from from_lielearn_SO3.wigner_d import wigner_D_matrix
82 |       from lie_learn.representations.SO3.wigner_d import wigner_D_matrix
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:81:5: ERA001 Found commented-out code
   |
79 |     - compatible with compose and spherical_harmonics
80 |     """
81 |     # from from_lielearn_SO3.wigner_d import wigner_D_matrix
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
82 |     from lie_learn.representations.SO3.wigner_d import wigner_D_matrix
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:86:5: ERA001 Found commented-out code
   |
84 |     # if order == 1:
85 |     #     # change of basis to have vector_field[x, y, z] = [vx, vy, vz]
86 |     #     A = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
87 |     #     return A @ wigner_D_matrix(1, alpha, beta, gamma) @ A.T
88 |     # TODO (non-essential): try to do everything in torch
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:87:5: ERA001 Found commented-out code
   |
85 |     #     # change of basis to have vector_field[x, y, z] = [vx, vy, vz]
86 |     #     A = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
87 |     #     return A @ wigner_D_matrix(1, alpha, beta, gamma) @ A.T
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
88 |     # TODO (non-essential): try to do everything in torch
89 |     # return torch.tensor(wigner_D_matrix(torch.tensor(order), alpha, beta, gamma), dtype=torch.get_default_dtype() if dtype is None else dtype)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:88:7: TD003 Missing issue link on the line following this TODO
   |
86 |     #     A = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
87 |     #     return A @ wigner_D_matrix(1, alpha, beta, gamma) @ A.T
88 |     # TODO (non-essential): try to do everything in torch
   |       ^^^^ TD003
89 |     # return torch.tensor(wigner_D_matrix(torch.tensor(order), alpha, beta, gamma), dtype=torch.get_default_dtype() if dtype is None else dtype)
90 |     return torch.tensor(
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:88:7: FIX002 Line contains TODO, consider resolving the issue
   |
86 |     #     A = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
87 |     #     return A @ wigner_D_matrix(1, alpha, beta, gamma) @ A.T
88 |     # TODO (non-essential): try to do everything in torch
   |       ^^^^ FIX002
89 |     # return torch.tensor(wigner_D_matrix(torch.tensor(order), alpha, beta, gamma), dtype=torch.get_default_dtype() if dtype is None else dtype)
90 |     return torch.tensor(
   |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:89:5: ERA001 Found commented-out code
   |
87 |     #     return A @ wigner_D_matrix(1, alpha, beta, gamma) @ A.T
88 |     # TODO (non-essential): try to do everything in torch
89 |     # return torch.tensor(wigner_D_matrix(torch.tensor(order), alpha, beta, gamma), dtype=torch.get_default_dtype() if dtype is None else dtype)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
90 |     return torch.tensor(
91 |         wigner_D_matrix(order, np.array(alpha), np.array(beta), np.array(gamma)),
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:101:1: ERA001 Found commented-out code
    |
 99 | #     - compatible with irr_repr and compose
100 | #     """
101 | #     # from from_lielearn_SO3.spherical_harmonics import sh
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
102 | #     from lie_learn.representations.SO3.spherical_harmonics import sh  # real valued by default
103 | #
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:102:1: ERA001 Found commented-out code
    |
100 | #     """
101 | #     # from from_lielearn_SO3.spherical_harmonics import sh
102 | #     from lie_learn.representations.SO3.spherical_harmonics import sh  # real valued by default
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
103 | #
104 | #     ###################################################################################################################
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:113:1: ERA001 Found commented-out code
    |
111 | #     # this function therefore (probably) has the following convention for alpha and beta:
112 | #     # beta = pi - theta; ranging from 0(South Pole, (X, Y, Z) = (0, 0, -1)) to pi(North Pole, (X, Y, Z) = (0, 0, 1)).
113 | #     # alpha = phi
    | ^^^^^^^^^^^^^^^^^^^ ERA001
114 | #     #
115 | #     ###################################################################################################################
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:117:1: ERA001 Found commented-out code
    |
115 | #     ###################################################################################################################
116 | #
117 | #     Y = torch.tensor([sh(order, m, theta=math.pi - beta, phi=alpha) for m in range(-order, order + 1)], dtype=torch.get_default_dtype() if dtype is None else dtype)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
118 | #     # if order == 1:
119 | #     #     # change of basis to have vector_field[x, y, z] = [vx, vy, vz]
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:120:1: ERA001 Found commented-out code
    |
118 | #     # if order == 1:
119 | #     #     # change of basis to have vector_field[x, y, z] = [vx, vy, vz]
120 | #     #     A = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
121 | #     #     return A @ Y
122 | #     return Y
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:121:1: ERA001 Found commented-out code
    |
119 | #     #     # change of basis to have vector_field[x, y, z] = [vx, vy, vz]
120 | #     #     A = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
121 | #     #     return A @ Y
    | ^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
122 | #     return Y
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:122:1: ERA001 Found commented-out code
    |
120 | #     #     A = np.array([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
121 | #     #     return A @ Y
122 | #     return Y
    | ^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:125:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
125 | def compose(a1, b1, c1, a2, b2, c2):
    |     ^^^^^^^ PLR0913
126 |     """(a, b, c) = (a1, b1, c1) composed with (a2, b2, c2)
127 |     """
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:126:5: D200 One-line docstring should fit on one line
    |
125 |   def compose(a1, b1, c1, a2, b2, c2):
126 |       """(a, b, c) = (a1, b1, c1) composed with (a2, b2, c2)
    |  _____^
127 | |     """
    | |_______^ D200
128 |       comp = rot(a1, b1, c1) @ rot(a2, b2, c2)
129 |       xyz = comp @ torch.tensor([0, 0, 1.0])
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:126:5: D400 First line should end with a period
    |
125 |   def compose(a1, b1, c1, a2, b2, c2):
126 |       """(a, b, c) = (a1, b1, c1) composed with (a2, b2, c2)
    |  _____^
127 | |     """
    | |_______^ D400
128 |       comp = rot(a1, b1, c1) @ rot(a2, b2, c2)
129 |       xyz = comp @ torch.tensor([0, 0, 1.0])
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:126:5: D401 First line of docstring should be in imperative mood: "(a, b, c) = (a1, b1, c1) composed with (a2, b2, c2)"
    |
125 |   def compose(a1, b1, c1, a2, b2, c2):
126 |       """(a, b, c) = (a1, b1, c1) composed with (a2, b2, c2)
    |  _____^
127 | |     """
    | |_______^ D401
128 |       comp = rot(a1, b1, c1) @ rot(a2, b2, c2)
129 |       xyz = comp @ torch.tensor([0, 0, 1.0])
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:126:5: D415 First line should end with a period, question mark, or exclamation point
    |
125 |   def compose(a1, b1, c1, a2, b2, c2):
126 |       """(a, b, c) = (a1, b1, c1) composed with (a2, b2, c2)
    |  _____^
127 | |     """
    | |_______^ D415
128 |       comp = rot(a1, b1, c1) @ rot(a2, b2, c2)
129 |       xyz = comp @ torch.tensor([0, 0, 1.0])
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:136:5: D103 Missing docstring in public function
    |
136 | def kron(x, y):
    |     ^^^^ D103
137 |     assert x.ndimension() == 2
138 |     assert y.ndimension() == 2
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:137:5: S101 Use of `assert` detected
    |
136 | def kron(x, y):
137 |     assert x.ndimension() == 2
    |     ^^^^^^ S101
138 |     assert y.ndimension() == 2
139 |     return torch.einsum("ij,kl->ikjl", (x, y)).view(
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:137:30: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
136 | def kron(x, y):
137 |     assert x.ndimension() == 2
    |                              ^ PLR2004
138 |     assert y.ndimension() == 2
139 |     return torch.einsum("ij,kl->ikjl", (x, y)).view(
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:138:5: S101 Use of `assert` detected
    |
136 | def kron(x, y):
137 |     assert x.ndimension() == 2
138 |     assert y.ndimension() == 2
    |     ^^^^^^ S101
139 |     return torch.einsum("ij,kl->ikjl", (x, y)).view(
140 |         x.size(0) * y.size(0), x.size(1) * y.size(1)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:138:30: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
136 | def kron(x, y):
137 |     assert x.ndimension() == 2
138 |     assert y.ndimension() == 2
    |                              ^ PLR2004
139 |     return torch.einsum("ij,kl->ikjl", (x, y)).view(
140 |         x.size(0) * y.size(0), x.size(1) * y.size(1)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:150:5: D205 1 blank line required between summary line and description
    |
149 |   def xyz_vector_basis_to_spherical_basis():
150 |       """To convert a vector [x, y, z] transforming with rot(a, b, c)
    |  _____^
151 | |     into a vector transforming with irr_repr(1, a, b, c)
152 | |     see assert for usage
153 | |     """
    | |_______^ D205
154 |       with torch_default_dtype(torch.float64):
155 |           A = torch.tensor([[0, 1, 0], [0, 0, 1], [1, 0, 0]], dtype=torch.float64)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:150:5: D400 First line should end with a period
    |
149 |   def xyz_vector_basis_to_spherical_basis():
150 |       """To convert a vector [x, y, z] transforming with rot(a, b, c)
    |  _____^
151 | |     into a vector transforming with irr_repr(1, a, b, c)
152 | |     see assert for usage
153 | |     """
    | |_______^ D400
154 |       with torch_default_dtype(torch.float64):
155 |           A = torch.tensor([[0, 1, 0], [0, 0, 1], [1, 0, 0]], dtype=torch.float64)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:150:5: D415 First line should end with a period, question mark, or exclamation point
    |
149 |   def xyz_vector_basis_to_spherical_basis():
150 |       """To convert a vector [x, y, z] transforming with rot(a, b, c)
    |  _____^
151 | |     into a vector transforming with irr_repr(1, a, b, c)
152 | |     see assert for usage
153 | |     """
    | |_______^ D415
154 |       with torch_default_dtype(torch.float64):
155 |           A = torch.tensor([[0, 1, 0], [0, 0, 1], [1, 0, 0]], dtype=torch.float64)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:155:9: N806 Variable `A` in function should be lowercase
    |
153 |     """
154 |     with torch_default_dtype(torch.float64):
155 |         A = torch.tensor([[0, 1, 0], [0, 0, 1], [1, 0, 0]], dtype=torch.float64)
    |         ^ N806
156 |         assert all(
157 |             torch.allclose(irr_repr(1, a, b, c) @ A, A @ rot(a, b, c))
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:156:9: S101 Use of `assert` detected
    |
154 |     with torch_default_dtype(torch.float64):
155 |         A = torch.tensor([[0, 1, 0], [0, 0, 1], [1, 0, 0]], dtype=torch.float64)
156 |         assert all(
    |         ^^^^^^ S101
157 |             torch.allclose(irr_repr(1, a, b, c) @ A, A @ rot(a, b, c))
158 |             for a, b, c in torch.rand(10, 3)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:164:5: D205 1 blank line required between summary line and description
    |
163 |   def tensor3x3_repr(a, b, c):
164 |       """Representation of 3x3 tensors
    |  _____^
165 | |     T --> R T R^t
166 | |     """
    | |_______^ D205
167 |       r = rot(a, b, c)
168 |       return kron(r, r)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:164:5: D400 First line should end with a period
    |
163 |   def tensor3x3_repr(a, b, c):
164 |       """Representation of 3x3 tensors
    |  _____^
165 | |     T --> R T R^t
166 | |     """
    | |_______^ D400
167 |       r = rot(a, b, c)
168 |       return kron(r, r)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:164:5: D415 First line should end with a period, question mark, or exclamation point
    |
163 |   def tensor3x3_repr(a, b, c):
164 |       """Representation of 3x3 tensors
    |  _____^
165 | |     T --> R T R^t
166 | |     """
    | |_______^ D415
167 |       r = rot(a, b, c)
168 |       return kron(r, r)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:172:5: D205 1 blank line required between summary line and description
    |
171 |   def tensor3x3_repr_basis_to_spherical_basis():
172 |       """To convert a 3x3 tensor transforming with tensor3x3_repr(a, b, c)
    |  _____^
173 | |     into its 1 + 3 + 5 component transforming with irr_repr(0, a, b, c), irr_repr(1, a, b, c), irr_repr(3, a, b, c)
174 | |     see assert for usage
175 | |     """
    | |_______^ D205
176 |       with torch_default_dtype(torch.float64):
177 |           to1 = torch.tensor(
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:172:5: D400 First line should end with a period
    |
171 |   def tensor3x3_repr_basis_to_spherical_basis():
172 |       """To convert a 3x3 tensor transforming with tensor3x3_repr(a, b, c)
    |  _____^
173 | |     into its 1 + 3 + 5 component transforming with irr_repr(0, a, b, c), irr_repr(1, a, b, c), irr_repr(3, a, b, c)
174 | |     see assert for usage
175 | |     """
    | |_______^ D400
176 |       with torch_default_dtype(torch.float64):
177 |           to1 = torch.tensor(
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:172:5: D415 First line should end with a period, question mark, or exclamation point
    |
171 |   def tensor3x3_repr_basis_to_spherical_basis():
172 |       """To convert a 3x3 tensor transforming with tensor3x3_repr(a, b, c)
    |  _____^
173 | |     into its 1 + 3 + 5 component transforming with irr_repr(0, a, b, c), irr_repr(1, a, b, c), irr_repr(3, a, b, c)
174 | |     see assert for usage
175 | |     """
    | |_______^ D415
176 |       with torch_default_dtype(torch.float64):
177 |           to1 = torch.tensor(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:183:9: S101 Use of `assert` detected
    |
181 |             dtype=torch.get_default_dtype(),
182 |         )
183 |         assert all(
    |         ^^^^^^ S101
184 |             torch.allclose(irr_repr(0, a, b, c) @ to1, to1 @ tensor3x3_repr(a, b, c))
185 |             for a, b, c in torch.rand(10, 3)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:196:9: S101 Use of `assert` detected
    |
194 |             dtype=torch.get_default_dtype(),
195 |         )
196 |         assert all(
    |         ^^^^^^ S101
197 |             torch.allclose(irr_repr(1, a, b, c) @ to3, to3 @ tensor3x3_repr(a, b, c))
198 |             for a, b, c in torch.rand(10, 3)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:211:9: S101 Use of `assert` detected
    |
209 |             dtype=torch.get_default_dtype(),
210 |         )
211 |         assert all(
    |         ^^^^^^ S101
212 |             torch.allclose(irr_repr(2, a, b, c) @ to5, to5 @ tensor3x3_repr(a, b, c))
213 |             for a, b, c in torch.rand(10, 3)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:229:5: D200 One-line docstring should fit on one line
    |
228 |   def test_is_representation(rep):
229 |       """rep(Z(a1) Y(b1) Z(c1) Z(a2) Y(b2) Z(c2)) = rep(Z(a1) Y(b1) Z(c1)) rep(Z(a2) Y(b2) Z(c2))
    |  _____^
230 | |     """
    | |_______^ D200
231 |       with torch_default_dtype(torch.float64):
232 |           a1, b1, c1, a2, b2, c2 = torch.rand(6)
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:229:5: D400 First line should end with a period
    |
228 |   def test_is_representation(rep):
229 |       """rep(Z(a1) Y(b1) Z(c1) Z(a2) Y(b2) Z(c2)) = rep(Z(a1) Y(b1) Z(c1)) rep(Z(a2) Y(b2) Z(c2))
    |  _____^
230 | |     """
    | |_______^ D400
231 |       with torch_default_dtype(torch.float64):
232 |           a1, b1, c1, a2, b2, c2 = torch.rand(6)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:229:5: D415 First line should end with a period, question mark, or exclamation point
    |
228 |   def test_is_representation(rep):
229 |       """rep(Z(a1) Y(b1) Z(c1) Z(a2) Y(b2) Z(c2)) = rep(Z(a1) Y(b1) Z(c1)) rep(Z(a2) Y(b2) Z(c2))
    |  _____^
230 | |     """
    | |_______^ D415
231 |       with torch_default_dtype(torch.float64):
232 |           a1, b1, c1, a2, b2, c2 = torch.rand(6)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:243:9: T201 `print` found
    |
242 |         d, r = (r - r_).abs().max(), r.abs().max()
243 |         print(d.item(), r.item())
    |         ^^^^^ T201
244 |         assert d < 1e-10 * r, d / r
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:244:9: S101 Use of `assert` detected
    |
242 |         d, r = (r - r_).abs().max(), r.abs().max()
243 |         print(d.item(), r.item())
244 |         assert d < 1e-10 * r, d / r
    |         ^^^^^^ S101
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:247:5: ANN202 Missing return type annotation for private function `_test_spherical_harmonics`
    |
247 | def _test_spherical_harmonics(order):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
248 |     """This test tests that
249 |     - irr_repr
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:248:5: D205 1 blank line required between summary line and description
    |
247 |   def _test_spherical_harmonics(order):
248 |       """This test tests that
    |  _____^
249 | |     - irr_repr
250 | |     - compose
251 | |     - spherical_harmonics
252 | |     are compatible
253 | | 
254 | |     Y(Z(alpha) Y(beta) Z(gamma) x) = D(alpha, beta, gamma) Y(x)
255 | |     with x = Z(a) Y(b) eta
256 | |     """
    | |_______^ D205
257 |       with torch_default_dtype(torch.float64):
258 |           a, b = torch.rand(2)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\SO3.py:248:5: D400 First line should end with a period
    |
247 |   def _test_spherical_harmonics(order):
248 |       """This test tests that
    |  _____^
249 | |     - irr_repr
250 | |     - compose
251 | |     - spherical_harmonics
252 | |     are compatible
253 | | 
254 | |     Y(Z(alpha) Y(beta) Z(gamma) x) = D(alpha, beta, gamma) Y(x)
255 | |     with x = Z(a) Y(b) eta
256 | |     """
    | |_______^ D400
257 |       with torch_default_dtype(torch.float64):
258 |           a, b = torch.rand(2)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\SO3.py:248:5: D401 First line of docstring should be in imperative mood: "This test tests that"
    |
247 |   def _test_spherical_harmonics(order):
248 |       """This test tests that
    |  _____^
249 | |     - irr_repr
250 | |     - compose
251 | |     - spherical_harmonics
252 | |     are compatible
253 | | 
254 | |     Y(Z(alpha) Y(beta) Z(gamma) x) = D(alpha, beta, gamma) Y(x)
255 | |     with x = Z(a) Y(b) eta
256 | |     """
    | |_______^ D401
257 |       with torch_default_dtype(torch.float64):
258 |           a, b = torch.rand(2)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:248:5: D404 First word of the docstring should not be "This"
    |
247 |   def _test_spherical_harmonics(order):
248 |       """This test tests that
    |  _____^
249 | |     - irr_repr
250 | |     - compose
251 | |     - spherical_harmonics
252 | |     are compatible
253 | | 
254 | |     Y(Z(alpha) Y(beta) Z(gamma) x) = D(alpha, beta, gamma) Y(x)
255 | |     with x = Z(a) Y(b) eta
256 | |     """
    | |_______^ D404
257 |       with torch_default_dtype(torch.float64):
258 |           a, b = torch.rand(2)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:248:5: D415 First line should end with a period, question mark, or exclamation point
    |
247 |   def _test_spherical_harmonics(order):
248 |       """This test tests that
    |  _____^
249 | |     - irr_repr
250 | |     - compose
251 | |     - spherical_harmonics
252 | |     are compatible
253 | | 
254 | |     Y(Z(alpha) Y(beta) Z(gamma) x) = D(alpha, beta, gamma) Y(x)
255 | |     with x = Z(a) Y(b) eta
256 | |     """
    | |_______^ D415
257 |       with torch_default_dtype(torch.float64):
258 |           a, b = torch.rand(2)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\SO3.py:262:9: N806 Variable `Yrx` in function should be lowercase
    |
261 |         ra, rb, _ = compose(alpha, beta, gamma, a, b, 0)
262 |         Yrx = spherical_harmonics(order, ra, rb)
    |         ^^^ N806
263 | 
264 |         Y = spherical_harmonics(order, a, b)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:262:15: F821 Undefined name `spherical_harmonics`
    |
261 |         ra, rb, _ = compose(alpha, beta, gamma, a, b, 0)
262 |         Yrx = spherical_harmonics(order, ra, rb)
    |               ^^^^^^^^^^^^^^^^^^^ F821
263 | 
264 |         Y = spherical_harmonics(order, a, b)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:264:9: N806 Variable `Y` in function should be lowercase
    |
262 |         Yrx = spherical_harmonics(order, ra, rb)
263 | 
264 |         Y = spherical_harmonics(order, a, b)
    |         ^ N806
265 |         DrY = irr_repr(order, alpha, beta, gamma) @ Y
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:264:13: F821 Undefined name `spherical_harmonics`
    |
262 |         Yrx = spherical_harmonics(order, ra, rb)
263 | 
264 |         Y = spherical_harmonics(order, a, b)
    |             ^^^^^^^^^^^^^^^^^^^ F821
265 |         DrY = irr_repr(order, alpha, beta, gamma) @ Y
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:265:9: N806 Variable `DrY` in function should be lowercase
    |
264 |         Y = spherical_harmonics(order, a, b)
265 |         DrY = irr_repr(order, alpha, beta, gamma) @ Y
    |         ^^^ N806
266 | 
267 |         d, r = (Yrx - DrY).abs().max(), Y.abs().max()
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:268:9: T201 `print` found
    |
267 |         d, r = (Yrx - DrY).abs().max(), Y.abs().max()
268 |         print(d.item(), r.item())
    |         ^^^^^ T201
269 |         assert d < 1e-10 * r, d / r
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:269:9: S101 Use of `assert` detected
    |
267 |         d, r = (Yrx - DrY).abs().max(), Y.abs().max()
268 |         print(d.item(), r.item())
269 |         assert d < 1e-10 * r, d / r
    |         ^^^^^^ S101
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:272:5: ANN202 Missing return type annotation for private function `_test_change_basis_wigner_to_rot`
    |
272 | def _test_change_basis_wigner_to_rot():
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
273 |     # from from_lielearn_SO3.wigner_d import wigner_D_matrix
274 |     from lie_learn.representations.SO3.wigner_d import wigner_D_matrix
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:273:5: ERA001 Found commented-out code
    |
272 | def _test_change_basis_wigner_to_rot():
273 |     # from from_lielearn_SO3.wigner_d import wigner_D_matrix
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
274 |     from lie_learn.representations.SO3.wigner_d import wigner_D_matrix
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\SO3.py:277:9: N806 Variable `A` in function should be lowercase
    |
276 |     with torch_default_dtype(torch.float64):
277 |         A = torch.tensor([[0, 1, 0], [0, 0, 1], [1, 0, 0]], dtype=torch.float64)
    |         ^ N806
278 | 
279 |         a, b, c = torch.rand(3)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:285:9: T201 `print` found
    |
284 |         d = (r1 - r2).abs().max()
285 |         print(d.item())
    |         ^^^^^ T201
286 |         assert d < 1e-10
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:286:9: S101 Use of `assert` detected
    |
284 |         d = (r1 - r2).abs().max()
285 |         print(d.item())
286 |         assert d < 1e-10
    |         ^^^^^^ S101
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:286:20: PLR2004 Magic value used in comparison, consider replacing `1e-10` with a constant variable
    |
284 |         d = (r1 - r2).abs().max()
285 |         print(d.item())
286 |         assert d < 1e-10
    |                    ^^^^^ PLR2004
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:292:5: T201 `print` found
    |
290 |     from functools import partial
291 | 
292 |     print("Change of basis")
    |     ^^^^^ T201
293 |     xyz_vector_basis_to_spherical_basis()
294 |     test_is_representation(tensor3x3_repr)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:297:5: T201 `print` found
    |
295 |     tensor3x3_repr_basis_to_spherical_basis()
296 | 
297 |     print("Change of basis Wigner <-> rot")
    |     ^^^^^ T201
298 |     _test_change_basis_wigner_to_rot()
299 |     _test_change_basis_wigner_to_rot()
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:302:5: T201 `print` found
    |
300 |     _test_change_basis_wigner_to_rot()
301 | 
302 |     print("Spherical harmonics are solution of Y(rx) = D(r) Y(x)")
    |     ^^^^^ T201
303 |     for l in range(7):
304 |         _test_spherical_harmonics(l)
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:303:9: E741 Ambiguous variable name: `l`
    |
302 |     print("Spherical harmonics are solution of Y(rx) = D(r) Y(x)")
303 |     for l in range(7):
    |         ^ E741
304 |         _test_spherical_harmonics(l)
    |

src\stk_search\geom3d\models\from_se3cnn\SO3.py:306:5: T201 `print` found
    |
304 |         _test_spherical_harmonics(l)
305 | 
306 |     print("Irreducible repr are indeed representations")
    |     ^^^^^ T201
307 |     for l in range(7):
308 |         test_is_representation(partial(irr_repr, l))
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\SO3.py:307:9: E741 Ambiguous variable name: `l`
    |
306 |     print("Irreducible repr are indeed representations")
307 |     for l in range(7):
    |         ^ E741
308 |         test_is_representation(partial(irr_repr, l))
    |

src\stk_search\geom3d\models\from_se3cnn\__init__.py:1:1: D104 Missing docstring in public package
src\stk_search\geom3d\models\from_se3cnn\cache_file.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Cache in files
2 | | """
  | |___^ D200
3 |   import gzip
4 |   import os
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:1:1: D400 First line should end with a period
  |
1 | / """Cache in files
2 | | """
  | |___^ D400
3 |   import gzip
4 |   import os
  |
  = help: Add period

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """Cache in files
2 | | """
  | |___^ D415
3 |   import gzip
4 |   import os
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:10:5: N802 Function name `LOCK_EX` should be lowercase
   |
10 | def LOCK_EX():
   |     ^^^^^^^ N802
11 |     return 0
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:10:5: D103 Missing docstring in public function
   |
10 | def LOCK_EX():
   |     ^^^^^^^ D103
11 |     return 0
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:13:5: D103 Missing docstring in public function
   |
11 |     return 0
12 | 
13 | def lockf(fd, operation, length=0, start=0, whence=0):
   |     ^^^^^ D103
14 |     pass
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:13:11: ARG001 Unused function argument: `fd`
   |
11 |     return 0
12 | 
13 | def lockf(fd, operation, length=0, start=0, whence=0):
   |           ^^ ARG001
14 |     pass
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:13:15: ARG001 Unused function argument: `operation`
   |
11 |     return 0
12 | 
13 | def lockf(fd, operation, length=0, start=0, whence=0):
   |               ^^^^^^^^^ ARG001
14 |     pass
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:13:26: ARG001 Unused function argument: `length`
   |
11 |     return 0
12 | 
13 | def lockf(fd, operation, length=0, start=0, whence=0):
   |                          ^^^^^^ ARG001
14 |     pass
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:13:36: ARG001 Unused function argument: `start`
   |
11 |     return 0
12 | 
13 | def lockf(fd, operation, length=0, start=0, whence=0):
   |                                    ^^^^^ ARG001
14 |     pass
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:13:45: ARG001 Unused function argument: `whence`
   |
11 |     return 0
12 | 
13 | def lockf(fd, operation, length=0, start=0, whence=0):
   |                                             ^^^^^^ ARG001
14 |     pass
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:17:5: D200 One-line docstring should fit on one line
   |
16 |   class FileSystemMutex:
17 |       """Mutual exclusion of different **processes** using the file system
   |  _____^
18 | |     """
   | |_______^ D200
19 |   
20 |       def __init__(self, filename):
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:17:5: D400 First line should end with a period
   |
16 |   class FileSystemMutex:
17 |       """Mutual exclusion of different **processes** using the file system
   |  _____^
18 | |     """
   | |_______^ D400
19 |   
20 |       def __init__(self, filename):
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:17:5: D415 First line should end with a period, question mark, or exclamation point
   |
16 |   class FileSystemMutex:
17 |       """Mutual exclusion of different **processes** using the file system
   |  _____^
18 | |     """
   | |_______^ D415
19 |   
20 |       def __init__(self, filename):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:20:9: ANN204 Missing return type annotation for special method `__init__`
   |
18 |     """
19 | 
20 |     def __init__(self, filename):
   |         ^^^^^^^^ ANN204
21 |         self.handle = None
22 |         self.filename = filename
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:20:9: D107 Missing docstring in `__init__`
   |
18 |     """
19 | 
20 |     def __init__(self, filename):
   |         ^^^^^^^^ D107
21 |         self.handle = None
22 |         self.filename = filename
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:25:9: D205 1 blank line required between summary line and description
   |
24 |       def acquire(self):
25 |           """Locks the mutex
   |  _________^
26 | |         if it is already locked, it waits (blocking function)
27 | |         """
   | |___________^ D205
28 |           self.handle = open(self.filename, "w")
29 |           lockf(self.handle, LOCK_EX)
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:25:9: D400 First line should end with a period
   |
24 |       def acquire(self):
25 |           """Locks the mutex
   |  _________^
26 | |         if it is already locked, it waits (blocking function)
27 | |         """
   | |___________^ D400
28 |           self.handle = open(self.filename, "w")
29 |           lockf(self.handle, LOCK_EX)
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:25:9: D415 First line should end with a period, question mark, or exclamation point
   |
24 |       def acquire(self):
25 |           """Locks the mutex
   |  _________^
26 | |         if it is already locked, it waits (blocking function)
27 | |         """
   | |___________^ D415
28 |           self.handle = open(self.filename, "w")
29 |           lockf(self.handle, LOCK_EX)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:28:23: SIM115 Use context handler for opening files
   |
26 |         if it is already locked, it waits (blocking function)
27 |         """
28 |         self.handle = open(self.filename, "w")
   |                       ^^^^ SIM115
29 |         lockf(self.handle, LOCK_EX)
30 |         self.handle.write(f"{os.getpid()}\n")
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:28:23: PTH123 `open()` should be replaced by `Path.open()`
   |
26 |         if it is already locked, it waits (blocking function)
27 |         """
28 |         self.handle = open(self.filename, "w")
   |                       ^^^^ PTH123
29 |         lockf(self.handle, LOCK_EX)
30 |         self.handle.write(f"{os.getpid()}\n")
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:34:9: D200 One-line docstring should fit on one line
   |
33 |       def release(self):
34 |           """Unlock the mutex
   |  _________^
35 | |         """
   | |___________^ D200
36 |           if self.handle is None:
37 |               raise RuntimeError
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:34:9: D400 First line should end with a period
   |
33 |       def release(self):
34 |           """Unlock the mutex
   |  _________^
35 | |         """
   | |___________^ D400
36 |           if self.handle is None:
37 |               raise RuntimeError
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:34:9: D415 First line should end with a period, question mark, or exclamation point
   |
33 |       def release(self):
34 |           """Unlock the mutex
   |  _________^
35 | |         """
   | |___________^ D415
36 |           if self.handle is None:
37 |               raise RuntimeError
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:42:9: ANN204 Missing return type annotation for special method `__enter__`
   |
40 |         self.handle = None
41 | 
42 |     def __enter__(self):
   |         ^^^^^^^^^ ANN204
43 |         self.acquire()
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:42:9: D105 Missing docstring in magic method
   |
40 |         self.handle = None
41 | 
42 |     def __enter__(self):
   |         ^^^^^^^^^ D105
43 |         self.acquire()
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:45:9: ANN204 Missing return type annotation for special method `__exit__`
   |
43 |         self.acquire()
44 | 
45 |     def __exit__(self, exc_type, exc_value, traceback):
   |         ^^^^^^^^ ANN204
46 |         self.release()
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:45:9: D105 Missing docstring in magic method
   |
43 |         self.acquire()
44 | 
45 |     def __exit__(self, exc_type, exc_value, traceback):
   |         ^^^^^^^^ D105
46 |         self.release()
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:50:5: D400 First line should end with a period
   |
49 |   def cached_dirpklgz(dirname, maxsize=128):
50 |       """Cache a function with a directory
   |  _____^
51 | | 
52 | |     :param dirname: the directory path
53 | |     :param maxsize: maximum size of the RAM cache (there is no limit for the directory cache)
54 | |     """
   | |_______^ D400
55 |   
56 |       def decorator(func):
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:50:5: D415 First line should end with a period, question mark, or exclamation point
   |
49 |   def cached_dirpklgz(dirname, maxsize=128):
50 |       """Cache a function with a directory
   |  _____^
51 | | 
52 | |     :param dirname: the directory path
53 | |     :param maxsize: maximum size of the RAM cache (there is no limit for the directory cache)
54 | |     """
   | |_______^ D415
55 |   
56 |       def decorator(func):
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:56:9: ANN202 Missing return type annotation for private function `decorator`
   |
54 |     """
55 | 
56 |     def decorator(func):
   |         ^^^^^^^^^ ANN202
57 |         """The actual decorator
58 |         """
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:57:9: D200 One-line docstring should fit on one line
   |
56 |       def decorator(func):
57 |           """The actual decorator
   |  _________^
58 | |         """
   | |___________^ D200
59 |   
60 |           @lru_cache(maxsize=maxsize)
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:57:9: D400 First line should end with a period
   |
56 |       def decorator(func):
57 |           """The actual decorator
   |  _________^
58 | |         """
   | |___________^ D400
59 |   
60 |           @lru_cache(maxsize=maxsize)
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:57:9: D401 First line of docstring should be in imperative mood: "The actual decorator"
   |
56 |       def decorator(func):
57 |           """The actual decorator
   |  _________^
58 | |         """
   | |___________^ D401
59 |   
60 |           @lru_cache(maxsize=maxsize)
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:57:9: D415 First line should end with a period, question mark, or exclamation point
   |
56 |       def decorator(func):
57 |           """The actual decorator
   |  _________^
58 | |         """
   | |___________^ D415
59 |   
60 |           @lru_cache(maxsize=maxsize)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:62:13: ANN202 Missing return type annotation for private function `wrapper`
   |
60 |         @lru_cache(maxsize=maxsize)
61 |         @wraps(func)
62 |         def wrapper(*args, **kwargs):
   |             ^^^^^^^ ANN202
63 |             """The wrapper of the function
64 |             """
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:62:21: ANN002 Missing type annotation for `*args`
   |
60 |         @lru_cache(maxsize=maxsize)
61 |         @wraps(func)
62 |         def wrapper(*args, **kwargs):
   |                     ^^^^^ ANN002
63 |             """The wrapper of the function
64 |             """
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:62:28: ANN003 Missing type annotation for `**kwargs`
   |
60 |         @lru_cache(maxsize=maxsize)
61 |         @wraps(func)
62 |         def wrapper(*args, **kwargs):
   |                            ^^^^^^^^ ANN003
63 |             """The wrapper of the function
64 |             """
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:63:13: D200 One-line docstring should fit on one line
   |
61 |           @wraps(func)
62 |           def wrapper(*args, **kwargs):
63 |               """The wrapper of the function
   |  _____________^
64 | |             """
   | |_______________^ D200
65 |               try:
66 |                   os.makedirs(dirname)
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:63:13: D400 First line should end with a period
   |
61 |           @wraps(func)
62 |           def wrapper(*args, **kwargs):
63 |               """The wrapper of the function
   |  _____________^
64 | |             """
   | |_______________^ D400
65 |               try:
66 |                   os.makedirs(dirname)
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:63:13: D401 First line of docstring should be in imperative mood: "The wrapper of the function"
   |
61 |           @wraps(func)
62 |           def wrapper(*args, **kwargs):
63 |               """The wrapper of the function
   |  _____________^
64 | |             """
   | |_______________^ D401
65 |               try:
66 |                   os.makedirs(dirname)
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:63:13: D415 First line should end with a period, question mark, or exclamation point
   |
61 |           @wraps(func)
62 |           def wrapper(*args, **kwargs):
63 |               """The wrapper of the function
   |  _____________^
64 | |             """
   | |_______________^ D415
65 |               try:
66 |                   os.makedirs(dirname)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:65:13: SIM105 Use `contextlib.suppress(FileExistsError)` instead of `try`-`except`-`pass`
   |
63 |               """The wrapper of the function
64 |               """
65 |               try:
   |  _____________^
66 | |                 os.makedirs(dirname)
67 | |             except FileExistsError:
68 | |                 pass
   | |____________________^ SIM105
69 |   
70 |               indexfile = os.path.join(dirname, "index.pkl")
   |
   = help: Replace with `contextlib.suppress(FileExistsError)`

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:66:17: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
64 |             """
65 |             try:
66 |                 os.makedirs(dirname)
   |                 ^^^^^^^^^^^ PTH103
67 |             except FileExistsError:
68 |                 pass
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:70:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
68 |                 pass
69 | 
70 |             indexfile = os.path.join(dirname, "index.pkl")
   |                         ^^^^^^^^^^^^ PTH118
71 |             mutexfile = os.path.join(dirname, "mutex")
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:71:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
70 |             indexfile = os.path.join(dirname, "index.pkl")
71 |             mutexfile = os.path.join(dirname, "mutex")
   |                         ^^^^^^^^^^^^ PTH118
72 | 
73 |             with FileSystemMutex(mutexfile):
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:75:26: PTH123 `open()` should be replaced by `Path.open()`
   |
73 |             with FileSystemMutex(mutexfile):
74 |                 try:
75 |                     with open(indexfile, "rb") as file:
   |                          ^^^^ PTH123
76 |                         index = pickle.load(file)
77 |                 except FileNotFoundError:
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:76:33: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
74 |                 try:
75 |                     with open(indexfile, "rb") as file:
76 |                         index = pickle.load(file)
   |                                 ^^^^^^^^^^^^^^^^^ S301
77 |                 except FileNotFoundError:
78 |                     index = {}
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:86:26: PTH123 `open()` should be replaced by `Path.open()`
   |
84 |                 except KeyError:
85 |                     index[key] = filename = f"{len(index)}.pkl.gz"
86 |                     with open(indexfile, "wb") as file:
   |                          ^^^^ PTH123
87 |                         pickle.dump(index, file)
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:89:24: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
87 |                         pickle.dump(index, file)
88 | 
89 |             filepath = os.path.join(dirname, filename)
   |                        ^^^^^^^^^^^^ PTH118
90 | 
91 |             try:
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:92:17: SIM117 Use a single `with` statement with multiple contexts instead of nested `with` statements
   |
91 |               try:
92 |                   with FileSystemMutex(mutexfile):
   |  _________________^
93 | |                     with gzip.open(filepath, "rb") as file:
   | |___________________________________________________________^ SIM117
94 |                           result = pickle.load(file)
95 |               except FileNotFoundError:
   |
   = help: Combine `with` statements

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:94:34: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
92 |                 with FileSystemMutex(mutexfile):
93 |                     with gzip.open(filepath, "rb") as file:
94 |                         result = pickle.load(file)
   |                                  ^^^^^^^^^^^^^^^^^ S301
95 |             except FileNotFoundError:
96 |                 print(f"compute {filename}... ", end="")
   |

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:96:17: T201 `print` found
   |
94 |                         result = pickle.load(file)
95 |             except FileNotFoundError:
96 |                 print(f"compute {filename}... ", end="")
   |                 ^^^^^ T201
97 |                 sys.stdout.flush()
98 |                 result = func(*args, **kwargs)
   |
   = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:99:17: T201 `print` found
    |
 97 |                 sys.stdout.flush()
 98 |                 result = func(*args, **kwargs)
 99 |                 print(f"save {filename}... ", end="")
    |                 ^^^^^ T201
100 |                 sys.stdout.flush()
101 |                 with FileSystemMutex(mutexfile):
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:101:17: SIM117 Use a single `with` statement with multiple contexts instead of nested `with` statements
    |
 99 |                   print(f"save {filename}... ", end="")
100 |                   sys.stdout.flush()
101 |                   with FileSystemMutex(mutexfile):
    |  _________________^
102 | |                     with gzip.open(filepath, "wb") as file:
    | |___________________________________________________________^ SIM117
103 |                           pickle.dump(result, file)
104 |                   print("done")
    |
    = help: Combine `with` statements

src\stk_search\geom3d\models\from_se3cnn\cache_file.py:104:17: T201 `print` found
    |
102 |                     with gzip.open(filepath, "wb") as file:
103 |                         pickle.dump(result, file)
104 |                 print("done")
    |                 ^^^^^ T201
105 |             return result
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\representations.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\from_se3cnn\representations.py:25:5: D417 Missing argument description in the docstring for `pochhammer`: `k`
   |
25 | def pochhammer(x, k):
   |     ^^^^^^^^^^ D417
26 |     """Compute the pochhammer symbol (x)_k.
   |

src\stk_search\geom3d\models\from_se3cnn\representations.py:43:5: D417 Missing argument descriptions in the docstring for `lpmv`: `l`, `x`
   |
43 | def lpmv(l, m, x):
   |     ^^^^ D417
44 |     """Associated Legendre function including Condon-Shortley phase.
   |

src\stk_search\geom3d\models\from_se3cnn\representations.py:43:10: E741 Ambiguous variable name: `l`
   |
43 | def lpmv(l, m, x):
   |          ^ E741
44 |     """Associated Legendre function including Condon-Shortley phase.
   |

src\stk_search\geom3d\models\from_se3cnn\representations.py:65:5: SIM108 Use ternary operator `y = x * (2 * m_abs + 1) * yold if m_abs != l else yold` instead of `if`-`else`-block
   |
64 |       # Compute P_{m+1}^m
65 |       if m_abs != l:
   |  _____^
66 | |         y = x * (2 * m_abs + 1) * yold
67 | |     else:
68 | |         y = yold
   | |________________^ SIM108
69 |   
70 |       # Compute P_{l}^m from recursion in P_{l-1}^m and P_{l-2}^m
   |
   = help: Replace `if`-`else`-block with `y = x * (2 * m_abs + 1) * yold if m_abs != l else yold`

src\stk_search\geom3d\models\from_se3cnn\representations.py:84:5: D417 Missing argument descriptions in the docstring for `tesseral_harmonics`: `m`, `phi`, `theta`
   |
84 | def tesseral_harmonics(l, m, theta=0.0, phi=0.0):
   |     ^^^^^^^^^^^^^^^^^^ D417
85 |     """Tesseral spherical harmonic with Condon-Shortley phase.
   |

src\stk_search\geom3d\models\from_se3cnn\representations.py:84:24: E741 Ambiguous variable name: `l`
   |
84 | def tesseral_harmonics(l, m, theta=0.0, phi=0.0):
   |                        ^ E741
85 |     """Tesseral spherical harmonic with Condon-Shortley phase.
   |

src\stk_search\geom3d\models\from_se3cnn\representations.py:100:5: S101 Use of `assert` detected
    |
 99 |     """
100 |     assert abs(m) <= l, "absolute value of order m must be <= degree l"
    |     ^^^^^^ S101
101 | 
102 |     N = np.sqrt((2 * l + 1) / (4 * np.pi))
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:102:5: N806 Variable `N` in function should be lowercase
    |
100 |     assert abs(m) <= l, "absolute value of order m must be <= degree l"
101 | 
102 |     N = np.sqrt((2 * l + 1) / (4 * np.pi))
    |     ^ N806
103 |     leg = lpmv(l, abs(m), torch.cos(theta))
104 |     if m == 0:
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:106:5: RET505 Unnecessary `elif` after `return` statement
    |
104 |     if m == 0:
105 |         return N * leg
106 |     elif m > 0:
    |     ^^^^ RET505
107 |         Y = torch.cos(m * phi) * leg
108 |     else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\from_se3cnn\representations.py:107:9: N806 Variable `Y` in function should be lowercase
    |
105 |         return N * leg
106 |     elif m > 0:
107 |         Y = torch.cos(m * phi) * leg
    |         ^ N806
108 |     else:
109 |         Y = torch.sin(abs(m) * phi) * leg
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:109:9: N806 Variable `Y` in function should be lowercase
    |
107 |         Y = torch.cos(m * phi) * leg
108 |     else:
109 |         Y = torch.sin(abs(m) * phi) * leg
    |         ^ N806
110 |     N *= np.sqrt(2.0 / pochhammer(l - abs(m) + 1, 2 * abs(m)))
111 |     Y *= N
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:110:5: N806 Variable `N` in function should be lowercase
    |
108 |     else:
109 |         Y = torch.sin(abs(m) * phi) * leg
110 |     N *= np.sqrt(2.0 / pochhammer(l - abs(m) + 1, 2 * abs(m)))
    |     ^ N806
111 |     Y *= N
112 |     return Y
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:111:5: N806 Variable `Y` in function should be lowercase
    |
109 |         Y = torch.sin(abs(m) * phi) * leg
110 |     N *= np.sqrt(2.0 / pochhammer(l - abs(m) + 1, 2 * abs(m)))
111 |     Y *= N
    |     ^ N806
112 |     return Y
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:115:7: D101 Missing docstring in public class
    |
115 | class SphericalHarmonics:
    |       ^^^^^^^^^^^^^^^^^^ D101
116 |     def __init__(self):
117 |         self.leg = {}
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:116:9: ANN204 Missing return type annotation for special method `__init__`
    |
115 | class SphericalHarmonics:
116 |     def __init__(self):
    |         ^^^^^^^^ ANN204
117 |         self.leg = {}
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\from_se3cnn\representations.py:116:9: D107 Missing docstring in `__init__`
    |
115 | class SphericalHarmonics:
116 |     def __init__(self):
    |         ^^^^^^^^ D107
117 |         self.leg = {}
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:119:9: D102 Missing docstring in public method
    |
117 |         self.leg = {}
118 | 
119 |     def clear(self):
    |         ^^^^^ D102
120 |         self.leg = {}
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:122:29: E741 Ambiguous variable name: `l`
    |
120 |         self.leg = {}
121 | 
122 |     def negative_lpmv(self, l, m, y):
    |                             ^ E741
123 |         """Compute negative order coefficients"""
124 |         if m < 0:
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:123:9: D400 First line should end with a period
    |
122 |     def negative_lpmv(self, l, m, y):
123 |         """Compute negative order coefficients"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
124 |         if m < 0:
125 |             y *= (-1) ** m / pochhammer(l + m + 1, -2 * m)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\representations.py:123:9: D415 First line should end with a period, question mark, or exclamation point
    |
122 |     def negative_lpmv(self, l, m, y):
123 |         """Compute negative order coefficients"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
124 |         if m < 0:
125 |             y *= (-1) ** m / pochhammer(l + m + 1, -2 * m)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\representations.py:128:9: D417 Missing argument descriptions in the docstring for `lpmv`: `l`, `x`
    |
126 |         return y
127 | 
128 |     def lpmv(self, l, m, x):
    |         ^^^^ D417
129 |         """Associated Legendre function including Condon-Shortley phase.
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:128:20: E741 Ambiguous variable name: `l`
    |
126 |         return y
127 | 
128 |     def lpmv(self, l, m, x):
    |                    ^ E741
129 |         """Associated Legendre function including Condon-Shortley phase.
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:144:9: RET505 Unnecessary `elif` after `return` statement
    |
142 |         if (l, m) in self.leg:
143 |             return self.leg[(l, m)]
144 |         elif m_abs > l:
    |         ^^^^ RET505
145 |             return None
146 |         elif l == 0:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\from_se3cnn\representations.py:157:9: RET505 Unnecessary `else` after `return` statement
    |
155 |             self.leg[(l, m)] = self.negative_lpmv(l, m, y)
156 |             return self.leg[(l, m)]
157 |         else:
    |         ^^^^ RET505
158 |             # Recursively precompute lower degree harmonics
159 |             self.lpmv(l - 1, m, x)
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\models\from_se3cnn\representations.py:166:9: ERA001 Found commented-out code
    |
164 |         if l - m_abs > 1:
165 |             y -= ((l + m_abs - 1) / (l - m_abs)) * self.leg[(l - 2, m_abs)]
166 |         # self.leg[(l, m_abs)] = y
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
167 | 
168 |         if m < 0:
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\representations.py:174:9: D417 Missing argument descriptions in the docstring for `get_element`: `m`, `phi`, `theta`
    |
172 |         return self.leg[(l, m)]
173 | 
174 |     def get_element(self, l, m, theta, phi):
    |         ^^^^^^^^^^^ D417
175 |         """Tesseral spherical harmonic with Condon-Shortley phase.
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:174:27: E741 Ambiguous variable name: `l`
    |
172 |         return self.leg[(l, m)]
173 | 
174 |     def get_element(self, l, m, theta, phi):
    |                           ^ E741
175 |         """Tesseral spherical harmonic with Condon-Shortley phase.
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:190:9: S101 Use of `assert` detected
    |
189 |         """
190 |         assert abs(m) <= l, "absolute value of order m must be <= degree l"
    |         ^^^^^^ S101
191 | 
192 |         N = np.sqrt((2 * l + 1) / (4 * np.pi))
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:192:9: N806 Variable `N` in function should be lowercase
    |
190 |         assert abs(m) <= l, "absolute value of order m must be <= degree l"
191 | 
192 |         N = np.sqrt((2 * l + 1) / (4 * np.pi))
    |         ^ N806
193 |         leg = self.lpmv(l, abs(m), torch.cos(theta))
194 |         if m == 0:
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:196:9: RET505 Unnecessary `elif` after `return` statement
    |
194 |         if m == 0:
195 |             return N * leg
196 |         elif m > 0:
    |         ^^^^ RET505
197 |             Y = torch.cos(m * phi) * leg
198 |         else:
    |
    = help: Remove unnecessary `elif`

src\stk_search\geom3d\models\from_se3cnn\representations.py:197:13: N806 Variable `Y` in function should be lowercase
    |
195 |             return N * leg
196 |         elif m > 0:
197 |             Y = torch.cos(m * phi) * leg
    |             ^ N806
198 |         else:
199 |             Y = torch.sin(abs(m) * phi) * leg
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:199:13: N806 Variable `Y` in function should be lowercase
    |
197 |             Y = torch.cos(m * phi) * leg
198 |         else:
199 |             Y = torch.sin(abs(m) * phi) * leg
    |             ^ N806
200 |         N *= np.sqrt(2.0 / pochhammer(l - abs(m) + 1, 2 * abs(m)))
201 |         Y *= N
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:200:9: N806 Variable `N` in function should be lowercase
    |
198 |         else:
199 |             Y = torch.sin(abs(m) * phi) * leg
200 |         N *= np.sqrt(2.0 / pochhammer(l - abs(m) + 1, 2 * abs(m)))
    |         ^ N806
201 |         Y *= N
202 |         return Y
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:201:9: N806 Variable `Y` in function should be lowercase
    |
199 |             Y = torch.sin(abs(m) * phi) * leg
200 |         N *= np.sqrt(2.0 / pochhammer(l - abs(m) + 1, 2 * abs(m)))
201 |         Y *= N
    |         ^ N806
202 |         return Y
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:204:9: D417 Missing argument descriptions in the docstring for `get`: `phi`, `refresh`, `theta`
    |
202 |         return Y
203 | 
204 |     def get(self, l, theta, phi, refresh=True):
    |         ^^^ D417
205 |         """Tesseral harmonic with Condon-Shortley phase.
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:204:19: E741 Ambiguous variable name: `l`
    |
202 |         return Y
203 | 
204 |     def get(self, l, theta, phi, refresh=True):
    |                   ^ E741
205 |         """Tesseral harmonic with Condon-Shortley phase.
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:204:34: FBT002 Boolean default positional argument in function definition
    |
202 |         return Y
203 | 
204 |     def get(self, l, theta, phi, refresh=True):
    |                                  ^^^^^^^ FBT002
205 |         """Tesseral harmonic with Condon-Shortley phase.
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:223:13: PERF401 Use a list comprehension to create a transformed list
    |
221 |             self.clear()
222 |         for m in range(-l, l + 1):
223 |             results.append(self.get_element(l, m, theta, phi))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
224 |         return torch.stack(results, -1)
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:241:9: E741 Ambiguous variable name: `l`
    |
240 |     sph_har = SphericalHarmonics()
241 |     for l in range(10):
    |         ^ E741
242 |         for m in range(l, -l - 1, -1):
243 |             start = time.time()
    |

src\stk_search\geom3d\models\from_se3cnn\representations.py:244:13: ERA001 Found commented-out code
    |
242 |         for m in range(l, -l - 1, -1):
243 |             start = time.time()
244 |             # y = tesseral_harmonics(l, m, theta, phi)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
245 |             y = sph_har.get_element(l, m, cu_theta, cu_phi).type(torch.float32)
246 |             # y = sph_har.lpmv(l, m, phi)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\representations.py:246:13: ERA001 Found commented-out code
    |
244 |             # y = tesseral_harmonics(l, m, theta, phi)
245 |             y = sph_har.get_element(l, m, cu_theta, cu_phi).type(torch.float32)
246 |             # y = sph_har.lpmv(l, m, phi)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
247 |             s0 += time.time() - start
248 |             start = time.time()
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\representations.py:250:13: ERA001 Found commented-out code
    |
248 |             start = time.time()
249 |             z = sh(l, m, theta, phi)
250 |             # z = lpmv_scipy(m, l, phi).numpy()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
251 |             s1 += time.time() - start
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\representations.py:255:13: T201 `print` found
    |
253 |             error = np.mean(np.abs((y.cpu().numpy() - z) / z))
254 |             max_error = max(max_error, error)
255 |             print(f"l: {l}, m: {m} ", error)
    |             ^^^^^ T201
256 | 
257 |         # start = time.time()
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\representations.py:257:9: ERA001 Found commented-out code
    |
255 |             print(f"l: {l}, m: {m} ", error)
256 | 
257 |         # start = time.time()
    |         ^^^^^^^^^^^^^^^^^^^^^ ERA001
258 |         # sph_har.get(l, theta, phi)
259 |         # s2 += time.time() - start
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\representations.py:258:9: ERA001 Found commented-out code
    |
257 |         # start = time.time()
258 |         # sph_har.get(l, theta, phi)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
259 |         # s2 += time.time() - start
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\representations.py:259:9: ERA001 Found commented-out code
    |
257 |         # start = time.time()
258 |         # sph_har.get(l, theta, phi)
259 |         # s2 += time.time() - start
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
260 | 
261 |         print("#################")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\representations.py:261:9: T201 `print` found
    |
259 |         # s2 += time.time() - start
260 | 
261 |         print("#################")
    |         ^^^^^ T201
262 | 
263 |     print(f"Max error: {max_error}")
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\representations.py:263:5: T201 `print` found
    |
261 |         print("#################")
262 | 
263 |     print(f"Max error: {max_error}")
    |     ^^^^^ T201
264 |     print(f"Time diff: {s0/s1}")
265 |     print(f"Total time: {s0}")
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\representations.py:264:5: T201 `print` found
    |
263 |     print(f"Max error: {max_error}")
264 |     print(f"Time diff: {s0/s1}")
    |     ^^^^^ T201
265 |     print(f"Total time: {s0}")
266 |     # print(f"Time diff: {s2/s1}")
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\representations.py:265:5: T201 `print` found
    |
263 |     print(f"Max error: {max_error}")
264 |     print(f"Time diff: {s0/s1}")
265 |     print(f"Total time: {s0}")
    |     ^^^^^ T201
266 |     # print(f"Time diff: {s2/s1}")
    |
    = help: Remove `print`

src\stk_search\geom3d\models\from_se3cnn\representations.py:266:5: ERA001 Found commented-out code
    |
264 |     print(f"Time diff: {s0/s1}")
265 |     print(f"Total time: {s0}")
266 |     # print(f"Time diff: {s2/s1}")
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:15:23: N803 Argument name `A` should be lowercase
   |
15 | def get_matrix_kernel(A, eps=1e-10):
   |                       ^ N803
16 |     """Compute an orthonormal basis of the kernel (x_1, x_2, ...)
17 |     A x_i = 0
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:16:5: D205 1 blank line required between summary line and description
   |
15 |   def get_matrix_kernel(A, eps=1e-10):
16 |       """Compute an orthonormal basis of the kernel (x_1, x_2, ...)
   |  _____^
17 | |     A x_i = 0
18 | |     scalar_product(x_i, x_j) = delta_ij
19 | | 
20 | |     :param A: matrix
21 | |     :return: matrix where each row is a basis vector of the kernel of A
22 | |     """
   | |_______^ D205
23 |       _u, s, v = torch.svd(A)
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:16:5: D400 First line should end with a period
   |
15 |   def get_matrix_kernel(A, eps=1e-10):
16 |       """Compute an orthonormal basis of the kernel (x_1, x_2, ...)
   |  _____^
17 | |     A x_i = 0
18 | |     scalar_product(x_i, x_j) = delta_ij
19 | | 
20 | |     :param A: matrix
21 | |     :return: matrix where each row is a basis vector of the kernel of A
22 | |     """
   | |_______^ D400
23 |       _u, s, v = torch.svd(A)
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:16:5: D415 First line should end with a period, question mark, or exclamation point
   |
15 |   def get_matrix_kernel(A, eps=1e-10):
16 |       """Compute an orthonormal basis of the kernel (x_1, x_2, ...)
   |  _____^
17 | |     A x_i = 0
18 | |     scalar_product(x_i, x_j) = delta_ij
19 | | 
20 | |     :param A: matrix
21 | |     :return: matrix where each row is a basis vector of the kernel of A
22 | |     """
   | |_______^ D415
23 |       _u, s, v = torch.svd(A)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:25:5: ERA001 Found commented-out code
   |
23 |     _u, s, v = torch.svd(A)
24 | 
25 |     # A = u @ torch.diag(s) @ v.t()
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
26 |     kernel = v.t()[s < eps]
27 |     return kernel
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:27:12: RET504 Unnecessary assignment to `kernel` before `return` statement
   |
25 |     # A = u @ torch.diag(s) @ v.t()
26 |     kernel = v.t()[s < eps]
27 |     return kernel
   |            ^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:30:25: N803 Argument name `As` should be lowercase
   |
30 | def get_matrices_kernel(As, eps=1e-10):
   |                         ^^ N803
31 |     """Computes the commun kernel of all the As matrices
32 |     """
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:31:5: D200 One-line docstring should fit on one line
   |
30 |   def get_matrices_kernel(As, eps=1e-10):
31 |       """Computes the commun kernel of all the As matrices
   |  _____^
32 | |     """
   | |_______^ D200
33 |       return get_matrix_kernel(torch.cat(As, dim=0), eps)
   |
   = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:31:5: D400 First line should end with a period
   |
30 |   def get_matrices_kernel(As, eps=1e-10):
31 |       """Computes the commun kernel of all the As matrices
   |  _____^
32 | |     """
   | |_______^ D400
33 |       return get_matrix_kernel(torch.cat(As, dim=0), eps)
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:31:5: D401 First line of docstring should be in imperative mood: "Computes the commun kernel of all the As matrices"
   |
30 |   def get_matrices_kernel(As, eps=1e-10):
31 |       """Computes the commun kernel of all the As matrices
   |  _____^
32 | |     """
   | |_______^ D401
33 |       return get_matrix_kernel(torch.cat(As, dim=0), eps)
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:31:5: D415 First line should end with a period, question mark, or exclamation point
   |
30 |   def get_matrices_kernel(As, eps=1e-10):
31 |       """Computes the commun kernel of all the As matrices
   |  _____^
32 | |     """
   | |_______^ D415
33 |       return get_matrix_kernel(torch.cat(As, dim=0), eps)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:37:5: N802 Function name `_basis_transformation_Q_J` should be lowercase
   |
36 | @cached_dirpklgz("cache/trans_Q")
37 | def _basis_transformation_Q_J(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ N802
38 |     J, order_in, order_out, version=3
39 | ):  # pylint: disable=W0613
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:37:5: ANN202 Missing return type annotation for private function `_basis_transformation_Q_J`
   |
36 | @cached_dirpklgz("cache/trans_Q")
37 | def _basis_transformation_Q_J(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
38 |     J, order_in, order_out, version=3
39 | ):  # pylint: disable=W0613
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:38:5: N803 Argument name `J` should be lowercase
   |
36 | @cached_dirpklgz("cache/trans_Q")
37 | def _basis_transformation_Q_J(
38 |     J, order_in, order_out, version=3
   |     ^ N803
39 | ):  # pylint: disable=W0613
40 |     """:param J: order of the spherical harmonics
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:38:29: ARG001 Unused function argument: `version`
   |
36 | @cached_dirpklgz("cache/trans_Q")
37 | def _basis_transformation_Q_J(
38 |     J, order_in, order_out, version=3
   |                             ^^^^^^^ ARG001
39 | ):  # pylint: disable=W0613
40 |     """:param J: order of the spherical harmonics
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:40:5: D205 1 blank line required between summary line and description
   |
38 |       J, order_in, order_out, version=3
39 |   ):  # pylint: disable=W0613
40 |       """:param J: order of the spherical harmonics
   |  _____^
41 | |     :param order_in: order of the input representation
42 | |     :param order_out: order of the output representation
43 | |     :return: one part of the Q^-1 matrix of the article
44 | |     """
   | |_______^ D205
45 |       with torch_default_dtype(torch.float64):
   |
   = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:47:13: N802 Function name `_R_tensor` should be lowercase
   |
45 |     with torch_default_dtype(torch.float64):
46 | 
47 |         def _R_tensor(a, b, c):
   |             ^^^^^^^^^ N802
48 |             return kron(irr_repr(order_out, a, b, c), irr_repr(order_in, a, b, c))
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:47:13: ANN202 Missing return type annotation for private function `_R_tensor`
   |
45 |     with torch_default_dtype(torch.float64):
46 | 
47 |         def _R_tensor(a, b, c):
   |             ^^^^^^^^^ ANN202
48 |             return kron(irr_repr(order_out, a, b, c), irr_repr(order_in, a, b, c))
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:50:13: ANN202 Missing return type annotation for private function `_sylvester_submatrix`
   |
48 |             return kron(irr_repr(order_out, a, b, c), irr_repr(order_in, a, b, c))
49 | 
50 |         def _sylvester_submatrix(J, a, b, c):
   |             ^^^^^^^^^^^^^^^^^^^^ ANN202
51 |             """Generate Kronecker product matrix for solving the Sylvester equation in subspace J"""
52 |             R_tensor = _R_tensor(a, b, c)  # [m_out * m_in, m_out * m_in]
   |
   = help: Add return type annotation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:50:34: N803 Argument name `J` should be lowercase
   |
48 |             return kron(irr_repr(order_out, a, b, c), irr_repr(order_in, a, b, c))
49 | 
50 |         def _sylvester_submatrix(J, a, b, c):
   |                                  ^ N803
51 |             """Generate Kronecker product matrix for solving the Sylvester equation in subspace J"""
52 |             R_tensor = _R_tensor(a, b, c)  # [m_out * m_in, m_out * m_in]
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:51:13: D400 First line should end with a period
   |
50 |         def _sylvester_submatrix(J, a, b, c):
51 |             """Generate Kronecker product matrix for solving the Sylvester equation in subspace J"""
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
52 |             R_tensor = _R_tensor(a, b, c)  # [m_out * m_in, m_out * m_in]
53 |             R_irrep_J = irr_repr(J, a, b, c)  # [m, m]
   |
   = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:51:13: D415 First line should end with a period, question mark, or exclamation point
   |
50 |         def _sylvester_submatrix(J, a, b, c):
51 |             """Generate Kronecker product matrix for solving the Sylvester equation in subspace J"""
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
52 |             R_tensor = _R_tensor(a, b, c)  # [m_out * m_in, m_out * m_in]
53 |             R_irrep_J = irr_repr(J, a, b, c)  # [m, m]
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:52:13: N806 Variable `R_tensor` in function should be lowercase
   |
50 |         def _sylvester_submatrix(J, a, b, c):
51 |             """Generate Kronecker product matrix for solving the Sylvester equation in subspace J"""
52 |             R_tensor = _R_tensor(a, b, c)  # [m_out * m_in, m_out * m_in]
   |             ^^^^^^^^ N806
53 |             R_irrep_J = irr_repr(J, a, b, c)  # [m, m]
54 |             return kron(R_tensor, torch.eye(R_irrep_J.size(0))) - kron(
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:53:13: N806 Variable `R_irrep_J` in function should be lowercase
   |
51 |             """Generate Kronecker product matrix for solving the Sylvester equation in subspace J"""
52 |             R_tensor = _R_tensor(a, b, c)  # [m_out * m_in, m_out * m_in]
53 |             R_irrep_J = irr_repr(J, a, b, c)  # [m, m]
   |             ^^^^^^^^^ N806
54 |             return kron(R_tensor, torch.eye(R_irrep_J.size(0))) - kron(
55 |                 torch.eye(R_tensor.size(0)), R_irrep_J.t()
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:68:9: S101 Use of `assert` detected
   |
66 |             [_sylvester_submatrix(J, a, b, c) for a, b, c in random_angles]
67 |         )
68 |         assert null_space.size(0) == 1, null_space.size()  # unique subspace solution
   |         ^^^^^^ S101
69 |         Q_J = null_space[0]  # [(m_out * m_in) * m]
70 |         Q_J = Q_J.view(
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:69:9: N806 Variable `Q_J` in function should be lowercase
   |
67 |         )
68 |         assert null_space.size(0) == 1, null_space.size()  # unique subspace solution
69 |         Q_J = null_space[0]  # [(m_out * m_in) * m]
   |         ^^^ N806
70 |         Q_J = Q_J.view(
71 |             (2 * order_out + 1) * (2 * order_in + 1), 2 * J + 1
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:70:9: N806 Variable `Q_J` in function should be lowercase
   |
68 |         assert null_space.size(0) == 1, null_space.size()  # unique subspace solution
69 |         Q_J = null_space[0]  # [(m_out * m_in) * m]
70 |         Q_J = Q_J.view(
   |         ^^^ N806
71 |             (2 * order_out + 1) * (2 * order_in + 1), 2 * J + 1
72 |         )  # [m_out * m_in, m]
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:73:9: S101 Use of `assert` detected
   |
71 |             (2 * order_out + 1) * (2 * order_in + 1), 2 * J + 1
72 |         )  # [m_out * m_in, m]
73 |         assert all(
   |         ^^^^^^ S101
74 |             torch.allclose(_R_tensor(a, b, c) @ Q_J, Q_J @ irr_repr(J, a, b, c))
75 |             for a, b, c in torch.rand(4, 3)
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:78:5: S101 Use of `assert` detected
   |
76 |         )
77 | 
78 |     assert Q_J.dtype == torch.float64
   |     ^^^^^^ S101
79 |     return Q_J  # [m_out * m_in, m]
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:83:5: D103 Missing docstring in public function
   |
82 | # @profile
83 | def get_spherical_from_cartesian_torch(cartesian, divide_radius_by=1.0):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
84 | 
85 |     ###################################################################################################################
   |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:94:5: ERA001 Found commented-out code
   |
92 |     # the 3D steerable CNN code therefore (probably) has the following convention for alpha and beta:
93 |     # beta = pi - theta; ranging from 0(South Pole, (X, Y, Z) = (0, 0, -1)) to pi(North Pole, (X, Y, Z) = (0, 0, 1)).
94 |     # alpha = phi
   |     ^^^^^^^^^^^^^ ERA001
95 |     #
96 |     ###################################################################################################################
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:99:5: ERA001 Found commented-out code
    |
 98 |     # initialise return array
 99 |     # ptsnew = np.hstack((xyz, np.zeros(xyz.shape)))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
100 |     spherical = torch.zeros_like(cartesian)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:112:5: ERA001 Found commented-out code
    |
111 |     # get projected radius in xy plane
112 |     # xy = xyz[:,0]**2 + xyz[:,1]**2
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
113 |     r_xy = cartesian[..., cartesian_x] ** 2 + cartesian[..., cartesian_y] ** 2
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:120:5: ERA001 Found commented-out code
    |
118 |         torch.sqrt(r_xy), cartesian[..., cartesian_z]
119 |     )
120 |     # ptsnew[:,4] = np.arctan2(np.sqrt(xy), xyz[:,2])
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
121 |     # version 'elevation angle defined from XY-plane up'
122 |     # ptsnew[:,4] = np.arctan2(xyz[:,2], np.sqrt(xy))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:122:5: ERA001 Found commented-out code
    |
120 |     # ptsnew[:,4] = np.arctan2(np.sqrt(xy), xyz[:,2])
121 |     # version 'elevation angle defined from XY-plane up'
122 |     # ptsnew[:,4] = np.arctan2(xyz[:,2], np.sqrt(xy))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
123 |     # spherical[:, ind_beta] = np.arctan2(cartesian[:, 2], np.sqrt(r_xy))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:123:5: ERA001 Found commented-out code
    |
121 |     # version 'elevation angle defined from XY-plane up'
122 |     # ptsnew[:,4] = np.arctan2(xyz[:,2], np.sqrt(xy))
123 |     # spherical[:, ind_beta] = np.arctan2(cartesian[:, 2], np.sqrt(r_xy))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
124 | 
125 |     # get angle in x-y plane
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:131:5: ERA001 Found commented-out code
    |
130 |     # get overall radius
131 |     # ptsnew[:,3] = np.sqrt(xy + xyz[:,2]**2)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
132 |     if divide_radius_by == 1.0:
133 |         spherical[..., ind_radius] = torch.sqrt(r_xy + cartesian[..., cartesian_z] ** 2)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:143:5: D103 Missing docstring in public function
    |
142 | # @profile
143 | def get_spherical_from_cartesian(cartesian):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
144 | 
145 |     ###################################################################################################################
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:154:5: ERA001 Found commented-out code
    |
152 |     # the 3D steerable CNN code therefore (probably) has the following convention for alpha and beta:
153 |     # beta = pi - theta; ranging from 0(South Pole, (X, Y, Z) = (0, 0, -1)) to pi(North Pole, (X, Y, Z) = (0, 0, 1)).
154 |     # alpha = phi
    |     ^^^^^^^^^^^^^ ERA001
155 |     #
156 |     ###################################################################################################################
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:162:5: ERA001 Found commented-out code
    |
161 |     # initialise return array
162 |     # ptsnew = np.hstack((xyz, np.zeros(xyz.shape)))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
163 |     spherical = np.zeros(cartesian.shape)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:175:5: ERA001 Found commented-out code
    |
174 |     # get projected radius in xy plane
175 |     # xy = xyz[:,0]**2 + xyz[:,1]**2
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
176 |     r_xy = cartesian[..., cartesian_x] ** 2 + cartesian[..., cartesian_y] ** 2
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:179:5: ERA001 Found commented-out code
    |
178 |     # get overall radius
179 |     # ptsnew[:,3] = np.sqrt(xy + xyz[:,2]**2)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
180 |     spherical[..., ind_radius] = np.sqrt(r_xy + cartesian[..., cartesian_z] ** 2)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:185:5: ERA001 Found commented-out code
    |
183 |     # version 'elevation angle defined from Z-axis down'
184 |     spherical[..., ind_beta] = np.arctan2(np.sqrt(r_xy), cartesian[..., cartesian_z])
185 |     # ptsnew[:,4] = np.arctan2(np.sqrt(xy), xyz[:,2])
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
186 |     # version 'elevation angle defined from XY-plane up'
187 |     # ptsnew[:,4] = np.arctan2(xyz[:,2], np.sqrt(xy))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:187:5: ERA001 Found commented-out code
    |
185 |     # ptsnew[:,4] = np.arctan2(np.sqrt(xy), xyz[:,2])
186 |     # version 'elevation angle defined from XY-plane up'
187 |     # ptsnew[:,4] = np.arctan2(xyz[:,2], np.sqrt(xy))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
188 |     # spherical[:, ind_beta] = np.arctan2(cartesian[:, 2], np.sqrt(r_xy))
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:188:5: ERA001 Found commented-out code
    |
186 |     # version 'elevation angle defined from XY-plane up'
187 |     # ptsnew[:,4] = np.arctan2(xyz[:,2], np.sqrt(xy))
188 |     # spherical[:, ind_beta] = np.arctan2(cartesian[:, 2], np.sqrt(r_xy))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
189 | 
190 |     # get angle in x-y plane
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:198:5: D103 Missing docstring in public function
    |
198 | def test_coordinate_conversion():
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
199 |     p = np.array([0, 0, -1])
200 |     expected = np.array([1, 0, 0])
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:201:5: S101 Use of `assert` detected
    |
199 |     p = np.array([0, 0, -1])
200 |     expected = np.array([1, 0, 0])
201 |     assert get_spherical_from_cartesian(p) == expected
    |     ^^^^^^ S101
202 |     return True
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:205:45: ARG001 Unused function argument: `dtype`
    |
205 | def spherical_harmonics(order, alpha, beta, dtype=None):
    |                                             ^^^^^ ARG001
206 |     """Spherical harmonics
207 |     - compatible with irr_repr and compose
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:206:5: D205 1 blank line required between summary line and description
    |
205 |   def spherical_harmonics(order, alpha, beta, dtype=None):
206 |       """Spherical harmonics
    |  _____^
207 | |     - compatible with irr_repr and compose
208 | | 
209 | |     computation time: excecuting 1000 times with array length 1 took 0.29 seconds;
210 | |     executing it once with array of length 1000 took 0.0022 seconds
211 | |     """
    | |_______^ D205
212 |       # Y = [tesseral_harmonics(order, m, theta=math.pi - beta, phi=alpha) for m in range(-order, order + 1)]
213 |       # Y = torch.stack(Y, -1)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:206:5: D400 First line should end with a period
    |
205 |   def spherical_harmonics(order, alpha, beta, dtype=None):
206 |       """Spherical harmonics
    |  _____^
207 | |     - compatible with irr_repr and compose
208 | | 
209 | |     computation time: excecuting 1000 times with array length 1 took 0.29 seconds;
210 | |     executing it once with array of length 1000 took 0.0022 seconds
211 | |     """
    | |_______^ D400
212 |       # Y = [tesseral_harmonics(order, m, theta=math.pi - beta, phi=alpha) for m in range(-order, order + 1)]
213 |       # Y = torch.stack(Y, -1)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:206:5: D415 First line should end with a period, question mark, or exclamation point
    |
205 |   def spherical_harmonics(order, alpha, beta, dtype=None):
206 |       """Spherical harmonics
    |  _____^
207 | |     - compatible with irr_repr and compose
208 | | 
209 | |     computation time: excecuting 1000 times with array length 1 took 0.29 seconds;
210 | |     executing it once with array of length 1000 took 0.0022 seconds
211 | |     """
    | |_______^ D415
212 |       # Y = [tesseral_harmonics(order, m, theta=math.pi - beta, phi=alpha) for m in range(-order, order + 1)]
213 |       # Y = torch.stack(Y, -1)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:212:5: ERA001 Found commented-out code
    |
210 |     executing it once with array of length 1000 took 0.0022 seconds
211 |     """
212 |     # Y = [tesseral_harmonics(order, m, theta=math.pi - beta, phi=alpha) for m in range(-order, order + 1)]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
213 |     # Y = torch.stack(Y, -1)
214 |     # Y should have dimension 2*order + 1
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:213:5: ERA001 Found commented-out code
    |
211 |     """
212 |     # Y = [tesseral_harmonics(order, m, theta=math.pi - beta, phi=alpha) for m in range(-order, order + 1)]
213 |     # Y = torch.stack(Y, -1)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
214 |     # Y should have dimension 2*order + 1
215 |     return SphericalHarmonics.get(order, theta=math.pi - beta, phi=alpha)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:220:5: D400 First line should end with a period
    |
218 |   # @profile
219 |   def kron(a, b):
220 |       """A part of the pylabyk library: numpytorch.py at https://github.com/yulkang/pylabyk
    |  _____^
221 | | 
222 | |     Kronecker product of matrices a and b with leading batch dimensions.
223 | |     Batch dimensions are broadcast. The number of them mush
224 | |     :type a: torch.Tensor
225 | |     :type b: torch.Tensor
226 | |     :rtype: torch.Tensor
227 | |     """
    | |_______^ D400
228 |       siz1 = torch.Size(torch.tensor(a.shape[-2:]) * torch.tensor(b.shape[-2:]))
229 |       res = a.unsqueeze(-1).unsqueeze(-3) * b.unsqueeze(-2).unsqueeze(-4)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:220:5: D401 First line of docstring should be in imperative mood: "A part of the pylabyk library: numpytorch.py at https://github.com/yulkang/pylabyk"
    |
218 |   # @profile
219 |   def kron(a, b):
220 |       """A part of the pylabyk library: numpytorch.py at https://github.com/yulkang/pylabyk
    |  _____^
221 | | 
222 | |     Kronecker product of matrices a and b with leading batch dimensions.
223 | |     Batch dimensions are broadcast. The number of them mush
224 | |     :type a: torch.Tensor
225 | |     :type b: torch.Tensor
226 | |     :rtype: torch.Tensor
227 | |     """
    | |_______^ D401
228 |       siz1 = torch.Size(torch.tensor(a.shape[-2:]) * torch.tensor(b.shape[-2:]))
229 |       res = a.unsqueeze(-1).unsqueeze(-3) * b.unsqueeze(-2).unsqueeze(-4)
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:220:5: D415 First line should end with a period, question mark, or exclamation point
    |
218 |   # @profile
219 |   def kron(a, b):
220 |       """A part of the pylabyk library: numpytorch.py at https://github.com/yulkang/pylabyk
    |  _____^
221 | | 
222 | |     Kronecker product of matrices a and b with leading batch dimensions.
223 | |     Batch dimensions are broadcast. The number of them mush
224 | |     :type a: torch.Tensor
225 | |     :type b: torch.Tensor
226 | |     :rtype: torch.Tensor
227 | |     """
    | |_______^ D415
228 |       siz1 = torch.Size(torch.tensor(a.shape[-2:]) * torch.tensor(b.shape[-2:]))
229 |       res = a.unsqueeze(-1).unsqueeze(-3) * b.unsqueeze(-2).unsqueeze(-4)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:235:5: D205 1 blank line required between summary line and description
    |
234 |   def get_maximum_order_unary_only(per_layer_orders_and_multiplicities):
235 |       """Determine what spherical harmonics we need to pre-compute. if we have the
    |  _____^
236 | |     unary term only, we need to compare all adjacent layers
237 | | 
238 | |     the spherical harmonics function depends on J (irrep order) purely, which is dedfined by
239 | |     order_irreps = list(range(abs(order_in - order_out), order_in + order_out + 1))
240 | |     simplification: we only care about the maximum (in some circumstances that means we calculate a few lower
241 | |     order spherical harmonics which we won't actually need)
242 | | 
243 | |     :param per_layer_orders_and_multiplicities: nested list of lists of 2-tuples
244 | |     :return: integer indicating maximum order J
245 | |     """
    | |_______^ D205
246 |       n_layers = len(per_layer_orders_and_multiplicities)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:235:5: D400 First line should end with a period
    |
234 |   def get_maximum_order_unary_only(per_layer_orders_and_multiplicities):
235 |       """Determine what spherical harmonics we need to pre-compute. if we have the
    |  _____^
236 | |     unary term only, we need to compare all adjacent layers
237 | | 
238 | |     the spherical harmonics function depends on J (irrep order) purely, which is dedfined by
239 | |     order_irreps = list(range(abs(order_in - order_out), order_in + order_out + 1))
240 | |     simplification: we only care about the maximum (in some circumstances that means we calculate a few lower
241 | |     order spherical harmonics which we won't actually need)
242 | | 
243 | |     :param per_layer_orders_and_multiplicities: nested list of lists of 2-tuples
244 | |     :return: integer indicating maximum order J
245 | |     """
    | |_______^ D400
246 |       n_layers = len(per_layer_orders_and_multiplicities)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:235:5: D415 First line should end with a period, question mark, or exclamation point
    |
234 |   def get_maximum_order_unary_only(per_layer_orders_and_multiplicities):
235 |       """Determine what spherical harmonics we need to pre-compute. if we have the
    |  _____^
236 | |     unary term only, we need to compare all adjacent layers
237 | | 
238 | |     the spherical harmonics function depends on J (irrep order) purely, which is dedfined by
239 | |     order_irreps = list(range(abs(order_in - order_out), order_in + order_out + 1))
240 | |     simplification: we only care about the maximum (in some circumstances that means we calculate a few lower
241 | |     order spherical harmonics which we won't actually need)
242 | | 
243 | |     :param per_layer_orders_and_multiplicities: nested list of lists of 2-tuples
244 | |     :return: integer indicating maximum order J
245 | |     """
    | |_______^ D415
246 |       n_layers = len(per_layer_orders_and_multiplicities)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:266:5: D205 1 blank line required between summary line and description
    |
265 |   def get_maximum_order_with_pairwise(per_layer_orders_and_multiplicities):
266 |       """Determine what spherical harmonics we need to pre-compute. for pairwise
    |  _____^
267 | |     interactions, this will just be twice the maximum order
268 | | 
269 | |     the spherical harmonics function depends on J (irrep order) purely, which is defined by
270 | |     order_irreps = list(range(abs(order_in - order_out), order_in + order_out + 1))
271 | |     simplification: we only care about the maximum (in some circumstances that means we calculate a few lower
272 | |     order spherical harmonics which we won't actually need)
273 | | 
274 | |     :param per_layer_orders_and_multiplicities: nested list of lists of 2-tuples
275 | |     :return: integer indicating maximum order J
276 | |     """
    | |_______^ D205
277 |       n_layers = len(per_layer_orders_and_multiplicities)
    |
    = help: Insert single blank line

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:266:5: D400 First line should end with a period
    |
265 |   def get_maximum_order_with_pairwise(per_layer_orders_and_multiplicities):
266 |       """Determine what spherical harmonics we need to pre-compute. for pairwise
    |  _____^
267 | |     interactions, this will just be twice the maximum order
268 | | 
269 | |     the spherical harmonics function depends on J (irrep order) purely, which is defined by
270 | |     order_irreps = list(range(abs(order_in - order_out), order_in + order_out + 1))
271 | |     simplification: we only care about the maximum (in some circumstances that means we calculate a few lower
272 | |     order spherical harmonics which we won't actually need)
273 | | 
274 | |     :param per_layer_orders_and_multiplicities: nested list of lists of 2-tuples
275 | |     :return: integer indicating maximum order J
276 | |     """
    | |_______^ D400
277 |       n_layers = len(per_layer_orders_and_multiplicities)
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:266:5: D415 First line should end with a period, question mark, or exclamation point
    |
265 |   def get_maximum_order_with_pairwise(per_layer_orders_and_multiplicities):
266 |       """Determine what spherical harmonics we need to pre-compute. for pairwise
    |  _____^
267 | |     interactions, this will just be twice the maximum order
268 | | 
269 | |     the spherical harmonics function depends on J (irrep order) purely, which is defined by
270 | |     order_irreps = list(range(abs(order_in - order_out), order_in + order_out + 1))
271 | |     simplification: we only care about the maximum (in some circumstances that means we calculate a few lower
272 | |     order spherical harmonics which we won't actually need)
273 | | 
274 | |     :param per_layer_orders_and_multiplicities: nested list of lists of 2-tuples
275 | |     :return: integer indicating maximum order J
276 | |     """
    | |_______^ D415
277 |       n_layers = len(per_layer_orders_and_multiplicities)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:284:21: PLW3301 Nested `max` calls can be flattened
    |
282 |         # extract orders only
283 |         orders = [o for (m, o) in cur]
284 |         track_max = max(track_max, max(orders))
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLW3301
285 | 
286 |     return 2 * track_max
    |
    = help: Flatten nested `max` calls

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:289:25: N803 Argument name `max_J` should be lowercase
    |
289 | def precompute_sh(r_ij, max_J):
    |                         ^^^^^ N803
290 |     """pre-comput spherical harmonics up to order max_J
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:290:5: D400 First line should end with a period
    |
289 |   def precompute_sh(r_ij, max_J):
290 |       """pre-comput spherical harmonics up to order max_J
    |  _____^
291 | | 
292 | |     :param r_ij: relative positions
293 | |     :param max_J: maximum order used in entire network
294 | |     :return: dict where each entry has shape [B,N,K,2J+1]
295 | |     """
    | |_______^ D400
296 |       i_distance = 0
297 |       i_alpha = 1
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:290:5: D415 First line should end with a period, question mark, or exclamation point
    |
289 |   def precompute_sh(r_ij, max_J):
290 |       """pre-comput spherical harmonics up to order max_J
    |  _____^
291 | | 
292 | |     :param r_ij: relative positions
293 | |     :param max_J: maximum order used in entire network
294 | |     :return: dict where each entry has shape [B,N,K,2J+1]
295 | |     """
    | |_______^ D415
296 |       i_distance = 0
297 |       i_alpha = 1
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:296:5: F841 Local variable `i_distance` is assigned to but never used
    |
294 |     :return: dict where each entry has shape [B,N,K,2J+1]
295 |     """
296 |     i_distance = 0
    |     ^^^^^^^^^^ F841
297 |     i_alpha = 1
298 |     i_beta = 2
    |
    = help: Remove assignment to unused variable `i_distance`

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:300:5: N806 Variable `Y_Js` in function should be lowercase
    |
298 |     i_beta = 2
299 | 
300 |     Y_Js = {}
    |     ^^^^ N806
301 |     sh = SphericalHarmonics()
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:303:9: N806 Variable `J` in function should be lowercase
    |
301 |     sh = SphericalHarmonics()
302 | 
303 |     for J in range(max_J + 1):
    |         ^ N806
304 |         # dimension [B,N,K,2J+1]
305 |         # Y_Js[J] = spherical_harmonics(order=J, alpha=r_ij[...,i_alpha], beta=r_ij[...,i_beta])
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:304:9: ERA001 Found commented-out code
    |
303 |     for J in range(max_J + 1):
304 |         # dimension [B,N,K,2J+1]
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
305 |         # Y_Js[J] = spherical_harmonics(order=J, alpha=r_ij[...,i_alpha], beta=r_ij[...,i_beta])
306 |         Y_Js[J] = sh.get(
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:305:9: ERA001 Found commented-out code
    |
303 |     for J in range(max_J + 1):
304 |         # dimension [B,N,K,2J+1]
305 |         # Y_Js[J] = spherical_harmonics(order=J, alpha=r_ij[...,i_alpha], beta=r_ij[...,i_beta])
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
306 |         Y_Js[J] = sh.get(
307 |             J, theta=math.pi - r_ij[..., i_beta], phi=r_ij[..., i_alpha], refresh=False
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:314:7: D101 Missing docstring in public class
    |
314 | class ScalarActivation3rdDim(torch.nn.Module):
    |       ^^^^^^^^^^^^^^^^^^^^^^ D101
315 |     def __init__(self, n_dim, activation, bias=True):
316 |         """Can be used only with scalar fields [B, N, s] on last dimension
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:315:9: ANN204 Missing return type annotation for special method `__init__`
    |
314 | class ScalarActivation3rdDim(torch.nn.Module):
315 |     def __init__(self, n_dim, activation, bias=True):
    |         ^^^^^^^^ ANN204
316 |         """Can be used only with scalar fields [B, N, s] on last dimension
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:315:43: FBT002 Boolean default positional argument in function definition
    |
314 | class ScalarActivation3rdDim(torch.nn.Module):
315 |     def __init__(self, n_dim, activation, bias=True):
    |                                           ^^^^ FBT002
316 |         """Can be used only with scalar fields [B, N, s] on last dimension
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:316:9: D400 First line should end with a period
    |
314 |   class ScalarActivation3rdDim(torch.nn.Module):
315 |       def __init__(self, n_dim, activation, bias=True):
316 |           """Can be used only with scalar fields [B, N, s] on last dimension
    |  _________^
317 | | 
318 | |         :param n_dim: number of scalar fields to apply activation to
319 | |         :param bool bias: add a bias before the applying the activation
320 | |         """
    | |___________^ D400
321 |           super().__init__()
    |
    = help: Add period

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:316:9: D415 First line should end with a period, question mark, or exclamation point
    |
314 |   class ScalarActivation3rdDim(torch.nn.Module):
315 |       def __init__(self, n_dim, activation, bias=True):
316 |           """Can be used only with scalar fields [B, N, s] on last dimension
    |  _________^
317 | | 
318 | |         :param n_dim: number of scalar fields to apply activation to
319 | |         :param bool bias: add a bias before the applying the activation
320 | |         """
    | |___________^ D415
321 |           super().__init__()
    |
    = help: Add closing punctuation

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:330:23: A002 Argument `input` is shadowing a Python builtin
    |
328 |             self.bias = None
329 | 
330 |     def forward(self, input):
    |                       ^^^^^ A002
331 |         """:param input: [B, N, s]
332 |         """
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:331:9: D200 One-line docstring should fit on one line
    |
330 |       def forward(self, input):
331 |           """:param input: [B, N, s]
    |  _________^
332 | |         """
    | |___________^ D200
333 |           assert len(np.array(input.shape)) == 3
    |
    = help: Reformat to one line

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:333:9: S101 Use of `assert` detected
    |
331 |         """:param input: [B, N, s]
332 |         """
333 |         assert len(np.array(input.shape)) == 3
    |         ^^^^^^ S101
334 | 
335 |         if self.bias is not None:
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:333:46: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
331 |         """:param input: [B, N, s]
332 |         """
333 |         assert len(np.array(input.shape)) == 3
    |                                              ^ PLR2004
334 | 
335 |         if self.bias is not None:
    |

src\stk_search\geom3d\models\from_se3cnn\utils_steerable.py:341:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
339 |         x = self.activation(x)
340 | 
341 |         return x
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\molecule_gnn_model.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\molecule_gnn_model.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | from ogb.graphproppred.mol_encoder import AtomEncoder, BondEncoder
4 | from torch import nn
  |

src\stk_search\geom3d\models\molecule_gnn_model.py:15:7: D101 Missing docstring in public class
   |
15 | class GINConv(MessagePassing):
   |       ^^^^^^^ D101
16 |     def __init__(self, emb_dim):
17 |         super(GINConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:16:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 | class GINConv(MessagePassing):
16 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ ANN204
17 |         super(GINConv, self).__init__(aggr="add")
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model.py:16:9: D107 Missing docstring in `__init__`
   |
15 | class GINConv(MessagePassing):
16 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ D107
17 |         super(GINConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:17:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
15 | class GINConv(MessagePassing):
16 |     def __init__(self, emb_dim):
17 |         super(GINConv, self).__init__(aggr="add")
   |              ^^^^^^^^^^^^^^^ UP008
18 | 
19 |         self.mlp = torch.nn.Sequential(torch.nn.Linear(emb_dim, 2*emb_dim), torch.nn.BatchNorm1d(2*emb_dim), torch.nn.ReLU(), torch.nn.Linear(2*emb_dim, emb_dim))
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model.py:24:9: D102 Missing docstring in public method
   |
22 |         self.bond_encoder = BondEncoder(emb_dim = emb_dim)
23 | 
24 |     def forward(self, x, edge_index, edge_attr):
   |         ^^^^^^^ D102
25 |         edge_embedding = self.bond_encoder(edge_attr)
26 |         out = self.mlp((1 + self.eps) *x + self.propagate(edge_index, x=x, edge_attr=edge_embedding))
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:28:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
26 |         out = self.mlp((1 + self.eps) *x + self.propagate(edge_index, x=x, edge_attr=edge_embedding))
27 | 
28 |         return out
   |                ^^^ RET504
29 | 
30 |     def message(self, x_j, edge_attr):
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\molecule_gnn_model.py:30:9: D102 Missing docstring in public method
   |
28 |         return out
29 | 
30 |     def message(self, x_j, edge_attr):
   |         ^^^^^^^ D102
31 |         return F.relu(x_j + edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:33:9: D102 Missing docstring in public method
   |
31 |         return F.relu(x_j + edge_attr)
32 | 
33 |     def update(self, aggr_out):
   |         ^^^^^^ D102
34 |         return aggr_out
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:37:7: D101 Missing docstring in public class
   |
37 | class GCNConv(MessagePassing):
   |       ^^^^^^^ D101
38 |     def __init__(self, emb_dim):
39 |         super(GCNConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:38:9: ANN204 Missing return type annotation for special method `__init__`
   |
37 | class GCNConv(MessagePassing):
38 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ ANN204
39 |         super(GCNConv, self).__init__(aggr="add")
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model.py:38:9: D107 Missing docstring in `__init__`
   |
37 | class GCNConv(MessagePassing):
38 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ D107
39 |         super(GCNConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:39:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
37 | class GCNConv(MessagePassing):
38 |     def __init__(self, emb_dim):
39 |         super(GCNConv, self).__init__(aggr="add")
   |              ^^^^^^^^^^^^^^^ UP008
40 | 
41 |         self.linear = torch.nn.Linear(emb_dim, emb_dim)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model.py:45:9: D102 Missing docstring in public method
   |
43 |         self.bond_encoder = BondEncoder(emb_dim = emb_dim)
44 | 
45 |     def forward(self, x, edge_index, edge_attr):
   |         ^^^^^^^ D102
46 |         x = self.linear(x)
47 |         edge_embedding = self.bond_encoder(edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:51:9: ERA001 Found commented-out code
   |
49 |         row, col = edge_index
50 | 
51 |         #edge_weight = torch.ones((edge_index.size(1), ), device=edge_index.device)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
52 |         deg = degree(row, x.size(0), dtype = x.dtype) + 1
53 |         deg_inv_sqrt = deg.pow(-0.5)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\molecule_gnn_model.py:60:9: D102 Missing docstring in public method
   |
58 |         return self.propagate(edge_index, x=x, edge_attr = edge_embedding, norm=norm) + F.relu(x + self.root_emb.weight) * 1./deg.view(-1,1)
59 | 
60 |     def message(self, x_j, edge_attr, norm):
   |         ^^^^^^^ D102
61 |         return norm.view(-1, 1) * F.relu(x_j + edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:63:9: D102 Missing docstring in public method
   |
61 |         return norm.view(-1, 1) * F.relu(x_j + edge_attr)
62 | 
63 |     def update(self, aggr_out):
   |         ^^^^^^ D102
64 |         return aggr_out
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:67:7: D101 Missing docstring in public class
   |
67 | class GATConv(MessagePassing):
   |       ^^^^^^^ D101
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
69 |         super(GATConv, self).__init__(node_dim=0)
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:68:9: ANN204 Missing return type annotation for special method `__init__`
   |
67 | class GATConv(MessagePassing):
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
   |         ^^^^^^^^ ANN204
69 |         super(GATConv, self).__init__(node_dim=0)
70 |         self.aggr = aggr
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model.py:68:9: D107 Missing docstring in `__init__`
   |
67 | class GATConv(MessagePassing):
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
   |         ^^^^^^^^ D107
69 |         super(GATConv, self).__init__(node_dim=0)
70 |         self.aggr = aggr
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:69:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
67 | class GATConv(MessagePassing):
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
69 |         super(GATConv, self).__init__(node_dim=0)
   |              ^^^^^^^^^^^^^^^ UP008
70 |         self.aggr = aggr
71 |         self.heads = heads
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model.py:83:9: D102 Missing docstring in public method
   |
81 |         self.reset_parameters()
82 | 
83 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
84 |         glorot(self.att)
85 |         zeros(self.bias)
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:87:9: D102 Missing docstring in public method
   |
85 |         zeros(self.bias)
86 | 
87 |     def forward(self, x, edge_index, edge_attr):
   |         ^^^^^^^ D102
88 |         edge_embedding = self.bond_encoder(edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:93:9: D102 Missing docstring in public method
   |
91 |         return self.propagate(edge_index, x=x, edge_attr=edge_embedding)
92 | 
93 |     def message(self, edge_index, x_i, x_j, edge_attr):
   |         ^^^^^^^ D102
94 |         x_i = x_i.view(-1, self.heads, self.emb_dim)
95 |         x_j = x_j.view(-1, self.heads, self.emb_dim)
   |

src\stk_search\geom3d\models\molecule_gnn_model.py:105:9: D102 Missing docstring in public method
    |
103 |         return x_j * alpha.view(-1, self.heads, 1)
104 | 
105 |     def update(self, aggr_out):
    |         ^^^^^^ D102
106 |         aggr_out = aggr_out.mean(dim=1)
107 |         aggr_out += self.bias
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:111:7: D101 Missing docstring in public class
    |
111 | class GraphSAGEConv(MessagePassing):
    |       ^^^^^^^^^^^^^ D101
112 |     def __init__(self, emb_dim, aggr="mean"):
113 |         super(GraphSAGEConv, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:112:9: ANN204 Missing return type annotation for special method `__init__`
    |
111 | class GraphSAGEConv(MessagePassing):
112 |     def __init__(self, emb_dim, aggr="mean"):
    |         ^^^^^^^^ ANN204
113 |         super(GraphSAGEConv, self).__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model.py:112:9: D107 Missing docstring in `__init__`
    |
111 | class GraphSAGEConv(MessagePassing):
112 |     def __init__(self, emb_dim, aggr="mean"):
    |         ^^^^^^^^ D107
113 |         super(GraphSAGEConv, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:113:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
111 | class GraphSAGEConv(MessagePassing):
112 |     def __init__(self, emb_dim, aggr="mean"):
113 |         super(GraphSAGEConv, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^ UP008
114 | 
115 |         self.emb_dim = emb_dim
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model.py:121:9: D102 Missing docstring in public method
    |
121 |     def forward(self, x, edge_index, edge_attr):
    |         ^^^^^^^ D102
122 |         x = self.linear(x)
123 |         edge_embedding = self.bond_encoder(edge_attr)
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:127:9: D102 Missing docstring in public method
    |
125 |         return self.propagate(edge_index, x=x, edge_attr=edge_embedding)
126 | 
127 |     def message(self, x_j, edge_attr):
    |         ^^^^^^^ D102
128 |         return x_j + edge_attr
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:130:9: D102 Missing docstring in public method
    |
128 |         return x_j + edge_attr
129 | 
130 |     def update(self, aggr_out):
    |         ^^^^^^ D102
131 |         return F.normalize(aggr_out, p=2, dim=-1)
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:134:7: D101 Missing docstring in public class
    |
134 | class GNN(nn.Module):
    |       ^^^ D101
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
136 |         super(GNN, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:135:9: ANN204 Missing return type annotation for special method `__init__`
    |
134 | class GNN(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
    |         ^^^^^^^^ ANN204
136 |         super(GNN, self).__init__()
137 |         self.num_layer = num_layer
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model.py:135:9: D107 Missing docstring in `__init__`
    |
134 | class GNN(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
    |         ^^^^^^^^ D107
136 |         super(GNN, self).__init__()
137 |         self.num_layer = num_layer
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:135:44: N803 Argument name `JK` should be lowercase
    |
134 | class GNN(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
    |                                            ^^ N803
136 |         super(GNN, self).__init__()
137 |         self.num_layer = num_layer
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:136:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
134 | class GNN(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
136 |         super(GNN, self).__init__()
    |              ^^^^^^^^^^^ UP008
137 |         self.num_layer = num_layer
138 |         self.drop_ratio = drop_ratio
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model.py:141:29: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
139 |         self.JK = JK
140 | 
141 |         if self.num_layer < 2:
    |                             ^ PLR2004
142 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:142:19: TRY003 Avoid specifying long messages outside the exception class
    |
141 |         if self.num_layer < 2:
142 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
143 | 
144 |         self.atom_encoder = AtomEncoder(emb_dim)
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:142:30: EM101 Exception must not use a string literal, assign to variable first
    |
141 |         if self.num_layer < 2:
142 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
143 | 
144 |         self.atom_encoder = AtomEncoder(emb_dim)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model.py:148:13: B007 Loop control variable `layer` not used within loop body
    |
146 |         ###List of MLPs
147 |         self.gnns = nn.ModuleList()
148 |         for layer in range(num_layer):
    |             ^^^^^ B007
149 |             if gnn_type == "GIN":
150 |                 self.gnns.append(GINConv(emb_dim))
    |
    = help: Rename unused `layer` to `_layer`

src\stk_search\geom3d\models\molecule_gnn_model.py:160:13: B007 Loop control variable `layer` not used within loop body
    |
158 |         ###List of batchnorms
159 |         self.batch_norms = nn.ModuleList()
160 |         for layer in range(num_layer):
    |             ^^^^^ B007
161 |             self.batch_norms.append(nn.BatchNorm1d(emb_dim))
    |
    = help: Rename unused `layer` to `_layer`

src\stk_search\geom3d\models\molecule_gnn_model.py:164:9: D102 Missing docstring in public method
    |
163 |     # def forward(self, x, edge_index, edge_attr):
164 |     def forward(self, *argv):
    |         ^^^^^^^ D102
165 |         if len(argv) == 3:
166 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:164:23: ANN002 Missing type annotation for `*argv`
    |
163 |     # def forward(self, x, edge_index, edge_attr):
164 |     def forward(self, *argv):
    |                       ^^^^^ ANN002
165 |         if len(argv) == 3:
166 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:165:25: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
163 |     # def forward(self, x, edge_index, edge_attr):
164 |     def forward(self, *argv):
165 |         if len(argv) == 3:
    |                         ^ PLR2004
166 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
167 |         elif len(argv) == 1:
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:171:19: TRY003 Avoid specifying long messages outside the exception class
    |
169 |             x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
170 |         else:
171 |             raise ValueError("unmatched number of arguments.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
172 | 
173 |         x = self.atom_encoder(x)
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:171:30: EM101 Exception must not use a string literal, assign to variable first
    |
169 |             x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
170 |         else:
171 |             raise ValueError("unmatched number of arguments.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
172 | 
173 |         x = self.atom_encoder(x)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model.py:179:13: ERA001 Found commented-out code
    |
177 |             h = self.gnns[layer](h_list[layer], edge_index, edge_attr)
178 |             h = self.batch_norms[layer](h)
179 |             # h = F.dropout(F.relu(h), self.drop_ratio, training = self.training)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
180 |             if layer == self.num_layer - 1:
181 |                 # remove relu for the last layer
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\molecule_gnn_model.py:202:7: N801 Class name `GNN_graphpred` should use CapWords convention
    |
202 | class GNN_graphpred(nn.Module):
    |       ^^^^^^^^^^^^^ N801
203 |     def __init__(self, args, num_tasks, molecule_model=None):
204 |         super(GNN_graphpred, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:202:7: D101 Missing docstring in public class
    |
202 | class GNN_graphpred(nn.Module):
    |       ^^^^^^^^^^^^^ D101
203 |     def __init__(self, args, num_tasks, molecule_model=None):
204 |         super(GNN_graphpred, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:203:9: ANN204 Missing return type annotation for special method `__init__`
    |
202 | class GNN_graphpred(nn.Module):
203 |     def __init__(self, args, num_tasks, molecule_model=None):
    |         ^^^^^^^^ ANN204
204 |         super(GNN_graphpred, self).__init__()
205 |         self.num_layer = args.num_layer
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model.py:203:9: D107 Missing docstring in `__init__`
    |
202 | class GNN_graphpred(nn.Module):
203 |     def __init__(self, args, num_tasks, molecule_model=None):
    |         ^^^^^^^^ D107
204 |         super(GNN_graphpred, self).__init__()
205 |         self.num_layer = args.num_layer
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:204:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
202 | class GNN_graphpred(nn.Module):
203 |     def __init__(self, args, num_tasks, molecule_model=None):
204 |         super(GNN_graphpred, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^ UP008
205 |         self.num_layer = args.num_layer
206 |         self.emb_dim = args.emb_dim
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model.py:211:29: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
209 |         self.num_tasks = num_tasks
210 | 
211 |         if self.num_layer < 2:
    |                             ^ PLR2004
212 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:212:19: TRY003 Avoid specifying long messages outside the exception class
    |
211 |         if self.num_layer < 2:
212 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
213 | 
214 |         self.molecule_model = molecule_model
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:212:30: EM101 Exception must not use a string literal, assign to variable first
    |
211 |         if self.num_layer < 2:
212 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
213 | 
214 |         self.molecule_model = molecule_model
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model.py:224:19: TRY003 Avoid specifying long messages outside the exception class
    |
222 |             self.pool = global_max_pool
223 |         else:
224 |             raise ValueError("Invalid graph pooling type.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
225 | 
226 |         # For graph-level binary classification
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:224:30: EM101 Exception must not use a string literal, assign to variable first
    |
222 |             self.pool = global_max_pool
223 |         else:
224 |             raise ValueError("Invalid graph pooling type.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
225 | 
226 |         # For graph-level binary classification
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model.py:238:9: D102 Missing docstring in public method
    |
236 |             )
237 | 
238 |     def from_pretrained(self, model_file):
    |         ^^^^^^^^^^^^^^^ D102
239 |         self.molecule_model.load_state_dict(torch.load(model_file))
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:241:9: D102 Missing docstring in public method
    |
239 |         self.molecule_model.load_state_dict(torch.load(model_file))
240 | 
241 |     def get_graph_representation(self, *argv):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ D102
242 |         if len(argv) == 4:
243 |             x, edge_index, edge_attr, batch = argv[0], argv[1], argv[2], argv[3]
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:241:40: ANN002 Missing type annotation for `*argv`
    |
239 |         self.molecule_model.load_state_dict(torch.load(model_file))
240 | 
241 |     def get_graph_representation(self, *argv):
    |                                        ^^^^^ ANN002
242 |         if len(argv) == 4:
243 |             x, edge_index, edge_attr, batch = argv[0], argv[1], argv[2], argv[3]
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:242:25: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
    |
241 |     def get_graph_representation(self, *argv):
242 |         if len(argv) == 4:
    |                         ^ PLR2004
243 |             x, edge_index, edge_attr, batch = argv[0], argv[1], argv[2], argv[3]
244 |         elif len(argv) == 1:
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:253:19: TRY003 Avoid specifying long messages outside the exception class
    |
251 |             )
252 |         else:
253 |             raise ValueError("unmatched number of arguments.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
254 | 
255 |         node_representation = self.molecule_model(x, edge_index, edge_attr)
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:253:30: EM101 Exception must not use a string literal, assign to variable first
    |
251 |             )
252 |         else:
253 |             raise ValueError("unmatched number of arguments.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
254 | 
255 |         node_representation = self.molecule_model(x, edge_index, edge_attr)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model.py:262:9: D102 Missing docstring in public method
    |
260 |         return graph_representation, pred
261 | 
262 |     def forward(self, *argv):
    |         ^^^^^^^ D102
263 |         if len(argv) == 4:
264 |             x, edge_index, edge_attr, batch = argv[0], argv[1], argv[2], argv[3]
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:262:23: ANN002 Missing type annotation for `*argv`
    |
260 |         return graph_representation, pred
261 | 
262 |     def forward(self, *argv):
    |                       ^^^^^ ANN002
263 |         if len(argv) == 4:
264 |             x, edge_index, edge_attr, batch = argv[0], argv[1], argv[2], argv[3]
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:263:25: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
    |
262 |     def forward(self, *argv):
263 |         if len(argv) == 4:
    |                         ^ PLR2004
264 |             x, edge_index, edge_attr, batch = argv[0], argv[1], argv[2], argv[3]
265 |         elif len(argv) == 1:
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:274:19: TRY003 Avoid specifying long messages outside the exception class
    |
272 |             )
273 |         else:
274 |             raise ValueError("unmatched number of arguments.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
275 | 
276 |         node_representation = self.molecule_model(x, edge_index, edge_attr)
    |

src\stk_search\geom3d\models\molecule_gnn_model.py:274:30: EM101 Exception must not use a string literal, assign to variable first
    |
272 |             )
273 |         else:
274 |             raise ValueError("unmatched number of arguments.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
275 | 
276 |         node_representation = self.molecule_model(x, edge_index, edge_attr)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model.py:281:16: RET504 Unnecessary assignment to `output` before `return` statement
    |
279 |         output = self.graph_pred_linear(graph_representation)
280 | 
281 |         return output
    |                ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:2:8: N812 Lowercase `functional` imported as non-lowercase `F`
  |
1 | import torch
2 | import torch.nn.functional as F
  |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
3 | from ogb.graphproppred.mol_encoder import (
4 |     full_atom_feature_dims,
  |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:15:7: D101 Missing docstring in public class
   |
15 | class GINConv(MessagePassing):
   |       ^^^^^^^ D101
16 |     def __init__(self, emb_dim):
17 |         super(GINConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:16:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 | class GINConv(MessagePassing):
16 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ ANN204
17 |         super(GINConv, self).__init__(aggr="add")
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:16:9: D107 Missing docstring in `__init__`
   |
15 | class GINConv(MessagePassing):
16 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ D107
17 |         super(GINConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:17:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
15 | class GINConv(MessagePassing):
16 |     def __init__(self, emb_dim):
17 |         super(GINConv, self).__init__(aggr="add")
   |              ^^^^^^^^^^^^^^^ UP008
18 | 
19 |         self.mlp = torch.nn.Sequential(torch.nn.Linear(emb_dim, 2*emb_dim), torch.nn.BatchNorm1d(2*emb_dim), torch.nn.ReLU(), torch.nn.Linear(2*emb_dim, emb_dim))
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:24:9: D102 Missing docstring in public method
   |
22 |         self.bond_encoder = nn.Embedding(full_bond_feature_dims[0], emb_dim)
23 | 
24 |     def forward(self, x, edge_index, edge_attr):
   |         ^^^^^^^ D102
25 |         edge_embedding = self.bond_encoder(edge_attr)
26 |         out = self.mlp((1 + self.eps) *x + self.propagate(edge_index, x=x, edge_attr=edge_embedding))
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:28:16: RET504 Unnecessary assignment to `out` before `return` statement
   |
26 |         out = self.mlp((1 + self.eps) *x + self.propagate(edge_index, x=x, edge_attr=edge_embedding))
27 | 
28 |         return out
   |                ^^^ RET504
29 | 
30 |     def message(self, x_j, edge_attr):
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:30:9: D102 Missing docstring in public method
   |
28 |         return out
29 | 
30 |     def message(self, x_j, edge_attr):
   |         ^^^^^^^ D102
31 |         return F.relu(x_j + edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:33:9: D102 Missing docstring in public method
   |
31 |         return F.relu(x_j + edge_attr)
32 | 
33 |     def update(self, aggr_out):
   |         ^^^^^^ D102
34 |         return aggr_out
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:37:7: D101 Missing docstring in public class
   |
37 | class GCNConv(MessagePassing):
   |       ^^^^^^^ D101
38 |     def __init__(self, emb_dim):
39 |         super(GCNConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:38:9: ANN204 Missing return type annotation for special method `__init__`
   |
37 | class GCNConv(MessagePassing):
38 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ ANN204
39 |         super(GCNConv, self).__init__(aggr="add")
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:38:9: D107 Missing docstring in `__init__`
   |
37 | class GCNConv(MessagePassing):
38 |     def __init__(self, emb_dim):
   |         ^^^^^^^^ D107
39 |         super(GCNConv, self).__init__(aggr="add")
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:39:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
37 | class GCNConv(MessagePassing):
38 |     def __init__(self, emb_dim):
39 |         super(GCNConv, self).__init__(aggr="add")
   |              ^^^^^^^^^^^^^^^ UP008
40 | 
41 |         self.linear = torch.nn.Linear(emb_dim, emb_dim)
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:45:9: D102 Missing docstring in public method
   |
43 |         self.bond_encoder = nn.Embedding(full_bond_feature_dims[0], emb_dim)
44 | 
45 |     def forward(self, x, edge_index, edge_attr):
   |         ^^^^^^^ D102
46 |         x = self.linear(x)
47 |         edge_embedding = self.bond_encoder(edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:51:9: ERA001 Found commented-out code
   |
49 |         row, col = edge_index
50 | 
51 |         #edge_weight = torch.ones((edge_index.size(1), ), device=edge_index.device)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
52 |         deg = degree(row, x.size(0), dtype = x.dtype) + 1
53 |         deg_inv_sqrt = deg.pow(-0.5)
   |
   = help: Remove commented-out code

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:60:9: D102 Missing docstring in public method
   |
58 |         return self.propagate(edge_index, x=x, edge_attr = edge_embedding, norm=norm) + F.relu(x + self.root_emb.weight) * 1./deg.view(-1,1)
59 | 
60 |     def message(self, x_j, edge_attr, norm):
   |         ^^^^^^^ D102
61 |         return norm.view(-1, 1) * F.relu(x_j + edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:63:9: D102 Missing docstring in public method
   |
61 |         return norm.view(-1, 1) * F.relu(x_j + edge_attr)
62 | 
63 |     def update(self, aggr_out):
   |         ^^^^^^ D102
64 |         return aggr_out
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:67:7: D101 Missing docstring in public class
   |
67 | class GATConv(MessagePassing):
   |       ^^^^^^^ D101
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
69 |         super(GATConv, self).__init__(node_dim=0)
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:68:9: ANN204 Missing return type annotation for special method `__init__`
   |
67 | class GATConv(MessagePassing):
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
   |         ^^^^^^^^ ANN204
69 |         super(GATConv, self).__init__(node_dim=0)
70 |         self.aggr = aggr
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:68:9: D107 Missing docstring in `__init__`
   |
67 | class GATConv(MessagePassing):
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
   |         ^^^^^^^^ D107
69 |         super(GATConv, self).__init__(node_dim=0)
70 |         self.aggr = aggr
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:69:14: UP008 Use `super()` instead of `super(__class__, self)`
   |
67 | class GATConv(MessagePassing):
68 |     def __init__(self, emb_dim, heads=2, negative_slope=0.2, aggr="add"):
69 |         super(GATConv, self).__init__(node_dim=0)
   |              ^^^^^^^^^^^^^^^ UP008
70 |         self.aggr = aggr
71 |         self.heads = heads
   |
   = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:83:9: D102 Missing docstring in public method
   |
81 |         self.reset_parameters()
82 | 
83 |     def reset_parameters(self):
   |         ^^^^^^^^^^^^^^^^ D102
84 |         glorot(self.att)
85 |         zeros(self.bias)
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:87:9: D102 Missing docstring in public method
   |
85 |         zeros(self.bias)
86 | 
87 |     def forward(self, x, edge_index, edge_attr):
   |         ^^^^^^^ D102
88 |         edge_embedding = self.bond_encoder(edge_attr)
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:93:9: D102 Missing docstring in public method
   |
91 |         return self.propagate(edge_index, x=x, edge_attr=edge_embedding)
92 | 
93 |     def message(self, edge_index, x_i, x_j, edge_attr):
   |         ^^^^^^^ D102
94 |         x_i = x_i.view(-1, self.heads, self.emb_dim)
95 |         x_j = x_j.view(-1, self.heads, self.emb_dim)
   |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:105:9: D102 Missing docstring in public method
    |
103 |         return x_j * alpha.view(-1, self.heads, 1)
104 | 
105 |     def update(self, aggr_out):
    |         ^^^^^^ D102
106 |         aggr_out = aggr_out.mean(dim=1)
107 |         aggr_out += self.bias
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:111:7: D101 Missing docstring in public class
    |
111 | class GraphSAGEConv(MessagePassing):
    |       ^^^^^^^^^^^^^ D101
112 |     def __init__(self, emb_dim, aggr="mean"):
113 |         super(GraphSAGEConv, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:112:9: ANN204 Missing return type annotation for special method `__init__`
    |
111 | class GraphSAGEConv(MessagePassing):
112 |     def __init__(self, emb_dim, aggr="mean"):
    |         ^^^^^^^^ ANN204
113 |         super(GraphSAGEConv, self).__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:112:9: D107 Missing docstring in `__init__`
    |
111 | class GraphSAGEConv(MessagePassing):
112 |     def __init__(self, emb_dim, aggr="mean"):
    |         ^^^^^^^^ D107
113 |         super(GraphSAGEConv, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:113:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
111 | class GraphSAGEConv(MessagePassing):
112 |     def __init__(self, emb_dim, aggr="mean"):
113 |         super(GraphSAGEConv, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^ UP008
114 | 
115 |         self.emb_dim = emb_dim
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:121:9: D102 Missing docstring in public method
    |
121 |     def forward(self, x, edge_index, edge_attr):
    |         ^^^^^^^ D102
122 |         x = self.linear(x)
123 |         edge_embedding = self.bond_encoder(edge_attr)
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:127:9: D102 Missing docstring in public method
    |
125 |         return self.propagate(edge_index, x=x, edge_attr=edge_embedding)
126 | 
127 |     def message(self, x_j, edge_attr):
    |         ^^^^^^^ D102
128 |         return x_j + edge_attr
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:130:9: D102 Missing docstring in public method
    |
128 |         return x_j + edge_attr
129 | 
130 |     def update(self, aggr_out):
    |         ^^^^^^ D102
131 |         return F.normalize(aggr_out, p=2, dim=-1)
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:134:7: D101 Missing docstring in public class
    |
134 | class GNNSimplified(nn.Module):
    |       ^^^^^^^^^^^^^ D101
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
136 |         super(GNNSimplified, self).__init__()
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:135:9: ANN204 Missing return type annotation for special method `__init__`
    |
134 | class GNNSimplified(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
    |         ^^^^^^^^ ANN204
136 |         super(GNNSimplified, self).__init__()
137 |         self.num_layer = num_layer
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:135:9: D107 Missing docstring in `__init__`
    |
134 | class GNNSimplified(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
    |         ^^^^^^^^ D107
136 |         super(GNNSimplified, self).__init__()
137 |         self.num_layer = num_layer
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:135:44: N803 Argument name `JK` should be lowercase
    |
134 | class GNNSimplified(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
    |                                            ^^ N803
136 |         super(GNNSimplified, self).__init__()
137 |         self.num_layer = num_layer
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:136:14: UP008 Use `super()` instead of `super(__class__, self)`
    |
134 | class GNNSimplified(nn.Module):
135 |     def __init__(self, num_layer, emb_dim, JK="last", drop_ratio=0, gnn_type="gin"):
136 |         super(GNNSimplified, self).__init__()
    |              ^^^^^^^^^^^^^^^^^^^^^ UP008
137 |         self.num_layer = num_layer
138 |         self.drop_ratio = drop_ratio
    |
    = help: Remove `__super__` parameters

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:141:29: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
139 |         self.JK = JK
140 | 
141 |         if self.num_layer < 2:
    |                             ^ PLR2004
142 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:142:19: TRY003 Avoid specifying long messages outside the exception class
    |
141 |         if self.num_layer < 2:
142 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
143 | 
144 |         self.atom_encoder = nn.Embedding(full_atom_feature_dims[0], emb_dim)
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:142:30: EM101 Exception must not use a string literal, assign to variable first
    |
141 |         if self.num_layer < 2:
142 |             raise ValueError("Number of GNN layers must be greater than 1.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
143 | 
144 |         self.atom_encoder = nn.Embedding(full_atom_feature_dims[0], emb_dim)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:148:13: B007 Loop control variable `layer` not used within loop body
    |
146 |         ###List of MLPs
147 |         self.gnns = nn.ModuleList()
148 |         for layer in range(num_layer):
    |             ^^^^^ B007
149 |             if gnn_type == "GIN":
150 |                 self.gnns.append(GINConv(emb_dim))
    |
    = help: Rename unused `layer` to `_layer`

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:153:30: F821 Undefined name `GAT`
    |
151 |             elif gnn_type == "GCN":
152 |                 self.gnns.append(GCNConv(emb_dim))
153 |             elif gnn_type == GAT:
    |                              ^^^ F821
154 |                 self.gnns.append(GATConv(emb_dim))
155 |             elif gnn_type == "GraphSAGE":
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:160:13: B007 Loop control variable `layer` not used within loop body
    |
158 |         ###List of batchnorms
159 |         self.batch_norms = nn.ModuleList()
160 |         for layer in range(num_layer):
    |             ^^^^^ B007
161 |             self.batch_norms.append(nn.BatchNorm1d(emb_dim))
    |
    = help: Rename unused `layer` to `_layer`

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:164:9: D102 Missing docstring in public method
    |
163 |     # def forward(self, x, edge_index, edge_attr):
164 |     def forward(self, *argv):
    |         ^^^^^^^ D102
165 |         if len(argv) == 3:
166 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:164:23: ANN002 Missing type annotation for `*argv`
    |
163 |     # def forward(self, x, edge_index, edge_attr):
164 |     def forward(self, *argv):
    |                       ^^^^^ ANN002
165 |         if len(argv) == 3:
166 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:165:25: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
163 |     # def forward(self, x, edge_index, edge_attr):
164 |     def forward(self, *argv):
165 |         if len(argv) == 3:
    |                         ^ PLR2004
166 |             x, edge_index, edge_attr = argv[0], argv[1], argv[2]
167 |         elif len(argv) == 1:
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:171:19: TRY003 Avoid specifying long messages outside the exception class
    |
169 |             x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
170 |         else:
171 |             raise ValueError("unmatched number of arguments.")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
172 | 
173 |         x = self.atom_encoder(x)
    |

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:171:30: EM101 Exception must not use a string literal, assign to variable first
    |
169 |             x, edge_index, edge_attr = data.x, data.edge_index, data.edge_attr
170 |         else:
171 |             raise ValueError("unmatched number of arguments.")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
172 | 
173 |         x = self.atom_encoder(x)
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\models\molecule_gnn_model_simplified.py:179:13: ERA001 Found commented-out code
    |
177 |             h = self.gnns[layer](h_list[layer], edge_index, edge_attr)
178 |             h = self.batch_norms[layer](h)
179 |             # h = F.dropout(F.relu(h), self.drop_ratio, training = self.training)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
180 |             if layer == self.num_layer - 1:
181 |                 # remove relu for the last layer
    |
    = help: Remove commented-out code

src\stk_search\geom3d\models\utils.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Credit to https://github.com/FabianFuchsML/se3-transformer-public
2 | | """
  | |___^ D200
3 |   
4 |   import torch
  |
  = help: Reformat to one line

src\stk_search\geom3d\models\utils.py:1:1: D400 First line should end with a period
  |
1 | / """Credit to https://github.com/FabianFuchsML/se3-transformer-public
2 | | """
  | |___^ D400
3 |   
4 |   import torch
  |
  = help: Add period

src\stk_search\geom3d\models\utils.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """Credit to https://github.com/FabianFuchsML/se3-transformer-public
2 | | """
  | |___^ D415
3 |   
4 |   import torch
  |
  = help: Add closing punctuation

src\stk_search\geom3d\models\utils.py:9:5: D417 Missing argument descriptions in the docstring for `get_basis`: `cloned_d`, `max_degree`
   |
 9 | def get_basis(cloned_d, max_degree):
   |     ^^^^^^^^^ D417
10 |     """Precompute the SE(3)-equivariant weight basis, W_J^lk(x)
   |

src\stk_search\geom3d\models\utils.py:10:5: D400 First line should end with a period
   |
 9 |   def get_basis(cloned_d, max_degree):
10 |       """Precompute the SE(3)-equivariant weight basis, W_J^lk(x)
   |  _____^
11 | | 
12 | |     Args:
13 | |     ----
14 | |         G: DGL graph instance of type dgl.DGLGraph
15 | |         max_degree: non-negative int for degree of highest feature type
16 | |     Returns:
17 | |         dict of equivariant bases. Keys are in the form 'd_in,d_out'. Values are
18 | |         tensors of shape (batch_size, 1, 2*d_out+1, 1, 2*d_in+1, number_of_bases)
19 | |         where the 1's will later be broadcast to the number of output and input
20 | |         channels
21 | | 
22 | |     """
   | |_______^ D400
23 |       with torch.no_grad():
24 |           # Relative positional encodings (vector)
   |
   = help: Add period

src\stk_search\geom3d\models\utils.py:10:5: D415 First line should end with a period, question mark, or exclamation point
   |
 9 |   def get_basis(cloned_d, max_degree):
10 |       """Precompute the SE(3)-equivariant weight basis, W_J^lk(x)
   |  _____^
11 | | 
12 | |     Args:
13 | |     ----
14 | |         G: DGL graph instance of type dgl.DGLGraph
15 | |         max_degree: non-negative int for degree of highest feature type
16 | |     Returns:
17 | |         dict of equivariant bases. Keys are in the form 'd_in,d_out'. Values are
18 | |         tensors of shape (batch_size, 1, 2*d_out+1, 1, 2*d_in+1, number_of_bases)
19 | |         where the 1's will later be broadcast to the number of output and input
20 | |         channels
21 | | 
22 | |     """
   | |_______^ D415
23 |       with torch.no_grad():
24 |           # Relative positional encodings (vector)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\models\utils.py:27:9: N806 Variable `Y` in function should be lowercase
   |
25 |         r_ij = utils_steerable.get_spherical_from_cartesian_torch(cloned_d)
26 |         # Spherical harmonic basis
27 |         Y = utils_steerable.precompute_sh(r_ij, 2 * max_degree)
   |         ^ N806
28 |         device = Y[0].device
   |

src\stk_search\geom3d\models\utils.py:33:17: N806 Variable `K_Js` in function should be lowercase
   |
31 |         for d_in in range(max_degree + 1):
32 |             for d_out in range(max_degree + 1):
33 |                 K_Js = []
   |                 ^^^^ N806
34 |                 for J in range(abs(d_in - d_out), d_in + d_out + 1):
35 |                     # Get spherical harmonic projection matrices
   |

src\stk_search\geom3d\models\utils.py:34:21: N806 Variable `J` in function should be lowercase
   |
32 |             for d_out in range(max_degree + 1):
33 |                 K_Js = []
34 |                 for J in range(abs(d_in - d_out), d_in + d_out + 1):
   |                     ^ N806
35 |                     # Get spherical harmonic projection matrices
36 |                     Q_J = utils_steerable._basis_transformation_Q_J(J, d_in, d_out)
   |

src\stk_search\geom3d\models\utils.py:36:21: N806 Variable `Q_J` in function should be lowercase
   |
34 |                 for J in range(abs(d_in - d_out), d_in + d_out + 1):
35 |                     # Get spherical harmonic projection matrices
36 |                     Q_J = utils_steerable._basis_transformation_Q_J(J, d_in, d_out)
   |                     ^^^ N806
37 |                     Q_J = Q_J.float().T.to(device)
   |

src\stk_search\geom3d\models\utils.py:36:27: SLF001 Private member accessed: `_basis_transformation_Q_J`
   |
34 |                 for J in range(abs(d_in - d_out), d_in + d_out + 1):
35 |                     # Get spherical harmonic projection matrices
36 |                     Q_J = utils_steerable._basis_transformation_Q_J(J, d_in, d_out)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
37 |                     Q_J = Q_J.float().T.to(device)
   |

src\stk_search\geom3d\models\utils.py:37:21: N806 Variable `Q_J` in function should be lowercase
   |
35 |                     # Get spherical harmonic projection matrices
36 |                     Q_J = utils_steerable._basis_transformation_Q_J(J, d_in, d_out)
37 |                     Q_J = Q_J.float().T.to(device)
   |                     ^^^ N806
38 | 
39 |                     # Create kernel from spherical harmonics
   |

src\stk_search\geom3d\models\utils.py:40:21: N806 Variable `K_J` in function should be lowercase
   |
39 |                     # Create kernel from spherical harmonics
40 |                     K_J = torch.matmul(Y[J], Q_J)
   |                     ^^^ N806
41 |                     K_Js.append(K_J)
   |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:1:1: INP001 File `src\stk_search\geom3d\oligomer_encoding_with_transformer.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\oligomer_encoding_with_transformer.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D200
3 |   
4 |   import glob
  |
  = help: Reformat to one line

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:1:1: D400 First line should end with a period
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D400
3 |   
4 |   import glob
  |
  = help: Add period

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:1:1: D404 First word of the docstring should not be "This"
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D404
3 |   
4 |   import glob
  |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """this script is to encode the representation of the oligomer from the representation of the fragments
2 | | """
  | |___^ D415
3 |   
4 |   import glob
  |
  = help: Add closing punctuation

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:9:8: N812 Lowercase `functional` imported as non-lowercase `Functional`
   |
 7 | import lightning.pytorch as pl
 8 | import torch
 9 | import torch.nn.functional as Functional
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N812
10 | from lightning.pytorch.callbacks import (
11 |     EarlyStopping,
   |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:35:5: ERA001 Found commented-out code
   |
33 |     """
34 |     max_iters = config["max_epochs"] * len(train_loader)
35 |     # model_config = config["model"]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
36 |     EncodingModel = initialise_model(config, max_iters)
37 |     print(" config name", config["name"])
   |
   = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:36:5: N806 Variable `EncodingModel` in function should be lowercase
   |
34 |     max_iters = config["max_epochs"] * len(train_loader)
35 |     # model_config = config["model"]
36 |     EncodingModel = initialise_model(config, max_iters)
   |     ^^^^^^^^^^^^^ N806
37 |     print(" config name", config["name"])
38 |     wandb_logger = WandbLogger(
   |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:37:5: T201 `print` found
   |
35 |     # model_config = config["model"]
36 |     EncodingModel = initialise_model(config, max_iters)
37 |     print(" config name", config["name"])
   |     ^^^^^ T201
38 |     wandb_logger = WandbLogger(
39 |         log_model=True,
   |
   = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:77:5: D205 1 blank line required between summary line and description
   |
76 |   def save_encoding_dataset(dataset, config, dataset_name="",save_folder=""):
77 |       """Save the encoding of the dataset
   |  _____^
78 | |     Args:
79 | |         dataset (DataLoader): The data loader for the training data.
80 | |         config (dict): The configuration of the model.
81 | |         dataset_name (str): The name of the dataset
82 | | 
83 | |     """
   | |_______^ D205
84 |       Checkpoint_dir = config["running_dir"] + "/transformer"
   |
   = help: Insert single blank line

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:77:5: D400 First line should end with a period
   |
76 |   def save_encoding_dataset(dataset, config, dataset_name="",save_folder=""):
77 |       """Save the encoding of the dataset
   |  _____^
78 | |     Args:
79 | |         dataset (DataLoader): The data loader for the training data.
80 | |         config (dict): The configuration of the model.
81 | |         dataset_name (str): The name of the dataset
82 | | 
83 | |     """
   | |_______^ D400
84 |       Checkpoint_dir = config["running_dir"] + "/transformer"
   |
   = help: Add period

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:77:5: D415 First line should end with a period, question mark, or exclamation point
   |
76 |   def save_encoding_dataset(dataset, config, dataset_name="",save_folder=""):
77 |       """Save the encoding of the dataset
   |  _____^
78 | |     Args:
79 | |         dataset (DataLoader): The data loader for the training data.
80 | |         config (dict): The configuration of the model.
81 | |         dataset_name (str): The name of the dataset
82 | | 
83 | |     """
   | |_______^ D415
84 |       Checkpoint_dir = config["running_dir"] + "/transformer"
   |
   = help: Add closing punctuation

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:84:5: N806 Variable `Checkpoint_dir` in function should be lowercase
   |
83 |     """
84 |     Checkpoint_dir = config["running_dir"] + "/transformer"
   |     ^^^^^^^^^^^^^^ N806
85 | 
86 |     files = glob.glob(Checkpoint_dir + "/*.ckpt")
   |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:86:13: PTH207 Replace `glob` with `Path.glob` or `Path.rglob`
   |
84 |     Checkpoint_dir = config["running_dir"] + "/transformer"
85 | 
86 |     files = glob.glob(Checkpoint_dir + "/*.ckpt")
   |             ^^^^^^^^^ PTH207
87 |     min_val_loss = 1000
88 |     for file in files:
   |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:96:5: N806 Variable `EncodingModel` in function should be lowercase
   |
94 |     save_config(config, config["running_dir"])
95 | 
96 |     EncodingModel = initialise_model(config)
   |     ^^^^^^^^^^^^^ N806
97 |     EncodingModel.eval()
98 |     EncodingModel = EncodingModel.to(config["device"])
   |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:98:5: N806 Variable `EncodingModel` in function should be lowercase
    |
 96 |     EncodingModel = initialise_model(config)
 97 |     EncodingModel.eval()
 98 |     EncodingModel = EncodingModel.to(config["device"])
    |     ^^^^^^^^^^^^^ N806
 99 |     data_list = []
100 |     counter = 0
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:113:9: SIM113 Use `enumerate()` for index variable `counter` in `for` loop
    |
111 |             )
112 |             data_list.append(molecule_frag.detach().cpu())
113 |         counter += 1
    |         ^^^^^^^^^^^^ SIM113
114 |         if counter % 1000 == 0:
115 |             print(counter)
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:115:13: T201 `print` found
    |
113 |         counter += 1
114 |         if counter % 1000 == 0:
115 |             print(counter)
    |             ^^^^^ T201
116 |             if save_folder == "":
117 |                 torch.save(
    |
    = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:145:5: D205 1 blank line required between summary line and description
    |
144 |   def initialise_model(config, max_iters=10):
145 |       """Initialise the model
    |  _____^
146 | |     Args:
147 | |         config (dict): The configuration of the model.
148 | |         max_iters (int): The maximum number of iterations.
149 | | 
150 | |     Returns
151 | |     -------
152 | |         Fragment_encoder: The initialised model.
153 | | 
154 | |     """
    | |_______^ D205
155 |       # config["device"] = "cuda" if torch.cuda.is_available() else "cpu"
156 |       model, graph_pred_linear = model_setup(config)
    |
    = help: Insert single blank line

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:155:5: ERA001 Found commented-out code
    |
154 |     """
155 |     # config["device"] = "cuda" if torch.cuda.is_available() else "cpu"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
156 |     model, graph_pred_linear = model_setup(config)
157 |     pymodel = Pymodel(model, graph_pred_linear, config)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:159:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
157 |     pymodel = Pymodel(model, graph_pred_linear, config)
158 | 
159 |     if os.path.exists(config["model_embedding_chkpt"]):
    |        ^^^^^^^^^^^^^^ PTH110
160 |         chkpt_path = config["model_embedding_chkpt"]
161 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:162:9: T201 `print` found
    |
160 |         chkpt_path = config["model_embedding_chkpt"]
161 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
162 |         print("Model loaded: ", config["model_embedding_chkpt"])
    |         ^^^^^ T201
163 |         # Pass the model and graph_pred_linear to the Pymodel constructor
164 |         # Load the state dictionary
    |
    = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:173:5: T201 `print` found
    |
171 |     else:
172 |         num_classes = config["model"]["emb_dim"]
173 |     print("lr", config["lr"])
    |     ^^^^^ T201
174 |     EncodingModel = Fragment_encoder(
175 |         input_dim=num_classes * max_oligomer_size,
    |
    = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:174:5: N806 Variable `EncodingModel` in function should be lowercase
    |
172 |         num_classes = config["model"]["emb_dim"]
173 |     print("lr", config["lr"])
174 |     EncodingModel = Fragment_encoder(
    |     ^^^^^^^^^^^^^ N806
175 |         input_dim=num_classes * max_oligomer_size,
176 |         model_dim=num_classes,
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:191:9: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
189 |     EncodingModel.model_name = config["model_name"]
190 |     if (
191 |         os.path.exists(f"{config['model_transformer_chkpt']}")
    |         ^^^^^^^^^^^^^^ PTH110
192 |         and config["model_transformer_chkpt"] != ""
193 |     ):
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:195:13: T201 `print` found
    |
193 |     ):
194 |         try:
195 |             print(
    |             ^^^^^ T201
196 |                 "loading model from checkpoint",
197 |                 f"{config['model_transformer_chkpt']}",
    |
    = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:204:16: BLE001 Do not catch blind exception: `Exception`
    |
202 |             )
203 |             EncodingModel.load_state_dict(state_dict["state_dict"])
204 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
205 |             print("loading model from checkpoint failed")
206 |             print(e)
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:205:13: T201 `print` found
    |
203 |             EncodingModel.load_state_dict(state_dict["state_dict"])
204 |         except Exception as e:
205 |             print("loading model from checkpoint failed")
    |             ^^^^^ T201
206 |             print(e)
207 |             # delete the checkpoint
    |
    = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:206:13: T201 `print` found
    |
204 |         except Exception as e:
205 |             print("loading model from checkpoint failed")
206 |             print(e)
    |             ^^^^^ T201
207 |             # delete the checkpoint
208 |             # os.remove(config["model_transformer_chkpt"])
    |
    = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:208:13: ERA001 Found commented-out code
    |
206 |             print(e)
207 |             # delete the checkpoint
208 |             # os.remove(config["model_transformer_chkpt"])
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
209 |     else:
210 |         print("no checkpoint found for encoding model")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:210:9: T201 `print` found
    |
208 |             # os.remove(config["model_transformer_chkpt"])
209 |     else:
210 |         print("no checkpoint found for encoding model")
    |         ^^^^^ T201
211 |     # print(EncodingModel.hparams.model_dim)
212 |     return EncodingModel
    |
    = help: Remove `print`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:211:5: ERA001 Found commented-out code
    |
209 |     else:
210 |         print("no checkpoint found for encoding model")
211 |     # print(EncodingModel.hparams.model_dim)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
212 |     return EncodingModel
    |
    = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:215:7: N801 Class name `Fragment_encoder` should use CapWords convention
    |
215 | class Fragment_encoder(TransformerPredictor):
    |       ^^^^^^^^^^^^^^^^ N801
216 |     def add_encoder(self, model_encoder, batch_size):
217 |         self.model_encoder = model_encoder
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:215:7: D101 Missing docstring in public class
    |
215 | class Fragment_encoder(TransformerPredictor):
    |       ^^^^^^^^^^^^^^^^ D101
216 |     def add_encoder(self, model_encoder, batch_size):
217 |         self.model_encoder = model_encoder
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:216:9: D102 Missing docstring in public method
    |
215 | class Fragment_encoder(TransformerPredictor):
216 |     def add_encoder(self, model_encoder, batch_size):
    |         ^^^^^^^^^^^ D102
217 |         self.model_encoder = model_encoder
218 |         self.hparams.batch_size = batch_size
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:220:9: D102 Missing docstring in public method
    |
218 |         self.hparams.batch_size = batch_size
219 | 
220 |     def add_graph_pred_linear(self, graph_pred_linear):
    |         ^^^^^^^^^^^^^^^^^^^^^ D102
221 |         self.graph_pred_linear = graph_pred_linear
222 |         # set the graph_pred_linear to eval mode
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:223:9: ERA001 Found commented-out code
    |
221 |         self.graph_pred_linear = graph_pred_linear
222 |         # set the graph_pred_linear to eval mode
223 |         # self.graph_pred_linear.eval()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
224 |         # freeze all the parameters
225 |         for param in self.graph_pred_linear.parameters():
    |
    = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:228:41: FBT002 Boolean default positional argument in function definition
    |
226 |             param.requires_grad = False
227 | 
228 |     def forward(self, batch, mask=None, add_positional_encoding=True):
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^ FBT002
229 |         """Args:
230 |         ----
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:229:9: D205 1 blank line required between summary line and description
    |
228 |       def forward(self, batch, mask=None, add_positional_encoding=True):
229 |           """Args:
    |  _________^
230 | |         ----
231 | |             x: Input features of shape [Batch, SeqLen, input_dim]
232 | |             mask: Mask to apply on the attention outputs (optional)
233 | |             add_positional_encoding: If True, we add the positional encoding to the input.
234 | |                                       Might not be desired for some tasks.
235 | | 
236 | |         """
    | |___________^ D205
237 |           if self.model_encoder is not None:
238 |               x = torch.zeros(
    |
    = help: Insert single blank line

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:229:9: D400 First line should end with a period
    |
228 |       def forward(self, batch, mask=None, add_positional_encoding=True):
229 |           """Args:
    |  _________^
230 | |         ----
231 | |             x: Input features of shape [Batch, SeqLen, input_dim]
232 | |             mask: Mask to apply on the attention outputs (optional)
233 | |             add_positional_encoding: If True, we add the positional encoding to the input.
234 | |                                       Might not be desired for some tasks.
235 | | 
236 | |         """
    | |___________^ D400
237 |           if self.model_encoder is not None:
238 |               x = torch.zeros(
    |
    = help: Add period

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:229:9: D415 First line should end with a period, question mark, or exclamation point
    |
228 |       def forward(self, batch, mask=None, add_positional_encoding=True):
229 |           """Args:
    |  _________^
230 | |         ----
231 | |             x: Input features of shape [Batch, SeqLen, input_dim]
232 | |             mask: Mask to apply on the attention outputs (optional)
233 | |             add_positional_encoding: If True, we add the positional encoding to the input.
234 | |                                       Might not be desired for some tasks.
235 | | 
236 | |         """
    | |___________^ D415
237 |           if self.model_encoder is not None:
238 |               x = torch.zeros(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:270:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
268 |         x = self.transformer(x, mask=mask)
269 |         x = self.output_net(x)
270 |         return x
    |                ^ RET504
271 | 
272 |     def _calculate_loss(self, batch, mode="train"):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:272:9: ANN202 Missing return type annotation for private function `_calculate_loss`
    |
270 |         return x
271 | 
272 |     def _calculate_loss(self, batch, mode="train"):
    |         ^^^^^^^^^^^^^^^ ANN202
273 |         """Calculate the loss for the given batch.
    |
    = help: Add return type annotation

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:288:9: ERA001 Found commented-out code
    |
286 |         inp_data, labels = batch, batch[0].y.squeeze()
287 | 
288 |         # inp_data = F.one_hot(inp_data, num_classes=self.hparams.num_classes).float()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
289 | 
290 |         # Perform prediction and calculate loss and accuracy
    |
    = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:300:9: ERA001 Found commented-out code
    |
298 |         )
299 |         loss = loss1 + 10*loss2
300 |         # print (labels.shape, preds.argmax(dim=-1).shape)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
301 |         # acc = (preds.argmax(dim=-1) == labels).float().mean()
    |
    = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:301:9: ERA001 Found commented-out code
    |
299 |         loss = loss1 + 10*loss2
300 |         # print (labels.shape, preds.argmax(dim=-1).shape)
301 |         # acc = (preds.argmax(dim=-1) == labels).float().mean()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
302 | 
303 |         # Logging
    |
    = help: Remove commented-out code

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:304:18: UP031 Use format specifiers instead of percent format
    |
303 |         # Logging
304 |         self.log("%s_loss" % mode, loss)
    |                  ^^^^^^^^^^^^^^^^ UP031
305 |         self.log("%s_loss1" % mode, loss1)
306 |         self.log("%s_loss2" % mode, loss2)
    |
    = help: Replace with format specifiers

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:305:18: UP031 Use format specifiers instead of percent format
    |
303 |         # Logging
304 |         self.log("%s_loss" % mode, loss)
305 |         self.log("%s_loss1" % mode, loss1)
    |                  ^^^^^^^^^^^^^^^^^ UP031
306 |         self.log("%s_loss2" % mode, loss2)
    |
    = help: Replace with format specifiers

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:306:18: UP031 Use format specifiers instead of percent format
    |
304 |         self.log("%s_loss" % mode, loss)
305 |         self.log("%s_loss1" % mode, loss1)
306 |         self.log("%s_loss2" % mode, loss2)
    |                  ^^^^^^^^^^^^^^^^^ UP031
307 | 
308 |         return loss
    |
    = help: Replace with format specifiers

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:310:9: D102 Missing docstring in public method
    |
308 |         return loss
309 | 
310 |     def training_step(self, batch, batch_idx):
    |         ^^^^^^^^^^^^^ D102
311 |         loss = self._calculate_loss(batch, mode="train")
312 |         return loss
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:310:36: ARG002 Unused method argument: `batch_idx`
    |
308 |         return loss
309 | 
310 |     def training_step(self, batch, batch_idx):
    |                                    ^^^^^^^^^ ARG002
311 |         loss = self._calculate_loss(batch, mode="train")
312 |         return loss
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:312:16: RET504 Unnecessary assignment to `loss` before `return` statement
    |
310 |     def training_step(self, batch, batch_idx):
311 |         loss = self._calculate_loss(batch, mode="train")
312 |         return loss
    |                ^^^^ RET504
313 | 
314 |     def validation_step(self, batch, batch_idx):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:314:9: D102 Missing docstring in public method
    |
312 |         return loss
313 | 
314 |     def validation_step(self, batch, batch_idx):
    |         ^^^^^^^^^^^^^^^ D102
315 |         loss = self._calculate_loss(batch, mode="val")
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:314:38: ARG002 Unused method argument: `batch_idx`
    |
312 |         return loss
313 | 
314 |     def validation_step(self, batch, batch_idx):
    |                                      ^^^^^^^^^ ARG002
315 |         loss = self._calculate_loss(batch, mode="val")
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:315:9: F841 Local variable `loss` is assigned to but never used
    |
314 |     def validation_step(self, batch, batch_idx):
315 |         loss = self._calculate_loss(batch, mode="val")
    |         ^^^^ F841
316 | 
317 |     def test_step(self, batch, batch_idx):
    |
    = help: Remove assignment to unused variable `loss`

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:317:9: D102 Missing docstring in public method
    |
315 |         loss = self._calculate_loss(batch, mode="val")
316 | 
317 |     def test_step(self, batch, batch_idx):
    |         ^^^^^^^^^ D102
318 |         loss = self._calculate_loss(batch, mode="test")
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:317:32: ARG002 Unused method argument: `batch_idx`
    |
315 |         loss = self._calculate_loss(batch, mode="val")
316 | 
317 |     def test_step(self, batch, batch_idx):
    |                                ^^^^^^^^^ ARG002
318 |         loss = self._calculate_loss(batch, mode="test")
    |

src\stk_search\geom3d\oligomer_encoding_with_transformer.py:318:9: F841 Local variable `loss` is assigned to but never used
    |
317 |     def test_step(self, batch, batch_idx):
318 |         loss = self._calculate_loss(batch, mode="test")
    |         ^^^^ F841
    |
    = help: Remove assignment to unused variable `loss`

src\stk_search\geom3d\pl_model.py:1:1: INP001 File `src\stk_search\geom3d\pl_model.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\pl_model.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """PyTorch Lightning model for 3D molecular representation learning.
2 | | """
  | |___^ D200
3 |   
4 |   import lightning.pytorch as pl
  |
  = help: Reformat to one line

src\stk_search\geom3d\pl_model.py:6:8: N812 Lowercase `functional` imported as non-lowercase `Functional`
  |
4 | import lightning.pytorch as pl
5 | import torch
6 | import torch.nn.functional as Functional
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N812
7 | from stk_search.geom3d.models import (
8 |     DimeNet,
  |

src\stk_search\geom3d\pl_model.py:19:7: D101 Missing docstring in public class
   |
19 | class PrintLearningRate(pl.Callback):
   |       ^^^^^^^^^^^^^^^^^ D101
20 |     def on_train_epoch_start(self, trainer, pl_module):
21 |         lr = trainer.optimizers[0].param_groups[0]["lr"]
   |

src\stk_search\geom3d\pl_model.py:20:9: D102 Missing docstring in public method
   |
19 | class PrintLearningRate(pl.Callback):
20 |     def on_train_epoch_start(self, trainer, pl_module):
   |         ^^^^^^^^^^^^^^^^^^^^ D102
21 |         lr = trainer.optimizers[0].param_groups[0]["lr"]
22 |         print(f"Learning Rate for Epoch {trainer.current_epoch}: {lr:.5e}")
   |

src\stk_search\geom3d\pl_model.py:20:45: ARG002 Unused method argument: `pl_module`
   |
19 | class PrintLearningRate(pl.Callback):
20 |     def on_train_epoch_start(self, trainer, pl_module):
   |                                             ^^^^^^^^^ ARG002
21 |         lr = trainer.optimizers[0].param_groups[0]["lr"]
22 |         print(f"Learning Rate for Epoch {trainer.current_epoch}: {lr:.5e}")
   |

src\stk_search\geom3d\pl_model.py:22:9: T201 `print` found
   |
20 |     def on_train_epoch_start(self, trainer, pl_module):
21 |         lr = trainer.optimizers[0].param_groups[0]["lr"]
22 |         print(f"Learning Rate for Epoch {trainer.current_epoch}: {lr:.5e}")
   |         ^^^^^ T201
   |
   = help: Remove `print`

src\stk_search\geom3d\pl_model.py:26:5: D205 1 blank line required between summary line and description
   |
25 |   class Pymodel(pl.LightningModule):
26 |       """PyTorch Lightning model for 3D molecular representation learning.
   |  _____^
27 | |     The loss function is the mean squared error (MSE) loss.
28 | |     The learning rate scheduler can be chosen from CosineAnnealingLR, CosineAnnealingWarmRestarts, and StepLR.
29 | |     The initial learning rate and the learning rate scheduler parameters can be set in the configuration file.
30 | | 
31 | |     Args:
32 | |     ----
33 | |     - model (nn.Module): 3D molecular representation learning model
34 | |     - graph_pred_linear (nn.Module): linear layer for graph prediction
35 | |     - config (dict): dictionary containing the configuration
36 | | 
37 | |     """
   | |_______^ D205
38 |   
39 |       def __init__(self, model, graph_pred_linear, config):
   |
   = help: Insert single blank line

src\stk_search\geom3d\pl_model.py:39:9: ANN204 Missing return type annotation for special method `__init__`
   |
37 |     """
38 | 
39 |     def __init__(self, model, graph_pred_linear, config):
   |         ^^^^^^^^ ANN204
40 |         super().__init__()
41 |         self.save_hyperparameters(ignore=["graph_pred_linear", "model"])
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\pl_model.py:39:9: D107 Missing docstring in `__init__`
   |
37 |     """
38 | 
39 |     def __init__(self, model, graph_pred_linear, config):
   |         ^^^^^^^^ D107
40 |         super().__init__()
41 |         self.save_hyperparameters(ignore=["graph_pred_linear", "model"])
   |

src\stk_search\geom3d\pl_model.py:46:9: D102 Missing docstring in public method
   |
44 |         self.config = config
45 | 
46 |     def training_step(self, batch, batch_idx):
   |         ^^^^^^^^^^^^^ D102
47 |         # training_step defines the train loop.
48 |         with torch.cuda.amp.autocast(
   |

src\stk_search\geom3d\pl_model.py:46:36: ARG002 Unused method argument: `batch_idx`
   |
44 |         self.config = config
45 | 
46 |     def training_step(self, batch, batch_idx):
   |                                    ^^^^^^^^^ ARG002
47 |         # training_step defines the train loop.
48 |         with torch.cuda.amp.autocast(
   |

src\stk_search\geom3d\pl_model.py:49:47: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
   |
47 |         # training_step defines the train loop.
48 |         with torch.cuda.amp.autocast(
49 |             enabled=self.trainer.precision == 16
   |                                               ^^ PLR2004
50 |         ):  # 16-bit precision for mixed precision training, activated only when self.trainer.precision == 16
51 |             loss = self._get_preds_loss_accuracy(batch)
   |

src\stk_search\geom3d\pl_model.py:68:38: ARG002 Unused method argument: `batch_idx`
   |
66 |         return loss
67 | 
68 |     def validation_step(self, batch, batch_idx):
   |                                      ^^^^^^^^^ ARG002
69 |         """Used for logging metrics"""
70 |         with torch.cuda.amp.autocast(
   |

src\stk_search\geom3d\pl_model.py:69:9: D400 First line should end with a period
   |
68 |     def validation_step(self, batch, batch_idx):
69 |         """Used for logging metrics"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
70 |         with torch.cuda.amp.autocast(
71 |             enabled=self.trainer.precision == 16
   |
   = help: Add period

src\stk_search\geom3d\pl_model.py:69:9: D401 First line of docstring should be in imperative mood: "Used for logging metrics"
   |
68 |     def validation_step(self, batch, batch_idx):
69 |         """Used for logging metrics"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
70 |         with torch.cuda.amp.autocast(
71 |             enabled=self.trainer.precision == 16
   |

src\stk_search\geom3d\pl_model.py:69:9: D415 First line should end with a period, question mark, or exclamation point
   |
68 |     def validation_step(self, batch, batch_idx):
69 |         """Used for logging metrics"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
70 |         with torch.cuda.amp.autocast(
71 |             enabled=self.trainer.precision == 16
   |
   = help: Add closing punctuation

src\stk_search\geom3d\pl_model.py:71:47: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
   |
69 |         """Used for logging metrics"""
70 |         with torch.cuda.amp.autocast(
71 |             enabled=self.trainer.precision == 16
   |                                               ^^ PLR2004
72 |         ):  # 16-bit precision for mixed precision training, activated only when self.trainer.precision == 16
73 |             loss = self._get_preds_loss_accuracy(batch)
   |

src\stk_search\geom3d\pl_model.py:79:9: ANN202 Missing return type annotation for private function `_get_preds_loss_accuracy`
   |
77 |         return loss
78 | 
79 |     def _get_preds_loss_accuracy(self, batch):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
80 |         """Convenience function since train/valid/test steps are similar"""
81 |         batch = batch.to(self.device)
   |
   = help: Add return type annotation

src\stk_search\geom3d\pl_model.py:80:9: D400 First line should end with a period
   |
79 |     def _get_preds_loss_accuracy(self, batch):
80 |         """Convenience function since train/valid/test steps are similar"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
81 |         batch = batch.to(self.device)
82 |         z = self.forward(batch)
   |
   = help: Add period

src\stk_search\geom3d\pl_model.py:80:9: D401 First line of docstring should be in imperative mood: "Convenience function since train/valid/test steps are similar"
   |
79 |     def _get_preds_loss_accuracy(self, batch):
80 |         """Convenience function since train/valid/test steps are similar"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
81 |         batch = batch.to(self.device)
82 |         z = self.forward(batch)
   |

src\stk_search\geom3d\pl_model.py:80:9: D415 First line should end with a period, question mark, or exclamation point
   |
79 |     def _get_preds_loss_accuracy(self, batch):
80 |         """Convenience function since train/valid/test steps are similar"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
81 |         batch = batch.to(self.device)
82 |         z = self.forward(batch)
   |
   = help: Add closing punctuation

src\stk_search\geom3d\pl_model.py:90:9: D102 Missing docstring in public method
   |
88 |         return loss
89 | 
90 |     def configure_optimizers(self):
   |         ^^^^^^^^^^^^^^^^^^^^ D102
91 |         # set up optimizer
92 |         # make sure the optimiser step does not reset the val_loss metrics
   |

src\stk_search\geom3d\pl_model.py:98:9: F841 Local variable `monitor` is assigned to but never used
    |
 97 |         lr_scheduler = None
 98 |         monitor = None
    |         ^^^^^^^ F841
 99 | 
100 |         if config["lr_scheduler"] == "CosineAnnealingLR":
    |
    = help: Remove assignment to unused variable `monitor`

src\stk_search\geom3d\pl_model.py:104:13: T201 `print` found
    |
102 |                 optimizer, config["max_epochs"]
103 |             )
104 |             print("Apply lr scheduler CosineAnnealingLR")
    |             ^^^^^ T201
105 |         elif config["lr_scheduler"] == "CosineAnnealingWarmRestarts":
106 |             lr_scheduler = optim.lr_scheduler.CosineAnnealingWarmRestarts(
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:109:13: T201 `print` found
    |
107 |                 optimizer, config["max_epochs"], eta_min=1e-4
108 |             )
109 |             print("Apply lr scheduler CosineAnnealingWarmRestarts")
    |             ^^^^^ T201
110 |         elif config["lr_scheduler"] == "StepLR":
111 |             lr_scheduler = optim.lr_scheduler.StepLR(
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:116:13: T201 `print` found
    |
114 |                 gamma=config["lr_decay_factor"],
115 |             )
116 |             print("Apply lr scheduler StepLR")
    |             ^^^^^ T201
117 |         else:
118 |             print("lr scheduler {} is not included.")
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:118:13: T201 `print` found
    |
116 |             print("Apply lr scheduler StepLR")
117 |         else:
118 |             print("lr scheduler {} is not included.")
    |             ^^^^^ T201
119 | 
120 |         return [optimizer], [lr_scheduler]
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:122:9: ERA001 Found commented-out code
    |
120 |         return [optimizer], [lr_scheduler]
121 | 
122 |         # optimizer = torch.optim.Adam(self.parameters(), lr=5e-4)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
123 |         # return optimizer
    |
    = help: Remove commented-out code

src\stk_search\geom3d\pl_model.py:123:9: ERA001 Found commented-out code
    |
122 |         # optimizer = torch.optim.Adam(self.parameters(), lr=5e-4)
123 |         # return optimizer
    |         ^^^^^^^^^^^^^^^^^^ ERA001
124 | 
125 |     def forward(self, batch):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\pl_model.py:125:9: D102 Missing docstring in public method
    |
123 |         # return optimizer
124 | 
125 |     def forward(self, batch):
    |         ^^^^^^^ D102
126 |         batch = batch.to(self.device)
127 |         model_name = type(self.molecule_3D_repr).__name__
    |

src\stk_search\geom3d\pl_model.py:160:7: N801 Class name `Pymodel_new` should use CapWords convention
    |
160 | class Pymodel_new(pl.LightningModule):
    |       ^^^^^^^^^^^ N801
161 |     """lightning model taking into account two different oligomer representations"""
    |

src\stk_search\geom3d\pl_model.py:161:5: D400 First line should end with a period
    |
160 | class Pymodel_new(pl.LightningModule):
161 |     """lightning model taking into account two different oligomer representations"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
162 | 
163 |     def __init__(self, model, graph_pred_linear, config):
    |
    = help: Add period

src\stk_search\geom3d\pl_model.py:161:5: D415 First line should end with a period, question mark, or exclamation point
    |
160 | class Pymodel_new(pl.LightningModule):
161 |     """lightning model taking into account two different oligomer representations"""
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
162 | 
163 |     def __init__(self, model, graph_pred_linear, config):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\pl_model.py:163:9: ANN204 Missing return type annotation for special method `__init__`
    |
161 |     """lightning model taking into account two different oligomer representations"""
162 | 
163 |     def __init__(self, model, graph_pred_linear, config):
    |         ^^^^^^^^ ANN204
164 |         super().__init__()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\pl_model.py:163:9: D107 Missing docstring in `__init__`
    |
161 |     """lightning model taking into account two different oligomer representations"""
162 | 
163 |     def __init__(self, model, graph_pred_linear, config):
    |         ^^^^^^^^ D107
164 |         super().__init__()
    |

src\stk_search\geom3d\pl_model.py:173:9: D102 Missing docstring in public method
    |
173 |     def training_step(self, batch, batch_idx):
    |         ^^^^^^^^^^^^^ D102
174 |         # training_step defines the train loop.
175 |         with torch.cuda.amp.autocast(
    |

src\stk_search\geom3d\pl_model.py:173:36: ARG002 Unused method argument: `batch_idx`
    |
173 |     def training_step(self, batch, batch_idx):
    |                                    ^^^^^^^^^ ARG002
174 |         # training_step defines the train loop.
175 |         with torch.cuda.amp.autocast(
    |

src\stk_search\geom3d\pl_model.py:176:47: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
    |
174 |         # training_step defines the train loop.
175 |         with torch.cuda.amp.autocast(
176 |             enabled=self.trainer.precision == 16
    |                                               ^^ PLR2004
177 |         ):  # 16-bit precision for mixed precision training, activated only when self.trainer.precision == 16
178 |             loss, loss1, loss2 = self._get_preds_loss_accuracy(batch)
    |

src\stk_search\geom3d\pl_model.py:196:38: ARG002 Unused method argument: `batch_idx`
    |
194 |         return loss
195 | 
196 |     def validation_step(self, batch, batch_idx):
    |                                      ^^^^^^^^^ ARG002
197 |         """Used for logging metrics"""
198 |         with torch.cuda.amp.autocast(
    |

src\stk_search\geom3d\pl_model.py:197:9: D400 First line should end with a period
    |
196 |     def validation_step(self, batch, batch_idx):
197 |         """Used for logging metrics"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
198 |         with torch.cuda.amp.autocast(
199 |             enabled=self.trainer.precision == 16
    |
    = help: Add period

src\stk_search\geom3d\pl_model.py:197:9: D401 First line of docstring should be in imperative mood: "Used for logging metrics"
    |
196 |     def validation_step(self, batch, batch_idx):
197 |         """Used for logging metrics"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
198 |         with torch.cuda.amp.autocast(
199 |             enabled=self.trainer.precision == 16
    |

src\stk_search\geom3d\pl_model.py:197:9: D415 First line should end with a period, question mark, or exclamation point
    |
196 |     def validation_step(self, batch, batch_idx):
197 |         """Used for logging metrics"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
198 |         with torch.cuda.amp.autocast(
199 |             enabled=self.trainer.precision == 16
    |
    = help: Add closing punctuation

src\stk_search\geom3d\pl_model.py:199:47: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
    |
197 |         """Used for logging metrics"""
198 |         with torch.cuda.amp.autocast(
199 |             enabled=self.trainer.precision == 16
    |                                               ^^ PLR2004
200 |         ):  # 16-bit precision for mixed precision training, activated only when self.trainer.precision == 16
201 |             loss, loss1, loss2 = self._get_preds_loss_accuracy(batch)
    |

src\stk_search\geom3d\pl_model.py:209:9: ANN202 Missing return type annotation for private function `_get_preds_loss_accuracy`
    |
207 |         return loss
208 | 
209 |     def _get_preds_loss_accuracy(self, batch):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
210 |         """Convenience function since train/valid/test steps are similar"""
211 |         batch = batch.to(self.device)
    |
    = help: Add return type annotation

src\stk_search\geom3d\pl_model.py:210:9: D400 First line should end with a period
    |
209 |     def _get_preds_loss_accuracy(self, batch):
210 |         """Convenience function since train/valid/test steps are similar"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
211 |         batch = batch.to(self.device)
212 |         z, z_opt, z_repr, z_repr_opt = self.forward_train(batch)
    |
    = help: Add period

src\stk_search\geom3d\pl_model.py:210:9: D401 First line of docstring should be in imperative mood: "Convenience function since train/valid/test steps are similar"
    |
209 |     def _get_preds_loss_accuracy(self, batch):
210 |         """Convenience function since train/valid/test steps are similar"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
211 |         batch = batch.to(self.device)
212 |         z, z_opt, z_repr, z_repr_opt = self.forward_train(batch)
    |

src\stk_search\geom3d\pl_model.py:210:9: D415 First line should end with a period, question mark, or exclamation point
    |
209 |     def _get_preds_loss_accuracy(self, batch):
210 |         """Convenience function since train/valid/test steps are similar"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
211 |         batch = batch.to(self.device)
212 |         z, z_opt, z_repr, z_repr_opt = self.forward_train(batch)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\pl_model.py:217:13: ERA001 Found commented-out code
    |
215 |             loss1 = Functional.mse_loss(z_opt, batch.y.unsqueeze(1))
216 |             loss2 = Functional.mse_loss(z_repr, z_repr_opt)
217 |             # loss = loss + Functional.mse_loss(z, batch.y.unsqueeze(1))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
218 |             a = torch.tensor(0.5, requires_grad=True)
219 |             loss = a * loss1 + (1 - a) * loss2
    |
    = help: Remove commented-out code

src\stk_search\geom3d\pl_model.py:224:9: D102 Missing docstring in public method
    |
222 |         return loss, loss1, loss2
223 | 
224 |     def forward_train(self, batch):
    |         ^^^^^^^^^^^^^ D102
225 | 
226 |         batch = batch.to(self.device)
    |

src\stk_search\geom3d\pl_model.py:229:13: N802 Function name `get_Z` should be lowercase
    |
227 |         model_name = type(self.molecule_3D_repr).__name__
228 | 
229 |         def get_Z(x, positions, model_name, batch):
    |             ^^^^^ N802
230 |             if model_name == "EquiformerEnergy":
231 |                 model_name = "Equiformer"
    |

src\stk_search\geom3d\pl_model.py:229:13: ANN202 Missing return type annotation for private function `get_Z`
    |
227 |         model_name = type(self.molecule_3D_repr).__name__
228 | 
229 |         def get_Z(x, positions, model_name, batch):
    |             ^^^^^ ANN202
230 |             if model_name == "EquiformerEnergy":
231 |                 model_name = "Equiformer"
    |
    = help: Add return type annotation

src\stk_search\geom3d\pl_model.py:233:13: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
231 |                   model_name = "Equiformer"
232 |   
233 |               if self.graph_pred_linear is not None:
    |  _____________^
234 | |                 if model_name == "PaiNN":
235 | |                     z_repr = self.molecule_3D_repr(
236 | |                         x,
237 | |                         positions,
238 | |                         batch.radius_edge_index,
239 | |                         batch.batch,
240 | |                     ).squeeze()
241 | |                 else:
242 | |                     z_repr = self.molecule_3D_repr(x, positions, batch.batch)
243 | | 
244 | |                 return z_repr
    | |_____________________________^ RET503
245 |   
246 |           z_repr = get_Z(batch.x, batch.positions, model_name, batch)
    |
    = help: Add explicit `return` statement

src\stk_search\geom3d\pl_model.py:255:9: D102 Missing docstring in public method
    |
254 |         return z, z_opt, z_repr, z_repr_opt
255 |     def configure_optimizers(self):
    |         ^^^^^^^^^^^^^^^^^^^^ D102
256 |         # set up optimizer
257 |         # make sure the optimiser step does not reset the val_loss metrics
    |

src\stk_search\geom3d\pl_model.py:263:9: F841 Local variable `monitor` is assigned to but never used
    |
262 |         lr_scheduler = None
263 |         monitor = None
    |         ^^^^^^^ F841
264 | 
265 |         if config["lr_scheduler"] == "CosineAnnealingLR":
    |
    = help: Remove assignment to unused variable `monitor`

src\stk_search\geom3d\pl_model.py:269:13: T201 `print` found
    |
267 |                 optimizer, config["max_epochs"]
268 |             )
269 |             print("Apply lr scheduler CosineAnnealingLR")
    |             ^^^^^ T201
270 |         elif config["lr_scheduler"] == "CosineAnnealingWarmRestarts":
271 |             lr_scheduler = optim.lr_scheduler.CosineAnnealingWarmRestarts(
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:274:13: T201 `print` found
    |
272 |                 optimizer, config["max_epochs"], eta_min=1e-4
273 |             )
274 |             print("Apply lr scheduler CosineAnnealingWarmRestarts")
    |             ^^^^^ T201
275 |         elif config["lr_scheduler"] == "StepLR":
276 |             lr_scheduler = optim.lr_scheduler.StepLR(
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:281:13: T201 `print` found
    |
279 |                 gamma=config["lr_decay_factor"],
280 |             )
281 |             print("Apply lr scheduler StepLR")
    |             ^^^^^ T201
282 |         else:
283 |             print("lr scheduler {} is not included.")
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:283:13: T201 `print` found
    |
281 |             print("Apply lr scheduler StepLR")
282 |         else:
283 |             print("lr scheduler {} is not included.")
    |             ^^^^^ T201
284 | 
285 |         return [optimizer], [lr_scheduler]
    |
    = help: Remove `print`

src\stk_search\geom3d\pl_model.py:287:9: ERA001 Found commented-out code
    |
285 |         return [optimizer], [lr_scheduler]
286 | 
287 |         # optimizer = torch.optim.Adam(self.parameters(), lr=5e-4)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
288 |         # return optimizer
    |
    = help: Remove commented-out code

src\stk_search\geom3d\pl_model.py:288:9: ERA001 Found commented-out code
    |
287 |         # optimizer = torch.optim.Adam(self.parameters(), lr=5e-4)
288 |         # return optimizer
    |         ^^^^^^^^^^^^^^^^^^ ERA001
289 | 
290 |     def forward(self, batch):
    |
    = help: Remove commented-out code

src\stk_search\geom3d\pl_model.py:290:9: D102 Missing docstring in public method
    |
288 |         # return optimizer
289 | 
290 |     def forward(self, batch):
    |         ^^^^^^^ D102
291 |         batch = batch.to(self.device)
292 |         model_name = type(self.molecule_3D_repr).__name__
    |

src\stk_search\geom3d\pl_model.py:325:5: C901 `model_setup` is too complex (11 > 10)
    |
325 | def model_setup(config, trial=None):
    |     ^^^^^^^^^^^ C901
326 |     """Setup the model based on the configuration file.
    |

src\stk_search\geom3d\pl_model.py:325:5: D417 Missing argument descriptions in the docstring for `model_setup`: `config`, `trial`
    |
325 | def model_setup(config, trial=None):
    |     ^^^^^^^^^^^ D417
326 |     """Setup the model based on the configuration file.
    |

src\stk_search\geom3d\pl_model.py:326:5: D401 First line of docstring should be in imperative mood: "Setup the model based on the configuration file."
    |
325 |   def model_setup(config, trial=None):
326 |       """Setup the model based on the configuration file.
    |  _____^
327 | | 
328 | |     Args:
329 | |     ----
330 | |     - config (dict): configuration file
331 | |     - trial (optuna.trial): optuna trial object
332 | | 
333 | |     Returns:
334 | |     -------
335 | |     - model (nn.Module): model
336 | |     - graph_pred_linear (nn.Module): output layer for the model
337 | | 
338 | |     """
    | |_______^ D401
339 |       model_config = config["model"]
    |

src\stk_search\geom3d\pl_model.py:342:18: F821 Undefined name `hyperparameter_setup`
    |
341 |     if trial:
342 |         config = hyperparameter_setup(config, trial)
    |                  ^^^^^^^^^^^^^^^^^^^^ F821
343 | 
344 |     if config["model_name"] == "SchNet":
    |

src\stk_search\geom3d\pl_model.py:512:15: TRY003 Avoid specifying long messages outside the exception class
    |
511 |     else:
512 |         raise ValueError("Invalid model name")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
513 | 
514 |     return model, graph_pred_linear
    |

src\stk_search\geom3d\pl_model.py:512:26: EM101 Exception must not use a string literal, assign to variable first
    |
511 |     else:
512 |         raise ValueError("Invalid model name")
    |                          ^^^^^^^^^^^^^^^^^^^^ EM101
513 | 
514 |     return model, graph_pred_linear
    |
    = help: Assign to variable; remove string literal

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:1:1: INP001 File `src\stk_search\geom3d\polymer_GNN_architecture_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\polymer_GNN_architecture_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\polymer_GNN_architecture_utils.py:14:5: D103 Missing docstring in public function
   |
14 | def join_keys(polymer):
   |     ^^^^^^^^^ D103
15 |     keys = [stk.InchiKey().get_key(bb) for bb in polymer.get_building_blocks()]
16 |     return "_".join(keys)
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:19:5: D103 Missing docstring in public function
   |
19 | def get_bbs_dict(client, database):
   |     ^^^^^^^^^^^^ D103
20 |     client = pymongo.MongoClient(client)
21 |     db_mol = stk.MoleculeMongoDb(
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:36:5: N802 Function name `Build_polymers` should be lowercase
   |
36 | def Build_polymers(element: pd.DataFrame, bbs_dict):
   |     ^^^^^^^^^^^^^^ N802
37 | 
38 |     # print(genes)
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:36:5: D103 Missing docstring in public function
   |
36 | def Build_polymers(element: pd.DataFrame, bbs_dict):
   |     ^^^^^^^^^^^^^^ D103
37 | 
38 |     # print(genes)
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:38:5: ERA001 Found commented-out code
   |
36 | def Build_polymers(element: pd.DataFrame, bbs_dict):
37 | 
38 |     # print(genes)
   |     ^^^^^^^^^^^^^^ ERA001
39 | 
40 |     InchiKey_cols = [col for col in element.columns if "InChIKey_" in col]
   |
   = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:40:5: N806 Variable `InchiKey_cols` in function should be lowercase
   |
38 |     # print(genes)
39 | 
40 |     InchiKey_cols = [col for col in element.columns if "InChIKey_" in col]
   |     ^^^^^^^^^^^^^ N806
41 |     oligomer_size = len(InchiKey_cols)
42 |     genes = "ABCDEFGH"
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:48:5: ERA001 Found commented-out code
   |
46 |     repeating_unit = repeating_unit.join(genes)
47 | 
48 |     # print(element[InchiKey_cols].values.flatten())
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
49 |     def gen_mol(elem):
50 |         precursors = []
   |
   = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:49:9: ANN202 Missing return type annotation for private function `gen_mol`
   |
48 |     # print(element[InchiKey_cols].values.flatten())
49 |     def gen_mol(elem):
   |         ^^^^^^^ ANN202
50 |         precursors = []
51 |         for fragment in elem[InchiKey_cols].values.flatten():
   |
   = help: Add return type annotation

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:51:25: PD011 Use `.to_numpy()` instead of `.values`
   |
49 |     def gen_mol(elem):
50 |         precursors = []
51 |         for fragment in elem[InchiKey_cols].values.flatten():
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
52 |             bb = bbs_dict[fragment]
53 |             precursors.append(bb)
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:65:22: C411 Unnecessary `list` call (remove the outer call to `list()`)
   |
63 |           positions = np.vstack(dat_list)
64 |           positions = torch.tensor(positions, dtype=torch.float)
65 |           atom_types = list(
   |  ______________________^
66 | |             [
67 | |                 atom.get_atom().get_atomic_number()
68 | |                 for atom in polymer.get_atom_infos()
69 | |             ]
70 | |         )
   | |_________^ C411
71 |           atom_types = torch.tensor(atom_types, dtype=torch.long)
   |
   = help: Remove outer `list` call

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:81:16: RET504 Unnecessary assignment to `molecule` before `return` statement
   |
79 |             y=elem["target"],
80 |         )
81 |         return molecule
   |                ^^^^^^^^ RET504
82 | 
83 |     element["polymer"] = element.swifter.apply(lambda x: gen_mol(x), axis=1)
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:87:5: D417 Missing argument descriptions in the docstring for `load_molecule`: `InChIKey`, `db`, `target`
   |
87 | def load_molecule(InChIKey, target, db):
   |     ^^^^^^^^^^^^^ D417
88 |     """Load a molecule from the database
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:87:19: N803 Argument name `InChIKey` should be lowercase
   |
87 | def load_molecule(InChIKey, target, db):
   |                   ^^^^^^^^ N803
88 |     """Load a molecule from the database
   |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:88:5: D400 First line should end with a period
    |
 87 |   def load_molecule(InChIKey, target, db):
 88 |       """Load a molecule from the database
    |  _____^
 89 | | 
 90 | |     Args:
 91 | |     ----
 92 | |     - InChIKey (str): the InChIKey of the molecule
 93 | |     - target (float): the target value of the molecule
 94 | |     - db (stk.ConstructedMoleculeMongoDb): the database
 95 | | 
 96 | |     Returns:
 97 | |     -------
 98 | |     - molecule (Data): the molecule as a Data object
 99 | | 
100 | |     """
    | |_______^ D400
101 |       polymer = None
102 |       try:
    |
    = help: Add period

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:88:5: D415 First line should end with a period, question mark, or exclamation point
    |
 87 |   def load_molecule(InChIKey, target, db):
 88 |       """Load a molecule from the database
    |  _____^
 89 | | 
 90 | |     Args:
 91 | |     ----
 92 | |     - InChIKey (str): the InChIKey of the molecule
 93 | |     - target (float): the target value of the molecule
 94 | |     - db (stk.ConstructedMoleculeMongoDb): the database
 95 | | 
 96 | |     Returns:
 97 | |     -------
 98 | |     - molecule (Data): the molecule as a Data object
 99 | | 
100 | |     """
    | |_______^ D415
101 |       polymer = None
102 |       try:
    |
    = help: Add closing punctuation

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:105:9: ERA001 Found commented-out code
    |
103 |         polymer = db.get({"InChIKey": InChIKey})
104 |         # Print the complete dictionary returned from the database
105 |         # print("Database entry for InChIKey:", polymer)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
106 |     except KeyError:
107 |         print(f"No key found in the database with a key of: {InChIKey}")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:107:9: T201 `print` found
    |
105 |         # print("Database entry for InChIKey:", polymer)
106 |     except KeyError:
107 |         print(f"No key found in the database with a key of: {InChIKey}")
    |         ^^^^^ T201
108 |         # Handle the missing key case (e.g., return a default value or raise an exception)
    |
    = help: Remove `print`

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:114:22: C411 Unnecessary `list` call (remove the outer call to `list()`)
    |
112 |           positions = np.vstack(dat_list)
113 |           positions = torch.tensor(positions, dtype=torch.float)
114 |           atom_types = list(
    |  ______________________^
115 | |             [
116 | |                 atom.get_atom().get_atomic_number()
117 | |                 for atom in polymer.get_atom_infos()
118 | |             ]
119 | |         )
    | |_________^ C411
120 |           atom_types = torch.tensor(atom_types, dtype=torch.long)
121 |           y = torch.tensor(target, dtype=torch.float32)
    |
    = help: Remove outer `list` call

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:130:16: RET504 Unnecessary assignment to `molecule` before `return` statement
    |
128 |             bb_key=join_keys(polymer),
129 |         )
130 |         return molecule
    |                ^^^^^^^^ RET504
131 |     else:
132 |         return None
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:131:5: RET505 Unnecessary `else` after `return` statement
    |
129 |         )
130 |         return molecule
131 |     else:
    |     ^^^^ RET505
132 |         return None
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:135:5: D103 Missing docstring in public function
    |
135 | def get_dataset_polymer_opt(config, element):
    |     ^^^^^^^^^^^^^^^^^^^^^^^ D103
136 |     client = pymongo.MongoClient(config["pymongo_client"])
137 |     db = stk.ConstructedMoleculeMongoDb(
    |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:147:5: D103 Missing docstring in public function
    |
147 | def add_position_opt(dataset, dataset_opt):
    |     ^^^^^^^^^^^^^^^^ D103
148 |     for i in range(len(dataset)):
149 |         dataset[i].positions_opt = dataset_opt[i].positions
    |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:154:5: D103 Missing docstring in public function
    |
154 | def get_dataset_polymer(element: pd.DataFrame, bbs_dict, config):
    |     ^^^^^^^^^^^^^^^^^^^ D103
155 |     # element_copy = element[[f'InChIKey_{i}' for i in range(oligomer_size)]].copy()
156 |     dataset_poly = Build_polymers(element, bbs_dict)
    |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:155:5: ERA001 Found commented-out code
    |
154 | def get_dataset_polymer(element: pd.DataFrame, bbs_dict, config):
155 |     # element_copy = element[[f'InChIKey_{i}' for i in range(oligomer_size)]].copy()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
156 |     dataset_poly = Build_polymers(element, bbs_dict)
157 |     dataset_poly_opt = get_dataset_polymer_opt(config, element)
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:159:12: RET504 Unnecessary assignment to `dataset` before `return` statement
    |
157 |     dataset_poly_opt = get_dataset_polymer_opt(config, element)
158 |     dataset = add_position_opt(dataset_poly, dataset_poly_opt)
159 |     return dataset
    |            ^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:163:5: D205 1 blank line required between summary line and description
    |
162 |   def get_data_loader(dataset, config):
163 |       """Get the dataloader
    |  _____^
164 | |     Args:
165 | |         dataset: list
166 | |             list of the dataset
167 | |         config: dict
168 | |             configuration file
169 | | 
170 | |     Returns
171 | |     -------
172 | |         loader: torch_geometric.loader.DataLoader
173 | |             dataloader for the dataset
174 | | 
175 | |     """
    | |_______^ D205
176 |       # Set dataloaders
177 |       loader = DataLoader(
    |
    = help: Insert single blank line

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:163:5: D400 First line should end with a period
    |
162 |   def get_data_loader(dataset, config):
163 |       """Get the dataloader
    |  _____^
164 | |     Args:
165 | |         dataset: list
166 | |             list of the dataset
167 | |         config: dict
168 | |             configuration file
169 | | 
170 | |     Returns
171 | |     -------
172 | |         loader: torch_geometric.loader.DataLoader
173 | |             dataloader for the dataset
174 | | 
175 | |     """
    | |_______^ D400
176 |       # Set dataloaders
177 |       loader = DataLoader(
    |
    = help: Add period

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:163:5: D415 First line should end with a period, question mark, or exclamation point
    |
162 |   def get_data_loader(dataset, config):
163 |       """Get the dataloader
    |  _____^
164 | |     Args:
165 | |         dataset: list
166 | |             list of the dataset
167 | |         config: dict
168 | |             configuration file
169 | | 
170 | |     Returns
171 | |     -------
172 | |         loader: torch_geometric.loader.DataLoader
173 | |             dataloader for the dataset
174 | | 
175 | |     """
    | |_______^ D415
176 |       # Set dataloaders
177 |       loader = DataLoader(
    |
    = help: Add closing punctuation

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:185:12: RET504 Unnecessary assignment to `loader` before `return` statement
    |
183 |     )
184 | 
185 |     return loader
    |            ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:189:5: D205 1 blank line required between summary line and description
    |
188 |   def generate_dataset_and_dataloader(config, bbs_dict):
189 |       """Generate the dataset and the dataloader
    |  _____^
190 | |     Args:
191 | |         config: dict
192 | |             configuration file
193 | |     Returns:
194 | |         train_loader: torch_geometric.loader.DataLoader
195 | |             dataloader for the training set
196 | |         val_loader: torch_geometric.loader.DataLoader
197 | |             dataloader for the validation set
198 | |         test_loader: torch_geometric.loader.DataLoader
199 | |             dataloader for the test set
200 | |         dataset_train: list
201 | |             list of the training dataset
202 | |         dataset_val: list
203 | |             list of the validation dataset
204 | |         dataset_test: list
205 | |             list of the test dataset
206 | |     """
    | |_______^ D205
207 |   
208 |       def get_dataset_dataloader(config, df_name="train"):
    |
    = help: Insert single blank line

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:189:5: D400 First line should end with a period
    |
188 |   def generate_dataset_and_dataloader(config, bbs_dict):
189 |       """Generate the dataset and the dataloader
    |  _____^
190 | |     Args:
191 | |         config: dict
192 | |             configuration file
193 | |     Returns:
194 | |         train_loader: torch_geometric.loader.DataLoader
195 | |             dataloader for the training set
196 | |         val_loader: torch_geometric.loader.DataLoader
197 | |             dataloader for the validation set
198 | |         test_loader: torch_geometric.loader.DataLoader
199 | |             dataloader for the test set
200 | |         dataset_train: list
201 | |             list of the training dataset
202 | |         dataset_val: list
203 | |             list of the validation dataset
204 | |         dataset_test: list
205 | |             list of the test dataset
206 | |     """
    | |_______^ D400
207 |   
208 |       def get_dataset_dataloader(config, df_name="train"):
    |
    = help: Add period

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:189:5: D415 First line should end with a period, question mark, or exclamation point
    |
188 |   def generate_dataset_and_dataloader(config, bbs_dict):
189 |       """Generate the dataset and the dataloader
    |  _____^
190 | |     Args:
191 | |         config: dict
192 | |             configuration file
193 | |     Returns:
194 | |         train_loader: torch_geometric.loader.DataLoader
195 | |             dataloader for the training set
196 | |         val_loader: torch_geometric.loader.DataLoader
197 | |             dataloader for the validation set
198 | |         test_loader: torch_geometric.loader.DataLoader
199 | |             dataloader for the test set
200 | |         dataset_train: list
201 | |             list of the training dataset
202 | |         dataset_val: list
203 | |             list of the validation dataset
204 | |         dataset_test: list
205 | |             list of the test dataset
206 | |     """
    | |_______^ D415
207 |   
208 |       def get_dataset_dataloader(config, df_name="train"):
    |
    = help: Add closing punctuation

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:208:9: ANN202 Missing return type annotation for private function `get_dataset_dataloader`
    |
206 |     """
207 | 
208 |     def get_dataset_dataloader(config, df_name="train"):
    |         ^^^^^^^^^^^^^^^^^^^^^^ ANN202
209 |         df_precursors = pd.read_pickle(config["df_precursor"])
210 |         if f"dataset_path_{df_name}" in config.keys():
    |
    = help: Add return type annotation

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:209:9: F841 Local variable `df_precursors` is assigned to but never used
    |
208 |     def get_dataset_dataloader(config, df_name="train"):
209 |         df_precursors = pd.read_pickle(config["df_precursor"])
    |         ^^^^^^^^^^^^^ F841
210 |         if f"dataset_path_{df_name}" in config.keys():
211 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
    |
    = help: Remove assignment to unused variable `df_precursors`

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:209:25: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
208 |     def get_dataset_dataloader(config, df_name="train"):
209 |         df_precursors = pd.read_pickle(config["df_precursor"])
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
210 |         if f"dataset_path_{df_name}" in config.keys():
211 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
    |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:210:12: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
208 |     def get_dataset_dataloader(config, df_name="train"):
209 |         df_precursors = pd.read_pickle(config["df_precursor"])
210 |         if f"dataset_path_{df_name}" in config.keys():
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
211 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
212 |                 if "device" in config.keys():
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:211:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
209 |         df_precursors = pd.read_pickle(config["df_precursor"])
210 |         if f"dataset_path_{df_name}" in config.keys():
211 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
    |                ^^^^^^^^^^^^^^ PTH110
212 |                 if "device" in config.keys():
213 |                     dataset = torch.load(
    |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:212:20: SIM118 Use `key in dict` instead of `key in dict.keys()`
    |
210 |         if f"dataset_path_{df_name}" in config.keys():
211 |             if os.path.exists(config["dataset_path" + f"_{df_name}"]):
212 |                 if "device" in config.keys():
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
213 |                     dataset = torch.load(
214 |                         config["dataset_path" + f"_{df_name}"],
    |
    = help: Remove `.keys()`

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:223:13: RET505 Unnecessary `else` after `return` statement
    |
221 |                 data_loader = get_data_loader(dataset, config)
222 |                 return dataset, data_loader
223 |             else:
    |             ^^^^ RET505
224 |                 print("dataset not found")
225 |         df = pd.read_csv(config["running_dir"] + f"/df_{df_name}.csv")
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:224:17: T201 `print` found
    |
222 |                 return dataset, data_loader
223 |             else:
224 |                 print("dataset not found")
    |                 ^^^^^ T201
225 |         df = pd.read_csv(config["running_dir"] + f"/df_{df_name}.csv")
226 |         dataset = get_dataset_polymer(
    |
    = help: Remove `print`

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:225:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
223 |             else:
224 |                 print("dataset not found")
225 |         df = pd.read_csv(config["running_dir"] + f"/df_{df_name}.csv")
    |         ^^ PD901
226 |         dataset = get_dataset_polymer(
227 |             element=df, bbs_dict=bbs_dict, config=config
    |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:248:5: D103 Missing docstring in public function
    |
248 | def save_datasets(config, dataset_train, dataset_val, dataset_test):
    |     ^^^^^^^^^^^^^ D103
249 |     name = config["name"]
250 |     ephemeral_dir = config["ephemeral_path"] + f"/{name.replace('_','/')}/"
    |

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:263:1: ERA001 Found commented-out code
    |
263 | # df_elements = df_total.sample(500)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
264 | # dataset = get_dataset_polymer(
265 | #    oligomer_size=6,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:264:1: ERA001 Found commented-out code
    |
263 | # df_elements = df_total.sample(500)
264 | # dataset = get_dataset_polymer(
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
265 | #    oligomer_size=6,
266 | #    element=df_elements,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:265:1: ERA001 Found commented-out code
    |
263 | # df_elements = df_total.sample(500)
264 | # dataset = get_dataset_polymer(
265 | #    oligomer_size=6,
    | ^^^^^^^^^^^^^^^^^^^^^ ERA001
266 | #    element=df_elements,
267 | #    bbs_dict=bbs_dict,
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:266:1: ERA001 Found commented-out code
    |
264 | # dataset = get_dataset_polymer(
265 | #    oligomer_size=6,
266 | #    element=df_elements,
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
267 | #    bbs_dict=bbs_dict,
268 | #    config=config
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:267:1: ERA001 Found commented-out code
    |
265 | #    oligomer_size=6,
266 | #    element=df_elements,
267 | #    bbs_dict=bbs_dict,
    | ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
268 | #    config=config
269 | # )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:268:1: ERA001 Found commented-out code
    |
266 | #    element=df_elements,
267 | #    bbs_dict=bbs_dict,
268 | #    config=config
    | ^^^^^^^^^^^^^^^^^^ ERA001
269 | # )
    |
    = help: Remove commented-out code

src\stk_search\geom3d\polymer_GNN_architecture_utils.py:269:1: ERA001 Found commented-out code
    |
267 | #    bbs_dict=bbs_dict,
268 | #    config=config
269 | # )
    | ^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\geom3d\script_plot_inference_BA.py:1:1: INP001 File `src\stk_search\geom3d\script_plot_inference_BA.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\script_plot_inference_BA.py:1:1: D100 Missing docstring in public module
src\stk_search\geom3d\script_plot_inference_BA.py:18:5: D103 Missing docstring in public function
   |
18 | def load_data(
   |     ^^^^^^^^^ D103
19 |     df_path="data/output/Full_datatset/df_total_new2023_08_20.csv",
20 |     df_precursors_path="data/output/Prescursor_data/calculation_data_precursor_190923_clean.pkl",
   |

src\stk_search\geom3d\script_plot_inference_BA.py:25:5: N806 Variable `SP` in function should be lowercase
   |
23 |         df_path, df_precursors_path
24 |     )
25 |     SP = Searched_pace.Searched_Space(
   |     ^^ N806
26 |         number_of_fragments=6,
27 |         df=df_precursors,
   |

src\stk_search\geom3d\script_plot_inference_BA.py:25:10: F821 Undefined name `Searched_pace`
   |
23 |         df_path, df_precursors_path
24 |     )
25 |     SP = Searched_pace.Searched_Space(
   |          ^^^^^^^^^^^^^ F821
26 |         number_of_fragments=6,
27 |         df=df_precursors,
   |

src\stk_search\geom3d\script_plot_inference_BA.py:32:24: PD011 Use `.to_numpy()` instead of `.values`
   |
30 |     )
31 |     searched_space_df = SP.check_df_for_element_from_sp(df_to_check=df_total)
32 |     fitness_acquired = searched_space_df["target"].values
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
33 |     searched_space_df_InChIKey = searched_space_df[["InChIKey"]]
34 |     searched_space_df = searched_space_df[[f"InChIKey_{x}" for x in range(6)]]
   |

src\stk_search\geom3d\script_plot_inference_BA.py:33:5: N806 Variable `searched_space_df_InChIKey` in function should be lowercase
   |
31 |     searched_space_df = SP.check_df_for_element_from_sp(df_to_check=df_total)
32 |     fitness_acquired = searched_space_df["target"].values
33 |     searched_space_df_InChIKey = searched_space_df[["InChIKey"]]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ N806
34 |     searched_space_df = searched_space_df[[f"InChIKey_{x}" for x in range(6)]]
35 |     return (
   |

src\stk_search\geom3d\script_plot_inference_BA.py:44:5: D103 Missing docstring in public function
   |
44 | def load_models(config, chkpt_path=None):
   |     ^^^^^^^^^^^ D103
45 |     EncodingModel = initialise_model(config)
46 |     if chkpt_path is not None:
   |

src\stk_search\geom3d\script_plot_inference_BA.py:45:5: N806 Variable `EncodingModel` in function should be lowercase
   |
44 | def load_models(config, chkpt_path=None):
45 |     EncodingModel = initialise_model(config)
   |     ^^^^^^^^^^^^^ N806
46 |     if chkpt_path is not None:
47 |         # load pymodel
   |

src\stk_search\geom3d\script_plot_inference_BA.py:51:9: T201 `print` found
   |
49 |         checkpoint = torch.load(chkpt_path,map_location=config["device"])
50 |         model, graph_pred_linear = model_setup(config)
51 |         print("Model loaded: ", config["model_name"])
   |         ^^^^^ T201
52 |         #config["device"] = "cuda:0" if torch.cuda.is_available() else "cpu"
53 |         # Pass the model and graph_pred_linear to the Pymodel constructor
   |
   = help: Remove `print`

src\stk_search\geom3d\script_plot_inference_BA.py:52:9: ERA001 Found commented-out code
   |
50 |         model, graph_pred_linear = model_setup(config)
51 |         print("Model loaded: ", config["model_name"])
52 |         #config["device"] = "cuda:0" if torch.cuda.is_available() else "cpu"
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
53 |         # Pass the model and graph_pred_linear to the Pymodel constructor
   |
   = help: Remove commented-out code

src\stk_search\geom3d\script_plot_inference_BA.py:63:5: RET505 Unnecessary `else` after `return` statement
   |
61 |         model_inferrence = pymodel.graph_pred_linear
62 |         return EncodingModel, model_embedding, model_inferrence
63 |     else:
   |     ^^^^ RET505
64 |         return EncodingModel
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\script_plot_inference_BA.py:67:5: N802 Function name `PredictTargetFromEmbedding` should be lowercase
   |
67 | def PredictTargetFromEmbedding(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
68 |     data, model_inferecence, device=torch.device("cpu")
69 | ):
   |

src\stk_search\geom3d\script_plot_inference_BA.py:67:5: D103 Missing docstring in public function
   |
67 | def PredictTargetFromEmbedding(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
68 |     data, model_inferecence, device=torch.device("cpu")
69 | ):
   |

src\stk_search\geom3d\script_plot_inference_BA.py:68:37: B008 Do not perform function call `torch.device` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
   |
67 | def PredictTargetFromEmbedding(
68 |     data, model_inferecence, device=torch.device("cpu")
   |                                     ^^^^^^^^^^^^^^^^^^^ B008
69 | ):
70 |     data = data.to(device)
   |

src\stk_search\geom3d\script_plot_inference_BA.py:78:5: PLR0913 Too many arguments in function definition (8 > 5)
   |
78 | def generate_train_val_data(
   |     ^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
79 |     dataset,
80 |     EncodingModel,
   |

src\stk_search\geom3d\script_plot_inference_BA.py:78:5: D103 Missing docstring in public function
   |
78 | def generate_train_val_data(
   |     ^^^^^^^^^^^^^^^^^^^^^^^ D103
79 |     dataset,
80 |     EncodingModel,
   |

src\stk_search\geom3d\script_plot_inference_BA.py:80:5: N803 Argument name `EncodingModel` should be lowercase
   |
78 | def generate_train_val_data(
79 |     dataset,
80 |     EncodingModel,
   |     ^^^^^^^^^^^^^ N803
81 |     model_inferrence,
82 |     config,
   |

src\stk_search\geom3d\script_plot_inference_BA.py:96:5: N806 Variable `X_explored_frag` in function should be lowercase
   |
94 |         drop_last=True,
95 |     )
96 |     X_explored_frag=torch.tensor([], device=config["device"])
   |     ^^^^^^^^^^^^^^^ N806
97 |     X_explored_org=torch.tensor([], device=config["device"])
98 |     y_explored=torch.tensor([], device=config["device"])
   |

src\stk_search\geom3d\script_plot_inference_BA.py:97:5: N806 Variable `X_explored_org` in function should be lowercase
   |
95 |     )
96 |     X_explored_frag=torch.tensor([], device=config["device"])
97 |     X_explored_org=torch.tensor([], device=config["device"])
   |     ^^^^^^^^^^^^^^ N806
98 |     y_explored=torch.tensor([], device=config["device"])
99 |     y_predicted = torch.tensor([], device=config["device"])
   |

src\stk_search\geom3d\script_plot_inference_BA.py:107:13: N806 Variable `Y_pred` in function should be lowercase
    |
105 |             representation = representation.squeeze()
106 |             model_inferrence.to(config["device"])
107 |             Y_pred = model_inferrence(representation.to(config["device"]))
    |             ^^^^^^ N806
108 |             # add y_pred from org representation
109 |             y_pred_org = model_inferrence(x[0].y.to(config["device"]))
    |

src\stk_search\geom3d\script_plot_inference_BA.py:110:13: N806 Variable `X_explored_frag` in function should be lowercase
    |
108 |             # add y_pred from org representation
109 |             y_pred_org = model_inferrence(x[0].y.to(config["device"]))
110 |             X_explored_frag =torch.cat((X_explored_frag, representation), dim=0)
    |             ^^^^^^^^^^^^^^^ N806
111 |             if model_embedding is None:
112 |                 X_explored_org =torch.cat((X_explored_org, x[0].y), dim=0)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:112:17: N806 Variable `X_explored_org` in function should be lowercase
    |
110 |             X_explored_frag =torch.cat((X_explored_frag, representation), dim=0)
111 |             if model_embedding is None:
112 |                 X_explored_org =torch.cat((X_explored_org, x[0].y), dim=0)
    |                 ^^^^^^^^^^^^^^ N806
113 |             else:
114 |                 X_explored_org =torch.cat((X_explored_org, model_embedding(x)), dim=0)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:114:17: N806 Variable `X_explored_org` in function should be lowercase
    |
112 |                 X_explored_org =torch.cat((X_explored_org, x[0].y), dim=0)
113 |             else:
114 |                 X_explored_org =torch.cat((X_explored_org, model_embedding(x)), dim=0)
    |                 ^^^^^^^^^^^^^^ N806
115 |             y_predicted = torch.cat((y_predicted, Y_pred), dim=0)
116 |             y_predicted_org = torch.cat((y_predicted_org, y_pred_org), dim=0)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:128:5: PLR0913 Too many arguments in function definition (9 > 5)
    |
128 | def generate_test_val_data(
    |     ^^^^^^^^^^^^^^^^^^^^^^ PLR0913
129 |     dataset,
130 |     df_total,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:128:5: D103 Missing docstring in public function
    |
128 | def generate_test_val_data(
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
129 |     dataset,
130 |     df_total,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:133:5: N803 Argument name `EncodingModel` should be lowercase
    |
131 |     df_precursors,
132 |     config,
133 |     EncodingModel,
    |     ^^^^^^^^^^^^^ N803
134 |     model_embedding,
135 |     target_name="target",
    |

src\stk_search\geom3d\script_plot_inference_BA.py:148:5: N806 Variable `SP` in function should be lowercase
    |
146 |         database=config["database_name"],
147 |     )
148 |     SP = Searched_pace.Searched_Space(
    |     ^^ N806
149 |         number_of_fragments=6,
150 |         df=df_precursors,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:148:10: F821 Undefined name `Searched_pace`
    |
146 |         database=config["database_name"],
147 |     )
148 |     SP = Searched_pace.Searched_Space(
    |          ^^^^^^^^^^^^^ F821
149 |         number_of_fragments=6,
150 |         df=df_precursors,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:161:14: PD011 Use `.to_numpy()` instead of `.values`
    |
159 |     searched_space_df = SP.check_df_for_element_from_sp(df_to_check=df_dataset)
160 | 
161 |     y_true = searched_space_df[target_name].values
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
162 |     searched_space_df = searched_space_df[[f"InChIKey_{x}" for x in range(6)]]
163 |     Representation = Represenation_3D.Representation3DFrag_transformer(
    |

src\stk_search\geom3d\script_plot_inference_BA.py:163:5: N806 Variable `Representation` in function should be lowercase
    |
161 |     y_true = searched_space_df[target_name].values
162 |     searched_space_df = searched_space_df[[f"InChIKey_{x}" for x in range(6)]]
163 |     Representation = Represenation_3D.Representation3DFrag_transformer(
    |     ^^^^^^^^^^^^^^ N806
164 |         EncodingModel,
165 |         df_total,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:170:5: N806 Variable `X_explored_frag` in function should be lowercase
    |
168 |         device=config["device"],
169 |     )
170 |     X_explored_frag = Representation.generate_repr(searched_space_df)
    |     ^^^^^^^^^^^^^^^ N806
171 |     # generate orginal representation
172 |     Representation_org = Represenation_3D.Representation3D(
    |

src\stk_search\geom3d\script_plot_inference_BA.py:172:5: N806 Variable `Representation_org` in function should be lowercase
    |
170 |     X_explored_frag = Representation.generate_repr(searched_space_df)
171 |     # generate orginal representation
172 |     Representation_org = Represenation_3D.Representation3D(
    |     ^^^^^^^^^^^^^^^^^^ N806
173 |         model_embedding,
174 |         df_total,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:179:5: N806 Variable `X_explored_org` in function should be lowercase
    |
177 |         device=config["device"],
178 |     )
179 |     X_explored_org = Representation_org.generate_repr(searched_space_df)
    |     ^^^^^^^^^^^^^^ N806
180 |     y_explored = torch.tensor(
181 |         y_true, dtype=torch.float32, device=config["device"]
    |

src\stk_search\geom3d\script_plot_inference_BA.py:189:1: E402 Module level import not at top of file
    |
188 |   # plot train
189 | / from sklearn.metrics import (
190 | |     mean_absolute_error,
191 | |     mean_squared_error,
192 | |     r2_score,
193 | | )
    | |_^ E402
    |

src\stk_search\geom3d\script_plot_inference_BA.py:196:5: D103 Missing docstring in public function
    |
196 | def plot_inference_test(y_explored, X_explored_frag, X_explored_org,
    |     ^^^^^^^^^^^^^^^^^^^ D103
197 |                         model_inferrence, ax):
198 |     y_true = y_explored.cpu().numpy()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:196:37: N803 Argument name `X_explored_frag` should be lowercase
    |
196 | def plot_inference_test(y_explored, X_explored_frag, X_explored_org,
    |                                     ^^^^^^^^^^^^^^^ N803
197 |                         model_inferrence, ax):
198 |     y_true = y_explored.cpu().numpy()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:196:54: N803 Argument name `X_explored_org` should be lowercase
    |
196 | def plot_inference_test(y_explored, X_explored_frag, X_explored_org,
    |                                                      ^^^^^^^^^^^^^^ N803
197 |                         model_inferrence, ax):
198 |     y_true = y_explored.cpu().numpy()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:199:5: N806 Variable `Y_pred` in function should be lowercase
    |
197 |                         model_inferrence, ax):
198 |     y_true = y_explored.cpu().numpy()
199 |     Y_pred = (
    |     ^^^^^^ N806
200 |         PredictTargetFromEmbedding(
201 |             X_explored_frag, model_inferecence=model_inferrence
    |

src\stk_search\geom3d\script_plot_inference_BA.py:206:5: N806 Variable `Y_pred_org` in function should be lowercase
    |
204 |         .numpy()
205 |     )
206 |     Y_pred_org = (
    |     ^^^^^^^^^^ N806
207 |         PredictTargetFromEmbedding(
208 |             X_explored_org, model_inferecence=model_inferrence
    |

src\stk_search\geom3d\script_plot_inference_BA.py:250:9: TRY300 Consider moving this statement to an `else` block
    |
248 |         ax.text(0.4, 0.1, f"learned MAE: {score:.2f}", transform=ax.transAxes)
249 |         score_list.append(score)
250 |         return score_list
    |         ^^^^^^^^^^^^^^^^^ TRY300
251 |     except ValueError as e:
252 |         print(e)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:252:9: T201 `print` found
    |
250 |         return score_list
251 |     except ValueError as e:
252 |         print(e)
    |         ^^^^^ T201
253 |         print("ValueError")
254 |         return []
    |
    = help: Remove `print`

src\stk_search\geom3d\script_plot_inference_BA.py:253:9: T201 `print` found
    |
251 |     except ValueError as e:
252 |         print(e)
253 |         print("ValueError")
    |         ^^^^^ T201
254 |         return []
    |
    = help: Remove `print`

src\stk_search\geom3d\script_plot_inference_BA.py:257:1: E402 Module level import not at top of file
    |
257 | from botorch.models.gp_regression import SingleTaskGP
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
258 | from gpytorch import kernels
    |

src\stk_search\geom3d\script_plot_inference_BA.py:258:1: E402 Module level import not at top of file
    |
257 | from botorch.models.gp_regression import SingleTaskGP
258 | from gpytorch import kernels
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
259 | 
260 | # from stk_search.tanimoto_kernel import TanimotoKernel
    |

src\stk_search\geom3d\script_plot_inference_BA.py:260:1: ERA001 Found commented-out code
    |
258 | from gpytorch import kernels
259 | 
260 | # from stk_search.tanimoto_kernel import TanimotoKernel
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
261 | from gpytorch.distributions import MultivariateNormal
262 | from gpytorch.kernels import ScaleKernel
    |
    = help: Remove commented-out code

src\stk_search\geom3d\script_plot_inference_BA.py:261:1: E402 Module level import not at top of file
    |
260 | # from stk_search.tanimoto_kernel import TanimotoKernel
261 | from gpytorch.distributions import MultivariateNormal
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
262 | from gpytorch.kernels import ScaleKernel
263 | from gpytorch.means import ConstantMean
    |

src\stk_search\geom3d\script_plot_inference_BA.py:262:1: E402 Module level import not at top of file
    |
260 | # from stk_search.tanimoto_kernel import TanimotoKernel
261 | from gpytorch.distributions import MultivariateNormal
262 | from gpytorch.kernels import ScaleKernel
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
263 | from gpytorch.means import ConstantMean
264 | from stk_search.Search_algorithm.tanimoto_kernel import TanimotoKernel
    |

src\stk_search\geom3d\script_plot_inference_BA.py:263:1: E402 Module level import not at top of file
    |
261 | from gpytorch.distributions import MultivariateNormal
262 | from gpytorch.kernels import ScaleKernel
263 | from gpytorch.means import ConstantMean
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
264 | from stk_search.Search_algorithm.tanimoto_kernel import TanimotoKernel
    |

src\stk_search\geom3d\script_plot_inference_BA.py:264:1: E402 Module level import not at top of file
    |
262 | from gpytorch.kernels import ScaleKernel
263 | from gpytorch.means import ConstantMean
264 | from stk_search.Search_algorithm.tanimoto_kernel import TanimotoKernel
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
    |

src\stk_search\geom3d\script_plot_inference_BA.py:268:7: D101 Missing docstring in public class
    |
267 | # We define our custom GP surrogate model using the Tanimoto kernel
268 | class TanimotoGP(SingleTaskGP):
    |       ^^^^^^^^^^ D101
269 |     def __init__(self, train_X, train_Y):
270 |         super().__init__(train_X, train_Y)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:269:9: ANN204 Missing return type annotation for special method `__init__`
    |
267 | # We define our custom GP surrogate model using the Tanimoto kernel
268 | class TanimotoGP(SingleTaskGP):
269 |     def __init__(self, train_X, train_Y):
    |         ^^^^^^^^ ANN204
270 |         super().__init__(train_X, train_Y)
271 |         self.mean_module = ConstantMean()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\script_plot_inference_BA.py:269:9: D107 Missing docstring in `__init__`
    |
267 | # We define our custom GP surrogate model using the Tanimoto kernel
268 | class TanimotoGP(SingleTaskGP):
269 |     def __init__(self, train_X, train_Y):
    |         ^^^^^^^^ D107
270 |         super().__init__(train_X, train_Y)
271 |         self.mean_module = ConstantMean()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:269:24: N803 Argument name `train_X` should be lowercase
    |
267 | # We define our custom GP surrogate model using the Tanimoto kernel
268 | class TanimotoGP(SingleTaskGP):
269 |     def __init__(self, train_X, train_Y):
    |                        ^^^^^^^ N803
270 |         super().__init__(train_X, train_Y)
271 |         self.mean_module = ConstantMean()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:269:33: N803 Argument name `train_Y` should be lowercase
    |
267 | # We define our custom GP surrogate model using the Tanimoto kernel
268 | class TanimotoGP(SingleTaskGP):
269 |     def __init__(self, train_X, train_Y):
    |                                 ^^^^^^^ N803
270 |         super().__init__(train_X, train_Y)
271 |         self.mean_module = ConstantMean()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:275:9: D102 Missing docstring in public method
    |
273 |         self.to(train_X)  # make sure we're on the right device/dtype
274 | 
275 |     def forward(self, x):
    |         ^^^^^^^ D102
276 |         mean_x = self.mean_module(x)
277 |         covar_x = self.covar_module(x)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:281:7: D101 Missing docstring in public class
    |
281 | class MaternKernel(SingleTaskGP):
    |       ^^^^^^^^^^^^ D101
282 |     def __init__(self, train_X, train_Y):
283 |         super().__init__(train_X, train_Y)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:282:9: ANN204 Missing return type annotation for special method `__init__`
    |
281 | class MaternKernel(SingleTaskGP):
282 |     def __init__(self, train_X, train_Y):
    |         ^^^^^^^^ ANN204
283 |         super().__init__(train_X, train_Y)
284 |         self.mean_module = ConstantMean()
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\script_plot_inference_BA.py:282:9: D107 Missing docstring in `__init__`
    |
281 | class MaternKernel(SingleTaskGP):
282 |     def __init__(self, train_X, train_Y):
    |         ^^^^^^^^ D107
283 |         super().__init__(train_X, train_Y)
284 |         self.mean_module = ConstantMean()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:282:24: N803 Argument name `train_X` should be lowercase
    |
281 | class MaternKernel(SingleTaskGP):
282 |     def __init__(self, train_X, train_Y):
    |                        ^^^^^^^ N803
283 |         super().__init__(train_X, train_Y)
284 |         self.mean_module = ConstantMean()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:282:33: N803 Argument name `train_Y` should be lowercase
    |
281 | class MaternKernel(SingleTaskGP):
282 |     def __init__(self, train_X, train_Y):
    |                                 ^^^^^^^ N803
283 |         super().__init__(train_X, train_Y)
284 |         self.mean_module = ConstantMean()
    |

src\stk_search\geom3d\script_plot_inference_BA.py:290:9: D102 Missing docstring in public method
    |
288 |         self.to(train_X)  # make sure we're on the right device/dtype
289 | 
290 |     def change_kernel(self, kernel):
    |         ^^^^^^^^^^^^^ D102
291 |         self.covar_module = ScaleKernel(base_kernel=kernel)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:293:9: D102 Missing docstring in public method
    |
291 |         self.covar_module = ScaleKernel(base_kernel=kernel)
292 | 
293 |     def forward(self, x):
    |         ^^^^^^^ D102
294 |         mean_x = self.mean_module(x)
295 |         covar_x = self.covar_module(x)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:299:5: PLR0913 Too many arguments in function definition (9 > 5)
    |
299 | def plot_prediction(
    |     ^^^^^^^^^^^^^^^ PLR0913
300 |     y_pred,
301 |     y_test,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:299:5: D103 Missing docstring in public function
    |
299 | def plot_prediction(
    |     ^^^^^^^^^^^^^^^ D103
300 |     y_pred,
301 |     y_test,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:307:5: FBT002 Boolean default positional argument in function definition
    |
305 |     fig=None,
306 |     axs=None,
307 |     save_plot=False,
    |     ^^^^^^^^^ FBT002
308 |     plot_name="prediction.png",
309 | ):
    |

src\stk_search\geom3d\script_plot_inference_BA.py:310:9: ANN202 Missing return type annotation for private function `plot_prediction`
    |
308 |     plot_name="prediction.png",
309 | ):
310 |     def plot_prediction(y_pred, y_test, axis, label):
    |         ^^^^^^^^^^^^^^^ ANN202
311 |         axis.scatter(
312 |             y_test.detach().numpy(),
    |
    = help: Add return type annotation

src\stk_search\geom3d\script_plot_inference_BA.py:317:9: ERA001 Found commented-out code
    |
315 |             color="red",
316 |         )
317 |         # axis.plot(y_test, y_test, linestyle="--", color="black")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
318 |         axis.set_xlabel("True values")
319 |         axis.set_ylabel("Predicted values")
    |
    = help: Remove commented-out code

src\stk_search\geom3d\script_plot_inference_BA.py:348:5: F841 Local variable `scores_test` is assigned to but never used
    |
346 |         return {"mae": score_mae, "mse": score_mse, "r2": score_r2}
347 | 
348 |     scores_test = plot_prediction(y_pred, y_test, axs[0], label="test set")
    |     ^^^^^^^^^^^ F841
349 |     scores_train = plot_prediction(
350 |         y_pred_train, y_train, axs[1], label="train set"
    |
    = help: Remove assignment to unused variable `scores_test`

src\stk_search\geom3d\script_plot_inference_BA.py:349:5: F841 Local variable `scores_train` is assigned to but never used
    |
348 |     scores_test = plot_prediction(y_pred, y_test, axs[0], label="test set")
349 |     scores_train = plot_prediction(
    |     ^^^^^^^^^^^^ F841
350 |         y_pred_train, y_train, axs[1], label="train set"
351 |     )
    |
    = help: Remove assignment to unused variable `scores_train`

src\stk_search\geom3d\script_plot_inference_BA.py:387:16: F821 Undefined name `os`
    |
385 |     if save_plot:
386 |         dir_name = "data/figures/test_BO/"
387 |         if not os.path.exists(dir_name):
    |                ^^ F821
388 |             os.makedirs(dir_name)
389 |         fig.savefig(dir_name + plot_name)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:388:13: F821 Undefined name `os`
    |
386 |         dir_name = "data/figures/test_BO/"
387 |         if not os.path.exists(dir_name):
388 |             os.makedirs(dir_name)
    |             ^^ F821
389 |         fig.savefig(dir_name + plot_name)
390 |     return fig, axs
    |

src\stk_search\geom3d\script_plot_inference_BA.py:393:5: N802 Function name `run_training_BO_torch` should be lowercase
    |
393 | def run_training_BO_torch(
    |     ^^^^^^^^^^^^^^^^^^^^^ N802
394 |     BO,
395 |     X_explored_train,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:393:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
393 | def run_training_BO_torch(
    |     ^^^^^^^^^^^^^^^^^^^^^ PLR0913
394 |     BO,
395 |     X_explored_train,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:393:5: D103 Missing docstring in public function
    |
393 | def run_training_BO_torch(
    |     ^^^^^^^^^^^^^^^^^^^^^ D103
394 |     BO,
395 |     X_explored_train,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:394:5: N803 Argument name `BO` should be lowercase
    |
393 | def run_training_BO_torch(
394 |     BO,
    |     ^^ N803
395 |     X_explored_train,
396 |     y_explored_train,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:395:5: N803 Argument name `X_explored_train` should be lowercase
    |
393 | def run_training_BO_torch(
394 |     BO,
395 |     X_explored_train,
    |     ^^^^^^^^^^^^^^^^ N803
396 |     y_explored_train,
397 |     X_explored_test,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:397:5: N803 Argument name `X_explored_test` should be lowercase
    |
395 |     X_explored_train,
396 |     y_explored_train,
397 |     X_explored_test,
    |     ^^^^^^^^^^^^^^^ N803
398 |     y_explored_test,
399 |     kernel=MaternKernel,
    |

src\stk_search\geom3d\script_plot_inference_BA.py:401:9: ANN202 Missing return type annotation for private function `normalise_output`
    |
399 |     kernel=MaternKernel,
400 | ):
401 |     def normalise_output(y):
    |         ^^^^^^^^^^^^^^^^ ANN202
402 |         y_mean = y.mean()
403 |         y_std = y.std()
    |
    = help: Add return type annotation

src\stk_search\geom3d\script_plot_inference_BA.py:407:9: ANN202 Missing return type annotation for private function `unnorm_output`
    |
405 |         return y, y_mean, y_std
406 | 
407 |     def unnorm_output(y, y_mean, y_std):
    |         ^^^^^^^^^^^^^ ANN202
408 |         y = y * y_std + y_mean
409 |         return y
    |
    = help: Add return type annotation

src\stk_search\geom3d\script_plot_inference_BA.py:409:16: RET504 Unnecessary assignment to `y` before `return` statement
    |
407 |     def unnorm_output(y, y_mean, y_std):
408 |         y = y * y_std + y_mean
409 |         return y
    |                ^ RET504
410 | 
411 |     print(kernel)
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\script_plot_inference_BA.py:411:5: T201 `print` found
    |
409 |         return y
410 | 
411 |     print(kernel)
    |     ^^^^^ T201
412 |     BO.kernel = kernel
413 |     X_train = X_explored_train.cpu().type(torch.float64)
    |
    = help: Remove `print`

src\stk_search\geom3d\script_plot_inference_BA.py:413:5: N806 Variable `X_train` in function should be lowercase
    |
411 |     print(kernel)
412 |     BO.kernel = kernel
413 |     X_train = X_explored_train.cpu().type(torch.float64)
    |     ^^^^^^^ N806
414 |     y_train = y_explored_train.cpu().type(torch.float64).reshape(-1, 1)
415 |     X_test = X_explored_test.cpu().type(torch.float64)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:415:5: N806 Variable `X_test` in function should be lowercase
    |
413 |     X_train = X_explored_train.cpu().type(torch.float64)
414 |     y_train = y_explored_train.cpu().type(torch.float64).reshape(-1, 1)
415 |     X_test = X_explored_test.cpu().type(torch.float64)
    |     ^^^^^^ N806
416 |     y_test = y_explored_test.cpu().type(torch.float64).reshape(-1, 1)
417 |     y_train, y_mean, y_std = normalise_output(y_train)
    |

src\stk_search\geom3d\script_plot_inference_BA.py:446:5: ERA001 Found commented-out code
    |
444 |     y_pred_train = unnorm_output(y_pred_train, y_mean, y_std)
445 |     y_var = y_var*y_std
446 |     # y_test = unnorm_output(y_test, y_mean, y_std)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
447 |     y_train = unnorm_output(y_train, y_mean, y_std)
448 |     fig, axs = plot_prediction(
    |
    = help: Remove commented-out code

src\stk_search\geom3d\test_train.py:1:1: INP001 File `src\stk_search\geom3d\test_train.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\test_train.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """script to train the SchNet model on the STK dataset
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D205
5 |   import os
6 |   from pathlib import Path
  |
  = help: Insert single blank line

src\stk_search\geom3d\test_train.py:1:1: D400 First line should end with a period
  |
1 | / """script to train the SchNet model on the STK dataset
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D400
5 |   import os
6 |   from pathlib import Path
  |
  = help: Add period

src\stk_search\geom3d\test_train.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """script to train the SchNet model on the STK dataset
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D415
5 |   import os
6 |   from pathlib import Path
  |
  = help: Add closing punctuation

src\stk_search\geom3d\test_train.py:13:8: N812 Lowercase `functional` imported as non-lowercase `Functional`
   |
11 | import stk
12 | import torch
13 | import torch.nn.functional as Functional
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N812
14 | from lightning.pytorch.callbacks import ModelCheckpoint
15 | from lightning.pytorch.loggers import WandbLogger
   |

src\stk_search\geom3d\test_train.py:25:5: D103 Missing docstring in public function
   |
25 | def main(config_dir):
   |     ^^^^ D103
26 |     config = read_config(config_dir)
27 |     np.random.seed(config["seed"])
   |

src\stk_search\geom3d\test_train.py:27:5: NPY002 Replace legacy `np.random.seed` call with `np.random.Generator`
   |
25 | def main(config_dir):
26 |     config = read_config(config_dir)
27 |     np.random.seed(config["seed"])
   |     ^^^^^^^^^^^^^^ NPY002
28 |     torch.cuda.manual_seed_all(config["seed"])
29 |     config["device"] = (
   |

src\stk_search\geom3d\test_train.py:53:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
51 |     # model
52 |     #check if chkpt exists
53 |     if os.path.exists(config["model_embedding_chkpt"]):
   |        ^^^^^^^^^^^^^^ PTH110
54 |         pymodel_SCHNET = Pymodel.load_from_checkpoint(config["model_embedding_chkpt"])
55 |     else:
   |

src\stk_search\geom3d\test_train.py:54:9: N806 Variable `pymodel_SCHNET` in function should be lowercase
   |
52 |     #check if chkpt exists
53 |     if os.path.exists(config["model_embedding_chkpt"]):
54 |         pymodel_SCHNET = Pymodel.load_from_checkpoint(config["model_embedding_chkpt"])
   |         ^^^^^^^^^^^^^^ N806
55 |     else:
56 |         pymodel_SCHNET = Pymodel(model, graph_pred_linear)
   |

src\stk_search\geom3d\test_train.py:56:9: N806 Variable `pymodel_SCHNET` in function should be lowercase
   |
54 |         pymodel_SCHNET = Pymodel.load_from_checkpoint(config["model_embedding_chkpt"])
55 |     else:
56 |         pymodel_SCHNET = Pymodel(model, graph_pred_linear)
   |         ^^^^^^^^^^^^^^ N806
57 |     wandb_logger = WandbLogger(log_model="all", project="Geom3D", name=config["name"])
58 |     wandb_logger.log_hyperparams(config)
   |

src\stk_search\geom3d\test_train.py:85:5: D103 Missing docstring in public function
   |
85 | def load_data(config):
   |     ^^^^^^^^^ D103
86 | 
87 |     if config["load_dataset"]:
   |

src\stk_search\geom3d\test_train.py:88:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
87 |     if config["load_dataset"]:
88 |         if os.path.exists(config["dataset_path"]):
   |            ^^^^^^^^^^^^^^ PTH110
89 |             dataset = torch.load(config["dataset_path"])
90 |             return dataset
   |

src\stk_search\geom3d\test_train.py:90:20: RET504 Unnecessary assignment to `dataset` before `return` statement
   |
88 |         if os.path.exists(config["dataset_path"]):
89 |             dataset = torch.load(config["dataset_path"])
90 |             return dataset
   |                    ^^^^^^^ RET504
91 |         else:
92 |             print("dataset not found")
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\test_train.py:91:9: RET505 Unnecessary `else` after `return` statement
   |
89 |             dataset = torch.load(config["dataset_path"])
90 |             return dataset
91 |         else:
   |         ^^^^ RET505
92 |             print("dataset not found")
93 |     df_path = Path(
   |
   = help: Remove unnecessary `else`

src\stk_search\geom3d\test_train.py:92:13: T201 `print` found
   |
90 |             return dataset
91 |         else:
92 |             print("dataset not found")
   |             ^^^^^ T201
93 |     df_path = Path(
94 |         config["STK_path"], "data/output/Full_dataset/", config["df_total"]
   |
   = help: Remove `print`

src\stk_search\geom3d\test_train.py:118:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
116 |     if config["save_dataset"]:
117 |             name = config["name"] + "_frag_" + str(config["number_of_fragement"])
118 |             os.makedirs(name, exist_ok=True)
    |             ^^^^^^^^^^^ PTH103
119 |             torch.save(dataset, name+"/dataset.pt")
120 |     return dataset
    |

src\stk_search\geom3d\test_train.py:123:7: D101 Missing docstring in public class
    |
123 | class Pymodel(pl.LightningModule):
    |       ^^^^^^^ D101
124 |     def __init__(self, model, graph_pred_linear):
125 |         super().__init__()
    |

src\stk_search\geom3d\test_train.py:124:9: ANN204 Missing return type annotation for special method `__init__`
    |
123 | class Pymodel(pl.LightningModule):
124 |     def __init__(self, model, graph_pred_linear):
    |         ^^^^^^^^ ANN204
125 |         super().__init__()
126 |         self.save_hyperparameters(ignore=["graph_pred_linear", "model"])
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\test_train.py:124:9: D107 Missing docstring in `__init__`
    |
123 | class Pymodel(pl.LightningModule):
124 |     def __init__(self, model, graph_pred_linear):
    |         ^^^^^^^^ D107
125 |         super().__init__()
126 |         self.save_hyperparameters(ignore=["graph_pred_linear", "model"])
    |

src\stk_search\geom3d\test_train.py:130:9: D102 Missing docstring in public method
    |
128 |         self.graph_pred_linear = graph_pred_linear
129 | 
130 |     def training_step(self, batch, batch_idx):
    |         ^^^^^^^^^^^^^ D102
131 |         # training_step defines the train loop.
132 |         loss = self._get_preds_loss_accuracy(batch)
    |

src\stk_search\geom3d\test_train.py:130:36: ARG002 Unused method argument: `batch_idx`
    |
128 |         self.graph_pred_linear = graph_pred_linear
129 | 
130 |     def training_step(self, batch, batch_idx):
    |                                    ^^^^^^^^^ ARG002
131 |         # training_step defines the train loop.
132 |         loss = self._get_preds_loss_accuracy(batch)
    |

src\stk_search\geom3d\test_train.py:137:38: ARG002 Unused method argument: `batch_idx`
    |
135 |         return loss
136 | 
137 |     def validation_step(self, batch, batch_idx):
    |                                      ^^^^^^^^^ ARG002
138 |         """Used for logging metrics"""
139 |         loss = self._get_preds_loss_accuracy(batch)
    |

src\stk_search\geom3d\test_train.py:138:9: D400 First line should end with a period
    |
137 |     def validation_step(self, batch, batch_idx):
138 |         """Used for logging metrics"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
139 |         loss = self._get_preds_loss_accuracy(batch)
    |
    = help: Add period

src\stk_search\geom3d\test_train.py:138:9: D401 First line of docstring should be in imperative mood: "Used for logging metrics"
    |
137 |     def validation_step(self, batch, batch_idx):
138 |         """Used for logging metrics"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
139 |         loss = self._get_preds_loss_accuracy(batch)
    |

src\stk_search\geom3d\test_train.py:138:9: D415 First line should end with a period, question mark, or exclamation point
    |
137 |     def validation_step(self, batch, batch_idx):
138 |         """Used for logging metrics"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
139 |         loss = self._get_preds_loss_accuracy(batch)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\test_train.py:145:9: ANN202 Missing return type annotation for private function `_get_preds_loss_accuracy`
    |
143 |         return loss
144 | 
145 |     def _get_preds_loss_accuracy(self, batch):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
146 |         """Convenience function since train/valid/test steps are similar"""
147 |         z = self.molecule_3D_repr(batch.x, batch.positions, batch.batch)
    |
    = help: Add return type annotation

src\stk_search\geom3d\test_train.py:146:9: D400 First line should end with a period
    |
145 |     def _get_preds_loss_accuracy(self, batch):
146 |         """Convenience function since train/valid/test steps are similar"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
147 |         z = self.molecule_3D_repr(batch.x, batch.positions, batch.batch)
148 |         z = self.graph_pred_linear(z)
    |
    = help: Add period

src\stk_search\geom3d\test_train.py:146:9: D401 First line of docstring should be in imperative mood: "Convenience function since train/valid/test steps are similar"
    |
145 |     def _get_preds_loss_accuracy(self, batch):
146 |         """Convenience function since train/valid/test steps are similar"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
147 |         z = self.molecule_3D_repr(batch.x, batch.positions, batch.batch)
148 |         z = self.graph_pred_linear(z)
    |

src\stk_search\geom3d\test_train.py:146:9: D415 First line should end with a period, question mark, or exclamation point
    |
145 |     def _get_preds_loss_accuracy(self, batch):
146 |         """Convenience function since train/valid/test steps are similar"""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
147 |         z = self.molecule_3D_repr(batch.x, batch.positions, batch.batch)
148 |         z = self.graph_pred_linear(z)
    |
    = help: Add closing punctuation

src\stk_search\geom3d\test_train.py:150:16: RET504 Unnecessary assignment to `loss` before `return` statement
    |
148 |         z = self.graph_pred_linear(z)
149 |         loss = Functional.mse_loss(z, batch.y.unsqueeze(1))
150 |         return loss
    |                ^^^^ RET504
151 | 
152 |     def configure_optimizers(self):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\test_train.py:152:9: D102 Missing docstring in public method
    |
150 |         return loss
151 | 
152 |     def configure_optimizers(self):
    |         ^^^^^^^^^^^^^^^^^^^^ D102
153 |         optimizer = torch.optim.Adam(self.parameters(), lr=5e-4)
154 |         return optimizer
    |

src\stk_search\geom3d\test_train.py:154:16: RET504 Unnecessary assignment to `optimizer` before `return` statement
    |
152 |     def configure_optimizers(self):
153 |         optimizer = torch.optim.Adam(self.parameters(), lr=5e-4)
154 |         return optimizer
    |                ^^^^^^^^^ RET504
155 | 
156 |     def forward(self, batch):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\test_train.py:156:9: D102 Missing docstring in public method
    |
154 |         return optimizer
155 | 
156 |     def forward(self, batch):
    |         ^^^^^^^ D102
157 |         z = self.molecule_3D_repr(batch.x, batch.positions, batch.batch)
158 |         z = self.graph_pred_linear(z)
    |

src\stk_search\geom3d\test_train.py:159:16: RET504 Unnecessary assignment to `z` before `return` statement
    |
157 |         z = self.molecule_3D_repr(batch.x, batch.positions, batch.batch)
158 |         z = self.graph_pred_linear(z)
159 |         return z
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\test_train.py:162:5: D103 Missing docstring in public function
    |
162 | def load_3d_rpr(model, output_model_path):
    |     ^^^^^^^^^^^ D103
163 |     saved_model_dict = torch.load(output_model_path)
164 |     model.load_state_dict(saved_model_dict["model"])
    |

src\stk_search\geom3d\test_train.py:168:5: D103 Missing docstring in public function
    |
166 |     return model
167 | 
168 | def load_molecule(InChIKey, target, db):
    |     ^^^^^^^^^^^^^ D103
169 |     polymer = db.get({"InChIKey": InChIKey})
170 |     dat_list = list(polymer.get_atomic_positions())
    |

src\stk_search\geom3d\test_train.py:168:19: N803 Argument name `InChIKey` should be lowercase
    |
166 |     return model
167 | 
168 | def load_molecule(InChIKey, target, db):
    |                   ^^^^^^^^ N803
169 |     polymer = db.get({"InChIKey": InChIKey})
170 |     dat_list = list(polymer.get_atomic_positions())
    |

src\stk_search\geom3d\test_train.py:173:18: C411 Unnecessary `list` call (remove the outer call to `list()`)
    |
171 |       positions = np.vstack(dat_list)
172 |       positions = torch.tensor(positions, dtype=torch.float)
173 |       atom_types = list(
    |  __________________^
174 | |         [
175 | |             atom.get_atom().get_atomic_number()
176 | |             for atom in polymer.get_atom_infos()
177 | |         ]
178 | |     )
    | |_____^ C411
179 |       atom_types = torch.tensor(atom_types, dtype=torch.long)
180 |       y = torch.tensor(target, dtype=torch.float32)
    |
    = help: Remove outer `list` call

src\stk_search\geom3d\test_train.py:184:12: RET504 Unnecessary assignment to `molecule` before `return` statement
    |
182 |     molecule = Data(x=atom_types, positions=positions, y=y,
183 |         InChIKey=InChIKey)
184 |     return molecule
    |            ^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\test_train.py:187:5: D103 Missing docstring in public function
    |
187 | def generate_dataset(df_total, df_precursors, db, number_of_molecules=1000):
    |     ^^^^^^^^^^^^^^^^ D103
188 |     molecule_index = np.random.choice(
189 |         len(df_total), number_of_molecules, replace=False
    |

src\stk_search\geom3d\test_train.py:187:32: ARG001 Unused function argument: `df_precursors`
    |
187 | def generate_dataset(df_total, df_precursors, db, number_of_molecules=1000):
    |                                ^^^^^^^^^^^^^ ARG001
188 |     molecule_index = np.random.choice(
189 |         len(df_total), number_of_molecules, replace=False
    |

src\stk_search\geom3d\test_train.py:188:22: NPY002 Replace legacy `np.random.choice` call with `np.random.Generator`
    |
187 | def generate_dataset(df_total, df_precursors, db, number_of_molecules=1000):
188 |     molecule_index = np.random.choice(
    |                      ^^^^^^^^^^^^^^^^ NPY002
189 |         len(df_total), number_of_molecules, replace=False
190 |     )
    |

src\stk_search\geom3d\test_train.py:201:5: D103 Missing docstring in public function
    |
201 | def train_val_test_split(dataset, config, smiles_list=None):
    |     ^^^^^^^^^^^^^^^^^^^^ D103
202 |     seed = config["seed"]
203 |     num_mols = len(dataset)
    |

src\stk_search\geom3d\test_train.py:204:5: NPY002 Replace legacy `np.random.seed` call with `np.random.Generator`
    |
202 |     seed = config["seed"]
203 |     num_mols = len(dataset)
204 |     np.random.seed(seed)
    |     ^^^^^^^^^^^^^^ NPY002
205 |     all_idx = np.random.permutation(num_mols)
    |

src\stk_search\geom3d\test_train.py:205:15: NPY002 Replace legacy `np.random.permutation` call with `np.random.Generator`
    |
203 |     num_mols = len(dataset)
204 |     np.random.seed(seed)
205 |     all_idx = np.random.permutation(num_mols)
    |               ^^^^^^^^^^^^^^^^^^^^^ NPY002
206 | 
207 |     Nmols = num_mols
    |

src\stk_search\geom3d\test_train.py:207:5: N806 Variable `Nmols` in function should be lowercase
    |
205 |     all_idx = np.random.permutation(num_mols)
206 | 
207 |     Nmols = num_mols
    |     ^^^^^ N806
208 |     Ntrain = int(num_mols * config["train_ratio"])
209 |     Nvalid = int(num_mols * config["valid_ratio"])
    |

src\stk_search\geom3d\test_train.py:208:5: N806 Variable `Ntrain` in function should be lowercase
    |
207 |     Nmols = num_mols
208 |     Ntrain = int(num_mols * config["train_ratio"])
    |     ^^^^^^ N806
209 |     Nvalid = int(num_mols * config["valid_ratio"])
210 |     Ntest = Nmols - (Ntrain + Nvalid)
    |

src\stk_search\geom3d\test_train.py:209:5: N806 Variable `Nvalid` in function should be lowercase
    |
207 |     Nmols = num_mols
208 |     Ntrain = int(num_mols * config["train_ratio"])
209 |     Nvalid = int(num_mols * config["valid_ratio"])
    |     ^^^^^^ N806
210 |     Ntest = Nmols - (Ntrain + Nvalid)
    |

src\stk_search\geom3d\test_train.py:210:5: N806 Variable `Ntest` in function should be lowercase
    |
208 |     Ntrain = int(num_mols * config["train_ratio"])
209 |     Nvalid = int(num_mols * config["valid_ratio"])
210 |     Ntest = Nmols - (Ntrain + Nvalid)
    |     ^^^^^ N806
211 | 
212 |     train_idx = all_idx[:Ntrain]
    |

src\stk_search\geom3d\test_train.py:210:5: F841 Local variable `Ntest` is assigned to but never used
    |
208 |     Ntrain = int(num_mols * config["train_ratio"])
209 |     Nvalid = int(num_mols * config["valid_ratio"])
210 |     Ntest = Nmols - (Ntrain + Nvalid)
    |     ^^^^^ F841
211 | 
212 |     train_idx = all_idx[:Ntrain]
    |
    = help: Remove assignment to unused variable `Ntest`

src\stk_search\geom3d\test_train.py:216:5: T201 `print` found
    |
214 |     test_idx = all_idx[Ntrain + Nvalid :]
215 | 
216 |     print("train_idx: ", train_idx)
    |     ^^^^^ T201
217 |     print("valid_idx: ", valid_idx)
218 |     print("test_idx: ", test_idx)
    |
    = help: Remove `print`

src\stk_search\geom3d\test_train.py:217:5: T201 `print` found
    |
216 |     print("train_idx: ", train_idx)
217 |     print("valid_idx: ", valid_idx)
    |     ^^^^^ T201
218 |     print("test_idx: ", test_idx)
219 |     # np.savez("customized_01", train_idx=train_idx, valid_idx=valid_idx, test_idx=test_idx)
    |
    = help: Remove `print`

src\stk_search\geom3d\test_train.py:218:5: T201 `print` found
    |
216 |     print("train_idx: ", train_idx)
217 |     print("valid_idx: ", valid_idx)
218 |     print("test_idx: ", test_idx)
    |     ^^^^^ T201
219 |     # np.savez("customized_01", train_idx=train_idx, valid_idx=valid_idx, test_idx=test_idx)
    |
    = help: Remove `print`

src\stk_search\geom3d\test_train.py:219:5: ERA001 Found commented-out code
    |
217 |     print("valid_idx: ", valid_idx)
218 |     print("test_idx: ", test_idx)
219 |     # np.savez("customized_01", train_idx=train_idx, valid_idx=valid_idx, test_idx=test_idx)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
220 | 
221 |     assert len(set(train_idx).intersection(set(valid_idx))) == 0
    |
    = help: Remove commented-out code

src\stk_search\geom3d\test_train.py:221:5: S101 Use of `assert` detected
    |
219 |     # np.savez("customized_01", train_idx=train_idx, valid_idx=valid_idx, test_idx=test_idx)
220 | 
221 |     assert len(set(train_idx).intersection(set(valid_idx))) == 0
    |     ^^^^^^ S101
222 |     assert len(set(valid_idx).intersection(set(test_idx))) == 0
223 |     assert len(train_idx) + len(valid_idx) + len(test_idx) == num_mols
    |

src\stk_search\geom3d\test_train.py:222:5: S101 Use of `assert` detected
    |
221 |     assert len(set(train_idx).intersection(set(valid_idx))) == 0
222 |     assert len(set(valid_idx).intersection(set(test_idx))) == 0
    |     ^^^^^^ S101
223 |     assert len(train_idx) + len(valid_idx) + len(test_idx) == num_mols
224 |     train_dataset = [dataset[x] for x in train_idx]
    |

src\stk_search\geom3d\test_train.py:223:5: S101 Use of `assert` detected
    |
221 |     assert len(set(train_idx).intersection(set(valid_idx))) == 0
222 |     assert len(set(valid_idx).intersection(set(test_idx))) == 0
223 |     assert len(train_idx) + len(valid_idx) + len(test_idx) == num_mols
    |     ^^^^^^ S101
224 |     train_dataset = [dataset[x] for x in train_idx]
225 |     valid_dataset = [dataset[x] for x in valid_idx]
    |

src\stk_search\geom3d\test_train.py:248:5: RET505 Unnecessary `else` after `return` statement
    |
246 |     if not smiles_list:
247 |         return train_loader, val_loader, test_loader
248 |     else:
    |     ^^^^ RET505
249 |         train_smiles = [smiles_list[i] for i in train_idx]
250 |         valid_smiles = [smiles_list[i] for i in valid_idx]
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\test_train.py:262:12: PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
    |
260 | if __name__ == "__main__":
261 |     from argparse import ArgumentParser
262 |     root = os.getcwd()
    |            ^^^^^^^^^ PTH109
263 |     argparser = ArgumentParser()
264 |     argparser.add_argument(
    |

src\stk_search\geom3d\train_models.py:1:1: INP001 File `src\stk_search\geom3d\train_models.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\train_models.py:1:1: D205 1 blank line required between summary line and description
  |
1 | / """script to train the SchNet model on the STK dataset
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D205
5 |   
6 |   import glob
  |
  = help: Insert single blank line

src\stk_search\geom3d\train_models.py:1:1: D400 First line should end with a period
  |
1 | / """script to train the SchNet model on the STK dataset
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D400
5 |   
6 |   import glob
  |
  = help: Add period

src\stk_search\geom3d\train_models.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | / """script to train the SchNet model on the STK dataset
2 | | created by Mohammed Azzouzi
3 | | date: 2023-11-14
4 | | """
  | |___^ D415
5 |   
6 |   import glob
  |
  = help: Add closing punctuation

src\stk_search\geom3d\train_models.py:21:5: D417 Missing argument description in the docstring for `load_and_run_model_training`: `lightning_model`
   |
21 | def load_and_run_model_training(
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
22 |     config, train_loader, val_loader, lightning_model=Pymodel
23 | ):
   |

src\stk_search\geom3d\train_models.py:35:5: T201 `print` found
   |
33 |     start_time = time.time()  # Record the start time
34 |     model, graph_pred_linear = pl_model.model_setup(config)
35 |     print("Model loaded: ", config["model_name"])
   |     ^^^^^ T201
36 |     init_dir = os.getcwd()
37 |     # if config["model_path"]:
   |
   = help: Remove `print`

src\stk_search\geom3d\train_models.py:36:16: PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
   |
34 |     model, graph_pred_linear = pl_model.model_setup(config)
35 |     print("Model loaded: ", config["model_name"])
36 |     init_dir = os.getcwd()
   |                ^^^^^^^^^ PTH109
37 |     # if config["model_path"]:
38 |     #   model = load_3d_rpr(model, config["model_path"])
   |

src\stk_search\geom3d\train_models.py:38:5: ERA001 Found commented-out code
   |
36 |     init_dir = os.getcwd()
37 |     # if config["model_path"]:
38 |     #   model = load_3d_rpr(model, config["model_path"])
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
39 |     os.chdir(config["running_dir"])
40 |     # wandb.login()
   |
   = help: Remove commented-out code

src\stk_search\geom3d\train_models.py:40:5: ERA001 Found commented-out code
   |
38 |     #   model = load_3d_rpr(model, config["model_path"])
39 |     os.chdir(config["running_dir"])
40 |     # wandb.login()
   |     ^^^^^^^^^^^^^^^ ERA001
41 |     # wandb.init(settings=wandb.Settings(start_method="fork"))
42 |     # model
   |
   = help: Remove commented-out code

src\stk_search\geom3d\train_models.py:41:5: ERA001 Found commented-out code
   |
39 |     os.chdir(config["running_dir"])
40 |     # wandb.login()
41 |     # wandb.init(settings=wandb.Settings(start_method="fork"))
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
42 |     # model
43 |     # check if chkpt exists
   |
   = help: Remove commented-out code

src\stk_search\geom3d\train_models.py:45:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
43 |     # check if chkpt exists
44 |     pymodel = lightning_model(model, graph_pred_linear, config)
45 |     if os.path.exists(config["model_embedding_chkpt"]):
   |        ^^^^^^^^^^^^^^ PTH110
46 |         chkpt_path = config["model_embedding_chkpt"]
47 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
   |

src\stk_search\geom3d\train_models.py:48:9: T201 `print` found
   |
46 |         chkpt_path = config["model_embedding_chkpt"]
47 |         checkpoint = torch.load(chkpt_path, map_location=config["device"])
48 |         print("Model loaded: ", config["model_embedding_chkpt"])
   |         ^^^^^ T201
49 |         # Pass the model and graph_pred_linear to the Pymodel constructor
50 |         # Load the state dictionary
   |
   = help: Remove `print`

src\stk_search\geom3d\train_models.py:53:9: E722 Do not use bare `except`
   |
51 |         try:
52 |             pymodel.load_state_dict(state_dict=checkpoint["state_dict"])
53 |         except:
   |         ^^^^^^ E722
54 |             print("issue loading checkpoint file")
55 |     wandb_logger = WandbLogger(
   |

src\stk_search\geom3d\train_models.py:54:13: T201 `print` found
   |
52 |             pymodel.load_state_dict(state_dict=checkpoint["state_dict"])
53 |         except:
54 |             print("issue loading checkpoint file")
   |             ^^^^^ T201
55 |     wandb_logger = WandbLogger(
56 |         log_model=True,
   |
   = help: Remove `print`

src\stk_search\geom3d\train_models.py:65:17: PTH109 `os.getcwd()` should be replaced by `Path.cwd()`
   |
63 |     # train model
64 |     checkpoint_callback = ModelCheckpoint(
65 |         dirpath=os.getcwd(),
   |                 ^^^^^^^^^ PTH109
66 |         filename="{epoch}-{val_loss:.2f}-{other_metric:.2f}",
67 |         monitor="val_loss",
   |

src\stk_search\geom3d\train_models.py:94:5: T201 `print` found
   |
92 |     end_time = time.time()  # Record the end time
93 |     total_time = end_time - start_time
94 |     print(f"Total time taken for model training: {total_time} seconds")
   |     ^^^^^ T201
95 |     os.chdir(init_dir)
   |
   = help: Remove `print`

src\stk_search\geom3d\train_models.py:112:13: PTH207 Replace `glob` with `Path.glob` or `Path.rglob`
    |
110 |     """
111 |     config = read_config(config_dir, model_name="SchNet")
112 |     files = glob.glob(config_dir + "/*.ckpt")
    |             ^^^^^^^^^ PTH207
113 |     min_val_loss = 1000
114 |     for file in files:
    |

src\stk_search\geom3d\train_models.py:118:13: T201 `print` found
    |
116 |         val_loss = float(file.split("val_loss=")[1].split("-")[0])
117 |         if val_loss < min_val_loss:
118 |             print(file)
    |             ^^^^^ T201
119 |             min_val_loss = val_loss
120 |             config["model_embedding_chkpt"] = file
    |
    = help: Remove `print`

src\stk_search\geom3d\transformer_utils.py:1:1: INP001 File `src\stk_search\geom3d\transformer_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\geom3d\transformer_utils.py:8:8: N812 Lowercase `lightning` imported as non-lowercase `L`
   |
 7 | # PyTorch Lightning
 8 | import lightning as L
   |        ^^^^^^^^^^^^^^ N812
 9 | import numpy as np
10 | import torch
   |

src\stk_search\geom3d\transformer_utils.py:11:8: N812 Lowercase `functional` imported as non-lowercase `F`
   |
 9 | import numpy as np
10 | import torch
11 | import torch.nn.functional as F
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ N812
12 | from torch import nn, optim
   |

src\stk_search\geom3d\transformer_utils.py:15:7: D101 Missing docstring in public class
   |
15 | class EncoderBlock(nn.Module):
   |       ^^^^^^^^^^^^ D101
16 |     def __init__(self, input_dim, num_heads, dim_feedforward, dropout=0.0):
17 |         """EncoderBlock.
   |

src\stk_search\geom3d\transformer_utils.py:16:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 | class EncoderBlock(nn.Module):
16 |     def __init__(self, input_dim, num_heads, dim_feedforward, dropout=0.0):
   |         ^^^^^^^^ ANN204
17 |         """EncoderBlock.
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:45:9: D102 Missing docstring in public method
   |
43 |         self.dropout = nn.Dropout(dropout)
44 | 
45 |     def forward(self, x, mask=None):
   |         ^^^^^^^ D102
46 |         # Attention part
47 |         attn_out = self.self_attn(x, mask=mask)
   |

src\stk_search\geom3d\transformer_utils.py:56:16: RET504 Unnecessary assignment to `x` before `return` statement
   |
54 |         x = self.norm2(x)
55 | 
56 |         return x
   |                ^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\geom3d\transformer_utils.py:59:7: D101 Missing docstring in public class
   |
59 | class CosineWarmupScheduler(optim.lr_scheduler._LRScheduler):
   |       ^^^^^^^^^^^^^^^^^^^^^ D101
60 |     def __init__(self, optimizer, warmup, max_iters):
61 |         self.warmup = warmup
   |

src\stk_search\geom3d\transformer_utils.py:59:29: SLF001 Private member accessed: `_LRScheduler`
   |
59 | class CosineWarmupScheduler(optim.lr_scheduler._LRScheduler):
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
60 |     def __init__(self, optimizer, warmup, max_iters):
61 |         self.warmup = warmup
   |

src\stk_search\geom3d\transformer_utils.py:60:9: ANN204 Missing return type annotation for special method `__init__`
   |
59 | class CosineWarmupScheduler(optim.lr_scheduler._LRScheduler):
60 |     def __init__(self, optimizer, warmup, max_iters):
   |         ^^^^^^^^ ANN204
61 |         self.warmup = warmup
62 |         self.max_num_iters = max_iters
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:60:9: D107 Missing docstring in `__init__`
   |
59 | class CosineWarmupScheduler(optim.lr_scheduler._LRScheduler):
60 |     def __init__(self, optimizer, warmup, max_iters):
   |         ^^^^^^^^ D107
61 |         self.warmup = warmup
62 |         self.max_num_iters = max_iters
   |

src\stk_search\geom3d\transformer_utils.py:65:9: D102 Missing docstring in public method
   |
63 |         super().__init__(optimizer)
64 | 
65 |     def get_lr(self):
   |         ^^^^^^ D102
66 |         lr_factor = self.get_lr_factor(epoch=self.last_epoch)
67 |         return [base_lr * lr_factor for base_lr in self.base_lrs]
   |

src\stk_search\geom3d\transformer_utils.py:69:9: D102 Missing docstring in public method
   |
67 |         return [base_lr * lr_factor for base_lr in self.base_lrs]
68 | 
69 |     def get_lr_factor(self, epoch):
   |         ^^^^^^^^^^^^^ D102
70 |         lr_factor = 0.5 * (1 + np.cos(np.pi * epoch / self.max_num_iters))
71 |         if epoch <= self.warmup:
   |

src\stk_search\geom3d\transformer_utils.py:76:7: D101 Missing docstring in public class
   |
76 | class TransformerEncoder(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^ D101
77 |     def __init__(self, num_layers, **block_args):
78 |         super().__init__()
   |

src\stk_search\geom3d\transformer_utils.py:77:9: ANN204 Missing return type annotation for special method `__init__`
   |
76 | class TransformerEncoder(nn.Module):
77 |     def __init__(self, num_layers, **block_args):
   |         ^^^^^^^^ ANN204
78 |         super().__init__()
79 |         self.layers = nn.ModuleList(
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:77:9: D107 Missing docstring in `__init__`
   |
76 | class TransformerEncoder(nn.Module):
77 |     def __init__(self, num_layers, **block_args):
   |         ^^^^^^^^ D107
78 |         super().__init__()
79 |         self.layers = nn.ModuleList(
   |

src\stk_search\geom3d\transformer_utils.py:77:36: ANN003 Missing type annotation for `**block_args`
   |
76 | class TransformerEncoder(nn.Module):
77 |     def __init__(self, num_layers, **block_args):
   |                                    ^^^^^^^^^^^^ ANN003
78 |         super().__init__()
79 |         self.layers = nn.ModuleList(
   |

src\stk_search\geom3d\transformer_utils.py:83:9: D102 Missing docstring in public method
   |
81 |         )
82 | 
83 |     def forward(self, x, mask=None):
   |         ^^^^^^^ D102
84 |         for layer in self.layers:
85 |             x = layer(x, mask=mask)
   |

src\stk_search\geom3d\transformer_utils.py:88:9: D102 Missing docstring in public method
   |
86 |         return x
87 | 
88 |     def get_attention_maps(self, x, mask=None):
   |         ^^^^^^^^^^^^^^^^^^ D102
89 |         attention_maps = []
90 |         for layer in self.layers:
   |

src\stk_search\geom3d\transformer_utils.py:97:7: D101 Missing docstring in public class
   |
97 | class PositionalEncoding(nn.Module):
   |       ^^^^^^^^^^^^^^^^^^ D101
98 |     def __init__(self, d_model, max_len=5000):
99 |         """Positional Encoding.
   |

src\stk_search\geom3d\transformer_utils.py:98:9: ANN204 Missing return type annotation for special method `__init__`
   |
97 | class PositionalEncoding(nn.Module):
98 |     def __init__(self, d_model, max_len=5000):
   |         ^^^^^^^^ ANN204
99 |         """Positional Encoding.
   |
   = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:125:9: D102 Missing docstring in public method
    |
123 |         self.register_buffer("pe", pe, persistent=False)
124 | 
125 |     def forward(self, x):
    |         ^^^^^^^ D102
126 |         x = x + self.pe[:, : x.size(1)]
127 |         return x
    |

src\stk_search\geom3d\transformer_utils.py:127:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
125 |     def forward(self, x):
126 |         x = x + self.pe[:, : x.size(1)]
127 |         return x
    |                ^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\transformer_utils.py:130:7: D101 Missing docstring in public class
    |
130 | class MultiheadAttention(nn.Module):
    |       ^^^^^^^^^^^^^^^^^^ D101
131 |     def __init__(self, input_dim, embed_dim, num_heads):
132 |         super().__init__()
    |

src\stk_search\geom3d\transformer_utils.py:131:9: ANN204 Missing return type annotation for special method `__init__`
    |
130 | class MultiheadAttention(nn.Module):
131 |     def __init__(self, input_dim, embed_dim, num_heads):
    |         ^^^^^^^^ ANN204
132 |         super().__init__()
133 |         assert (
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:131:9: D107 Missing docstring in `__init__`
    |
130 | class MultiheadAttention(nn.Module):
131 |     def __init__(self, input_dim, embed_dim, num_heads):
    |         ^^^^^^^^ D107
132 |         super().__init__()
133 |         assert (
    |

src\stk_search\geom3d\transformer_utils.py:133:9: S101 Use of `assert` detected
    |
131 |     def __init__(self, input_dim, embed_dim, num_heads):
132 |         super().__init__()
133 |         assert (
    |         ^^^^^^ S101
134 |             embed_dim % num_heads == 0
135 |         ), "Embedding dimension must be 0 modulo number of heads."
    |

src\stk_search\geom3d\transformer_utils.py:148:9: ANN202 Missing return type annotation for private function `_reset_parameters`
    |
146 |         self._reset_parameters()
147 | 
148 |     def _reset_parameters(self):
    |         ^^^^^^^^^^^^^^^^^ ANN202
149 |         # Original Transformer initialization, see PyTorch documentation
150 |         nn.init.xavier_uniform_(self.qkv_proj.weight)
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:155:9: D102 Missing docstring in public method
    |
153 |         self.o_proj.bias.data.fill_(0)
154 | 
155 |     def forward(self, x, mask=None, return_attention=False):
    |         ^^^^^^^ D102
156 |         batch_size, seq_length, embed_dim = x.size()
157 |         qkv = self.qkv_proj(x)
    |

src\stk_search\geom3d\transformer_utils.py:155:37: FBT002 Boolean default positional argument in function definition
    |
153 |         self.o_proj.bias.data.fill_(0)
154 | 
155 |     def forward(self, x, mask=None, return_attention=False):
    |                                     ^^^^^^^^^^^^^^^^ FBT002
156 |         batch_size, seq_length, embed_dim = x.size()
157 |         qkv = self.qkv_proj(x)
    |

src\stk_search\geom3d\transformer_utils.py:174:9: RET505 Unnecessary `else` after `return` statement
    |
172 |         if return_attention:
173 |             return o, attention
174 |         else:
    |         ^^^^ RET505
175 |             return o
    |
    = help: Remove unnecessary `else`

src\stk_search\geom3d\transformer_utils.py:178:7: D101 Missing docstring in public class
    |
178 | class TransformerPredictor(L.LightningModule):
    |       ^^^^^^^^^^^^^^^^^^^^ D101
179 |     def __init__(
180 |         self,
    |

src\stk_search\geom3d\transformer_utils.py:179:9: PLR0913 Too many arguments in function definition (10 > 5)
    |
178 | class TransformerPredictor(L.LightningModule):
179 |     def __init__(
    |         ^^^^^^^^ PLR0913
180 |         self,
181 |         input_dim,
    |

src\stk_search\geom3d\transformer_utils.py:179:9: ANN204 Missing return type annotation for special method `__init__`
    |
178 | class TransformerPredictor(L.LightningModule):
179 |     def __init__(
    |         ^^^^^^^^ ANN204
180 |         self,
181 |         input_dim,
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:181:9: ARG002 Unused method argument: `input_dim`
    |
179 |     def __init__(
180 |         self,
181 |         input_dim,
    |         ^^^^^^^^^ ARG002
182 |         model_dim,
183 |         num_classes,
    |

src\stk_search\geom3d\transformer_utils.py:182:9: ARG002 Unused method argument: `model_dim`
    |
180 |         self,
181 |         input_dim,
182 |         model_dim,
    |         ^^^^^^^^^ ARG002
183 |         num_classes,
184 |         num_heads,
    |

src\stk_search\geom3d\transformer_utils.py:183:9: ARG002 Unused method argument: `num_classes`
    |
181 |         input_dim,
182 |         model_dim,
183 |         num_classes,
    |         ^^^^^^^^^^^ ARG002
184 |         num_heads,
185 |         num_layers,
    |

src\stk_search\geom3d\transformer_utils.py:184:9: ARG002 Unused method argument: `num_heads`
    |
182 |         model_dim,
183 |         num_classes,
184 |         num_heads,
    |         ^^^^^^^^^ ARG002
185 |         num_layers,
186 |         lr,
    |

src\stk_search\geom3d\transformer_utils.py:185:9: ARG002 Unused method argument: `num_layers`
    |
183 |         num_classes,
184 |         num_heads,
185 |         num_layers,
    |         ^^^^^^^^^^ ARG002
186 |         lr,
187 |         warmup,
    |

src\stk_search\geom3d\transformer_utils.py:186:9: ARG002 Unused method argument: `lr`
    |
184 |         num_heads,
185 |         num_layers,
186 |         lr,
    |         ^^ ARG002
187 |         warmup,
188 |         max_iters,
    |

src\stk_search\geom3d\transformer_utils.py:187:9: ARG002 Unused method argument: `warmup`
    |
185 |         num_layers,
186 |         lr,
187 |         warmup,
    |         ^^^^^^ ARG002
188 |         max_iters,
189 |         dropout=0.0,
    |

src\stk_search\geom3d\transformer_utils.py:188:9: ARG002 Unused method argument: `max_iters`
    |
186 |         lr,
187 |         warmup,
188 |         max_iters,
    |         ^^^^^^^^^ ARG002
189 |         dropout=0.0,
190 |         input_dropout=0.0,
    |

src\stk_search\geom3d\transformer_utils.py:189:9: ARG002 Unused method argument: `dropout`
    |
187 |         warmup,
188 |         max_iters,
189 |         dropout=0.0,
    |         ^^^^^^^ ARG002
190 |         input_dropout=0.0,
191 |     ):
    |

src\stk_search\geom3d\transformer_utils.py:190:9: ARG002 Unused method argument: `input_dropout`
    |
188 |         max_iters,
189 |         dropout=0.0,
190 |         input_dropout=0.0,
    |         ^^^^^^^^^^^^^ ARG002
191 |     ):
192 |         """TransformerPredictor.
    |

src\stk_search\geom3d\transformer_utils.py:212:9: ANN202 Missing return type annotation for private function `_create_model`
    |
210 |         self._create_model()
211 | 
212 |     def _create_model(self):
    |         ^^^^^^^^^^^^^ ANN202
213 |         # Input dim -> Model dim
214 |         self.input_net = nn.Sequential(
    |
    = help: Add return type annotation: `None`

src\stk_search\geom3d\transformer_utils.py:240:37: FBT002 Boolean default positional argument in function definition
    |
238 |         self.model_encoder = None
239 | 
240 |     def forward(self, x, mask=None, add_positional_encoding=True):
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^ FBT002
241 |         """Args:
242 |         ----
    |

src\stk_search\geom3d\transformer_utils.py:241:9: D205 1 blank line required between summary line and description
    |
240 |       def forward(self, x, mask=None, add_positional_encoding=True):
241 |           """Args:
    |  _________^
242 | |         ----
243 | |             x: Input features of shape [Batch, SeqLen, input_dim]
244 | |             mask: Mask to apply on the attention outputs (optional)
245 | |             add_positional_encoding: If True, we add the positional encoding to the input.
246 | |                                       Might not be desired for some tasks.
247 | | 
248 | |         """
    | |___________^ D205
249 |           x = self.input_net(x)
250 |           if add_positional_encoding:
    |
    = help: Insert single blank line

src\stk_search\geom3d\transformer_utils.py:241:9: D400 First line should end with a period
    |
240 |       def forward(self, x, mask=None, add_positional_encoding=True):
241 |           """Args:
    |  _________^
242 | |         ----
243 | |             x: Input features of shape [Batch, SeqLen, input_dim]
244 | |             mask: Mask to apply on the attention outputs (optional)
245 | |             add_positional_encoding: If True, we add the positional encoding to the input.
246 | |                                       Might not be desired for some tasks.
247 | | 
248 | |         """
    | |___________^ D400
249 |           x = self.input_net(x)
250 |           if add_positional_encoding:
    |
    = help: Add period

src\stk_search\geom3d\transformer_utils.py:241:9: D415 First line should end with a period, question mark, or exclamation point
    |
240 |       def forward(self, x, mask=None, add_positional_encoding=True):
241 |           """Args:
    |  _________^
242 | |         ----
243 | |             x: Input features of shape [Batch, SeqLen, input_dim]
244 | |             mask: Mask to apply on the attention outputs (optional)
245 | |             add_positional_encoding: If True, we add the positional encoding to the input.
246 | |                                       Might not be desired for some tasks.
247 | | 
248 | |         """
    | |___________^ D415
249 |           x = self.input_net(x)
250 |           if add_positional_encoding:
    |
    = help: Add closing punctuation

src\stk_search\geom3d\transformer_utils.py:254:16: RET504 Unnecessary assignment to `x` before `return` statement
    |
252 |         x = self.transformer(x, mask=mask)
253 |         x = self.output_net(x)
254 |         return x
    |                ^ RET504
255 | 
256 |     @torch.no_grad()
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\transformer_utils.py:257:48: FBT002 Boolean default positional argument in function definition
    |
256 |     @torch.no_grad()
257 |     def get_attention_maps(self, x, mask=None, add_positional_encoding=True):
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^ FBT002
258 |         """Function for extracting the attention matrices of the whole Transformer for a single batch.
    |

src\stk_search\geom3d\transformer_utils.py:258:9: D401 First line of docstring should be in imperative mood: "Function for extracting the attention matrices of the whole Transformer for a single batch."
    |
256 |       @torch.no_grad()
257 |       def get_attention_maps(self, x, mask=None, add_positional_encoding=True):
258 |           """Function for extracting the attention matrices of the whole Transformer for a single batch.
    |  _________^
259 | | 
260 | |         Input arguments same as the forward pass.
261 | |         """
    | |___________^ D401
262 |           x = self.input_net(x)
263 |           if add_positional_encoding:
    |

src\stk_search\geom3d\transformer_utils.py:266:16: RET504 Unnecessary assignment to `attention_maps` before `return` statement
    |
264 |             x = self.positional_encoding(x)
265 |         attention_maps = self.transformer.get_attention_maps(x, mask=mask)
266 |         return attention_maps
    |                ^^^^^^^^^^^^^^ RET504
267 | 
268 |     def configure_optimizers(self):
    |
    = help: Remove unnecessary assignment

src\stk_search\geom3d\transformer_utils.py:268:9: D102 Missing docstring in public method
    |
266 |         return attention_maps
267 | 
268 |     def configure_optimizers(self):
    |         ^^^^^^^^^^^^^^^^^^^^ D102
269 |         optimizer = optim.Adam(self.parameters(), lr=self.hparams.lr)
    |

src\stk_search\geom3d\transformer_utils.py:279:9: D102 Missing docstring in public method
    |
277 |         return optimizer
278 | 
279 |     def optimizer_step(self, *args, **kwargs):
    |         ^^^^^^^^^^^^^^ D102
280 |         super().optimizer_step(*args, **kwargs)
281 |         self.lr_scheduler.step()  # Step per iteration
    |

src\stk_search\geom3d\transformer_utils.py:279:30: ANN002 Missing type annotation for `*args`
    |
277 |         return optimizer
278 | 
279 |     def optimizer_step(self, *args, **kwargs):
    |                              ^^^^^ ANN002
280 |         super().optimizer_step(*args, **kwargs)
281 |         self.lr_scheduler.step()  # Step per iteration
    |

src\stk_search\geom3d\transformer_utils.py:279:37: ANN003 Missing type annotation for `**kwargs`
    |
277 |         return optimizer
278 | 
279 |     def optimizer_step(self, *args, **kwargs):
    |                                     ^^^^^^^^ ANN003
280 |         super().optimizer_step(*args, **kwargs)
281 |         self.lr_scheduler.step()  # Step per iteration
    |

src\stk_search\geom3d\transformer_utils.py:283:9: D102 Missing docstring in public method
    |
281 |         self.lr_scheduler.step()  # Step per iteration
282 | 
283 |     def training_step(self, batch, batch_idx):
    |         ^^^^^^^^^^^^^ D102
284 |         raise NotImplementedError
    |

src\stk_search\geom3d\transformer_utils.py:286:9: D102 Missing docstring in public method
    |
284 |         raise NotImplementedError
285 | 
286 |     def validation_step(self, batch, batch_idx):
    |         ^^^^^^^^^^^^^^^ D102
287 |         raise NotImplementedError
    |

src\stk_search\geom3d\transformer_utils.py:289:9: D102 Missing docstring in public method
    |
287 |         raise NotImplementedError
288 | 
289 |     def test_step(self, batch, batch_idx):
    |         ^^^^^^^^^ D102
290 |         raise NotImplementedError
    |

src\stk_search\geom3d\transformer_utils.py:293:5: D103 Missing docstring in public function
    |
293 | def scaled_dot_product(q, k, v, mask=None):
    |     ^^^^^^^^^^^^^^^^^^ D103
294 |     d_k = q.size()[-1]
295 |     attn_logits = torch.matmul(q, k.transpose(-2, -1))
    |

src\stk_search\utils\Chemiscope_functions.py:1:1: INP001 File `src\stk_search\utils\Chemiscope_functions.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\Chemiscope_functions.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\Chemiscope_functions.py:15:5: N802 Function name `generate_Slatm` should be lowercase
   |
15 | def generate_Slatm(df_1, dirname, name, database_name="stk_mohammed_new"):
   |     ^^^^^^^^^^^^^^ N802
16 |     """Generate slatm representation following the script in :
17 |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
   |

src\stk_search\utils\Chemiscope_functions.py:16:5: D205 1 blank line required between summary line and description
   |
15 |   def generate_Slatm(df_1, dirname, name, database_name="stk_mohammed_new"):
16 |       """Generate slatm representation following the script in :
   |  _____^
17 | |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
18 | |     """
   | |_______^ D205
19 |       client = pymongo.MongoClient("mongodb://129.31.66.201/")
20 |       os.makedirs(dirname, exist_ok=True)
   |
   = help: Insert single blank line

src\stk_search\utils\Chemiscope_functions.py:16:5: D400 First line should end with a period
   |
15 |   def generate_Slatm(df_1, dirname, name, database_name="stk_mohammed_new"):
16 |       """Generate slatm representation following the script in :
   |  _____^
17 | |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
18 | |     """
   | |_______^ D400
19 |       client = pymongo.MongoClient("mongodb://129.31.66.201/")
20 |       os.makedirs(dirname, exist_ok=True)
   |
   = help: Add period

src\stk_search\utils\Chemiscope_functions.py:16:5: D415 First line should end with a period, question mark, or exclamation point
   |
15 |   def generate_Slatm(df_1, dirname, name, database_name="stk_mohammed_new"):
16 |       """Generate slatm representation following the script in :
   |  _____^
17 | |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
18 | |     """
   | |_______^ D415
19 |       client = pymongo.MongoClient("mongodb://129.31.66.201/")
20 |       os.makedirs(dirname, exist_ok=True)
   |
   = help: Add closing punctuation

src\stk_search\utils\Chemiscope_functions.py:20:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
18 |     """
19 |     client = pymongo.MongoClient("mongodb://129.31.66.201/")
20 |     os.makedirs(dirname, exist_ok=True)
   |     ^^^^^^^^^^^ PTH103
21 |     db = stk.MoleculeMongoDb(
22 |         client,
   |

src\stk_search\utils\Chemiscope_functions.py:28:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
26 |     for inchkey in set(df_1["InChIKey"]):
27 |         try:
28 |             if not os.path.exists("cache/{inchkey}.xyz"):
   |                    ^^^^^^^^^^^^^^ PTH110
29 |                 polymer = db.get({"InChIKey": inchkey})
30 |                 polymer.write(f"cache/{inchkey}.xyz")
   |

src\stk_search\utils\Chemiscope_functions.py:31:13: ERA001 Found commented-out code
   |
29 |                 polymer = db.get({"InChIKey": inchkey})
30 |                 polymer.write(f"cache/{inchkey}.xyz")
31 |             # mols_1.append(ase.io.read(f'cache/{inchkey}.xyz'))
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
32 |             namelist.append(qml.Compound(xyz=f"cache/{inchkey}.xyz"))
   |
   = help: Remove commented-out code

src\stk_search\utils\Chemiscope_functions.py:34:9: PERF203 `try`-`except` within a loop incurs performance overhead
   |
32 |               namelist.append(qml.Compound(xyz=f"cache/{inchkey}.xyz"))
33 |   
34 |           except Exception as err:
   |  _________^
35 | |             print(f"Unexpected {err=}, {type(err)=}")
36 | |             print(f" issue with {inchkey}")
   | |___________________________________________^ PERF203
37 |       compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
38 |       print(
   |

src\stk_search\utils\Chemiscope_functions.py:34:16: BLE001 Do not catch blind exception: `Exception`
   |
32 |             namelist.append(qml.Compound(xyz=f"cache/{inchkey}.xyz"))
33 | 
34 |         except Exception as err:
   |                ^^^^^^^^^ BLE001
35 |             print(f"Unexpected {err=}, {type(err)=}")
36 |             print(f" issue with {inchkey}")
   |

src\stk_search\utils\Chemiscope_functions.py:35:13: T201 `print` found
   |
34 |         except Exception as err:
35 |             print(f"Unexpected {err=}, {type(err)=}")
   |             ^^^^^ T201
36 |             print(f" issue with {inchkey}")
37 |     compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:36:13: T201 `print` found
   |
34 |         except Exception as err:
35 |             print(f"Unexpected {err=}, {type(err)=}")
36 |             print(f" issue with {inchkey}")
   |             ^^^^^ T201
37 |     compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
38 |     print(
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:38:5: T201 `print` found
   |
36 |             print(f" issue with {inchkey}")
37 |     compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
38 |     print(
   |     ^^^^^ T201
39 |         "Generated compounds; RAM memory % used:",
40 |         psutil.virtual_memory()[2],
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:43:5: T201 `print` found
   |
41 |         flush=True,
42 |     )
43 |     print("Total RAM:", psutil.virtual_memory()[0], flush=True)
   |     ^^^^^ T201
44 |     print("Available RAM:", psutil.virtual_memory()[1], flush=True)
45 |     if os.path.exists(dirname + "/mbtypes.npy"):
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:44:5: T201 `print` found
   |
42 |     )
43 |     print("Total RAM:", psutil.virtual_memory()[0], flush=True)
44 |     print("Available RAM:", psutil.virtual_memory()[1], flush=True)
   |     ^^^^^ T201
45 |     if os.path.exists(dirname + "/mbtypes.npy"):
46 |         mbtypes = np.load(dirname + "/mbtypes.npy", allow_pickle=True)
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:45:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
43 |     print("Total RAM:", psutil.virtual_memory()[0], flush=True)
44 |     print("Available RAM:", psutil.virtual_memory()[1], flush=True)
45 |     if os.path.exists(dirname + "/mbtypes.npy"):
   |        ^^^^^^^^^^^^^^ PTH110
46 |         mbtypes = np.load(dirname + "/mbtypes.npy", allow_pickle=True)
47 |     else:
   |

src\stk_search\utils\Chemiscope_functions.py:52:9: T201 `print` found
   |
50 |         np.save(dirname + "/mbtypes.npy", mbtypes)
51 |     for i, mol in enumerate(compounds):
52 |         print(f"Tackling representation of {namelist[i]}", flush=True)
   |         ^^^^^ T201
53 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
54 |         print(mol.representation.shape)
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:54:9: T201 `print` found
   |
52 |         print(f"Tackling representation of {namelist[i]}", flush=True)
53 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
54 |         print(mol.representation.shape)
   |         ^^^^^ T201
55 |         break
56 |     SIZEOFSLATM = len(mol.representation)
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:56:5: N806 Variable `SIZEOFSLATM` in function should be lowercase
   |
54 |         print(mol.representation.shape)
55 |         break
56 |     SIZEOFSLATM = len(mol.representation)
   |     ^^^^^^^^^^^ N806
57 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
58 |     N = []
   |

src\stk_search\utils\Chemiscope_functions.py:57:5: N806 Variable `Slatm_array` in function should be lowercase
   |
55 |         break
56 |     SIZEOFSLATM = len(mol.representation)
57 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
   |     ^^^^^^^^^^^ N806
58 |     N = []
59 |     print(
   |

src\stk_search\utils\Chemiscope_functions.py:58:5: N806 Variable `N` in function should be lowercase
   |
56 |     SIZEOFSLATM = len(mol.representation)
57 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
58 |     N = []
   |     ^ N806
59 |     print(
60 |         "Generated empty representation matrix; RAM memory % used:",
   |

src\stk_search\utils\Chemiscope_functions.py:59:5: T201 `print` found
   |
57 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
58 |     N = []
59 |     print(
   |     ^^^^^ T201
60 |         "Generated empty representation matrix; RAM memory % used:",
61 |         psutil.virtual_memory()[2],
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:65:9: T201 `print` found
   |
63 |     )
64 |     for i, mol in enumerate(compounds):
65 |         print(f"Tackling representation of {namelist[i]}", flush=True)
   |         ^^^^^ T201
66 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
67 |         # print(mol.representation.shape)
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:67:9: ERA001 Found commented-out code
   |
65 |         print(f"Tackling representation of {namelist[i]}", flush=True)
66 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
67 |         # print(mol.representation.shape)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
68 |         Slatm_array[i, :] = np.float16(mol.representation)
69 |         N.append(mol.name)
   |
   = help: Remove commented-out code

src\stk_search\utils\Chemiscope_functions.py:70:9: T201 `print` found
   |
68 |         Slatm_array[i, :] = np.float16(mol.representation)
69 |         N.append(mol.name)
70 |         print(
   |         ^^^^^ T201
71 |             "Filled in one representation vector; RAM memory % used:",
72 |             psutil.virtual_memory()[2],
   |
   = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:77:5: N806 Variable `N` in function should be lowercase
   |
75 |         del mol
76 | 
77 |     N = np.array(N)
   |     ^ N806
78 |     np.save(f"{dirname}/repr_{name}.npy", Slatm_array)
79 |     np.save(f"{dirname}/names_{name}.npy", N)
   |

src\stk_search\utils\Chemiscope_functions.py:83:5: N802 Function name `generate_Slatm_CM` should be lowercase
   |
83 | def generate_Slatm_CM(df_1, dirname, name, database_name="stk_mohammed_BO"):
   |     ^^^^^^^^^^^^^^^^^ N802
84 |     """Generate slatm representation following the script in :
85 |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
   |

src\stk_search\utils\Chemiscope_functions.py:84:5: D205 1 blank line required between summary line and description
   |
83 |   def generate_Slatm_CM(df_1, dirname, name, database_name="stk_mohammed_BO"):
84 |       """Generate slatm representation following the script in :
   |  _____^
85 | |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
86 | |     """
   | |_______^ D205
87 |       client = pymongo.MongoClient("mongodb://129.31.66.201/")
88 |       os.makedirs(dirname, exist_ok=True)
   |
   = help: Insert single blank line

src\stk_search\utils\Chemiscope_functions.py:84:5: D400 First line should end with a period
   |
83 |   def generate_Slatm_CM(df_1, dirname, name, database_name="stk_mohammed_BO"):
84 |       """Generate slatm representation following the script in :
   |  _____^
85 | |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
86 | |     """
   | |_______^ D400
87 |       client = pymongo.MongoClient("mongodb://129.31.66.201/")
88 |       os.makedirs(dirname, exist_ok=True)
   |
   = help: Add period

src\stk_search\utils\Chemiscope_functions.py:84:5: D415 First line should end with a period, question mark, or exclamation point
   |
83 |   def generate_Slatm_CM(df_1, dirname, name, database_name="stk_mohammed_BO"):
84 |       """Generate slatm representation following the script in :
   |  _____^
85 | |     https://github.com/lcmd-epfl/FORMED_ML/blob/a5d1e588dbb4883de19d4a69fae6694b9bde1101/data/generate_slatm.py
86 | |     """
   | |_______^ D415
87 |       client = pymongo.MongoClient("mongodb://129.31.66.201/")
88 |       os.makedirs(dirname, exist_ok=True)
   |
   = help: Add closing punctuation

src\stk_search\utils\Chemiscope_functions.py:88:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
86 |     """
87 |     client = pymongo.MongoClient("mongodb://129.31.66.201/")
88 |     os.makedirs(dirname, exist_ok=True)
   |     ^^^^^^^^^^^ PTH103
89 |     db = stk.ConstructedMoleculeMongoDb(
90 |         client,
   |

src\stk_search\utils\Chemiscope_functions.py:96:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
94 |     for inchkey in df_1["InChIKey"]:
95 |         try:
96 |             if not os.path.exists("cache/{inchkey}.xyz"):
   |                    ^^^^^^^^^^^^^^ PTH110
97 |                 polymer = db.get({"InChIKey": inchkey})
98 |                 polymer.write(f"cache/{inchkey}.xyz")
   |

src\stk_search\utils\Chemiscope_functions.py:99:13: ERA001 Found commented-out code
    |
 97 |                 polymer = db.get({"InChIKey": inchkey})
 98 |                 polymer.write(f"cache/{inchkey}.xyz")
 99 |             # mols_1.append(ase.io.read(f'cache/{inchkey}.xyz'))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
100 |             namelist.append(qml.Compound(xyz=f"cache/{inchkey}.xyz"))
    |
    = help: Remove commented-out code

src\stk_search\utils\Chemiscope_functions.py:102:9: PERF203 `try`-`except` within a loop incurs performance overhead
    |
100 |               namelist.append(qml.Compound(xyz=f"cache/{inchkey}.xyz"))
101 |   
102 |           except Exception as err:
    |  _________^
103 | |             print(f"Unexpected {err=}, {type(err)=}")
104 | |             print(f" issue with {inchkey}")
    | |___________________________________________^ PERF203
105 |       compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
106 |       print(
    |

src\stk_search\utils\Chemiscope_functions.py:102:16: BLE001 Do not catch blind exception: `Exception`
    |
100 |             namelist.append(qml.Compound(xyz=f"cache/{inchkey}.xyz"))
101 | 
102 |         except Exception as err:
    |                ^^^^^^^^^ BLE001
103 |             print(f"Unexpected {err=}, {type(err)=}")
104 |             print(f" issue with {inchkey}")
    |

src\stk_search\utils\Chemiscope_functions.py:103:13: T201 `print` found
    |
102 |         except Exception as err:
103 |             print(f"Unexpected {err=}, {type(err)=}")
    |             ^^^^^ T201
104 |             print(f" issue with {inchkey}")
105 |     compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:104:13: T201 `print` found
    |
102 |         except Exception as err:
103 |             print(f"Unexpected {err=}, {type(err)=}")
104 |             print(f" issue with {inchkey}")
    |             ^^^^^ T201
105 |     compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
106 |     print(
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:106:5: T201 `print` found
    |
104 |             print(f" issue with {inchkey}")
105 |     compounds = np.asarray(namelist, dtype=object)  # WARNING: REMOVE SLICING
106 |     print(
    |     ^^^^^ T201
107 |         "Generated compounds; RAM memory % used:",
108 |         psutil.virtual_memory()[2],
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:111:5: T201 `print` found
    |
109 |         flush=True,
110 |     )
111 |     print("Total RAM:", psutil.virtual_memory()[0], flush=True)
    |     ^^^^^ T201
112 |     print("Available RAM:", psutil.virtual_memory()[1], flush=True)
113 |     if os.path.exists(dirname + "/mbtypes.npy"):
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:112:5: T201 `print` found
    |
110 |     )
111 |     print("Total RAM:", psutil.virtual_memory()[0], flush=True)
112 |     print("Available RAM:", psutil.virtual_memory()[1], flush=True)
    |     ^^^^^ T201
113 |     if os.path.exists(dirname + "/mbtypes.npy"):
114 |         mbtypes = np.load(dirname + "/mbtypes.npy", allow_pickle=True)
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:113:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
111 |     print("Total RAM:", psutil.virtual_memory()[0], flush=True)
112 |     print("Available RAM:", psutil.virtual_memory()[1], flush=True)
113 |     if os.path.exists(dirname + "/mbtypes.npy"):
    |        ^^^^^^^^^^^^^^ PTH110
114 |         mbtypes = np.load(dirname + "/mbtypes.npy", allow_pickle=True)
115 |     else:
    |

src\stk_search\utils\Chemiscope_functions.py:120:9: T201 `print` found
    |
118 |         np.save(dirname + "/mbtypes.npy", mbtypes)
119 |     for i, mol in enumerate(compounds):
120 |         print(f"Tackling representation of {namelist[i]}", flush=True)
    |         ^^^^^ T201
121 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
122 |         print(mol.representation.shape)
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:122:9: T201 `print` found
    |
120 |         print(f"Tackling representation of {namelist[i]}", flush=True)
121 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
122 |         print(mol.representation.shape)
    |         ^^^^^ T201
123 |         break
124 |     SIZEOFSLATM = len(mol.representation)
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:124:5: N806 Variable `SIZEOFSLATM` in function should be lowercase
    |
122 |         print(mol.representation.shape)
123 |         break
124 |     SIZEOFSLATM = len(mol.representation)
    |     ^^^^^^^^^^^ N806
125 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
126 |     N = []
    |

src\stk_search\utils\Chemiscope_functions.py:125:5: N806 Variable `Slatm_array` in function should be lowercase
    |
123 |         break
124 |     SIZEOFSLATM = len(mol.representation)
125 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
    |     ^^^^^^^^^^^ N806
126 |     N = []
127 |     print(
    |

src\stk_search\utils\Chemiscope_functions.py:126:5: N806 Variable `N` in function should be lowercase
    |
124 |     SIZEOFSLATM = len(mol.representation)
125 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
126 |     N = []
    |     ^ N806
127 |     print(
128 |         "Generated empty representation matrix; RAM memory % used:",
    |

src\stk_search\utils\Chemiscope_functions.py:127:5: T201 `print` found
    |
125 |     Slatm_array = np.zeros((len(compounds), SIZEOFSLATM), dtype=np.float16)
126 |     N = []
127 |     print(
    |     ^^^^^ T201
128 |         "Generated empty representation matrix; RAM memory % used:",
129 |         psutil.virtual_memory()[2],
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:133:9: T201 `print` found
    |
131 |     )
132 |     for i, mol in enumerate(compounds):
133 |         print(f"Tackling representation of {namelist[i]}", flush=True)
    |         ^^^^^ T201
134 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
135 |         # print(mol.representation.shape)
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:135:9: ERA001 Found commented-out code
    |
133 |         print(f"Tackling representation of {namelist[i]}", flush=True)
134 |         mol.generate_slatm(mbtypes, local=False, dgrids=[0.1, 0.1])
135 |         # print(mol.representation.shape)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
136 |         Slatm_array[i, :] = np.float16(mol.representation)
137 |         N.append(mol.name)
    |
    = help: Remove commented-out code

src\stk_search\utils\Chemiscope_functions.py:138:9: T201 `print` found
    |
136 |         Slatm_array[i, :] = np.float16(mol.representation)
137 |         N.append(mol.name)
138 |         print(
    |         ^^^^^ T201
139 |             "Filled in one representation vector; RAM memory % used:",
140 |             psutil.virtual_memory()[2],
    |
    = help: Remove `print`

src\stk_search\utils\Chemiscope_functions.py:145:5: N806 Variable `N` in function should be lowercase
    |
143 |         del mol
144 | 
145 |     N = np.array(N)
    |     ^ N806
146 |     np.save(f"{dirname}/repr_{name}.npy", Slatm_array)
147 |     np.save(f"{dirname}/names_{name}.npy", N)
    |

src\stk_search\utils\EXP_plot_utils.py:1:1: INP001 File `src\stk_search\utils\EXP_plot_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\EXP_plot_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\EXP_plot_utils.py:13:5: D103 Missing docstring in public function
   |
12 | # plot the results of the experiment
13 | def plot_exp_batch_results(
   |     ^^^^^^^^^^^^^^^^^^^^^^ D103
14 |     exp_name="Inputs/exp1_2023_09_05_14_47_02/",
15 |     df_total: pd.DataFrame | None = None,
   |

src\stk_search\utils\EXP_plot_utils.py:15:15: FA102 Missing `from __future__ import annotations`, but uses PEP 604 union
   |
13 | def plot_exp_batch_results(
14 |     exp_name="Inputs/exp1_2023_09_05_14_47_02/",
15 |     df_total: pd.DataFrame | None = None,
   |               ^^^^^^^^^^^^^^^^^^^ FA102
16 | ):
17 |     df_list = []
   |
   = help: Add `from __future__ import annotations`

src\stk_search\utils\EXP_plot_utils.py:22:9: N806 Variable `SP` in function should be lowercase
   |
20 |     for i in [3, 4, 5, 6]:
21 |         search_space_loc = exp_name + f"search_space_{i}.pkl"
22 |         SP = pickle.load(open(search_space_loc, "rb"))
   |         ^^ N806
23 |         df_eval = SP.check_df_for_element_from_sp(df_to_check=df_total)
24 |         df_list.append(df_eval)
   |

src\stk_search\utils\EXP_plot_utils.py:22:14: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
20 |     for i in [3, 4, 5, 6]:
21 |         search_space_loc = exp_name + f"search_space_{i}.pkl"
22 |         SP = pickle.load(open(search_space_loc, "rb"))
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
23 |         df_eval = SP.check_df_for_element_from_sp(df_to_check=df_total)
24 |         df_list.append(df_eval)
   |

src\stk_search\utils\EXP_plot_utils.py:22:26: SIM115 Use context handler for opening files
   |
20 |     for i in [3, 4, 5, 6]:
21 |         search_space_loc = exp_name + f"search_space_{i}.pkl"
22 |         SP = pickle.load(open(search_space_loc, "rb"))
   |                          ^^^^ SIM115
23 |         df_eval = SP.check_df_for_element_from_sp(df_to_check=df_total)
24 |         df_list.append(df_eval)
   |

src\stk_search\utils\EXP_plot_utils.py:22:26: PTH123 `open()` should be replaced by `Path.open()`
   |
20 |     for i in [3, 4, 5, 6]:
21 |         search_space_loc = exp_name + f"search_space_{i}.pkl"
22 |         SP = pickle.load(open(search_space_loc, "rb"))
   |                          ^^^^ PTH123
23 |         df_eval = SP.check_df_for_element_from_sp(df_to_check=df_total)
24 |         df_list.append(df_eval)
   |

src\stk_search\utils\EXP_plot_utils.py:76:5: F821 Undefined name `display`
   |
74 |         layout=vbox_layout,
75 |     )
76 |     display(vb)
   |     ^^^^^^^ F821
   |

src\stk_search\utils\Precursor_calculation.py:1:1: INP001 File `src\stk_search\utils\Precursor_calculation.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\Precursor_calculation.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\Precursor_calculation.py:11:5: D103 Missing docstring in public function
   |
11 | def get_inchi_key(molecule):
   |     ^^^^^^^^^^^^^ D103
12 |     return stk.InchiKey().get_key(molecule)
   |

src\stk_search\utils\Precursor_calculation.py:14:7: N801 Class name `Calculate_Precursor` should use CapWords convention
   |
12 |     return stk.InchiKey().get_key(molecule)
13 | 
14 | class Calculate_Precursor:
   |       ^^^^^^^^^^^^^^^^^^^ N801
15 |     def __init__(self):
16 |         self.client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
   |

src\stk_search\utils\Precursor_calculation.py:14:7: D101 Missing docstring in public class
   |
12 |     return stk.InchiKey().get_key(molecule)
13 | 
14 | class Calculate_Precursor:
   |       ^^^^^^^^^^^^^^^^^^^ D101
15 |     def __init__(self):
16 |         self.client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
   |

src\stk_search\utils\Precursor_calculation.py:15:9: ANN204 Missing return type annotation for special method `__init__`
   |
14 | class Calculate_Precursor:
15 |     def __init__(self):
   |         ^^^^^^^^ ANN204
16 |         self.client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
17 |         self.db_mol = "stk_mohammed_new"
   |
   = help: Add return type annotation: `None`

src\stk_search\utils\Precursor_calculation.py:15:9: D107 Missing docstring in `__init__`
   |
14 | class Calculate_Precursor:
15 |     def __init__(self):
   |         ^^^^^^^^ D107
16 |         self.client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
17 |         self.db_mol = "stk_mohammed_new"
   |

src\stk_search\utils\Precursor_calculation.py:22:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
20 |         self.Db_folder = None
21 |         if self.Db_folder is not None:
22 |             os.makedirs(self.Db_folder, exist_ok=True)
   |             ^^^^^^^^^^^ PTH103
23 |         # print(self.collection_name)
24 |         self.host_IP = "cx1"
   |

src\stk_search\utils\Precursor_calculation.py:23:9: ERA001 Found commented-out code
   |
21 |         if self.Db_folder is not None:
22 |             os.makedirs(self.Db_folder, exist_ok=True)
23 |         # print(self.collection_name)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
24 |         self.host_IP = "cx1"
25 |         self.collection_name = "Precursors"
   |
   = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:28:9: D400 First line should end with a period
   |
27 |     def load_precursors(self, smile):
28 |         """Function to generate stk building block from smiles"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
29 |         precursor = stk.BuildingBlock(
30 |                 smile, functional_groups=[
   |
   = help: Add period

src\stk_search\utils\Precursor_calculation.py:28:9: D401 First line of docstring should be in imperative mood: "Function to generate stk building block from smiles"
   |
27 |     def load_precursors(self, smile):
28 |         """Function to generate stk building block from smiles"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
29 |         precursor = stk.BuildingBlock(
30 |                 smile, functional_groups=[
   |

src\stk_search\utils\Precursor_calculation.py:28:9: D415 First line should end with a period, question mark, or exclamation point
   |
27 |     def load_precursors(self, smile):
28 |         """Function to generate stk building block from smiles"""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
29 |         precursor = stk.BuildingBlock(
30 |                 smile, functional_groups=[
   |
   = help: Add closing punctuation

src\stk_search\utils\Precursor_calculation.py:33:16: RET504 Unnecessary assignment to `precursor` before `return` statement
   |
31 |                     stk.BromoFactory()])
32 | 
33 |         return precursor
   |                ^^^^^^^^^ RET504
34 | 
35 |     def evaluate_element(self, smile):
   |
   = help: Remove unnecessary assignment

src\stk_search\utils\Precursor_calculation.py:36:9: D205 1 blank line required between summary line and description
   |
35 |       def evaluate_element(self, smile):
36 |           """Function to evaluate the element
   |  _________^
37 | |         depending on the paths provided (xtb or stda )
38 | |         the function will add those calculations to the model
39 | |         """
   | |___________^ D205
40 |           # initialise the database
41 |           client = pymongo.MongoClient(self.client)
   |
   = help: Insert single blank line

src\stk_search\utils\Precursor_calculation.py:36:9: D400 First line should end with a period
   |
35 |       def evaluate_element(self, smile):
36 |           """Function to evaluate the element
   |  _________^
37 | |         depending on the paths provided (xtb or stda )
38 | |         the function will add those calculations to the model
39 | |         """
   | |___________^ D400
40 |           # initialise the database
41 |           client = pymongo.MongoClient(self.client)
   |
   = help: Add period

src\stk_search\utils\Precursor_calculation.py:36:9: D401 First line of docstring should be in imperative mood: "Function to evaluate the element"
   |
35 |       def evaluate_element(self, smile):
36 |           """Function to evaluate the element
   |  _________^
37 | |         depending on the paths provided (xtb or stda )
38 | |         the function will add those calculations to the model
39 | |         """
   | |___________^ D401
40 |           # initialise the database
41 |           client = pymongo.MongoClient(self.client)
   |

src\stk_search\utils\Precursor_calculation.py:36:9: D415 First line should end with a period, question mark, or exclamation point
   |
35 |       def evaluate_element(self, smile):
36 |           """Function to evaluate the element
   |  _________^
37 | |         depending on the paths provided (xtb or stda )
38 | |         the function will add those calculations to the model
39 | |         """
   | |___________^ D415
40 |           # initialise the database
41 |           client = pymongo.MongoClient(self.client)
   |
   = help: Add closing punctuation

src\stk_search\utils\Precursor_calculation.py:42:9: F841 Local variable `db_mol` is assigned to but never used
   |
40 |         # initialise the database
41 |         client = pymongo.MongoClient(self.client)
42 |         db_mol = stk.MoleculeMongoDb(
   |         ^^^^^^ F841
43 |             client,
44 |             database=self.db_mol,
   |
   = help: Remove assignment to unused variable `db_mol`

src\stk_search\utils\Precursor_calculation.py:50:9: N806 Variable `Db_folder` in function should be lowercase
   |
49 |         # define the output directories
50 |         Db_folder = self.Db_folder
   |         ^^^^^^^^^ N806
51 |         output_dir_ipea = os.path.join(
52 |             Db_folder, "Database", "xtb_calculations"
   |

src\stk_search\utils\Precursor_calculation.py:51:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
49 |         # define the output directories
50 |         Db_folder = self.Db_folder
51 |         output_dir_ipea = os.path.join(
   |                           ^^^^^^^^^^^^ PTH118
52 |             Db_folder, "Database", "xtb_calculations"
53 |         )
   |

src\stk_search\utils\Precursor_calculation.py:54:30: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
52 |             Db_folder, "Database", "xtb_calculations"
53 |         )
54 |         xtb_opt_output_dir = os.path.join(
   |                              ^^^^^^^^^^^^ PTH118
55 |             Db_folder, "Database", "xtb_opt_output_dir"
56 |         )
   |

src\stk_search\utils\Precursor_calculation.py:57:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
55 |             Db_folder, "Database", "xtb_opt_output_dir"
56 |         )
57 |         output_dir_stda = os.path.join(
   |                           ^^^^^^^^^^^^ PTH118
58 |             Db_folder, "Database", "stda_output_dir"
59 |         )
   |

src\stk_search\utils\Precursor_calculation.py:60:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
58 |             Db_folder, "Database", "stda_output_dir"
59 |         )
60 |         os.makedirs(output_dir_ipea, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
61 |         os.makedirs(xtb_opt_output_dir, exist_ok=True)
62 |         os.makedirs(output_dir_stda, exist_ok=True)
   |

src\stk_search\utils\Precursor_calculation.py:61:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
59 |         )
60 |         os.makedirs(output_dir_ipea, exist_ok=True)
61 |         os.makedirs(xtb_opt_output_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
62 |         os.makedirs(output_dir_stda, exist_ok=True)
63 |         # define the database and collection name
   |

src\stk_search\utils\Precursor_calculation.py:62:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
60 |         os.makedirs(output_dir_ipea, exist_ok=True)
61 |         os.makedirs(xtb_opt_output_dir, exist_ok=True)
62 |         os.makedirs(output_dir_stda, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
63 |         # define the database and collection name
64 |         collection_name = self.collection_name
   |

src\stk_search\utils\Precursor_calculation.py:65:9: ERA001 Found commented-out code
   |
63 |         # define the database and collection name
64 |         collection_name = self.collection_name
65 |         # print(collection_name)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
66 |         precursor = self.load_precursors(smile)
67 |         if self.xtb_path is not None:
   |
   = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:76:13: N806 Variable `Inchikey` in function should be lowercase
   |
74 |                 client=client,
75 |             )
76 |             Inchikey = stk.InchiKey().get_key(precursor)
   |             ^^^^^^^^ N806
77 | 
78 |             IP = self.run_xtb_ipea(
   |

src\stk_search\utils\Precursor_calculation.py:78:13: N806 Variable `IP` in function should be lowercase
   |
76 |             Inchikey = stk.InchiKey().get_key(precursor)
77 | 
78 |             IP = self.run_xtb_ipea(
   |             ^^ N806
79 |                 precursor,
80 |                 xtb_path,
   |

src\stk_search\utils\Precursor_calculation.py:88:17: N806 Variable `STDA_bin_path` in function should be lowercase
   |
86 |             )
87 |             if self.STDA_bin_path is not None:
88 |                 STDA_bin_path = self.STDA_bin_path
   |                 ^^^^^^^^^^^^^ N806
89 |                 Es1 = self.run_stda(
90 |                     precursor,
   |

src\stk_search\utils\Precursor_calculation.py:89:17: N806 Variable `Es1` in function should be lowercase
   |
87 |             if self.STDA_bin_path is not None:
88 |                 STDA_bin_path = self.STDA_bin_path
89 |                 Es1 = self.run_stda(
   |                 ^^^ N806
90 |                     precursor,
91 |                     STDA_bin_path,
   |

src\stk_search\utils\Precursor_calculation.py:101:9: RET505 Unnecessary `else` after `return` statement
    |
 99 |                 return Es1, Inchikey
100 |             return IP, Inchikey
101 |         else:
    |         ^^^^ RET505
102 |             precursor = self.run_ETKDG_opt(
103 |                 precursor,
    |
    = help: Remove unnecessary `else`

src\stk_search\utils\Precursor_calculation.py:108:13: N806 Variable `Inchikey` in function should be lowercase
    |
106 |                 client=client,
107 |             )
108 |             Inchikey = stk.InchiKey().get_key(precursor)
    |             ^^^^^^^^ N806
109 |             return None, Inchikey
    |

src\stk_search\utils\Precursor_calculation.py:112:9: N802 Function name `run_ETKDG_opt` should be lowercase
    |
112 |     def run_ETKDG_opt(
    |         ^^^^^^^^^^^^^ N802
113 |         self,
114 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:112:9: D102 Missing docstring in public method
    |
112 |     def run_ETKDG_opt(
    |         ^^^^^^^^^^^^^ D102
113 |         self,
114 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:119:9: F841 Local variable `output_dir` is assigned to but never used
    |
117 |         client=None,
118 |     ):
119 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
    |         ^^^^^^^^^^ F841
120 |         InchiKey_initial = get_inchi_key(polymer)
121 |         ETKDG = stko.OptimizerSequence(
    |
    = help: Remove assignment to unused variable `output_dir`

src\stk_search\utils\Precursor_calculation.py:119:22: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
117 |         client=None,
118 |     ):
119 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
    |                      ^^^^^^^^^^^^ PTH118
120 |         InchiKey_initial = get_inchi_key(polymer)
121 |         ETKDG = stko.OptimizerSequence(
    |

src\stk_search\utils\Precursor_calculation.py:120:9: N806 Variable `InchiKey_initial` in function should be lowercase
    |
118 |     ):
119 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
120 |         InchiKey_initial = get_inchi_key(polymer)
    |         ^^^^^^^^^^^^^^^^ N806
121 |         ETKDG = stko.OptimizerSequence(
122 |             stko.ETKDG(),
    |

src\stk_search\utils\Precursor_calculation.py:120:9: F841 Local variable `InchiKey_initial` is assigned to but never used
    |
118 |     ):
119 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
120 |         InchiKey_initial = get_inchi_key(polymer)
    |         ^^^^^^^^^^^^^^^^ F841
121 |         ETKDG = stko.OptimizerSequence(
122 |             stko.ETKDG(),
    |
    = help: Remove assignment to unused variable `InchiKey_initial`

src\stk_search\utils\Precursor_calculation.py:121:9: N806 Variable `ETKDG` in function should be lowercase
    |
119 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
120 |         InchiKey_initial = get_inchi_key(polymer)
121 |         ETKDG = stko.OptimizerSequence(
    |         ^^^^^ N806
122 |             stko.ETKDG(),
123 |         )
    |

src\stk_search\utils\Precursor_calculation.py:132:9: PLR0913 Too many arguments in function definition (6 > 5)
    |
130 |         return polymer
131 | 
132 |     def run_xtb_opt(
    |         ^^^^^^^^^^^ PLR0913
133 |         self,
134 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:132:9: D102 Missing docstring in public method
    |
130 |         return polymer
131 | 
132 |     def run_xtb_opt(
    |         ^^^^^^^^^^^ D102
133 |         self,
134 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:141:13: ANN202 Missing return type annotation for private function `save_xtb_opt_calculation`
    |
139 |         client=None,
140 |     ):
141 |         def save_xtb_opt_calculation(
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
142 |             polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
143 |         ):
    |
    = help: Add return type annotation: `None`

src\stk_search\utils\Precursor_calculation.py:142:59: N803 Argument name `InchiKey_initial` should be lowercase
    |
140 |     ):
141 |         def save_xtb_opt_calculation(
142 |             polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
    |                                                           ^^^^^^^^^^^^^^^^ N803
143 |         ):
144 |             def get_property_value(data, property_name):
    |

src\stk_search\utils\Precursor_calculation.py:144:17: ANN202 Missing return type annotation for private function `get_property_value`
    |
142 |             polymer, xtb_opt_output_dir, collection=None, InchiKey_initial=None
143 |         ):
144 |             def get_property_value(data, property_name):
    |                 ^^^^^^^^^^^^^^^^^^ ANN202
145 |                 for line in data:
146 |                     if property_name in line:
    |
    = help: Add return type annotation

src\stk_search\utils\Precursor_calculation.py:145:17: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
143 |           ):
144 |               def get_property_value(data, property_name):
145 |                   for line in data:
    |  _________________^
146 | |                     if property_name in line:
147 | |                         if property_name == "cpu-time":
148 | |                             property_value = (
149 | |                                 re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-3]
150 | |                                 + " h "
151 | |                                 + re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-2]
152 | |                                 + " min "
153 | |                                 + re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
154 | |                                 + " s "
155 | |                             )
156 | |                             return property_value
157 | |                         property_value = float(
158 | |                             re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
159 | |                         )  # float(words[3]) #
160 | |                         return property_value
    | |_____________________________________________^ RET503
161 |   
162 |               polymer_xtb_opt_calc = {
    |
    = help: Add explicit `return` statement

src\stk_search\utils\Precursor_calculation.py:156:36: RET504 Unnecessary assignment to `property_value` before `return` statement
    |
154 |                                 + " s "
155 |                             )
156 |                             return property_value
    |                                    ^^^^^^^^^^^^^^ RET504
157 |                         property_value = float(
158 |                             re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\Precursor_calculation.py:160:32: RET504 Unnecessary assignment to `property_value` before `return` statement
    |
158 |                             re.findall(r"[-+]?(?:\d*\.*\d+)", line)[-1]
159 |                         )  # float(words[3]) #
160 |                         return property_value
    |                                ^^^^^^^^^^^^^^ RET504
161 | 
162 |             polymer_xtb_opt_calc = {
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\Precursor_calculation.py:164:31: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
162 |             polymer_xtb_opt_calc = {
163 |                 "InChIKey": stk.InchiKey().get_key(polymer),
164 |                 "cal_folder": os.path.join(
    |                               ^^^^^^^^^^^^ PTH118
165 |                     xtb_opt_output_dir, stk.InchiKey().get_key(polymer)
166 |                 ),
    |

src\stk_search\utils\Precursor_calculation.py:170:23: SIM115 Use context handler for opening files
    |
168 |                 "InChIKey_initial": InchiKey_initial,
169 |             }
170 |             outfile = open(
    |                       ^^^^ SIM115
171 |                 os.path.join(
172 |                     polymer_xtb_opt_calc["cal_folder"], "optimization_1.output"
    |

src\stk_search\utils\Precursor_calculation.py:170:23: PTH123 `open()` should be replaced by `Path.open()`
    |
168 |                 "InChIKey_initial": InchiKey_initial,
169 |             }
170 |             outfile = open(
    |                       ^^^^ PTH123
171 |                 os.path.join(
172 |                     polymer_xtb_opt_calc["cal_folder"], "optimization_1.output"
    |

src\stk_search\utils\Precursor_calculation.py:171:17: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
169 |             }
170 |             outfile = open(
171 |                 os.path.join(
    |                 ^^^^^^^^^^^^ PTH118
172 |                     polymer_xtb_opt_calc["cal_folder"], "optimization_1.output"
173 |                 ),
    |

src\stk_search\utils\Precursor_calculation.py:198:13: ERA001 Found commented-out code
    |
196 |             is not None
197 |         ):
198 |             # print("already calculated", end="\r")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
199 | 
200 |             db_polymer = stk.MoleculeMongoDb(
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:205:13: ERA001 Found commented-out code
    |
203 |             )
204 |             polymer = db_polymer.get({"InChIKey": get_inchi_key(polymer)})
205 |             # print(get_inchi_key(polymer), ' opt geom already calculated')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
206 |             return polymer
207 |         if (
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:206:20: RET504 Unnecessary assignment to `polymer` before `return` statement
    |
204 |             polymer = db_polymer.get({"InChIKey": get_inchi_key(polymer)})
205 |             # print(get_inchi_key(polymer), ' opt geom already calculated')
206 |             return polymer
    |                    ^^^^^^^ RET504
207 |         if (
208 |             collection.find_one({"InChIKey_initial": get_inchi_key(polymer)})
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\Precursor_calculation.py:211:13: ERA001 Found commented-out code
    |
209 |             is not None
210 |         ):
211 |             # print("already calculated", end="\r")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
212 |             db_polymer = stk.MoleculeMongoDb(
213 |                 client,
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:219:13: ERA001 Found commented-out code
    |
217 |                 {"InChIKey_initial": get_inchi_key(polymer)}
218 |             )
219 |             # print(get_inchi_key(polymer), ' opt geom already calculated with old geom')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
220 | 
221 |             polymer = db_polymer.get({"InChIKey": data["InChIKey"]})
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:222:20: RET504 Unnecessary assignment to `polymer` before `return` statement
    |
221 |             polymer = db_polymer.get({"InChIKey": data["InChIKey"]})
222 |             return polymer
    |                    ^^^^^^^ RET504
223 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
224 |         InchiKey_initial = get_inchi_key(polymer)
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\Precursor_calculation.py:223:22: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
221 |             polymer = db_polymer.get({"InChIKey": data["InChIKey"]})
222 |             return polymer
223 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
    |                      ^^^^^^^^^^^^ PTH118
224 |         InchiKey_initial = get_inchi_key(polymer)
225 |         xtb = stko.OptimizerSequence(
    |

src\stk_search\utils\Precursor_calculation.py:224:9: N806 Variable `InchiKey_initial` in function should be lowercase
    |
222 |             return polymer
223 |         output_dir = os.path.join(xtb_opt_output_dir, get_inchi_key(polymer))
224 |         InchiKey_initial = get_inchi_key(polymer)
    |         ^^^^^^^^^^^^^^^^ N806
225 |         xtb = stko.OptimizerSequence(
226 |             stko.ETKDG(),
    |

src\stk_search\utils\Precursor_calculation.py:235:26: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
233 |         )
234 |         polymer = xtb.optimize(polymer)
235 |         new_output_dir = os.path.join(
    |                          ^^^^^^^^^^^^ PTH118
236 |             xtb_opt_output_dir, get_inchi_key(polymer)
237 |         )
    |

src\stk_search\utils\Precursor_calculation.py:238:13: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
236 |             xtb_opt_output_dir, get_inchi_key(polymer)
237 |         )
238 |         if ~os.path.exists(new_output_dir):
    |             ^^^^^^^^^^^^^^ PTH110
239 |             os.rename(output_dir, new_output_dir)
240 |         save_xtb_opt_calculation(
    |

src\stk_search\utils\Precursor_calculation.py:239:13: PTH104 `os.rename()` should be replaced by `Path.rename()`
    |
237 |         )
238 |         if ~os.path.exists(new_output_dir):
239 |             os.rename(output_dir, new_output_dir)
    |             ^^^^^^^^^ PTH104
240 |         save_xtb_opt_calculation(
241 |             polymer,
    |

src\stk_search\utils\Precursor_calculation.py:253:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
251 |         return polymer
252 | 
253 |     def run_xtb_ipea(
    |         ^^^^^^^^^^^^ PLR0913
254 |         self,
255 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:253:9: D102 Missing docstring in public method
    |
251 |         return polymer
252 | 
253 |     def run_xtb_ipea(
    |         ^^^^^^^^^^^^ D102
254 |         self,
255 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:264:9: N806 Variable `XTB_results` in function should be lowercase
    |
262 |     ):
263 |         collection = client[database][collection]
264 |         XTB_results = collection.find_one({"InChIKey": get_inchi_key(polymer)})
    |         ^^^^^^^^^^^ N806
265 |         if XTB_results is not None:
266 |             # print("already calculated", end="\r")
    |

src\stk_search\utils\Precursor_calculation.py:266:13: ERA001 Found commented-out code
    |
264 |         XTB_results = collection.find_one({"InChIKey": get_inchi_key(polymer)})
265 |         if XTB_results is not None:
266 |             # print("already calculated", end="\r")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
267 |             # print(get_inchi_key(polymer), ' ipea geom already calculated')
268 |             return XTB_results[target]
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:267:13: ERA001 Found commented-out code
    |
265 |         if XTB_results is not None:
266 |             # print("already calculated", end="\r")
267 |             # print(get_inchi_key(polymer), ' ipea geom already calculated')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
268 |             return XTB_results[target]
269 |         xtb = XTBEnergy2(
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:271:24: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
269 |         xtb = XTBEnergy2(
270 |             xtb_path=xtb_path,
271 |             output_dir=os.path.join(
    |                        ^^^^^^^^^^^^ PTH118
272 |                 xtb_opt_output_dir, get_inchi_key(polymer)
273 |             ),
    |

src\stk_search\utils\Precursor_calculation.py:279:9: N806 Variable `XTB_results` in function should be lowercase
    |
277 |         )
278 |         xtb_results = xtb.get_results(polymer)
279 |         XTB_results = {
    |         ^^^^^^^^^^^ N806
280 |             "total energy (au)": xtb_results.get_total_energy()[0],
281 |             "homo lumo_gap (eV)": xtb_results.get_homo_lumo_gap()[0],
    |

src\stk_search\utils\Precursor_calculation.py:287:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
285 |             ],
286 |             "InChIKey": get_inchi_key(polymer),
287 |             "cal_folder": os.path.join(
    |                           ^^^^^^^^^^^^ PTH118
288 |                 xtb_opt_output_dir, get_inchi_key(polymer)
289 |             ),
    |

src\stk_search\utils\Precursor_calculation.py:299:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
297 |         return XTB_results[target]
298 | 
299 |     def run_stda(
    |         ^^^^^^^^ PLR0913
300 |         self,
301 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:299:9: D102 Missing docstring in public method
    |
297 |         return XTB_results[target]
298 | 
299 |     def run_stda(
    |         ^^^^^^^^ D102
300 |         self,
301 |         polymer,
    |

src\stk_search\utils\Precursor_calculation.py:302:9: N803 Argument name `STDA_bin_path` should be lowercase
    |
300 |         self,
301 |         polymer,
302 |         STDA_bin_path,
    |         ^^^^^^^^^^^^^ N803
303 |         output_dir,
304 |         property="Excited state energy (eV)",
    |

src\stk_search\utils\Precursor_calculation.py:304:9: A002 Argument `property` is shadowing a Python builtin
    |
302 |         STDA_bin_path,
303 |         output_dir,
304 |         property="Excited state energy (eV)",
    |         ^^^^^^^^ A002
305 |         state=1,
306 |         database="stk_mohammed",
    |

src\stk_search\utils\Precursor_calculation.py:311:9: N806 Variable `STDA_results` in function should be lowercase
    |
309 |     ):
310 |         collection = client[database][collection]
311 |         STDA_results = collection.find_one(
    |         ^^^^^^^^^^^^ N806
312 |             {"InChIKey": get_inchi_key(polymer)}
313 |         )
    |

src\stk_search\utils\Precursor_calculation.py:315:13: ERA001 Found commented-out code
    |
313 |         )
314 |         if STDA_results is not None:
315 |             # print(get_inchi_key(polymer), ' stda geom already calculated')
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
316 |             # print(STDA_results[property][state])
317 |             return STDA_results[property][state]
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:316:13: ERA001 Found commented-out code
    |
314 |         if STDA_results is not None:
315 |             # print(get_inchi_key(polymer), ' stda geom already calculated')
316 |             # print(STDA_results[property][state])
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
317 |             return STDA_results[property][state]
318 |         stda = sTDA_XTB(
    |
    = help: Remove commented-out code

src\stk_search\utils\Precursor_calculation.py:321:24: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
319 |             STDA_bin_path=STDA_bin_path,
320 |             Num_threads=25,
321 |             output_dir=os.path.join(output_dir, get_inchi_key(polymer)),
    |                        ^^^^^^^^^^^^ PTH118
322 |         )
323 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
    |

src\stk_search\utils\Precursor_calculation.py:323:9: N806 Variable `Excited_state_energy` in function should be lowercase
    |
321 |             output_dir=os.path.join(output_dir, get_inchi_key(polymer)),
322 |         )
323 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
    |         ^^^^^^^^^^^^^^^^^^^^ N806
324 |         STDA_results = {
325 |             "Excited state energy (eV)": Excited_state_energy,
    |

src\stk_search\utils\Precursor_calculation.py:323:31: N806 Variable `Excited_state_osc` in function should be lowercase
    |
321 |             output_dir=os.path.join(output_dir, get_inchi_key(polymer)),
322 |         )
323 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
    |                               ^^^^^^^^^^^^^^^^^ N806
324 |         STDA_results = {
325 |             "Excited state energy (eV)": Excited_state_energy,
    |

src\stk_search\utils\Precursor_calculation.py:324:9: N806 Variable `STDA_results` in function should be lowercase
    |
322 |         )
323 |         Excited_state_energy, Excited_state_osc = stda.get_results(polymer)
324 |         STDA_results = {
    |         ^^^^^^^^^^^^ N806
325 |             "Excited state energy (eV)": Excited_state_energy,
326 |             "Excited state oscillator strength": Excited_state_osc,
    |

src\stk_search\utils\Precursor_calculation.py:328:27: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
326 |             "Excited state oscillator strength": Excited_state_osc,
327 |             "InChIKey": get_inchi_key(polymer),
328 |             "cal_folder": os.path.join(output_dir, get_inchi_key(polymer)),
    |                           ^^^^^^^^^^^^ PTH118
329 |             "Host IP": self.host_IP,
330 |         }
    |

src\stk_search\utils\Search_results_plot.py:1:1: INP001 File `src\stk_search\utils\Search_results_plot.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\Search_results_plot.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\Search_results_plot.py:11:1: ERA001 Found commented-out code
   |
10 | #plt.matplotlib.style.use(
11 | #    "https://gist.githubusercontent.com/JonnyCBB/c464d302fefce4722fe6cf5f461114ea/raw/64a78942d3f7b4b5054902f2cee84213eaff872f/matplotlibrc"
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
12 | #)
13 | cool_colors = [
   |
   = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:12:1: ERA001 Found commented-out code
   |
10 | #plt.matplotlib.style.use(
11 | #    "https://gist.githubusercontent.com/JonnyCBB/c464d302fefce4722fe6cf5f461114ea/raw/64a78942d3f7b4b5054902f2cee84213eaff872f/matplotlibrc"
12 | #)
   | ^^ ERA001
13 | cool_colors = [
14 |     "#00BEFF",
   |
   = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:38:5: D103 Missing docstring in public function
   |
38 | def moving_average(x, w):
   |     ^^^^^^^^^^^^^^ D103
39 |     return np.convolve(x, np.ones(w), "same") / w
   |

src\stk_search\utils\Search_results_plot.py:42:5: PLR0913 Too many arguments in function definition (8 > 5)
   |
42 | def plot_simple_regret(
   |     ^^^^^^^^^^^^^^^^^^ PLR0913
43 |     res,
44 |     nb_iterations=100,
   |

src\stk_search\utils\Search_results_plot.py:42:5: D417 Missing argument descriptions in the docstring for `plot_simple_regret`: `df_total`, `label`, `nb_initialisation`, `target_name`
   |
42 | def plot_simple_regret(
   |     ^^^^^^^^^^^^^^^^^^ D417
43 |     res,
44 |     nb_iterations=100,
   |

src\stk_search\utils\Search_results_plot.py:49:14: B006 Do not use mutable data structures for argument defaults
   |
47 |     label="BO",
48 |     target_name="target",
49 |     df_total=[],
   |              ^^ B006
50 |     nb_initialisation=0,
51 | ):
   |
   = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:52:5: D400 First line should end with a period
   |
50 |       nb_initialisation=0,
51 |   ):
52 |       """Plot the maximum value acquired up to this point
   |  _____^
53 | | 
54 | |     Args:
55 | |     ----
56 | |         res (list): The results of the search
57 | |         nb_iterations (int): The number of iterations
58 | |         axs (matplotlib.pyplot): The axis to plot
59 | |         color (str): The color of the plot
60 | | 
61 | |     """
   | |_______^ D400
62 |       target_value = np.max(df_total[target_name].values)
63 |       nb_iterations_range = np.arange(nb_iterations) + 1
   |
   = help: Add period

src\stk_search\utils\Search_results_plot.py:52:5: D415 First line should end with a period, question mark, or exclamation point
   |
50 |       nb_initialisation=0,
51 |   ):
52 |       """Plot the maximum value acquired up to this point
   |  _____^
53 | | 
54 | |     Args:
55 | |     ----
56 | |         res (list): The results of the search
57 | |         nb_iterations (int): The number of iterations
58 | |         axs (matplotlib.pyplot): The axis to plot
59 | |         color (str): The color of the plot
60 | | 
61 | |     """
   | |_______^ D415
62 |       target_value = np.max(df_total[target_name].values)
63 |       nb_iterations_range = np.arange(nb_iterations) + 1
   |
   = help: Add closing punctuation

src\stk_search\utils\Search_results_plot.py:80:9: S101 Use of `assert` detected
   |
78 |         ]
79 |         y_maxes = np.array(y_maxes)
80 |         assert np.size(y_maxes) == nb_runs
   |         ^^^^^^ S101
81 |         y_max_mu[i - 1] = np.mean(y_maxes)
82 |         y_max_sig_bot[i - 1] = np.std(y_maxes[y_maxes < y_max_mu[i - 1]])
   |

src\stk_search\utils\Search_results_plot.py:98:5: N802 Function name `plot_target_MFBO` should be lowercase
    |
 96 |     return max(y_max_mu)
 97 | 
 98 | def plot_target_MFBO(
    |     ^^^^^^^^^^^^^^^^ N802
 99 |     res,
100 |     axs=None,
    |

src\stk_search\utils\Search_results_plot.py:98:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
 96 |     return max(y_max_mu)
 97 | 
 98 | def plot_target_MFBO(
    |     ^^^^^^^^^^^^^^^^ PLR0913
 99 |     res,
100 |     axs=None,
    |

src\stk_search\utils\Search_results_plot.py:98:5: D103 Missing docstring in public function
    |
 96 |     return max(y_max_mu)
 97 | 
 98 | def plot_target_MFBO(
    |     ^^^^^^^^^^^^^^^^ D103
 99 |     res,
100 |     axs=None,
    |

src\stk_search\utils\Search_results_plot.py:102:5: ARG001 Unused function argument: `target_name`
    |
100 |     axs=None,
101 |     title="",
102 |     target_name="target",
    |     ^^^^^^^^^^^ ARG001
103 |     df_total=None,
104 |     colours=["blue","red","green","yellow"]
    |

src\stk_search\utils\Search_results_plot.py:104:13: B006 Do not use mutable data structures for argument defaults
    |
102 |     target_name="target",
103 |     df_total=None,
104 |     colours=["blue","red","green","yellow"]
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B006
105 | ):
106 |     nb_iterations = len(res[0]["fitness_acquired"]) - 1
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:117:21: PD008 Use `.loc` instead of `.at`. If speed is important, use NumPy.
    |
115 |             fidelity_iteration=[]
116 |             for i in range(nb_iterations):
117 |                 if (df_sample.at[i, "fidelity"] == fidelity):
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD008
118 |                     fidelity_target.append(fitness_list[i])
119 |                     fidelity_iteration.append(i)
    |

src\stk_search\utils\Search_results_plot.py:135:5: PLR0913 Too many arguments in function definition (8 > 5)
    |
133 |     return max(fitness_list)
134 | 
135 | def plot_inst_regret(
    |     ^^^^^^^^^^^^^^^^ PLR0913
136 |     res,
137 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:135:5: D417 Missing argument descriptions in the docstring for `plot_inst_regret`: `df_total`, `label`, `nb_initialisation`, `target_name`
    |
133 |     return max(fitness_list)
134 | 
135 | def plot_inst_regret(
    |     ^^^^^^^^^^^^^^^^ D417
136 |     res,
137 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:142:14: B006 Do not use mutable data structures for argument defaults
    |
140 |     label="BO",
141 |     target_name="target",
142 |     df_total=[],
    |              ^^ B006
143 |     nb_initialisation=0,
144 | ):
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:143:5: ARG001 Unused function argument: `nb_initialisation`
    |
141 |     target_name="target",
142 |     df_total=[],
143 |     nb_initialisation=0,
    |     ^^^^^^^^^^^^^^^^^ ARG001
144 | ):
145 |     """Plot the maximum value acquired up to this point
    |

src\stk_search\utils\Search_results_plot.py:145:5: D400 First line should end with a period
    |
143 |       nb_initialisation=0,
144 |   ):
145 |       """Plot the maximum value acquired up to this point
    |  _____^
146 | | 
147 | |     Args:
148 | |     ----
149 | |         res (list): The results of the search
150 | |         nb_iterations (int): The number of iterations
151 | |         axs (matplotlib.pyplot): The axis to plot
152 | |         color (str): The color of the plot
153 | | 
154 | |     """
    | |_______^ D400
155 |       target_value = np.max(df_total[target_name].values)
156 |       nb_iterations_range = np.arange(nb_iterations) + 1
    |
    = help: Add period

src\stk_search\utils\Search_results_plot.py:145:5: D415 First line should end with a period, question mark, or exclamation point
    |
143 |       nb_initialisation=0,
144 |   ):
145 |       """Plot the maximum value acquired up to this point
    |  _____^
146 | | 
147 | |     Args:
148 | |     ----
149 | |         res (list): The results of the search
150 | |         nb_iterations (int): The number of iterations
151 | |         axs (matplotlib.pyplot): The axis to plot
152 | |         color (str): The color of the plot
153 | | 
154 | |     """
    | |_______^ D415
155 |       target_value = np.max(df_total[target_name].values)
156 |       nb_iterations_range = np.arange(nb_iterations) + 1
    |
    = help: Add closing punctuation

src\stk_search\utils\Search_results_plot.py:168:9: ERA001 Found commented-out code
    |
166 |         ]
167 |         y_maxes = np.array(y_maxes)
168 |         #assert np.size(y_maxes) == nb_runs
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
169 |         y_max_mu[i - 1] = np.mean(y_maxes)
170 |         y_max_sig_bot[i - 1] = np.std(y_maxes)
    |
    = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:187:5: PLR0913 Too many arguments in function definition (8 > 5)
    |
187 | def plot_cumulative_regret(
    |     ^^^^^^^^^^^^^^^^^^^^^^ PLR0913
188 |     res,
189 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:187:5: D417 Missing argument descriptions in the docstring for `plot_cumulative_regret`: `df_total`, `label`, `nb_initialisation`, `target_name`
    |
187 | def plot_cumulative_regret(
    |     ^^^^^^^^^^^^^^^^^^^^^^ D417
188 |     res,
189 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:194:14: B006 Do not use mutable data structures for argument defaults
    |
192 |     label="BO",
193 |     target_name="target",
194 |     df_total=[],
    |              ^^ B006
195 |     nb_initialisation=0,
196 | ):
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:197:5: D400 First line should end with a period
    |
195 |       nb_initialisation=0,
196 |   ):
197 |       """Plot the maximum value acquired up to this point
    |  _____^
198 | | 
199 | |     Args:
200 | |     ----
201 | |         res (list): The results of the search
202 | |         nb_iterations (int): The number of iterations
203 | |         axs (matplotlib.pyplot): The axis to plot
204 | |         color (str): The color of the plot
205 | | 
206 | |     """
    | |_______^ D400
207 |       target_value = np.max(df_total[target_name].values)
208 |       nb_iterations_range = np.arange(nb_iterations) + 1
    |
    = help: Add period

src\stk_search\utils\Search_results_plot.py:197:5: D415 First line should end with a period, question mark, or exclamation point
    |
195 |       nb_initialisation=0,
196 |   ):
197 |       """Plot the maximum value acquired up to this point
    |  _____^
198 | | 
199 | |     Args:
200 | |     ----
201 | |         res (list): The results of the search
202 | |         nb_iterations (int): The number of iterations
203 | |         axs (matplotlib.pyplot): The axis to plot
204 | |         color (str): The color of the plot
205 | | 
206 | |     """
    | |_______^ D415
207 |       target_value = np.max(df_total[target_name].values)
208 |       nb_iterations_range = np.arange(nb_iterations) + 1
    |
    = help: Add closing punctuation

src\stk_search\utils\Search_results_plot.py:226:9: S101 Use of `assert` detected
    |
225 |         y_maxes = -np.array(y_maxes)
226 |         assert np.size(y_maxes) == nb_runs
    |         ^^^^^^ S101
227 |         y_max_mu[i - 1] = np.mean(y_maxes)
228 |         y_max_sig_bot[i - 1] = np.std(y_maxes[y_maxes < y_max_mu[i - 1]])
    |

src\stk_search\utils\Search_results_plot.py:244:5: PLR0913 Too many arguments in function definition (8 > 5)
    |
244 | def plot_y_max(
    |     ^^^^^^^^^^ PLR0913
245 |     res,
246 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:244:5: D417 Missing argument descriptions in the docstring for `plot_y_max`: `df_total`, `label`, `nb_initialisation`, `target_name`
    |
244 | def plot_y_max(
    |     ^^^^^^^^^^ D417
245 |     res,
246 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:251:14: B006 Do not use mutable data structures for argument defaults
    |
249 |     label="BO",
250 |     target_name="target",
251 |     df_total=[],
    |              ^^ B006
252 |     nb_initialisation=0,
253 | ):
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:254:5: D400 First line should end with a period
    |
252 |       nb_initialisation=0,
253 |   ):
254 |       """Plot the maximum value acquired up to this point
    |  _____^
255 | | 
256 | |     Args:
257 | |     ----
258 | |         res (list): The results of the search
259 | |         nb_iterations (int): The number of iterations
260 | |         axs (matplotlib.pyplot): The axis to plot
261 | |         color (str): The color of the plot
262 | | 
263 | |     """
    | |_______^ D400
264 |       nb_iterations_range = np.arange(nb_iterations) + 1
265 |       y_max_mu = -10 * np.ones(nb_iterations)
    |
    = help: Add period

src\stk_search\utils\Search_results_plot.py:254:5: D415 First line should end with a period, question mark, or exclamation point
    |
252 |       nb_initialisation=0,
253 |   ):
254 |       """Plot the maximum value acquired up to this point
    |  _____^
255 | | 
256 | |     Args:
257 | |     ----
258 | |         res (list): The results of the search
259 | |         nb_iterations (int): The number of iterations
260 | |         axs (matplotlib.pyplot): The axis to plot
261 | |         color (str): The color of the plot
262 | | 
263 | |     """
    | |_______^ D415
264 |       nb_iterations_range = np.arange(nb_iterations) + 1
265 |       y_max_mu = -10 * np.ones(nb_iterations)
    |
    = help: Add closing punctuation

src\stk_search\utils\Search_results_plot.py:282:9: S101 Use of `assert` detected
    |
280 |             ]
281 |         )  # among runs
282 |         assert np.size(y_maxes) == nb_runs
    |         ^^^^^^ S101
283 |         y_max_mu[i - 1] = np.mean(y_maxes)
284 |         y_max_sig_bot[i - 1] = np.std(y_maxes[y_maxes < y_max_mu[i - 1]])
    |

src\stk_search\utils\Search_results_plot.py:308:5: PLR0913 Too many arguments in function definition (8 > 5)
    |
308 | def plot_all_y_max(
    |     ^^^^^^^^^^^^^^ PLR0913
309 |     res,
310 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:308:5: D103 Missing docstring in public function
    |
308 | def plot_all_y_max(
    |     ^^^^^^^^^^^^^^ D103
309 |     res,
310 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:315:14: B006 Do not use mutable data structures for argument defaults
    |
313 |     label="BO",
314 |     target_name="target",
315 |     df_total=[],
    |              ^^ B006
316 |     nb_initialisation=0,
317 | ):
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:370:5: PLR0913 Too many arguments in function definition (8 > 5)
    |
370 | def plot_all_y_max_diff(
    |     ^^^^^^^^^^^^^^^^^^^ PLR0913
371 |     res,
372 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:370:5: D103 Missing docstring in public function
    |
370 | def plot_all_y_max_diff(
    |     ^^^^^^^^^^^^^^^^^^^ D103
371 |     res,
372 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:377:5: ARG001 Unused function argument: `target_name`
    |
375 |     label="BO",
376 |     nb_initialisation=0,
377 |     target_name="target",
    |     ^^^^^^^^^^^ ARG001
378 |     df_total=[],
379 | ):
    |

src\stk_search\utils\Search_results_plot.py:378:5: ARG001 Unused function argument: `df_total`
    |
376 |     nb_initialisation=0,
377 |     target_name="target",
378 |     df_total=[],
    |     ^^^^^^^^ ARG001
379 | ):
380 |     nb_iterations_range = np.arange(nb_iterations) + 1
    |

src\stk_search\utils\Search_results_plot.py:378:14: B006 Do not use mutable data structures for argument defaults
    |
376 |     nb_initialisation=0,
377 |     target_name="target",
378 |     df_total=[],
    |              ^^ B006
379 | ):
380 |     nb_iterations_range = np.arange(nb_iterations) + 1
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:425:5: PLR0913 Too many arguments in function definition (8 > 5)
    |
425 | def plot_y_mean(
    |     ^^^^^^^^^^^ PLR0913
426 |     res,
427 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:425:5: D103 Missing docstring in public function
    |
425 | def plot_y_mean(
    |     ^^^^^^^^^^^ D103
426 |     res,
427 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:432:14: B006 Do not use mutable data structures for argument defaults
    |
430 |     label="BO",
431 |     target_name="target",
432 |     df_total=[],
    |              ^^ B006
433 |     nb_initialisation=0,
434 | ):
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:437:5: N806 Variable `y_mean_mu_BO` in function should be lowercase
    |
436 |     nb_iterations_range = np.arange(nb_iterations) + 1
437 |     y_mean_mu_BO = -10 * np.ones(nb_iterations)
    |     ^^^^^^^^^^^^ N806
438 |     nb_runs = len(res)
439 |     for i in range(1, nb_iterations + 1):
    |

src\stk_search\utils\Search_results_plot.py:467:5: PLR0913 Too many arguments in function definition (9 > 5)
    |
467 | def plot_number_of_molecule_discovered(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
468 |     res,
469 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:467:5: D103 Missing docstring in public function
    |
467 | def plot_number_of_molecule_discovered(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
468 |     res,
469 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:470:5: N803 Argument name `topKmol` should be lowercase
    |
468 |     res,
469 |     nb_iterations=100,
470 |     topKmol=1000,
    |     ^^^^^^^ N803
471 |     axs=None,
472 |     color=search_to_color["BO"],
    |

src\stk_search\utils\Search_results_plot.py:474:14: B006 Do not use mutable data structures for argument defaults
    |
472 |     color=search_to_color["BO"],
473 |     label="BO",
474 |     df_total=[],
    |              ^^ B006
475 |     nb_initialisation=0,
476 |     target_name="target",
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:478:5: N806 Variable `topKmol` in function should be lowercase
    |
476 |     target_name="target",
477 | ):
478 |     topKmol = int(df_total.shape[0]*0.01)
    |     ^^^^^^^ N806
479 |     min_target = -np.sort(-df_total[target_name].values)[topKmol]
480 |     nb_iterations_range = np.arange(nb_iterations) + 1
    |

src\stk_search\utils\Search_results_plot.py:479:28: PD011 Use `.to_numpy()` instead of `.values`
    |
477 | ):
478 |     topKmol = int(df_total.shape[0]*0.01)
479 |     min_target = -np.sort(-df_total[target_name].values)[topKmol]
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
480 |     nb_iterations_range = np.arange(nb_iterations) + 1
481 |     y_elm = -10 * np.ones(nb_iterations)
    |

src\stk_search\utils\Search_results_plot.py:521:5: PLR0913 Too many arguments in function definition (11 > 5)
    |
521 | def plot_number_of_molecule_discovered_sum(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
522 |     res,
523 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:521:5: D103 Missing docstring in public function
    |
521 | def plot_number_of_molecule_discovered_sum(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
522 |     res,
523 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:524:5: N803 Argument name `topKmol` should be lowercase
    |
522 |     res,
523 |     nb_iterations=100,
524 |     topKmol=1000,
    |     ^^^^^^^ N803
525 |     axs=None,
526 |     color=search_to_color["BO"],
    |

src\stk_search\utils\Search_results_plot.py:528:14: B006 Do not use mutable data structures for argument defaults
    |
526 |     color=search_to_color["BO"],
527 |     label="BO",
528 |     df_total=[],
    |              ^^ B006
529 |     nb_initialisation=0,
530 |     target_name="target",
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:535:32: PD011 Use `.to_numpy()` instead of `.values`
    |
533 | ):
534 |     if topKmol is not None:
535 |         min_target = -np.sort(-df_total[target_name].values)[topKmol]
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
536 |     df_results = pd.concat(
537 |         list(
    |

src\stk_search\utils\Search_results_plot.py:547:53: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
546 |     df_results["InChIKey"] = df_results["InchiKey_acquired"]
547 |     df_results.drop_duplicates(subset=["InChIKey"], inplace=True)
    |                                                     ^^^^^^^^^^^^ PD002
548 |     df_max = df_total[df_total[target_name] > min_target].copy()
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\Search_results_plot.py:566:5: PLR0913 Too many arguments in function definition (11 > 5)
    |
564 |     return max(max_mol_found)
565 | 
566 | def plot_simple_regret_batch(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
567 |     res,
568 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:566:5: D103 Missing docstring in public function
    |
564 |     return max(max_mol_found)
565 | 
566 | def plot_simple_regret_batch(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ D103
567 |     res,
568 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:569:5: N803 Argument name `topKmol` should be lowercase
    |
567 |     res,
568 |     nb_iterations=100,
569 |     topKmol=1000,
    |     ^^^^^^^ N803
570 |     axs=None,
571 |     color=search_to_color["BO"],
    |

src\stk_search\utils\Search_results_plot.py:573:14: B006 Do not use mutable data structures for argument defaults
    |
571 |     color=search_to_color["BO"],
572 |     label="BO",
573 |     df_total=[],
    |              ^^ B006
574 |     nb_initialisation=0,
575 |     target_name="target",
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:580:32: PD011 Use `.to_numpy()` instead of `.values`
    |
578 | ):
579 |     if topKmol is not None:
580 |         min_target = -np.sort(-df_total[target_name].values)[topKmol]
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
581 |     df_results = pd.concat(
582 |         list(
    |

src\stk_search\utils\Search_results_plot.py:592:53: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
591 |     df_results["InChIKey"] = df_results["InchiKey_acquired"]
592 |     df_results.drop_duplicates(subset=["InChIKey"], inplace=True)
    |                                                     ^^^^^^^^^^^^ PD002
593 |     df_max = df_total[df_total[target_name] > min_target].copy()
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\Search_results_plot.py:608:5: PLR0913 Too many arguments in function definition (11 > 5)
    |
608 | def plot_total_rate_of_discovery(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
609 |     res,
610 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:608:5: D103 Missing docstring in public function
    |
608 | def plot_total_rate_of_discovery(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
609 |     res,
610 |     nb_iterations=100,
    |

src\stk_search\utils\Search_results_plot.py:611:5: N803 Argument name `topKmol` should be lowercase
    |
609 |     res,
610 |     nb_iterations=100,
611 |     topKmol=1000,
    |     ^^^^^^^ N803
612 |     axs=None,
613 |     color=search_to_color["BO"],
    |

src\stk_search\utils\Search_results_plot.py:615:14: B006 Do not use mutable data structures for argument defaults
    |
613 |     color=search_to_color["BO"],
614 |     label="BO",
615 |     df_total=[],
    |              ^^ B006
616 |     nb_initialisation=0,
617 |     target_name="target",
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:622:32: PD011 Use `.to_numpy()` instead of `.values`
    |
620 | ):
621 |     if topKmol is not None:
622 |         min_target = -np.sort(-df_total[target_name].values)[topKmol]
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
623 |     print( "min_target is ", min_target)
624 |     df_results = pd.concat(
    |

src\stk_search\utils\Search_results_plot.py:623:5: T201 `print` found
    |
621 |     if topKmol is not None:
622 |         min_target = -np.sort(-df_total[target_name].values)[topKmol]
623 |     print( "min_target is ", min_target)
    |     ^^^^^ T201
624 |     df_results = pd.concat(
625 |         list(
    |
    = help: Remove `print`

src\stk_search\utils\Search_results_plot.py:634:53: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
632 |     )
633 |     df_results["InChIKey"] = df_results["InchiKey_acquired"]
634 |     df_results.drop_duplicates(subset=["InChIKey"], inplace=True)
    |                                                     ^^^^^^^^^^^^ PD002
635 |     df_max = df_total[df_total[target_name] > min_target].copy()
636 |     df_max_found = df_max.merge(df_results, on="InChIKey", how="inner")
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\Search_results_plot.py:658:5: PLR0913 Too many arguments in function definition (11 > 5)
    |
658 | def plot_rate_of_discovery(
    |     ^^^^^^^^^^^^^^^^^^^^^^ PLR0913
659 |     res,
660 |     nb_iterations=350,
    |

src\stk_search\utils\Search_results_plot.py:658:5: D103 Missing docstring in public function
    |
658 | def plot_rate_of_discovery(
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
659 |     res,
660 |     nb_iterations=350,
    |

src\stk_search\utils\Search_results_plot.py:661:5: N803 Argument name `topKmol` should be lowercase
    |
659 |     res,
660 |     nb_iterations=350,
661 |     topKmol=1000,
    |     ^^^^^^^ N803
662 |     axs=None,
663 |     color="C0",
    |

src\stk_search\utils\Search_results_plot.py:665:14: B006 Do not use mutable data structures for argument defaults
    |
663 |     color="C0",
664 |     label="BO",
665 |     df_total=[],
    |              ^^ B006
666 |     target_name="target",
667 |     min_target=0,
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\Search_results_plot.py:671:5: N806 Variable `topKmol` in function should be lowercase
    |
669 |     prop=1,
670 | ):
671 |     topKmol = int(df_total.shape[0]*0.01)
    |     ^^^^^^^ N806
672 |     if topKmol is not None:
673 |         min_target = -np.sort(-df_total[target_name].values)[topKmol]
    |

src\stk_search\utils\Search_results_plot.py:673:32: PD011 Use `.to_numpy()` instead of `.values`
    |
671 |     topKmol = int(df_total.shape[0]*0.01)
672 |     if topKmol is not None:
673 |         min_target = -np.sort(-df_total[target_name].values)[topKmol]
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
674 |     y_results = np.zeros((nb_iterations + nb_initialisation, len(res)))
675 |     top_mol_inchikey_list = df_total[df_total[target_name] > min_target][
    |

src\stk_search\utils\Search_results_plot.py:675:29: PD011 Use `.to_numpy()` instead of `.values`
    |
673 |           min_target = -np.sort(-df_total[target_name].values)[topKmol]
674 |       y_results = np.zeros((nb_iterations + nb_initialisation, len(res)))
675 |       top_mol_inchikey_list = df_total[df_total[target_name] > min_target][
    |  _____________________________^
676 | |         "InChIKey"
677 | |     ].values
    | |____________^ PD011
678 |       nb_iterations_range = np.arange(0, nb_iterations)
679 |       for ii, results in enumerate(res):
    |

src\stk_search\utils\Search_results_plot.py:693:5: ERA001 Found commented-out code
    |
691 |     y_elm = np.mean(y_results, axis=1)
692 |     # get bottom  variance of data
693 |     #y_elm_sig_bot = np.std(y_results[y_results < y_elm], axis=1)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
694 |     #y_elm_sig_top = np.std(y_results[y_results > y_elm], axis=1)
695 |     y_elm_sig_bot = np.array([np.std(row[row < y_elm[i]]) for i, row in enumerate(y_results)])
    |
    = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:694:5: ERA001 Found commented-out code
    |
692 |     # get bottom  variance of data
693 |     #y_elm_sig_bot = np.std(y_results[y_results < y_elm], axis=1)
694 |     #y_elm_sig_top = np.std(y_results[y_results > y_elm], axis=1)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
695 |     y_elm_sig_bot = np.array([np.std(row[row < y_elm[i]]) for i, row in enumerate(y_results)])
696 |     y_elm_sig_top = np.array([np.std(row[row > y_elm[i]]) for i, row in enumerate(y_results)])
    |
    = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:713:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
713 | def plot_hist_mol_found(
    |     ^^^^^^^^^^^^^^^^^^^ PLR0913
714 |     search_results,
715 |     target_name,
    |

src\stk_search\utils\Search_results_plot.py:713:5: D103 Missing docstring in public function
    |
713 | def plot_hist_mol_found(
    |     ^^^^^^^^^^^^^^^^^^^ D103
714 |     search_results,
715 |     target_name,
    |

src\stk_search\utils\Search_results_plot.py:721:5: N806 Variable `INchikeys_found` in function should be lowercase
    |
719 |     color=search_to_color["BO"],
720 | ):
721 |     INchikeys_found = []
    |     ^^^^^^^^^^^^^^^ N806
722 |     for search_result in search_results:
723 |         INchikeys_found.append(
    |

src\stk_search\utils\Search_results_plot.py:723:9: PERF401 Use a list comprehension to create a transformed list
    |
721 |       INchikeys_found = []
722 |       for search_result in search_results:
723 |           INchikeys_found.append(
    |  _________^
724 | |             search_result["InchiKey_acquired"][num_elem_initialisation:]
725 | |         )
    | |_________^ PERF401
726 |       INchikeys_found = np.concatenate(INchikeys_found)
727 |       df_total_found = df_total[df_total["InChIKey"].isin(INchikeys_found)]
    |

src\stk_search\utils\Search_results_plot.py:726:5: N806 Variable `INchikeys_found` in function should be lowercase
    |
724 |             search_result["InchiKey_acquired"][num_elem_initialisation:]
725 |         )
726 |     INchikeys_found = np.concatenate(INchikeys_found)
    |     ^^^^^^^^^^^^^^^ N806
727 |     df_total_found = df_total[df_total["InChIKey"].isin(INchikeys_found)]
728 |     print("mol_found", df_total_found.shape[0])
    |

src\stk_search\utils\Search_results_plot.py:728:5: T201 `print` found
    |
726 |     INchikeys_found = np.concatenate(INchikeys_found)
727 |     df_total_found = df_total[df_total["InChIKey"].isin(INchikeys_found)]
728 |     print("mol_found", df_total_found.shape[0])
    |     ^^^^^ T201
729 |     df_total_found[target_name].hist(
730 |         ax=axs,
    |
    = help: Remove `print`

src\stk_search\utils\Search_results_plot.py:738:5: ERA001 Found commented-out code
    |
736 |     )
737 |     axs.set_ylim([df_total[target_name].min(), df_total[target_name].max()])
738 |     # axs.set_xscale('log')
    |     ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
739 |     # axs.set_xlim([0.9,1e4])
    |
    = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:739:5: ERA001 Found commented-out code
    |
737 |     axs.set_ylim([df_total[target_name].min(), df_total[target_name].max()])
738 |     # axs.set_xscale('log')
739 |     # axs.set_xlim([0.9,1e4])
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:742:5: PLR0913 Too many arguments in function definition (11 > 5)
    |
742 | def plot_exploration_evolution(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
743 |     BOresults,
744 |     df_total_org,
    |

src\stk_search\utils\Search_results_plot.py:742:5: D103 Missing docstring in public function
    |
742 | def plot_exploration_evolution(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
743 |     BOresults,
744 |     df_total_org,
    |

src\stk_search\utils\Search_results_plot.py:743:5: N803 Argument name `BOresults` should be lowercase
    |
742 | def plot_exploration_evolution(
743 |     BOresults,
    |     ^^^^^^^^^ N803
744 |     df_total_org,
745 |     nb_initialisation,
    |

src\stk_search\utils\Search_results_plot.py:745:5: ARG001 Unused function argument: `nb_initialisation`
    |
743 |     BOresults,
744 |     df_total_org,
745 |     nb_initialisation,
    |     ^^^^^^^^^^^^^^^^^ ARG001
746 |     nb_iteration=100,
747 |     axs=None,
    |

src\stk_search\utils\Search_results_plot.py:753:5: N803 Argument name `topKmol` should be lowercase
    |
751 |     target_name="target",
752 |     aim=5.5,
753 |     topKmol=1000,
    |     ^^^^^^^ N803
754 | ):
    |

src\stk_search\utils\Search_results_plot.py:760:44: PD011 Use `.to_numpy()` instead of `.values`
    |
758 |         lambda x: -np.sqrt((x - aim) ** 2)
759 |     )
760 |     min_target_out_of_database = -np.sort(-df_total[target_name].values)[
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
761 |         topKmol
762 |     ]
    |

src\stk_search\utils\Search_results_plot.py:763:43: F821 Undefined name `plot_element_above_min`
    |
761 |         topKmol
762 |     ]
763 |     y_elm, y_elm_sig_bot, y_elm_sig_top = plot_element_above_min(
    |                                           ^^^^^^^^^^^^^^^^^^^^^^ F821
764 |         BOresults,
765 |         min_target_out_of_database,
    |

src\stk_search\utils\Search_results_plot.py:774:5: N806 Variable `y_mean_mu_BO` in function should be lowercase
    |
772 |         nb_initialisation=0,
773 |     )
774 |     y_mean_mu_BO = plot_y_mean(
    |     ^^^^^^^^^^^^ N806
775 |         BOresults,
776 |         nb_iterations=nb_iteration,
    |

src\stk_search\utils\Search_results_plot.py:774:5: F841 Local variable `y_mean_mu_BO` is assigned to but never used
    |
772 |         nb_initialisation=0,
773 |     )
774 |     y_mean_mu_BO = plot_y_mean(
    |     ^^^^^^^^^^^^ F841
775 |         BOresults,
776 |         nb_iterations=nb_iteration,
    |
    = help: Remove assignment to unused variable `y_mean_mu_BO`

src\stk_search\utils\Search_results_plot.py:784:5: N806 Variable `y_max_mu_BO` in function should be lowercase
    |
782 |         nb_initialisation=0,
783 |     )
784 |     y_max_mu_BO, y_max_sig_bot_BO, y_max_sig_top_BO = plot_y_max(
    |     ^^^^^^^^^^^ N806
785 |         BOresults,
786 |         nb_iterations=nb_iteration,
    |

src\stk_search\utils\Search_results_plot.py:784:18: N806 Variable `y_max_sig_bot_BO` in function should be lowercase
    |
782 |         nb_initialisation=0,
783 |     )
784 |     y_max_mu_BO, y_max_sig_bot_BO, y_max_sig_top_BO = plot_y_max(
    |                  ^^^^^^^^^^^^^^^^ N806
785 |         BOresults,
786 |         nb_iterations=nb_iteration,
    |

src\stk_search\utils\Search_results_plot.py:784:36: N806 Variable `y_max_sig_top_BO` in function should be lowercase
    |
782 |         nb_initialisation=0,
783 |     )
784 |     y_max_mu_BO, y_max_sig_bot_BO, y_max_sig_top_BO = plot_y_max(
    |                                    ^^^^^^^^^^^^^^^^ N806
785 |         BOresults,
786 |         nb_iterations=nb_iteration,
    |

src\stk_search\utils\Search_results_plot.py:795:5: ERA001 Found commented-out code
    |
793 |         nb_initialisation=0,
794 |     )
795 |     # df_total[target_name].hist(ax=axs[3], bins=20, orientation="horizontal", color=search_to_color['BO'])
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
796 |     # axs[3].set_ylim([df_total[target_name].min(),df_total[target_name].max()])
797 |     min_target_out_of_database = -np.sort(-df_total[target_name].values)[100]
    |
    = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:796:5: ERA001 Found commented-out code
    |
794 |     )
795 |     # df_total[target_name].hist(ax=axs[3], bins=20, orientation="horizontal", color=search_to_color['BO'])
796 |     # axs[3].set_ylim([df_total[target_name].min(),df_total[target_name].max()])
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
797 |     min_target_out_of_database = -np.sort(-df_total[target_name].values)[100]
798 |     y_elm, y_elm_sig_bot, y_elm_sig_top = plot_element_above_min(
    |
    = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:797:44: PD011 Use `.to_numpy()` instead of `.values`
    |
795 |     # df_total[target_name].hist(ax=axs[3], bins=20, orientation="horizontal", color=search_to_color['BO'])
796 |     # axs[3].set_ylim([df_total[target_name].min(),df_total[target_name].max()])
797 |     min_target_out_of_database = -np.sort(-df_total[target_name].values)[100]
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
798 |     y_elm, y_elm_sig_bot, y_elm_sig_top = plot_element_above_min(
799 |         BOresults,
    |

src\stk_search\utils\Search_results_plot.py:798:43: F821 Undefined name `plot_element_above_min`
    |
796 |     # axs[3].set_ylim([df_total[target_name].min(),df_total[target_name].max()])
797 |     min_target_out_of_database = -np.sort(-df_total[target_name].values)[100]
798 |     y_elm, y_elm_sig_bot, y_elm_sig_top = plot_element_above_min(
    |                                           ^^^^^^^^^^^^^^^^^^^^^^ F821
799 |         BOresults,
800 |         min_target_out_of_database,
    |

src\stk_search\utils\Search_results_plot.py:813:5: D103 Missing docstring in public function
    |
813 | def load_search_data(search_type, date, test_name, min_eval=100):
    |     ^^^^^^^^^^^^^^^^ D103
814 |     files = glob.glob(
815 |         f"data/output/search_experiment/{test_name}/"
    |

src\stk_search\utils\Search_results_plot.py:814:13: PTH207 Replace `glob` with `Path.glob` or `Path.rglob`
    |
813 | def load_search_data(search_type, date, test_name, min_eval=100):
814 |     files = glob.glob(
    |             ^^^^^^^^^ PTH207
815 |         f"data/output/search_experiment/{test_name}/"
816 |         + search_type
    |

src\stk_search\utils\Search_results_plot.py:821:5: N806 Variable `BOresults` in function should be lowercase
    |
819 |         + "/*.pkl"
820 |     )
821 |     BOresults = []
    |     ^^^^^^^^^ N806
822 |     max_num_eval = 0
823 |     for file in files:
    |

src\stk_search\utils\Search_results_plot.py:825:14: PTH123 `open()` should be replaced by `Path.open()`
    |
823 |     for file in files:
824 | 
825 |         with open(file, "rb") as f:
    |              ^^^^ PTH123
826 |             results = pickle.load(f)
827 |             if len(results["fitness_acquired"]) > min_eval:
    |

src\stk_search\utils\Search_results_plot.py:826:23: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
825 |         with open(file, "rb") as f:
826 |             results = pickle.load(f)
    |                       ^^^^^^^^^^^^^^ S301
827 |             if len(results["fitness_acquired"]) > min_eval:
828 |                 BOresults.append(results)
    |

src\stk_search\utils\Search_results_plot.py:832:5: T201 `print` found
    |
830 |                     max_num_eval, len(results["fitness_acquired"])
831 |                 )
832 |     print(len(BOresults), max_num_eval)
    |     ^^^^^ T201
833 |     return BOresults
    |
    = help: Remove `print`

src\stk_search\utils\Search_results_plot.py:839:5: D400 First line should end with a period
    |
837 |       search_results, max_iteration=200, num_initialisation=0
838 |   ):
839 |       """Generate a dataframe from the search results
    |  _____^
840 | | 
841 | |     Args:
842 | |     ----
843 | |         search_results (list): A list of search results
844 | |         max_iteration (int): The maximum number of iterations
845 | |         num_initialisation (int): The number of initialisation
846 | | 
847 | |     """
    | |_______^ D400
848 |       for dict_org in search_results:
849 |           dict = dict_org.copy()
    |
    = help: Add period

src\stk_search\utils\Search_results_plot.py:839:5: D415 First line should end with a period, question mark, or exclamation point
    |
837 |       search_results, max_iteration=200, num_initialisation=0
838 |   ):
839 |       """Generate a dataframe from the search results
    |  _____^
840 | | 
841 | |     Args:
842 | |     ----
843 | |         search_results (list): A list of search results
844 | |         max_iteration (int): The maximum number of iterations
845 | |         num_initialisation (int): The number of initialisation
846 | | 
847 | |     """
    | |_______^ D415
848 |       for dict_org in search_results:
849 |           dict = dict_org.copy()
    |
    = help: Add closing punctuation

src\stk_search\utils\Search_results_plot.py:849:9: A001 Variable `dict` is shadowing a Python builtin
    |
847 |     """
848 |     for dict_org in search_results:
849 |         dict = dict_org.copy()
    |         ^^^^ A001
850 | 
851 |         dict.pop("searched_space_df")
    |

src\stk_search\utils\Search_results_plot.py:852:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
851 |         dict.pop("searched_space_df")
852 |         df = pd.DataFrame.from_records(dict)
    |         ^^ PD901
853 |         df = df[df["ids_acquired"] < max_iteration]
854 |         df = df[df["ids_acquired"] > num_initialisation]
    |

src\stk_search\utils\Search_results_plot.py:853:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
851 |         dict.pop("searched_space_df")
852 |         df = pd.DataFrame.from_records(dict)
853 |         df = df[df["ids_acquired"] < max_iteration]
    |         ^^ PD901
854 |         df = df[df["ids_acquired"] > num_initialisation]
855 |         yield df
    |

src\stk_search\utils\Search_results_plot.py:854:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
852 |         df = pd.DataFrame.from_records(dict)
853 |         df = df[df["ids_acquired"] < max_iteration]
854 |         df = df[df["ids_acquired"] > num_initialisation]
    |         ^^ PD901
855 |         yield df
    |

src\stk_search\utils\Search_results_plot.py:858:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
858 | def get_df_max_found(
    |     ^^^^^^^^^^^^^^^^ PLR0913
859 |     search_results,
860 |     df_total,
    |

src\stk_search\utils\Search_results_plot.py:858:5: D417 Missing argument description in the docstring for `get_df_max_found`: `target_name`
    |
858 | def get_df_max_found(
    |     ^^^^^^^^^^^^^^^^ D417
859 |     search_results,
860 |     df_total,
    |

src\stk_search\utils\Search_results_plot.py:862:5: N803 Argument name `topKmol` should be lowercase
    |
860 |     df_total,
861 |     max_iteration=200,
862 |     topKmol=1000,
    |     ^^^^^^^ N803
863 |     num_initialisation=0,
864 |     target_name="target",
    |

src\stk_search\utils\Search_results_plot.py:866:5: D400 First line should end with a period
    |
864 |       target_name="target",
865 |   ):
866 |       """Get the dataframe of the maximum found molecules
    |  _____^
867 | | 
868 | |     Args:
869 | |     ----
870 | |         search_results (list): The search results
871 | |         df_total (pd.DataFrame): The dataframe of the total molecules
872 | |         max_iteration (int): The maximum number of iterations
873 | |         topKmol (int): The number of top molecules
874 | |         num_initialisation (int): The number of initialisation
875 | | 
876 | |     """
    | |_______^ D400
877 |       df_results = pd.concat(
878 |           list(
    |
    = help: Add period

src\stk_search\utils\Search_results_plot.py:866:5: D415 First line should end with a period, question mark, or exclamation point
    |
864 |       target_name="target",
865 |   ):
866 |       """Get the dataframe of the maximum found molecules
    |  _____^
867 | | 
868 | |     Args:
869 | |     ----
870 | |         search_results (list): The search results
871 | |         df_total (pd.DataFrame): The dataframe of the total molecules
872 | |         max_iteration (int): The maximum number of iterations
873 | |         topKmol (int): The number of top molecules
874 | |         num_initialisation (int): The number of initialisation
875 | | 
876 | |     """
    | |_______^ D415
877 |       df_results = pd.concat(
878 |           list(
    |
    = help: Add closing punctuation

src\stk_search\utils\Search_results_plot.py:887:53: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
885 |     )
886 |     df_results["InChIKey"] = df_results["InchiKey_acquired"]
887 |     df_results.drop_duplicates(subset=["InChIKey"], inplace=True)
    |                                                     ^^^^^^^^^^^^ PD002
888 |     df_total.sort_values(target_name, inplace=True, ascending=False)
889 |     df_max = df_total.iloc[0:topKmol]
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\Search_results_plot.py:888:39: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
886 |     df_results["InChIKey"] = df_results["InchiKey_acquired"]
887 |     df_results.drop_duplicates(subset=["InChIKey"], inplace=True)
888 |     df_total.sort_values(target_name, inplace=True, ascending=False)
    |                                       ^^^^^^^^^^^^ PD002
889 |     df_max = df_total.iloc[0:topKmol]
890 |     df_max_found = df_max.merge(df_results, on="InChIKey", how="inner")
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\Search_results_plot.py:895:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
895 | def get_df_max_target_found(
    |     ^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
896 |     search_results,
897 |     df_total,
    |

src\stk_search\utils\Search_results_plot.py:895:5: D417 Missing argument descriptions in the docstring for `get_df_max_target_found`: `min_target`, `target_name`
    |
895 | def get_df_max_target_found(
    |     ^^^^^^^^^^^^^^^^^^^^^^^ D417
896 |     search_results,
897 |     df_total,
    |

src\stk_search\utils\Search_results_plot.py:903:5: D400 First line should end with a period
    |
901 |       target_name="target",
902 |   ):
903 |       """Get the dataframe of the maximum found molecules
    |  _____^
904 | | 
905 | |     Args:
906 | |     ----
907 | |         search_results (list): The search results
908 | |         df_total (pd.DataFrame): The dataframe of the total molecules
909 | |         max_iteration (int): The maximum number of iterations
910 | |         topKmol (int): The number of top molecules
911 | |         num_initialisation (int): The number of initialisation
912 | | 
913 | |     """
    | |_______^ D400
914 |       df_results = pd.concat(
915 |           list(
    |
    = help: Add period

src\stk_search\utils\Search_results_plot.py:903:5: D415 First line should end with a period, question mark, or exclamation point
    |
901 |       target_name="target",
902 |   ):
903 |       """Get the dataframe of the maximum found molecules
    |  _____^
904 | | 
905 | |     Args:
906 | |     ----
907 | |         search_results (list): The search results
908 | |         df_total (pd.DataFrame): The dataframe of the total molecules
909 | |         max_iteration (int): The maximum number of iterations
910 | |         topKmol (int): The number of top molecules
911 | |         num_initialisation (int): The number of initialisation
912 | | 
913 | |     """
    | |_______^ D415
914 |       df_results = pd.concat(
915 |           list(
    |
    = help: Add closing punctuation

src\stk_search\utils\Search_results_plot.py:924:53: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
922 |     )
923 |     df_results["InChIKey"] = df_results["InchiKey_acquired"]
924 |     df_results.drop_duplicates(subset=["InChIKey"], inplace=True)
    |                                                     ^^^^^^^^^^^^ PD002
925 |     df_total.sort_values(target_name, inplace=True, ascending=False)
926 |     df_max = df_total[df_total[target_name] > min_target].copy()
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\Search_results_plot.py:925:39: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
923 |     df_results["InChIKey"] = df_results["InchiKey_acquired"]
924 |     df_results.drop_duplicates(subset=["InChIKey"], inplace=True)
925 |     df_total.sort_values(target_name, inplace=True, ascending=False)
    |                                       ^^^^^^^^^^^^ PD002
926 |     df_max = df_total[df_total[target_name] > min_target].copy()
927 |     df_max_found = df_max.merge(df_results, on="InChIKey", how="inner")
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\Search_results_plot.py:932:5: D103 Missing docstring in public function
    |
932 | def get_clusters(df):
    |     ^^^^^^^^^^^^ D103
933 |     hdb_model = HDBSCAN(min_cluster_size=1000, min_samples=100)
934 |     # Fit the model to the average PCA scores
    |

src\stk_search\utils\Search_results_plot.py:940:5: D103 Missing docstring in public function
    |
940 | def plot_space_with_target(df, target_name="target", ax=None, size_of_bin=1):
    |     ^^^^^^^^^^^^^^^^^^^^^^ D103
941 | 
942 |     list_target_splits = [
    |

src\stk_search\utils\Search_results_plot.py:943:9: PD011 Use `.to_numpy()` instead of `.values`
    |
942 |     list_target_splits = [
943 |         df[df[target_name] > i][target_name].values
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
944 |         for i in range(
945 |             int(df[target_name].min()), int(df[target_name].max()), size_of_bin
    |

src\stk_search\utils\Search_results_plot.py:961:5: D103 Missing docstring in public function
    |
961 | def oligomer_cluster_plot(
    |     ^^^^^^^^^^^^^^^^^^^^^ D103
962 |     df,
963 |     target_name="target",
    |

src\stk_search\utils\Search_results_plot.py:968:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
966 |     fig, ax = plt.subplots(1, 3, figsize=(30, 10))
967 |     if "Cluster" not in df.columns:
968 |         df = get_clusters(df)
    |         ^^ PD901
969 |     for cluster in df["Cluster"].unique():
970 |         df_total_cluster = df[df["Cluster"] == cluster]
    |

src\stk_search\utils\Search_results_plot.py:971:9: T201 `print` found
    |
969 |     for cluster in df["Cluster"].unique():
970 |         df_total_cluster = df[df["Cluster"] == cluster]
971 |         print(f"Cluster {cluster} has {df_total_cluster.shape[0]} molecules")
    |         ^^^^^ T201
972 |         df_total_cluster.hist(
973 |             column=target_name,
    |
    = help: Remove `print`

src\stk_search\utils\Search_results_plot.py:1005:5: D103 Missing docstring in public function
     |
1005 | def load_search_data(search_type, date, test_name, min_eval=100):
     |     ^^^^^^^^^^^^^^^^ D103
1006 |     files = glob.glob(
1007 |         f"data/output/search_experiment/{test_name}/"
     |

src\stk_search\utils\Search_results_plot.py:1005:5: F811 Redefinition of unused `load_search_data` from line 813
     |
1005 | def load_search_data(search_type, date, test_name, min_eval=100):
     |     ^^^^^^^^^^^^^^^^ F811
1006 |     files = glob.glob(
1007 |         f"data/output/search_experiment/{test_name}/"
     |
     = help: Remove definition: `load_search_data`

src\stk_search\utils\Search_results_plot.py:1006:13: PTH207 Replace `glob` with `Path.glob` or `Path.rglob`
     |
1005 | def load_search_data(search_type, date, test_name, min_eval=100):
1006 |     files = glob.glob(
     |             ^^^^^^^^^ PTH207
1007 |         f"data/output/search_experiment/{test_name}/"
1008 |         + search_type
     |

src\stk_search\utils\Search_results_plot.py:1013:5: N806 Variable `BOresults` in function should be lowercase
     |
1011 |         + "/*.pkl"
1012 |     )
1013 |     BOresults = []
     |     ^^^^^^^^^ N806
1014 |     max_num_eval = 0
1015 |     for file in files:
     |

src\stk_search\utils\Search_results_plot.py:1017:14: PTH123 `open()` should be replaced by `Path.open()`
     |
1015 |     for file in files:
1016 | 
1017 |         with open(file, "rb") as f:
     |              ^^^^ PTH123
1018 |             results = pickle.load(f)
1019 |             if len(results["fitness_acquired"]) > min_eval:
     |

src\stk_search\utils\Search_results_plot.py:1018:23: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
     |
1017 |         with open(file, "rb") as f:
1018 |             results = pickle.load(f)
     |                       ^^^^^^^^^^^^^^ S301
1019 |             if len(results["fitness_acquired"]) > min_eval:
1020 |                 BOresults.append(results)
     |

src\stk_search\utils\Search_results_plot.py:1024:5: T201 `print` found
     |
1022 |                     max_num_eval, len(results["fitness_acquired"])
1023 |                 )
1024 |     print(len(BOresults), max_num_eval)
     |     ^^^^^ T201
1025 |     return BOresults
     |
     = help: Remove `print`

src\stk_search\utils\Search_results_plot.py:1028:5: N802 Function name `plot_BO_results_in_space` should be lowercase
     |
1028 | def plot_BO_results_in_space(BOresults, ax, title_label, df_rep):
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ N802
1029 |     bo = BOresults.copy()
1030 |     bo.pop("searched_space_df")
     |

src\stk_search\utils\Search_results_plot.py:1028:5: D103 Missing docstring in public function
     |
1028 | def plot_BO_results_in_space(BOresults, ax, title_label, df_rep):
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ D103
1029 |     bo = BOresults.copy()
1030 |     bo.pop("searched_space_df")
     |

src\stk_search\utils\Search_results_plot.py:1028:30: N803 Argument name `BOresults` should be lowercase
     |
1028 | def plot_BO_results_in_space(BOresults, ax, title_label, df_rep):
     |                              ^^^^^^^^^ N803
1029 |     bo = BOresults.copy()
1030 |     bo.pop("searched_space_df")
     |

src\stk_search\utils\Search_results_plot.py:1035:9: ANN202 Missing return type annotation for private function `plot_pca_space_results`
     |
1033 |     df_plot_results = pd_results.merge(df_rep, on="InChIKey", how="left")
1034 | 
1035 |     def plot_pca_space_results(
     |         ^^^^^^^^^^^^^^^^^^^^^^ ANN202
1036 |         df_tot_plot, df_plot_results, property_name, added_text=""
1037 |     ):
     |
     = help: Add return type annotation

src\stk_search\utils\Search_results_plot.py:1036:39: ARG001 Unused function argument: `property_name`
     |
1035 |     def plot_pca_space_results(
1036 |         df_tot_plot, df_plot_results, property_name, added_text=""
     |                                       ^^^^^^^^^^^^^ ARG001
1037 |     ):
     |

src\stk_search\utils\Search_results_plot.py:1064:5: F841 Local variable `cax` is assigned to but never used
     |
1062 |         return cax
1063 | 
1064 |     cax = plot_pca_space_results(
     |     ^^^ F841
1065 |         df_rep, df_plot_results, "target", "Morgan fingerprints"
1066 |     )
     |
     = help: Remove assignment to unused variable `cax`

src\stk_search\utils\Search_results_plot.py:1071:5: D103 Missing docstring in public function
     |
1071 | def plot_df_results_in_space(pd_results, ax, title_label, df_rep):
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ D103
1072 | 
1073 |     df_plot_results = pd_results.merge(
     |

src\stk_search\utils\Search_results_plot.py:1077:9: ANN202 Missing return type annotation for private function `plot_pca_space_results`
     |
1075 |     )
1076 | 
1077 |     def plot_pca_space_results(
     |         ^^^^^^^^^^^^^^^^^^^^^^ ANN202
1078 |         df_tot_plot, df_plot_results, property_name, added_text=""
1079 |     ):
     |
     = help: Add return type annotation

src\stk_search\utils\Search_results_plot.py:1078:39: ARG001 Unused function argument: `property_name`
     |
1077 |     def plot_pca_space_results(
1078 |         df_tot_plot, df_plot_results, property_name, added_text=""
     |                                       ^^^^^^^^^^^^^ ARG001
1079 |     ):
     |

src\stk_search\utils\Search_results_plot.py:1106:5: F841 Local variable `cax` is assigned to but never used
     |
1104 |         return cax
1105 | 
1106 |     cax = plot_pca_space_results(
     |     ^^^ F841
1107 |         df_rep, df_plot_results, "target", "Morgan fingerprints"
1108 |     )
     |
     = help: Remove assignment to unused variable `cax`

src\stk_search\utils\Search_results_plot.py:1113:5: D103 Missing docstring in public function
     |
1113 | def plot_df_max_in_space(pd_results, ax, title_label, df_rep):
     |     ^^^^^^^^^^^^^^^^^^^^ D103
1114 | 
1115 |     df_plot_results = pd_results.merge(
     |

src\stk_search\utils\Search_results_plot.py:1119:9: ANN202 Missing return type annotation for private function `plot_pca_space_results`
     |
1117 |     )
1118 | 
1119 |     def plot_pca_space_results(
     |         ^^^^^^^^^^^^^^^^^^^^^^ ANN202
1120 |         df_tot_plot, df_plot_results, property_name, added_text=""
1121 |     ):
     |
     = help: Add return type annotation: `None`

src\stk_search\utils\Search_results_plot.py:1120:39: ARG001 Unused function argument: `property_name`
     |
1119 |     def plot_pca_space_results(
1120 |         df_tot_plot, df_plot_results, property_name, added_text=""
     |                                       ^^^^^^^^^^^^^ ARG001
1121 |     ):
     |

src\stk_search\utils\Search_results_plot.py:1123:9: ERA001 Found commented-out code
     |
1121 |     ):
1122 | 
1123 |         # ax.scatter(df_all_plot_morgan['PCA1'], df_all_plot_morgan['PCA2'], c='black', s=20, alpha=0.9, label='random generation')
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
1124 | 
1125 |         ax.scatter(
     |
     = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:1150:5: D103 Missing docstring in public function
     |
1150 | def plot_pca_space(df_tot_plot, property_name, added_text="", ax=None):
     |     ^^^^^^^^^^^^^^ D103
1151 | 
1152 |     # ax.scatter(df_all_plot_morgan['PCA1'], df_all_plot_morgan['PCA2'], c='black', s=20, alpha=0.9, label='random generation')
     |

src\stk_search\utils\Search_results_plot.py:1152:5: ERA001 Found commented-out code
     |
1150 | def plot_pca_space(df_tot_plot, property_name, added_text="", ax=None):
1151 | 
1152 |     # ax.scatter(df_all_plot_morgan['PCA1'], df_all_plot_morgan['PCA2'], c='black', s=20, alpha=0.9, label='random generation')
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
1153 | 
1154 |     cax = ax.scatter(
     |
     = help: Remove commented-out code

src\stk_search\utils\Search_results_plot.py:1171:5: D103 Missing docstring in public function
     |
1171 | def get_rep_pca(InChIKey, dataset_dict, pca_kernel):
     |     ^^^^^^^^^^^ D103
1172 |     learned_rpr = (
1173 |         dataset_dict[InChIKey].learned_rpr.detach().numpy().reshape(1, -1)
     |

src\stk_search\utils\Search_results_plot.py:1171:17: N803 Argument name `InChIKey` should be lowercase
     |
1171 | def get_rep_pca(InChIKey, dataset_dict, pca_kernel):
     |                 ^^^^^^^^ N803
1172 |     learned_rpr = (
1173 |         dataset_dict[InChIKey].learned_rpr.detach().numpy().reshape(1, -1)
     |

src\stk_search\utils\config_utils.py:1:1: INP001 File `src\stk_search\utils\config_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\config_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\config_utils.py:8:5: PLR0915 Too many statements (142 > 50)
   |
 8 | def read_config(dir, model_name=""):
   |     ^^^^^^^^^^^ PLR0915
 9 |     if os.path.exists(dir + "/config.json"):
10 |         config = load_config(dir)
   |

src\stk_search\utils\config_utils.py:8:5: D103 Missing docstring in public function
   |
 8 | def read_config(dir, model_name=""):
   |     ^^^^^^^^^^^ D103
 9 |     if os.path.exists(dir + "/config.json"):
10 |         config = load_config(dir)
   |

src\stk_search\utils\config_utils.py:8:17: A002 Argument `dir` is shadowing a Python builtin
   |
 8 | def read_config(dir, model_name=""):
   |                 ^^^ A002
 9 |     if os.path.exists(dir + "/config.json"):
10 |         config = load_config(dir)
   |

src\stk_search\utils\config_utils.py:9:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
 8 | def read_config(dir, model_name=""):
 9 |     if os.path.exists(dir + "/config.json"):
   |        ^^^^^^^^^^^^^^ PTH110
10 |         config = load_config(dir)
11 |         print("config loaded from", dir)
   |

src\stk_search\utils\config_utils.py:11:9: T201 `print` found
   |
 9 |     if os.path.exists(dir + "/config.json"):
10 |         config = load_config(dir)
11 |         print("config loaded from", dir)
   |         ^^^^^ T201
12 |     else:
13 |         # Set parameters
   |
   = help: Remove `print`

src\stk_search\utils\config_utils.py:14:18: C408 Unnecessary `dict` call (rewrite as a literal)
   |
12 |     else:
13 |         # Set parameters
14 |         config = dict()
   |                  ^^^^^^ C408
15 |         config["seed"] = 42
16 |         config["save_dataset"] = False
   |
   = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:49:31: C408 Unnecessary `dict` call (rewrite as a literal)
   |
48 |         if config["model_name"] == "SchNet":
49 |             config["model"] = dict()
   |                               ^^^^^^ C408
50 |             config["model"]["node_class"] = 119
51 |             config["model"]["edge_class"] = 5
   |
   = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:62:31: C408 Unnecessary `dict` call (rewrite as a literal)
   |
61 |         elif config["model_name"] == "DimeNet":
62 |             config["model"] = dict()
   |                               ^^^^^^ C408
63 |             config["model"]["node_class"] = 119
64 |             config["model"]["hidden_channels"] = 300
   |
   = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:77:31: C408 Unnecessary `dict` call (rewrite as a literal)
   |
76 |         elif config["model_name"] == "DimeNetPlusPlus":
77 |             config["model"] = dict()
   |                               ^^^^^^ C408
78 |             config["model"]["node_class"] = 119
79 |             config["model"]["hidden_channels"] = 300
   |
   = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:94:31: C408 Unnecessary `dict` call (rewrite as a literal)
   |
93 |         elif config["model_name"] == "GemNet":
94 |             config["model"] = dict()
   |                               ^^^^^^ C408
95 |             config["model"]["node_class"] = 119
96 |             config["model"]["num_spherical"] = 7
   |
   = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:122:31: C408 Unnecessary `dict` call (rewrite as a literal)
    |
121 |         elif config["model_name"] == "Equiformer":
122 |             config["model"] = dict()
    |                               ^^^^^^ C408
123 |             config["model"]["Equiformer_radius"] = 4.0
124 |             config["model"]["Equiformer_irreps_in"] = "5x0e"
    |
    = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:132:31: C408 Unnecessary `dict` call (rewrite as a literal)
    |
131 |         elif config["model_name"] == "PaiNN":
132 |             config["model"] = dict()
    |                               ^^^^^^ C408
133 |             config["model"]["n_atom_basis"] = 64
134 |             config["model"]["n_interactions"] = 6
    |
    = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:143:31: C408 Unnecessary `dict` call (rewrite as a literal)
    |
142 |         elif config["model_name"] == "SphereNet":
143 |             config["model"] = dict()
    |                               ^^^^^^ C408
144 |             config["model"]["hidden_channels"] = 128
145 |             config["model"]["out_channels"] = 1
    |
    = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:160:19: TRY003 Avoid specifying long messages outside the exception class
    |
158 |             config["model"]["num_output_layers"] = 3
159 |         else:
160 |             raise ValueError("Model name not recognised")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
161 |         save_config(config, dir)
162 |         print("config saved to", dir)
    |

src\stk_search\utils\config_utils.py:160:30: EM101 Exception must not use a string literal, assign to variable first
    |
158 |             config["model"]["num_output_layers"] = 3
159 |         else:
160 |             raise ValueError("Model name not recognised")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
161 |         save_config(config, dir)
162 |         print("config saved to", dir)
    |
    = help: Assign to variable; remove string literal

src\stk_search\utils\config_utils.py:162:9: T201 `print` found
    |
160 |             raise ValueError("Model name not recognised")
161 |         save_config(config, dir)
162 |         print("config saved to", dir)
    |         ^^^^^ T201
163 | 
164 |     return config
    |
    = help: Remove `print`

src\stk_search\utils\config_utils.py:167:5: D103 Missing docstring in public function
    |
167 | def save_config(config, dir):
    |     ^^^^^^^^^^^ D103
168 |     os.makedirs(dir, exist_ok=True)
169 |     # save config to json
    |

src\stk_search\utils\config_utils.py:167:25: A002 Argument `dir` is shadowing a Python builtin
    |
167 | def save_config(config, dir):
    |                         ^^^ A002
168 |     os.makedirs(dir, exist_ok=True)
169 |     # save config to json
    |

src\stk_search\utils\config_utils.py:168:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
167 | def save_config(config, dir):
168 |     os.makedirs(dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
169 |     # save config to json
170 |     with open(dir + "/config.json", "w") as f:
    |

src\stk_search\utils\config_utils.py:170:10: PTH123 `open()` should be replaced by `Path.open()`
    |
168 |     os.makedirs(dir, exist_ok=True)
169 |     # save config to json
170 |     with open(dir + "/config.json", "w") as f:
    |          ^^^^ PTH123
171 |         json.dump(config, f, indent=4, separators=(",", ": "), sort_keys=True)
    |

src\stk_search\utils\config_utils.py:174:5: D103 Missing docstring in public function
    |
174 | def load_config(dir):
    |     ^^^^^^^^^^^ D103
175 |     # load config from json
176 |     with open(dir + "/config.json") as f:
    |

src\stk_search\utils\config_utils.py:174:17: A002 Argument `dir` is shadowing a Python builtin
    |
174 | def load_config(dir):
    |                 ^^^ A002
175 |     # load config from json
176 |     with open(dir + "/config.json") as f:
    |

src\stk_search\utils\config_utils.py:176:10: PTH123 `open()` should be replaced by `Path.open()`
    |
174 | def load_config(dir):
175 |     # load config from json
176 |     with open(dir + "/config.json") as f:
    |          ^^^^ PTH123
177 |         config = json.load(f)
178 |     config["device"] = "cuda" if torch.cuda.is_available() else "cpu"
    |

src\stk_search\utils\config_utils.py:182:5: D103 Missing docstring in public function
    |
182 | def read_search_config(config_search_dir):
    |     ^^^^^^^^^^^^^^^^^^ D103
183 |     if os.path.exists(config_search_dir + "/config_search.json"):
184 |         config = load_search_config(config_search_dir)
    |

src\stk_search\utils\config_utils.py:183:8: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
182 | def read_search_config(config_search_dir):
183 |     if os.path.exists(config_search_dir + "/config_search.json"):
    |        ^^^^^^^^^^^^^^ PTH110
184 |         config = load_search_config(config_search_dir)
185 |         print("config loaded from", config_search_dir)
    |

src\stk_search\utils\config_utils.py:185:9: T201 `print` found
    |
183 |     if os.path.exists(config_search_dir + "/config_search.json"):
184 |         config = load_search_config(config_search_dir)
185 |         print("config loaded from", config_search_dir)
    |         ^^^^^ T201
186 |     else:
187 |         config = dict()
    |
    = help: Remove `print`

src\stk_search\utils\config_utils.py:187:18: C408 Unnecessary `dict` call (rewrite as a literal)
    |
185 |         print("config loaded from", config_search_dir)
186 |     else:
187 |         config = dict()
    |                  ^^^^^^ C408
188 |         config["num_iteration"] = 100
189 |         config["num_elem_initialisation"] = 10
    |
    = help: Rewrite as a literal

src\stk_search\utils\config_utils.py:210:5: D103 Missing docstring in public function
    |
210 | def save_search_config(config, dir):
    |     ^^^^^^^^^^^^^^^^^^ D103
211 |     os.makedirs(dir, exist_ok=True)
212 |     # save config to json
    |

src\stk_search\utils\config_utils.py:210:32: A002 Argument `dir` is shadowing a Python builtin
    |
210 | def save_search_config(config, dir):
    |                                ^^^ A002
211 |     os.makedirs(dir, exist_ok=True)
212 |     # save config to json
    |

src\stk_search\utils\config_utils.py:211:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
210 | def save_search_config(config, dir):
211 |     os.makedirs(dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
212 |     # save config to json
213 |     with open(dir + "/config_search.json", "w") as f:
    |

src\stk_search\utils\config_utils.py:213:10: PTH123 `open()` should be replaced by `Path.open()`
    |
211 |     os.makedirs(dir, exist_ok=True)
212 |     # save config to json
213 |     with open(dir + "/config_search.json", "w") as f:
    |          ^^^^ PTH123
214 |         json.dump(config, f, indent=4, separators=(",", ": "), sort_keys=True)
    |

src\stk_search\utils\config_utils.py:217:5: D103 Missing docstring in public function
    |
217 | def load_search_config(dir):
    |     ^^^^^^^^^^^^^^^^^^ D103
218 |     # load config from json
219 |     with open(dir + "/config_search.json") as f:
    |

src\stk_search\utils\config_utils.py:217:24: A002 Argument `dir` is shadowing a Python builtin
    |
217 | def load_search_config(dir):
    |                        ^^^ A002
218 |     # load config from json
219 |     with open(dir + "/config_search.json") as f:
    |

src\stk_search\utils\config_utils.py:219:10: PTH123 `open()` should be replaced by `Path.open()`
    |
217 | def load_search_config(dir):
218 |     # load config from json
219 |     with open(dir + "/config_search.json") as f:
    |          ^^^^ PTH123
220 |         config = json.load(f)
221 |     return config
    |

src\stk_search\utils\config_utils.py:221:12: RET504 Unnecessary assignment to `config` before `return` statement
    |
219 |     with open(dir + "/config_search.json") as f:
220 |         config = json.load(f)
221 |     return config
    |            ^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\config_utils.py:224:5: PLR0913 Too many arguments in function definition (9 > 5)
    |
224 | def generate_config(
    |     ^^^^^^^^^^^^^^^ PLR0913
225 |     target_name="target",
226 |     aim=0.0,
    |

src\stk_search\utils\config_utils.py:224:5: D103 Missing docstring in public function
    |
224 | def generate_config(
    |     ^^^^^^^^^^^^^^^ D103
225 |     target_name="target",
226 |     aim=0.0,
    |

src\stk_search\utils\config_utils.py:226:5: ARG001 Unused function argument: `aim`
    |
224 | def generate_config(
225 |     target_name="target",
226 |     aim=0.0,
    |     ^^^ ARG001
227 |     num_molecules=20000,
228 |     max_epochs=100,
    |

src\stk_search\utils\config_utils.py:236:16: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
234 | ):
235 |     # get config and set it up
236 |     date_now = datetime.datetime.now().strftime("%y%m%d")
    |                ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
237 |     name = f"{num_fragment}-frag_{target_name}_{date_now}__{model_name}_split{split_type}-nummol{num_molecules}"
238 |     config_dir = running_dir + f"/{name.replace('_','/')}/"
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\utils\config_utils.py:261:8: SIM118 Use `key not in dict` instead of `key not in dict.keys()`
    |
259 |     config["name"] = name
260 |     config["target_name"] = target_name
261 |     if "model_embedding_chkpt" not in config.keys():
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
262 |         config["model_embedding_chkpt"] = ""
263 |     if "model_transformer_chkpt" not in config.keys():
    |
    = help: Remove `.keys()`

src\stk_search\utils\config_utils.py:263:8: SIM118 Use `key not in dict` instead of `key not in dict.keys()`
    |
261 |     if "model_embedding_chkpt" not in config.keys():
262 |         config["model_embedding_chkpt"] = ""
263 |     if "model_transformer_chkpt" not in config.keys():
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
264 |         config["model_transformer_chkpt"] = ""
265 |     config["device"] = "cuda" if torch.cuda.is_available() else "cpu"
    |
    = help: Remove `.keys()`

src\stk_search\utils\config_utils.py:271:9: ISC003 Explicitly concatenated string should be implicitly concatenated
    |
269 |       config["split_type"] = split_type
270 |       config["dataset_all_path"] = (
271 |           "/rds/general/ephemeral/user/ma11115/ephemeral/STK_search/data/representation_learning/6-frag/target"
    |  _________^
272 | |         + "/dataset_all_schnet.pth"
    | |___________________________________^ ISC003
273 |       )
274 |       config["dataset_all_frag_path"] = (
    |

src\stk_search\utils\config_utils.py:275:9: ISC003 Explicitly concatenated string should be implicitly concatenated
    |
273 |       )
274 |       config["dataset_all_frag_path"] = (
275 |           "/rds/general/ephemeral/user/ma11115/ephemeral/STK_search/data/representation_learning/6-frag/target"
    |  _________^
276 | |         + "/dataset_all_frag_schnet.pth"
    | |________________________________________^ ISC003
277 |       )
278 |       save_config(config, config_dir)
    |

src\stk_search\utils\database_utils.py:1:1: INP001 File `src\stk_search\utils\database_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\database_utils.py:1:1: D400 First line should end with a period
  |
1 | """script to load data from database or files"""
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
2 | 
3 | import numpy as np
  |
  = help: Add period

src\stk_search\utils\database_utils.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | """script to load data from database or files"""
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
2 | 
3 | import numpy as np
  |
  = help: Add closing punctuation

src\stk_search\utils\database_utils.py:9:5: D103 Missing docstring in public function
   |
 8 | # read data in database
 9 | def load_data_database(
   |     ^^^^^^^^^^^^^^^^^^ D103
10 |     df_precursor_loc="Data/calculation_data_precursor_310823_clean.pkl",
11 |     num_fragm=6,
   |

src\stk_search\utils\database_utils.py:13:5: SIM108 Use ternary operator `collection_name = "BO_exp1" if num_fragm == 6 else f"BO_{num_fragm}"` instead of `if`-`else`-block
   |
11 |       num_fragm=6,
12 |   ):
13 |       if num_fragm == 6:
   |  _____^
14 | |         collection_name = "BO_exp1"
15 | |     else:
16 | |         collection_name = f"BO_{num_fragm}"
   | |___________________________________________^ SIM108
17 |   
18 |       def load_data():
   |
   = help: Replace `if`-`else`-block with `collection_name = "BO_exp1" if num_fragm == 6 else f"BO_{num_fragm}"`

src\stk_search\utils\database_utils.py:13:21: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
   |
11 |     num_fragm=6,
12 | ):
13 |     if num_fragm == 6:
   |                     ^ PLR2004
14 |         collection_name = "BO_exp1"
15 |     else:
   |

src\stk_search\utils\database_utils.py:18:9: ANN202 Missing return type annotation for private function `load_data`
   |
16 |         collection_name = f"BO_{num_fragm}"
17 | 
18 |     def load_data():
   |         ^^^^^^^^^ ANN202
19 |         client = pymongo.MongoClient("mongodb://ch-atarzia.ch.ic.ac.uk/")
20 |         database = client["stk_mohammed_BO"]
   |
   = help: Add return type annotation

src\stk_search\utils\database_utils.py:22:9: N806 Variable `df_IPEA` in function should be lowercase
   |
20 |         database = client["stk_mohammed_BO"]
21 |         collection = database[f"{collection_name}_IPEA"]
22 |         df_IPEA = pd.DataFrame(list(collection.find()))
   |         ^^^^^^^ N806
23 |         collection = database[f"{collection_name}_Stda"]
24 |         df_STDA = pd.DataFrame(list(collection.find()))
   |

src\stk_search\utils\database_utils.py:24:9: N806 Variable `df_STDA` in function should be lowercase
   |
22 |         df_IPEA = pd.DataFrame(list(collection.find()))
23 |         collection = database[f"{collection_name}_Stda"]
24 |         df_STDA = pd.DataFrame(list(collection.find()))
   |         ^^^^^^^ N806
25 |         collection = database["constructed_molecules"]
26 |         df_CM = pd.DataFrame(list(collection.find()))
   |

src\stk_search\utils\database_utils.py:26:9: N806 Variable `df_CM` in function should be lowercase
   |
24 |         df_STDA = pd.DataFrame(list(collection.find()))
25 |         collection = database["constructed_molecules"]
26 |         df_CM = pd.DataFrame(list(collection.find()))
   |         ^^^^^ N806
27 |         df_total = df_CM.merge(df_STDA, on="InChIKey", how="outer")
28 |         df_total = df_total.merge(df_IPEA, on="InChIKey", how="outer")
   |

src\stk_search\utils\database_utils.py:29:63: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
27 |         df_total = df_CM.merge(df_STDA, on="InChIKey", how="outer")
28 |         df_total = df_total.merge(df_IPEA, on="InChIKey", how="outer")
29 |         df_total.dropna(subset=["Excited state energy (eV)"], inplace=True)
   |                                                               ^^^^^^^^^^^^ PD002
30 | 
31 |         df_total["ES1"] = df_total["Excited state energy (eV)"].apply(
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\database_utils.py:40:49: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
39 |     df_total_new = load_data()
40 |     df_total_new.dropna(subset=["fosc1", "BB"], inplace=True)
   |                                                 ^^^^^^^^^^^^ PD002
41 |     df_total_new = df_total_new[df_total_new["fosc1"] > 0]
42 |     df_total_new = df_total_new[df_total_new["fosc1"] < 11]
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\database_utils.py:42:57: PLR2004 Magic value used in comparison, consider replacing `11` with a constant variable
   |
40 |     df_total_new.dropna(subset=["fosc1", "BB"], inplace=True)
41 |     df_total_new = df_total_new[df_total_new["fosc1"] > 0]
42 |     df_total_new = df_total_new[df_total_new["fosc1"] < 11]
   |                                                         ^^ PLR2004
43 |     df_total_new["target"] = (
44 |         -np.abs(df_total_new["ES1"] - 3)
   |

src\stk_search\utils\database_utils.py:49:9: ANN202 Missing return type annotation for private function `prepare_df_for_plot`
   |
47 |     )
48 | 
49 |     def prepare_df_for_plot(df_total_new=df_total_new):
   |         ^^^^^^^^^^^^^^^^^^^ ANN202
50 |         df_test = df_total_new
51 |         for id, x in df_test.iterrows():
   |
   = help: Add return type annotation

src\stk_search\utils\database_utils.py:51:13: A001 Variable `id` is shadowing a Python builtin
   |
49 |     def prepare_df_for_plot(df_total_new=df_total_new):
50 |         df_test = df_total_new
51 |         for id, x in df_test.iterrows():
   |             ^^ A001
52 |             # print(x)
53 |             if len(x["BB"]) != num_fragm:
   |

src\stk_search\utils\database_utils.py:52:13: ERA001 Found commented-out code
   |
50 |         df_test = df_total_new
51 |         for id, x in df_test.iterrows():
52 |             # print(x)
   |             ^^^^^^^^^^ ERA001
53 |             if len(x["BB"]) != num_fragm:
54 |                 df_test.drop(id, inplace=True)
   |
   = help: Remove commented-out code

src\stk_search\utils\database_utils.py:54:34: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
52 |             # print(x)
53 |             if len(x["BB"]) != num_fragm:
54 |                 df_test.drop(id, inplace=True)
   |                                  ^^^^^^^^^^^^ PD002
55 |         df_precursors = pd.read_pickle(df_precursor_loc)
56 |         for i in range(num_fragm):
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\database_utils.py:55:25: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
53 |             if len(x["BB"]) != num_fragm:
54 |                 df_test.drop(id, inplace=True)
55 |         df_precursors = pd.read_pickle(df_precursor_loc)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
56 |         for i in range(num_fragm):
57 |             df_test[f"InChIKey_{i}"] = df_test["BB"].apply(
   |

src\stk_search\utils\database_utils.py:58:33: B023 Function definition does not bind loop variable `i`
   |
56 |         for i in range(num_fragm):
57 |             df_test[f"InChIKey_{i}"] = df_test["BB"].apply(
58 |                 lambda x: str(x[i]["InChIKey"])
   |                                 ^ B023
59 |             )
60 |             df_test= df_test[df_test[f"InChIKey_{i}"].isin(df_precursors["InChIKey"])]
   |

src\stk_search\utils\database_utils.py:68:5: D103 Missing docstring in public function
   |
67 | # or load data from files
68 | def load_data_from_file(
   |     ^^^^^^^^^^^^^^^^^^^ D103
69 |     df_path="",
70 |     df_precursors_path="Data/calculation_data_precursor_310823_clean.pkl",
   |

src\stk_search\utils\database_utils.py:72:5: FBT002 Boolean default positional argument in function definition
   |
70 |     df_precursors_path="Data/calculation_data_precursor_310823_clean.pkl",
71 |     features_frag=None,
72 |     add_feature_frag=True,
   |     ^^^^^^^^^^^^^^^^ FBT002
73 |     num_fragm=6,
74 | ):
   |

src\stk_search\utils\database_utils.py:75:9: ANN202 Missing return type annotation for private function `prepare_df_for_plot`
   |
73 |     num_fragm=6,
74 | ):
75 |     def prepare_df_for_plot(
   |         ^^^^^^^^^^^^^^^^^^^ ANN202
76 |         df_total_new: pd.DataFrame = [], features_frag=features_frag
77 |     ):
   |
   = help: Add return type annotation

src\stk_search\utils\database_utils.py:76:38: B006 Do not use mutable data structures for argument defaults
   |
74 | ):
75 |     def prepare_df_for_plot(
76 |         df_total_new: pd.DataFrame = [], features_frag=features_frag
   |                                      ^^ B006
77 |     ):
78 |         df_test = df_total_new
   |
   = help: Replace with `None`; initialize within function

src\stk_search\utils\database_utils.py:79:25: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
77 |     ):
78 |         df_test = df_total_new
79 |         df_precursors = pd.read_pickle(df_precursors_path)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
80 |         if features_frag is None:
81 |             # consider only columns that are np.number
   |

src\stk_search\utils\database_utils.py:99:25: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
 98 |     if df_path == "":
 99 |         df_precursors = pd.read_pickle(df_precursors_path)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
100 |         return None, df_precursors
101 |     else:
    |

src\stk_search\utils\database_utils.py:101:5: RET505 Unnecessary `else` after `return` statement
    |
 99 |         df_precursors = pd.read_pickle(df_precursors_path)
100 |         return None, df_precursors
101 |     else:
    |     ^^^^ RET505
102 |         df_total = pd.read_csv(df_path)
103 |         if add_feature_frag:
    |
    = help: Remove unnecessary `else`

src\stk_search\utils\database_utils.py:108:29: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
106 |             )
107 |         else:
108 |             df_precursors = pd.read_pickle(df_precursors_path)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
109 |         return df_total, df_precursors
    |

src\stk_search\utils\database_utils.py:112:5: D103 Missing docstring in public function
    |
112 | def load_precursors_df(
    |     ^^^^^^^^^^^^^^^^^^ D103
113 |     df_precursors_path="Data/calculation_data_precursor_310823_clean.pkl",
114 | ):
    |

src\stk_search\utils\database_utils.py:116:21: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
114 | ):
115 | 
116 |     df_precursors = pd.read_pickle(df_precursors_path)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
117 | 
118 |     return df_precursors
    |

src\stk_search\utils\database_utils.py:118:12: RET504 Unnecessary assignment to `df_precursors` before `return` statement
    |
116 |     df_precursors = pd.read_pickle(df_precursors_path)
117 | 
118 |     return df_precursors
    |            ^^^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\database_utils.py:121:5: D103 Missing docstring in public function
    |
121 | def save_data(
    |     ^^^^^^^^^ D103
122 |     df_total, stk_path="/rds/general/user/ma11115/home/STK_Search/STK_search"
123 | ):
    |

src\stk_search\utils\database_utils.py:126:11: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
124 |     import datetime
125 | 
126 |     now = datetime.datetime.now()
    |           ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
127 |     now = now.strftime("%Y-%m-%d")
128 |     df_total.to_csv(stk_path + f"/data/output/Full_dataset/df_total_{now}.csv")
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\utils\get_modred_descriptors.py:1:1: INP001 File `src\stk_search\utils\get_modred_descriptors.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\get_modred_descriptors.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\get_modred_descriptors.py:9:5: D103 Missing docstring in public function
   |
 9 | def main(df_total_path,save_path,number=0):
   |     ^^^^ D103
10 |     os.makedirs(save_path, exist_ok=True)
11 |     df_total = pd.read_csv(df_total_path)
   |

src\stk_search\utils\get_modred_descriptors.py:10:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
 9 | def main(df_total_path,save_path,number=0):
10 |     os.makedirs(save_path, exist_ok=True)
   |     ^^^^^^^^^^^ PTH103
11 |     df_total = pd.read_csv(df_total_path)
12 |     df_total["mol"] = df_total["InChIKey"].apply(tanimoto_similarity_utils.get_mol_from_df_single)
   |

src\stk_search\utils\get_modred_descriptors.py:18:27: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
16 |     descriptors_df = descriptors_df[frag_properties].copy()
17 |     descriptors_df["InChIKey"] = df_total["InChIKey"]
18 |     descriptors_df.dropna(inplace=True)
   |                           ^^^^^^^^^^^^ PD002
19 |     descriptors_df.reset_index(drop=True, inplace=True)
20 |     descriptors_df.to_csv(save_path+f"descriptors_{number}.csv", index=False)
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\get_modred_descriptors.py:19:43: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
17 |     descriptors_df["InChIKey"] = df_total["InChIKey"]
18 |     descriptors_df.dropna(inplace=True)
19 |     descriptors_df.reset_index(drop=True, inplace=True)
   |                                           ^^^^^^^^^^^^ PD002
20 |     descriptors_df.to_csv(save_path+f"descriptors_{number}.csv", index=False)
21 |     #pca = PCA(n_components=2)
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\get_modred_descriptors.py:21:5: ERA001 Found commented-out code
   |
19 |     descriptors_df.reset_index(drop=True, inplace=True)
20 |     descriptors_df.to_csv(save_path+f"descriptors_{number}.csv", index=False)
21 |     #pca = PCA(n_components=2)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
22 |     #frag_properties = descriptors_df.select_dtypes(include=[np.number]).columns
23 |     #pca_transformed = pca.fit_transform(descriptors_df[frag_properties])
   |
   = help: Remove commented-out code

src\stk_search\utils\get_modred_descriptors.py:22:5: ERA001 Found commented-out code
   |
20 |     descriptors_df.to_csv(save_path+f"descriptors_{number}.csv", index=False)
21 |     #pca = PCA(n_components=2)
22 |     #frag_properties = descriptors_df.select_dtypes(include=[np.number]).columns
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
23 |     #pca_transformed = pca.fit_transform(descriptors_df[frag_properties])
24 |     #pca_df = pd.DataFrame(pca_transformed, columns=["PC1", "PC2"])
   |
   = help: Remove commented-out code

src\stk_search\utils\get_modred_descriptors.py:23:5: ERA001 Found commented-out code
   |
21 |     #pca = PCA(n_components=2)
22 |     #frag_properties = descriptors_df.select_dtypes(include=[np.number]).columns
23 |     #pca_transformed = pca.fit_transform(descriptors_df[frag_properties])
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
24 |     #pca_df = pd.DataFrame(pca_transformed, columns=["PC1", "PC2"])
25 |     #pca_df["InChIKey"] = descriptors_df["InChIKey"]
   |
   = help: Remove commented-out code

src\stk_search\utils\get_modred_descriptors.py:24:5: ERA001 Found commented-out code
   |
22 |     #frag_properties = descriptors_df.select_dtypes(include=[np.number]).columns
23 |     #pca_transformed = pca.fit_transform(descriptors_df[frag_properties])
24 |     #pca_df = pd.DataFrame(pca_transformed, columns=["PC1", "PC2"])
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
25 |     #pca_df["InChIKey"] = descriptors_df["InChIKey"]
26 |     #pca_df.to_csv(save_path+f"pca{number}.csv", index=False)
   |
   = help: Remove commented-out code

src\stk_search\utils\get_modred_descriptors.py:25:5: ERA001 Found commented-out code
   |
23 |     #pca_transformed = pca.fit_transform(descriptors_df[frag_properties])
24 |     #pca_df = pd.DataFrame(pca_transformed, columns=["PC1", "PC2"])
25 |     #pca_df["InChIKey"] = descriptors_df["InChIKey"]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
26 |     #pca_df.to_csv(save_path+f"pca{number}.csv", index=False)
   |
   = help: Remove commented-out code

src\stk_search\utils\get_modred_descriptors.py:26:5: ERA001 Found commented-out code
   |
24 |     #pca_df = pd.DataFrame(pca_transformed, columns=["PC1", "PC2"])
25 |     #pca_df["InChIKey"] = descriptors_df["InChIKey"]
26 |     #pca_df.to_csv(save_path+f"pca{number}.csv", index=False)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
27 | 
28 | if __name__ == "__main__":
   |
   = help: Remove commented-out code

src\stk_search\utils\oligomer_scaffold_split.py:1:1: INP001 File `src\stk_search\utils\oligomer_scaffold_split.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\oligomer_scaffold_split.py:1:1: D400 First line should end with a period
  |
1 | """script to turn a a dataset into custom fragment scaffold split"""
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D400
2 | 
3 | from collections import Counter
  |
  = help: Add period

src\stk_search\utils\oligomer_scaffold_split.py:1:1: D415 First line should end with a period, question mark, or exclamation point
  |
1 | """script to turn a a dataset into custom fragment scaffold split"""
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
2 | 
3 | from collections import Counter
  |
  = help: Add closing punctuation

src\stk_search\utils\oligomer_scaffold_split.py:19:5: D417 Missing argument descriptions in the docstring for `oligomer_scaffold_splitter`: `config`, `dataset`
   |
19 | def oligomer_scaffold_splitter(dataset, config):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
20 |     """Split a dataset into a training and test set based on the scaffold of the oligomers.
21 |     The test set contains the oligomers with the specified scaffold.
   |

src\stk_search\utils\oligomer_scaffold_split.py:20:5: D205 1 blank line required between summary line and description
   |
19 |   def oligomer_scaffold_splitter(dataset, config):
20 |       """Split a dataset into a training and test set based on the scaffold of the oligomers.
   |  _____^
21 | |     The test set contains the oligomers with the specified scaffold.
22 | | 
23 | |     Args:
24 | |     ----
25 | |     - dataset: list of dictionaries
26 | |     - config: dictionary with the following
27 | | 
28 | |     Returns:
29 | |     -------
30 | |     - test_set_inchikeys: list of InChIKeys of the oligomers in the test set
31 | | 
32 | |     """
   | |_______^ D205
33 |       df_total, df_precursors = load_dataframes(dataset, config)
   |
   = help: Insert single blank line

src\stk_search\utils\oligomer_scaffold_split.py:45:5: T201 `print` found
   |
43 |     ]  # Minimum number of points required to form a core point
44 | 
45 |     print(
   |     ^^^^^ T201
46 |         "Clustering with min_cluster_size =",
47 |         min_cluster_size,
   |
   = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:59:5: T201 `print` found
   |
57 |         df_total[["2d_tani_pca_1", "2d_tani_pca_2"]]
58 |     )
59 |     print("Clustered", len(cluster_labels), "oligomers")
   |     ^^^^^ T201
60 |     # assign the cluster labels to the InChIKeys in df_total
61 |     df_total["Cluster"] = cluster_labels
   |
   = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:68:5: T201 `print` found
   |
66 |         "test_set_oligomer_cluster"
67 |     ]  # Choose the cluster you want to use for the test set
68 |     print(f"Chosen cluster: {chosen_cluster}")
   |     ^^^^^ T201
69 |     cluster_keys = []
70 |     for key, value in cluster_assignments.items():
   |
   = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:73:5: T201 `print` found
   |
71 |         if value == chosen_cluster:
72 |             cluster_keys.append(key)
73 |     print(f"Length of Cluster {chosen_cluster}: {len(cluster_keys)}")
   |     ^^^^^ T201
74 | 
75 |     return cluster_keys
   |
   = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:78:5: D417 Missing argument descriptions in the docstring for `cluster_analysis`: `config`, `dataset`, `min_cluster_size`, `min_samples`
   |
78 | def cluster_analysis(dataset, config, min_cluster_size=750, min_samples=50):
   |     ^^^^^^^^^^^^^^^^ D417
79 |     """Perform clustering on the dataset and print the number of clusters and the number of oligomers in each cluster.
   |

src\stk_search\utils\oligomer_scaffold_split.py:92:5: T201 `print` found
   |
90 |     check_data_exists(df_total, dataset, config)
91 | 
92 |     print(
   |     ^^^^^ T201
93 |         "Clustering with min_cluster_size =",
94 |         min_cluster_size,
   |
   = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:108:5: T201 `print` found
    |
107 |     # print how many clusters there are and how many oligomers are in each cluster
108 |     print("Number of clusters:", len(set(cluster_labels)))
    |     ^^^^^ T201
109 |     print("Number of oligomers in each cluster:")
110 |     print(df_total["Cluster"].value_counts())
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:109:5: T201 `print` found
    |
107 |     # print how many clusters there are and how many oligomers are in each cluster
108 |     print("Number of clusters:", len(set(cluster_labels)))
109 |     print("Number of oligomers in each cluster:")
    |     ^^^^^ T201
110 |     print(df_total["Cluster"].value_counts())
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:110:5: T201 `print` found
    |
108 |     print("Number of clusters:", len(set(cluster_labels)))
109 |     print("Number of oligomers in each cluster:")
110 |     print(df_total["Cluster"].value_counts())
    |     ^^^^^ T201
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:114:5: D417 Missing argument descriptions in the docstring for `pca_plot`: `config`, `df_total`
    |
114 | def pca_plot(df_total, config):
    |     ^^^^^^^^ D417
115 |     """Plot the 2D PCA space of the dataset, highlighting the chosen cluster.
    |

src\stk_search\utils\oligomer_scaffold_split.py:123:47: F821 Undefined name `dataset`
    |
122 |     """
123 |     df_total, df_precursors = load_dataframes(dataset, config)
    |                                               ^^^^^^^ F821
124 |     check_data_exists(df_total, dataset, config)
    |

src\stk_search\utils\oligomer_scaffold_split.py:124:33: F821 Undefined name `dataset`
    |
122 |     """
123 |     df_total, df_precursors = load_dataframes(dataset, config)
124 |     check_data_exists(df_total, dataset, config)
    |                                 ^^^^^^^ F821
125 | 
126 |     min_cluster_size = config[
    |

src\stk_search\utils\oligomer_scaffold_split.py:133:5: T201 `print` found
    |
131 |     ]  # Minimum number of points required to form a core point
132 | 
133 |     print(
    |     ^^^^^ T201
134 |         "Clustering with min_cluster_size =",
135 |         min_cluster_size,
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:180:5: D417 Missing argument descriptions in the docstring for `substructure_analysis_oligomers`: `config`, `dataset`, `min_cluster_size`, `min_samples`, `selected_cluster`
    |
179 | # still to do for oligomer
180 | def substructure_analysis_oligomers(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
181 |     dataset, config, selected_cluster=1, min_cluster_size=750, min_samples=50
182 | ):
    |

src\stk_search\utils\oligomer_scaffold_split.py:196:5: N806 Variable `X_frag_mol` in function should be lowercase
    |
194 |     df_total, df_precursors = load_dataframes(dataset, config)
195 | 
196 |     X_frag_mol = df_precursors["mol_opt"].values
    |     ^^^^^^^^^^ N806
197 |     X_frag_inch = df_precursors["InChIKey"].values
198 |     keys_6mer = df_total["InChIKey"].values
    |

src\stk_search\utils\oligomer_scaffold_split.py:196:18: PD011 Use `.to_numpy()` instead of `.values`
    |
194 |     df_total, df_precursors = load_dataframes(dataset, config)
195 | 
196 |     X_frag_mol = df_precursors["mol_opt"].values
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
197 |     X_frag_inch = df_precursors["InChIKey"].values
198 |     keys_6mer = df_total["InChIKey"].values
    |

src\stk_search\utils\oligomer_scaffold_split.py:197:5: N806 Variable `X_frag_inch` in function should be lowercase
    |
196 |     X_frag_mol = df_precursors["mol_opt"].values
197 |     X_frag_inch = df_precursors["InChIKey"].values
    |     ^^^^^^^^^^^ N806
198 |     keys_6mer = df_total["InChIKey"].values
    |

src\stk_search\utils\oligomer_scaffold_split.py:197:19: PD011 Use `.to_numpy()` instead of `.values`
    |
196 |     X_frag_mol = df_precursors["mol_opt"].values
197 |     X_frag_inch = df_precursors["InChIKey"].values
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
198 |     keys_6mer = df_total["InChIKey"].values
    |

src\stk_search\utils\oligomer_scaffold_split.py:198:17: PD011 Use `.to_numpy()` instead of `.values`
    |
196 |     X_frag_mol = df_precursors["mol_opt"].values
197 |     X_frag_inch = df_precursors["InChIKey"].values
198 |     keys_6mer = df_total["InChIKey"].values
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
199 | 
200 |     check_data_exists(df_total, dataset, config)
    |

src\stk_search\utils\oligomer_scaffold_split.py:206:5: T201 `print` found
    |
204 |     min_samples = config["oligomer_min_samples"]
205 | 
206 |     print(
    |     ^^^^^ T201
207 |         "Clustering with min_cluster_size =",
208 |         min_cluster_size,
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:221:5: PLW0127 Self-assignment of variable `selected_cluster`
    |
219 |     cluster_assignments = dict(zip(keys_6mer, cluster_labels))
220 | 
221 |     selected_cluster = selected_cluster
    |     ^^^^^^^^^^^^^^^^ PLW0127
222 |     # Filter out the data points in the specified cluster
223 |     selected_cluster_keys = [
    |

src\stk_search\utils\oligomer_scaffold_split.py:229:5: T201 `print` found
    |
227 |     ]
228 | 
229 |     print(
    |     ^^^^^ T201
230 |         f"Length of Cluster {selected_cluster}: {len(selected_cluster_keys)}"
231 |     )
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:232:5: T201 `print` found
    |
230 |         f"Length of Cluster {selected_cluster}: {len(selected_cluster_keys)}"
231 |     )
232 |     print("Clustered")
    |     ^^^^^ T201
233 | 
234 |     print("Performing substructure analysis for Cluster", selected_cluster)
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:234:5: T201 `print` found
    |
232 |     print("Clustered")
233 | 
234 |     print("Performing substructure analysis for Cluster", selected_cluster)
    |     ^^^^^ T201
235 | 
236 |     # Generate common substructures for each molecule in the cluster
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:247:13: PD011 Use `.to_numpy()` instead of `.values`
    |
245 |           # Extract InChIKeys from columns InChIKeys_0 to InChIKeys_5
246 |           inchikeys = [
247 |               df_total.loc[
    |  _____________^
248 | |                 df_total["InChIKey"] == oligomer_key, f"InChIKey_{i}"
249 | |             ].values[0]
    | |____________________^ PD011
250 |               for i in range(6)
251 |           ]
    |

src\stk_search\utils\oligomer_scaffold_split.py:271:41: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
270 |         # Check if there's only one molecule in the cluster
271 |         if len(selected_cluster_keys) < 2:
    |                                         ^ PLR2004
272 |             print(
273 |                 f"Oligomer {oligomer_key} (Cluster {selected_cluster}): Not enough fragments for comparison."
    |

src\stk_search\utils\oligomer_scaffold_split.py:272:13: T201 `print` found
    |
270 |         # Check if there's only one molecule in the cluster
271 |         if len(selected_cluster_keys) < 2:
272 |             print(
    |             ^^^^^ T201
273 |                 f"Oligomer {oligomer_key} (Cluster {selected_cluster}): Not enough fragments for comparison."
274 |             )
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:286:30: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
    |
285 |         # visualise only one combined molecule in the cluster in 2D, so its easier to see
286 |         if len(fragments) == 6 and counter == 0:
    |                              ^ PLR2004
287 |             print(f"representative oligomer in cluster {selected_cluster}")
288 |             mol = Chem.MolFromSmiles(oligomer_smiles)
    |

src\stk_search\utils\oligomer_scaffold_split.py:287:13: T201 `print` found
    |
285 |         # visualise only one combined molecule in the cluster in 2D, so its easier to see
286 |         if len(fragments) == 6 and counter == 0:
287 |             print(f"representative oligomer in cluster {selected_cluster}")
    |             ^^^^^ T201
288 |             mol = Chem.MolFromSmiles(oligomer_smiles)
289 |             img = Draw.MolToImage(mol)
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:308:9: T201 `print` found
    |
306 |     )  # Choose the smaller of 3 and the actual number of substructures
307 |     for i, (substructure, count) in enumerate(ranked_substructures[:top_n]):
308 |         print(f"Top {i + 1} Substructure (Frequency: {count} oligomers):")
    |         ^^^^^ T201
309 |         img = Draw.MolToImage(Chem.MolFromSmarts(substructure))
310 |         display(img)
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:313:5: D103 Missing docstring in public function
    |
313 | def load_dataframes(dataset, config):
    |     ^^^^^^^^^^^^^^^ D103
314 |     seed = config["seed"]
315 |     num_mols = len(dataset)
    |

src\stk_search\utils\oligomer_scaffold_split.py:315:5: F841 Local variable `num_mols` is assigned to but never used
    |
313 | def load_dataframes(dataset, config):
314 |     seed = config["seed"]
315 |     num_mols = len(dataset)
    |     ^^^^^^^^ F841
316 |     np.random.seed(seed)
    |
    = help: Remove assignment to unused variable `num_mols`

src\stk_search\utils\oligomer_scaffold_split.py:316:5: NPY002 Replace legacy `np.random.seed` call with `np.random.Generator`
    |
314 |     seed = config["seed"]
315 |     num_mols = len(dataset)
316 |     np.random.seed(seed)
    |     ^^^^^^^^^^^^^^ NPY002
317 | 
318 |     df_path = Path(
    |

src\stk_search\utils\oligomer_scaffold_split.py:334:5: D103 Missing docstring in public function
    |
334 | def check_data_exists(df_total, dataset, config):
    |     ^^^^^^^^^^^^^^^^^ D103
335 |     # check if df_total['2d_tani_pca_1'] and df_total['2d_tani_pca_2'] exist, if not, calculate them
336 |     if (
    |

src\stk_search\utils\oligomer_scaffold_split.py:340:9: T201 `print` found
    |
338 |         and "2d_tani_pca_2" in df_total.columns
339 |     ):
340 |         print("Dataset file found in df_total")
    |         ^^^^^ T201
341 | 
342 |     else:
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:347:5: D103 Missing docstring in public function
    |
347 | def calculate_morgan_fingerprints(mols,radius=2,nBits=1024):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
348 |     morgan_fps = [
349 |         AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=nBits)
    |

src\stk_search\utils\oligomer_scaffold_split.py:347:49: N803 Argument name `nBits` should be lowercase
    |
347 | def calculate_morgan_fingerprints(mols,radius=2,nBits=1024):
    |                                                 ^^^^^ N803
348 |     morgan_fps = [
349 |         AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=nBits)
    |

src\stk_search\utils\oligomer_scaffold_split.py:352:12: RET504 Unnecessary assignment to `morgan_fps` before `return` statement
    |
350 |         for mol in mols
351 |     ]
352 |     return morgan_fps
    |            ^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\oligomer_scaffold_split.py:355:5: D103 Missing docstring in public function
    |
355 | def calculate_tanimoto_similarity(fp1, fp2):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
356 |     return DataStructs.TanimotoSimilarity(fp1, fp2)
    |

src\stk_search\utils\oligomer_scaffold_split.py:359:5: D103 Missing docstring in public function
    |
359 | def generate_repr(df_total, df_precursors, frag_properties, idx=0):
    |     ^^^^^^^^^^^^^ D103
360 |     init_rpr = []
361 |     frag_properties = frag_properties.union(["InChIKey"])
    |

src\stk_search\utils\oligomer_scaffold_split.py:364:14: S307 Use of possibly insecure function; consider using `ast.literal_eval`
    |
362 |     if "InChIKey_0" not in df_total.columns:
363 |         elements_curr = [
364 |             [eval(df_total["BB"][x])[i]["InChIKey"] for i in range(6)] for x in idx
    |              ^^^^^^^^^^^^^^^^^^^^^^^ S307
365 |         ]
366 |         elements_curr = pd.DataFrame(
    |

src\stk_search\utils\oligomer_scaffold_split.py:375:19: PD015 Use `.merge` method instead of `pd.merge` function. They have equivalent functionality.
    |
373 |     for i in range(num_frag):
374 |         elements_curr["InChIKey"] = elements_curr[f"InChIKey_{i}"].astype(str)
375 |         df_eval = pd.merge(
    |                   ^^^^^^^^ PD015
376 |             elements_curr,
377 |             df_precursors[frag_properties],
    |

src\stk_search\utils\oligomer_scaffold_split.py:383:24: PD011 Use `.to_numpy()` instead of `.values`
    |
381 |         )
382 |         if len(init_rpr) == 0:
383 |             init_rpr = df_eval[df_eval.columns[num_frag + 1 :]].values
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
384 |         else:
385 |             init_rpr = np.concatenate(
    |

src\stk_search\utils\oligomer_scaffold_split.py:386:28: PD011 Use `.to_numpy()` instead of `.values`
    |
384 |         else:
385 |             init_rpr = np.concatenate(
386 |                 [init_rpr, df_eval[df_eval.columns[num_frag + 1 :]].values],
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
387 |                 axis=1,
388 |             )
    |

src\stk_search\utils\oligomer_scaffold_split.py:389:5: T201 `print` found
    |
387 |                 axis=1,
388 |             )
389 |     print(init_rpr.shape)
    |     ^^^^^ T201
390 |     X_explored_BO = torch.tensor(
391 |         np.array(init_rpr.astype(float)), dtype=torch.float32
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:390:5: N806 Variable `X_explored_BO` in function should be lowercase
    |
388 |             )
389 |     print(init_rpr.shape)
390 |     X_explored_BO = torch.tensor(
    |     ^^^^^^^^^^^^^ N806
391 |         np.array(init_rpr.astype(float)), dtype=torch.float32
392 |     )
    |

src\stk_search\utils\oligomer_scaffold_split.py:393:5: T201 `print` found
    |
391 |         np.array(init_rpr.astype(float)), dtype=torch.float32
392 |     )
393 |     print(X_explored_BO)
    |     ^^^^^ T201
394 | 
395 |     return X_explored_BO
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:398:5: N802 Function name `generate_2d_PCA` should be lowercase
    |
398 | def generate_2d_PCA(df, df_precursors):
    |     ^^^^^^^^^^^^^^^ N802
399 |     """Generate 2D PCA scores for the dataset and append them to df_total.
400 |     """
    |

src\stk_search\utils\oligomer_scaffold_split.py:399:5: D200 One-line docstring should fit on one line
    |
398 |   def generate_2d_PCA(df, df_precursors):
399 |       """Generate 2D PCA scores for the dataset and append them to df_total.
    |  _____^
400 | |     """
    | |_______^ D200
401 |       #df_total, df_precursors = load_dataframes(dataset, config)
402 |       df_total = df.copy()
    |
    = help: Reformat to one line

src\stk_search\utils\oligomer_scaffold_split.py:401:5: ERA001 Found commented-out code
    |
399 |     """Generate 2D PCA scores for the dataset and append them to df_total.
400 |     """
401 |     #df_total, df_precursors = load_dataframes(dataset, config)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
402 |     df_total = df.copy()
403 |     X_frag_mol = df_precursors["mol_opt"].values
    |
    = help: Remove commented-out code

src\stk_search\utils\oligomer_scaffold_split.py:403:5: N806 Variable `X_frag_mol` in function should be lowercase
    |
401 |     #df_total, df_precursors = load_dataframes(dataset, config)
402 |     df_total = df.copy()
403 |     X_frag_mol = df_precursors["mol_opt"].values
    |     ^^^^^^^^^^ N806
404 | 
405 |     print("Dataset file not found in df_total. Generating...")
    |

src\stk_search\utils\oligomer_scaffold_split.py:403:18: PD011 Use `.to_numpy()` instead of `.values`
    |
401 |     #df_total, df_precursors = load_dataframes(dataset, config)
402 |     df_total = df.copy()
403 |     X_frag_mol = df_precursors["mol_opt"].values
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
404 | 
405 |     print("Dataset file not found in df_total. Generating...")
    |

src\stk_search\utils\oligomer_scaffold_split.py:405:5: T201 `print` found
    |
403 |     X_frag_mol = df_precursors["mol_opt"].values
404 | 
405 |     print("Dataset file not found in df_total. Generating...")
    |     ^^^^^ T201
406 |     morgan_fps = calculate_morgan_fingerprints(X_frag_mol)
407 |     tanimoto_sim = np.zeros((len(X_frag_mol), len(X_frag_mol)))
    |
    = help: Remove `print`

src\stk_search\utils\oligomer_scaffold_split.py:440:29: PD011 Use `.to_numpy()` instead of `.values`
    |
438 |     pca2 = PCA(n_components=2)
439 |     # Perform PCA on the first 42 columns of the dataframe
440 |     oligomer_pca_scores_2 = df_pca_scores[df_pca_scores.columns[:42]].values
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
441 |     oligomer_pca_scores_2_final = pca2.fit_transform(oligomer_pca_scores_2)
    |

src\stk_search\utils\oligomer_scaffold_split.py:455:5: ERA001 Found commented-out code
    |
453 |     )
454 | 
455 |     # df_total.to_csv(df_path, index=False)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
456 |     # df_precursors.to_csv(df_precursors_path, index=False)
    |
    = help: Remove commented-out code

src\stk_search\utils\oligomer_scaffold_split.py:456:5: ERA001 Found commented-out code
    |
455 |     # df_total.to_csv(df_path, index=False)
456 |     # df_precursors.to_csv(df_precursors_path, index=False)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
457 | 
458 |     return df_total, df_precursors
    |
    = help: Remove commented-out code

src\stk_search\utils\plot_results_all.py:1:1: INP001 File `src\stk_search\utils\plot_results_all.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\plot_results_all.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\plot_results_all.py:10:5: PLR0913 Too many arguments in function definition (10 > 5)
   |
10 | def plot_metric(
   |     ^^^^^^^^^^^ PLR0913
11 |     df_plot,
12 |     plot_function_list,
   |

src\stk_search\utils\plot_results_all.py:10:5: D103 Missing docstring in public function
   |
10 | def plot_metric(
   |     ^^^^^^^^^^^ D103
11 |     df_plot,
12 |     plot_function_list,
   |

src\stk_search\utils\plot_results_all.py:14:5: ARG001 Unused function argument: `df_list_dict`
   |
12 |     plot_function_list,
13 |     results_dict,
14 |     df_list_dict,
   |     ^^^^^^^^^^^^ ARG001
15 |     nb_iterations=300,
16 |     target_name="target",
   |

src\stk_search\utils\plot_results_all.py:32:5: T201 `print` found
   |
31 |     keys = df_plot["key"]
32 |     print(" keys :", keys)
   |     ^^^^^ T201
33 |     metric_dict_res = {}
34 |     for key in keys.values:
   |
   = help: Remove `print`

src\stk_search\utils\plot_results_all.py:34:16: PD011 Use `.to_numpy()` instead of `.values`
   |
32 |     print(" keys :", keys)
33 |     metric_dict_res = {}
34 |     for key in keys.values:
   |                ^^^^^^^^^^^ PD011
35 |         res = results_dict[key][:num_results_min]
36 |         color = df_plot[df_plot["key"] == key]["color"].iloc[0]
   |

src\stk_search\utils\plot_results_all.py:59:5: ERA001 Found commented-out code
   |
57 |             ax.axvspan(0, nb_initialisation, alpha=0.1, color="grey")
58 |         metric_dict_res[key] = metric_dict
59 |     # ax.set_ylabel("Max Fitness")
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
60 |     # ax.set_ylim(-6, 0)
   |
   = help: Remove commented-out code

src\stk_search\utils\plot_results_all.py:60:5: ERA001 Found commented-out code
   |
58 |         metric_dict_res[key] = metric_dict
59 |     # ax.set_ylabel("Max Fitness")
60 |     # ax.set_ylim(-6, 0)
   |     ^^^^^^^^^^^^^^^^^^^^ ERA001
61 | 
62 |     axes[0].legend(
   |
   = help: Remove commented-out code

src\stk_search\utils\plot_results_all.py:68:5: D103 Missing docstring in public function
   |
68 | def plot_metric_mae(metric_dict_res, metric, df_list_dict):
   |     ^^^^^^^^^^^^^^^ D103
69 |     mae_list, metric_list = [], []
70 |     r2_list = []
   |

src\stk_search\utils\plot_results_all.py:71:9: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
69 |     mae_list, metric_list = [], []
70 |     r2_list = []
71 |     for key in metric_dict_res.keys():
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
72 |         try:
73 |             print(key)
   |
   = help: Remove `.keys()`

src\stk_search\utils\plot_results_all.py:73:13: T201 `print` found
   |
71 |     for key in metric_dict_res.keys():
72 |         try:
73 |             print(key)
   |             ^^^^^ T201
74 |             print(df_list_dict[key]["config_dir"].iloc[0])
75 |             path = (
   |
   = help: Remove `print`

src\stk_search\utils\plot_results_all.py:74:13: T201 `print` found
   |
72 |         try:
73 |             print(key)
74 |             print(df_list_dict[key]["config_dir"].iloc[0])
   |             ^^^^^ T201
75 |             path = (
76 |                 df_list_dict[key]["config_dir"]
   |
   = help: Remove `print`

src\stk_search\utils\plot_results_all.py:83:31: S307 Use of possibly insecure function; consider using `ast.literal_eval`
   |
81 |             df_results["predicted_target_learned_embedding"] = df_results[
82 |                 "predicted_target_learned_embedding"
83 |             ].apply(lambda x: eval(x)[0])
   |                               ^^^^^^^ S307
84 |             mae = mean_absolute_error(
85 |                 df_results["target"].values,
   |

src\stk_search\utils\plot_results_all.py:96:9: E722 Do not use bare `except`
   |
94 |                 )
95 |             )
96 |         except:
   |         ^^^^^^ E722
97 |             print("error")
98 |     fig, ax = plt.subplots()
   |

src\stk_search\utils\plot_results_all.py:96:9: PERF203 `try`-`except` within a loop incurs performance overhead
   |
94 |                   )
95 |               )
96 |           except:
   |  _________^
97 | |             print("error")
   | |__________________________^ PERF203
98 |       fig, ax = plt.subplots()
99 |       key = "evolution_algorithm_total"
   |

src\stk_search\utils\plot_results_all.py:97:13: T201 `print` found
   |
95 |             )
96 |         except:
97 |             print("error")
   |             ^^^^^ T201
98 |     fig, ax = plt.subplots()
99 |     key = "evolution_algorithm_total"
   |
   = help: Remove `print`

src\stk_search\utils\plot_results_all.py:107:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
107 | def add_similarity_plots(axes, df_plot, df_mol_dict, results_dict,
    |     ^^^^^^^^^^^^^^^^^^^^ PLR0913
108 |                          nb_iterations=250,  nb_initialisation=50):
109 |     keys = df_plot["key"].values
    |

src\stk_search\utils\plot_results_all.py:107:5: D103 Missing docstring in public function
    |
107 | def add_similarity_plots(axes, df_plot, df_mol_dict, results_dict,
    |     ^^^^^^^^^^^^^^^^^^^^ D103
108 |                          nb_iterations=250,  nb_initialisation=50):
109 |     keys = df_plot["key"].values
    |

src\stk_search\utils\plot_results_all.py:109:12: PD011 Use `.to_numpy()` instead of `.values`
    |
107 | def add_similarity_plots(axes, df_plot, df_mol_dict, results_dict,
108 |                          nb_iterations=250,  nb_initialisation=50):
109 |     keys = df_plot["key"].values
    |            ^^^^^^^^^^^^^^^^^^^^^ PD011
110 |     ax = axes.flatten()
111 |     print("len of mol_dataset", len(df_mol_dict))
    |

src\stk_search\utils\plot_results_all.py:111:5: T201 `print` found
    |
109 |     keys = df_plot["key"].values
110 |     ax = axes.flatten()
111 |     print("len of mol_dataset", len(df_mol_dict))
    |     ^^^^^ T201
112 |     for key in keys:
113 |         res = results_dict[key]
    |
    = help: Remove `print`

src\stk_search\utils\plot_results_all.py:138:5: ERA001 Found commented-out code
    |
136 |         )
137 |     return df_mol_dict
138 |     # ax[0].legend(loc='upper left', bbox_to_anchor=(-0.1, 1.3), ncol=3)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
    |
    = help: Remove commented-out code

src\stk_search\utils\plot_results_all.py:141:5: D103 Missing docstring in public function
    |
141 | def save_mol_dict(df_mol_dict):
    |     ^^^^^^^^^^^^^ D103
142 |     df = pd.DataFrame(df_mol_dict, index=[0]).T
143 |     df.columns = ["mol"]
    |

src\stk_search\utils\plot_results_all.py:142:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
141 | def save_mol_dict(df_mol_dict):
142 |     df = pd.DataFrame(df_mol_dict, index=[0]).T
    |     ^^ PD901
143 |     df.columns = ["mol"]
144 |     df["InChIKey"] = df.index
    |

src\stk_search\utils\plot_results_all.py:151:5: D103 Missing docstring in public function
    |
151 | def load_mol_dict():
    |     ^^^^^^^^^^^^^ D103
152 |     df = pd.read_pickle(
153 |         "data/output/search_experiment/mol_dict.pkl"
    |

src\stk_search\utils\plot_results_all.py:152:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
151 | def load_mol_dict():
152 |     df = pd.read_pickle(
    |     ^^ PD901
153 |         "data/output/search_experiment/mol_dict.pkl"
154 |     )
    |

src\stk_search\utils\plot_results_all.py:152:10: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    |
151 |   def load_mol_dict():
152 |       df = pd.read_pickle(
    |  __________^
153 | |         "data/output/search_experiment/mol_dict.pkl"
154 | |     )
    | |_____^ S301
155 |       df_mol_dict = df.T.loc["mol"].to_dict()
156 |       return df_mol_dict
    |

src\stk_search\utils\plot_results_all.py:156:12: RET504 Unnecessary assignment to `df_mol_dict` before `return` statement
    |
154 |     )
155 |     df_mol_dict = df.T.loc["mol"].to_dict()
156 |     return df_mol_dict
    |            ^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\plotter.py:1:1: INP001 File `src\stk_search\utils\plotter.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\plotter.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\plotter.py:31:5: D103 Missing docstring in public function
   |
31 | def calltracker(func):
   |     ^^^^^^^^^^^ D103
32 |     @functools.wraps(func)
33 |     def wrapper(*args):
   |

src\stk_search\utils\plotter.py:33:9: ANN202 Missing return type annotation for private function `wrapper`
   |
31 | def calltracker(func):
32 |     @functools.wraps(func)
33 |     def wrapper(*args):
   |         ^^^^^^^ ANN202
34 |         wrapper.has_been_called = True
35 |         return func(*args)
   |
   = help: Add return type annotation

src\stk_search\utils\plotter.py:33:17: ANN002 Missing type annotation for `*args`
   |
31 | def calltracker(func):
32 |     @functools.wraps(func)
33 |     def wrapper(*args):
   |                 ^^^^^ ANN002
34 |         wrapper.has_been_called = True
35 |         return func(*args)
   |

src\stk_search\utils\plotter.py:40:5: D205 1 blank line required between summary line and description
   |
39 |   class Plotter:
40 |       """A class used to plot the ECFP fingerprints of the molecules used to
   |  _____^
41 | |     instantiate it.
42 | |     
43 | |     :param __sim_type: similarity type structural or tailored
44 | |     :param __target_type: target type R (regression) or C (classificatino)
45 | |     :param __target: list containing the target values. Is empty if a target does not exist
46 | |     :param __mols: list of valid molecules that can be plotted
47 | |     :param __df_descriptors: datatframe containing the descriptors representation of each molecule
48 | |     :param __df_2_components: dataframe containing the two-dimenstional representation of each molecule
49 | |     :param __plot_title: title of the plot reflecting the dimensionality reduction algorithm used
50 | |     :param __data: list of the scaled descriptors to which the dimensionality reduction algorithm is applied
51 | |     :param pca_fit: PCA object created when the corresponding algorithm is applied to the data
52 | |     :param tsne_fit: t-SNE object created when the corresponding algorithm is applied to the data
53 | |     :param umap_fit: UMAP object created when the corresponding algorithm is applied to the data
54 | |     :param df_plot_xy: dataframe containing the coordinates that have been plotted
55 | |     :type __sim_type: string
56 | |     :type __target_type: string
57 | |     :type __target: list
58 | |     :type __mols: rdkit.Chem.rdchem.Mol
59 | |     :type __df_descriptors: Dataframe
60 | |     :type __df_2_components: Dataframe
61 | |     :type __plot_title: string
62 | |     :type __data: list
63 | |     :type pca_fit: sklearn.decomposition.TSNE
64 | |     :type tsne_fit: sklearn.manifold.TSNE
65 | |     :type umap_fit: umap.umap_.UMAP
66 | |     :type df_plot_xy: Dataframe
67 | |     """
   | |_______^ D205
68 |   
69 |       _static_plots = {"scatter", "hex", "kde"}
   |
   = help: Insert single blank line

src\stk_search\utils\plotter.py:42:1: W293 Blank line contains whitespace
   |
40 |     """A class used to plot the ECFP fingerprints of the molecules used to
41 |     instantiate it.
42 |     
   | ^^^^ W293
43 |     :param __sim_type: similarity type structural or tailored
44 |     :param __target_type: target type R (regression) or C (classificatino)
   |
   = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:69:21: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
67 |     """
68 | 
69 |     _static_plots = {"scatter", "hex", "kde"}
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
70 | 
71 |     _interactive_plots = {"scatter", "hex"}
   |

src\stk_search\utils\plotter.py:71:26: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
69 |     _static_plots = {"scatter", "hex", "kde"}
70 | 
71 |     _interactive_plots = {"scatter", "hex"}
   |                          ^^^^^^^^^^^^^^^^^^ RUF012
72 | 
73 |     _sim_types = {"tailored", "structural"}
   |

src\stk_search\utils\plotter.py:73:18: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
71 |     _interactive_plots = {"scatter", "hex"}
72 | 
73 |     _sim_types = {"tailored", "structural"}
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
74 | 
75 |     _target_types = {"R", "C"}
   |

src\stk_search\utils\plotter.py:75:21: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
73 |     _sim_types = {"tailored", "structural"}
74 | 
75 |     _target_types = {"R", "C"}
   |                     ^^^^^^^^^^ RUF012
76 | 
77 |     def __init__(self, encoding_list, target, target_type, sim_type, get_desc, get_fingerprints):
   |

src\stk_search\utils\plotter.py:77:9: C901 `__init__` is too complex (16 > 10)
   |
75 |     _target_types = {"R", "C"}
76 | 
77 |     def __init__(self, encoding_list, target, target_type, sim_type, get_desc, get_fingerprints):
   |         ^^^^^^^^ C901
78 | 
79 |         # Error handeling sym_type
   |

src\stk_search\utils\plotter.py:77:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
75 |     _target_types = {"R", "C"}
76 | 
77 |     def __init__(self, encoding_list, target, target_type, sim_type, get_desc, get_fingerprints):
   |         ^^^^^^^^ PLR0913
78 | 
79 |         # Error handeling sym_type
   |

src\stk_search\utils\plotter.py:77:9: PLR0912 Too many branches (20 > 12)
   |
75 |     _target_types = {"R", "C"}
76 | 
77 |     def __init__(self, encoding_list, target, target_type, sim_type, get_desc, get_fingerprints):
   |         ^^^^^^^^ PLR0912
78 | 
79 |         # Error handeling sym_type
   |

src\stk_search\utils\plotter.py:77:9: ANN204 Missing return type annotation for special method `__init__`
   |
75 |     _target_types = {"R", "C"}
76 | 
77 |     def __init__(self, encoding_list, target, target_type, sim_type, get_desc, get_fingerprints):
   |         ^^^^^^^^ ANN204
78 | 
79 |         # Error handeling sym_type
   |
   = help: Add return type annotation: `None`

src\stk_search\utils\plotter.py:77:9: D107 Missing docstring in `__init__`
   |
75 |     _target_types = {"R", "C"}
76 | 
77 |     def __init__(self, encoding_list, target, target_type, sim_type, get_desc, get_fingerprints):
   |         ^^^^^^^^ D107
78 | 
79 |         # Error handeling sym_type
   |

src\stk_search\utils\plotter.py:83:17: T201 `print` found
   |
81 |             if len(target) > 0:
82 |                 self.__sim_type = "tailored"
83 |                 print("sim_type indicates the similarity type by which the plots are constructed.\n" +
   |                 ^^^^^ T201
84 |                       "The supported similarity types are structural and tailored.\n" +
85 |                       "Because a target list has been provided 'tailored' as been selected as sym_type.")
   |
   = help: Remove `print`

src\stk_search\utils\plotter.py:83:23: ISC003 Explicitly concatenated string should be implicitly concatenated
   |
81 |               if len(target) > 0:
82 |                   self.__sim_type = "tailored"
83 |                   print("sim_type indicates the similarity type by which the plots are constructed.\n" +
   |  _______________________^
84 | |                       "The supported similarity types are structural and tailored.\n" +
   | |_____________________________________________________________________________________^ ISC003
85 |                         "Because a target list has been provided 'tailored' as been selected as sym_type.")
86 |               else:
   |

src\stk_search\utils\plotter.py:88:17: T201 `print` found
   |
86 |             else:
87 |                 self.__sim_type = "structural"
88 |                 print("sim_type indicates the similarity type by which the plots are constructed.\n" +
   |                 ^^^^^ T201
89 |                       "The supported similarity types are structural and tailored.\n" +
90 |                       "Because no target list has been provided 'structural' as been selected as sym_type.")
   |
   = help: Remove `print`

src\stk_search\utils\plotter.py:88:23: ISC003 Explicitly concatenated string should be implicitly concatenated
   |
86 |               else:
87 |                   self.__sim_type = "structural"
88 |                   print("sim_type indicates the similarity type by which the plots are constructed.\n" +
   |  _______________________^
89 | |                       "The supported similarity types are structural and tailored.\n" +
   | |_____________________________________________________________________________________^ ISC003
90 |                         "Because no target list has been provided 'structural' as been selected as sym_type.")
91 |           else:
   |

src\stk_search\utils\plotter.py:95:19: TRY002 Create your own exception
   |
94 |         if self.__sim_type != "structural" and len(target) == 0:
95 |             raise Exception("Target values missing")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY002
96 | 
97 |         # Error handeling target_type
   |

src\stk_search\utils\plotter.py:95:19: TRY003 Avoid specifying long messages outside the exception class
   |
94 |         if self.__sim_type != "structural" and len(target) == 0:
95 |             raise Exception("Target values missing")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
96 | 
97 |         # Error handeling target_type
   |

src\stk_search\utils\plotter.py:95:29: EM101 Exception must not use a string literal, assign to variable first
   |
94 |         if self.__sim_type != "structural" and len(target) == 0:
95 |             raise Exception("Target values missing")
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ EM101
96 | 
97 |         # Error handeling target_type
   |
   = help: Assign to variable; remove string literal

src\stk_search\utils\plotter.py:98:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
 97 |           # Error handeling target_type
 98 |           if len(target) > 0:
    |  _________^
 99 | |             if len(target) != len(encoding_list):
    | |_________________________________________________^ SIM102
100 |                   raise Exception("If target is provided its length must match the instances of molecules")
    |
    = help: Combine `if` statements using `and`

src\stk_search\utils\plotter.py:100:23: TRY002 Create your own exception
    |
 98 |         if len(target) > 0:
 99 |             if len(target) != len(encoding_list):
100 |                 raise Exception("If target is provided its length must match the instances of molecules")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY002
101 | 
102 |         if len(target) > 0:
    |

src\stk_search\utils\plotter.py:100:23: TRY003 Avoid specifying long messages outside the exception class
    |
 98 |         if len(target) > 0:
 99 |             if len(target) != len(encoding_list):
100 |                 raise Exception("If target is provided its length must match the instances of molecules")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
101 | 
102 |         if len(target) > 0:
    |

src\stk_search\utils\plotter.py:100:33: EM101 Exception must not use a string literal, assign to variable first
    |
 98 |         if len(target) > 0:
 99 |             if len(target) != len(encoding_list):
100 |                 raise Exception("If target is provided its length must match the instances of molecules")
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
101 | 
102 |         if len(target) > 0:
    |
    = help: Assign to variable; remove string literal

src\stk_search\utils\plotter.py:104:101: PLR2004 Magic value used in comparison, consider replacing `0.05` with a constant variable
    |
102 |         if len(target) > 0:
103 |             df_target = pd.DataFrame(data=target)
104 |             unique_targets_ratio = 1.*df_target.iloc[:, 0].nunique()/df_target.iloc[:, 0].count() < 0.05
    |                                                                                                     ^^^^ PLR2004
105 |             numeric_target = is_numeric_dtype(df_target.dtypes[0])
106 |             if target_type == "R" and (unique_targets_ratio or not numeric_target):
    |

src\stk_search\utils\plotter.py:107:17: T201 `print` found
    |
105 |             numeric_target = is_numeric_dtype(df_target.dtypes[0])
106 |             if target_type == "R" and (unique_targets_ratio or not numeric_target):
107 |                 print("Input received is 'R' for target values that seem not continuous.")
    |                 ^^^^^ T201
108 |             if target_type not in self._target_types:
109 |                 if not unique_targets_ratio and numeric_target:
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:111:21: T201 `print` found
    |
109 |                 if not unique_targets_ratio and numeric_target:
110 |                     self.__target_type = "R"
111 |                     print("target_type indicates if the target is a continuous variable or a class label.\n"+
    |                     ^^^^^ T201
112 |                           "R stands for regression and C for classification. Input R as target type for continuous variables and C for class labels.\n"+
113 |                           "From analysis of the target, R has been selected for target_type.")
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:111:27: ISC003 Explicitly concatenated string should be implicitly concatenated
    |
109 |                   if not unique_targets_ratio and numeric_target:
110 |                       self.__target_type = "R"
111 |                       print("target_type indicates if the target is a continuous variable or a class label.\n"+
    |  ___________________________^
112 | |                           "R stands for regression and C for classification. Input R as target type for continuous variables and C for class labels.\n"+
    | |_______________________________________________________________________________________________________________________________________________________^ ISC003
113 |                             "From analysis of the target, R has been selected for target_type.")
114 |                   else:
    |

src\stk_search\utils\plotter.py:116:21: T201 `print` found
    |
114 |                 else:
115 |                     self.__target_type = "C"
116 |                     print("target_type indicates if the target is a continuous variable or a class label.\n"+
    |                     ^^^^^ T201
117 |                           "R stands for regression and C for classification. Input R as target type for continuous variables and C for class labels.\n"+
118 |                           "From analysis of the target, C has been selected for target_type.")
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:116:27: ISC003 Explicitly concatenated string should be implicitly concatenated
    |
114 |                   else:
115 |                       self.__target_type = "C"
116 |                       print("target_type indicates if the target is a continuous variable or a class label.\n"+
    |  ___________________________^
117 | |                           "R stands for regression and C for classification. Input R as target type for continuous variables and C for class labels.\n"+
    | |_______________________________________________________________________________________________________________________________________________________^ ISC003
118 |                             "From analysis of the target, C has been selected for target_type.")
119 |               else:
    |

src\stk_search\utils\plotter.py:126:16: PD101 Using `series.nunique()` for checking that a series is constant is inefficient
    |
124 |         if len(target) > 0 and self.__target_type == "C":
125 |             df_target = pd.DataFrame(data=target)
126 |             if df_target.iloc[:, 0].nunique() == 1:
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD101
127 |                 target = []
128 |                 self.__sim_type = "structural"
    |

src\stk_search\utils\plotter.py:129:17: T201 `print` found
    |
127 |                 target = []
128 |                 self.__sim_type = "structural"
129 |                 print("Only one class found in the targets")
    |                 ^^^^^ T201
130 | 
131 |         # Instantiate Plotter class
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:135:23: TRY002 Create your own exception
    |
133 |             self.__mols, df_descriptors, target = get_desc(encoding_list, target)
134 |             if df_descriptors.empty:
135 |                 raise Exception("Descriptors could not be computed for given molecules")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY002
136 |             self.__df_descriptors, self.__target = desc.select_descriptors_lasso(df_descriptors,target,kind=self.__target_type)
137 |         elif self.__sim_type == "structural":
    |

src\stk_search\utils\plotter.py:135:23: TRY003 Avoid specifying long messages outside the exception class
    |
133 |             self.__mols, df_descriptors, target = get_desc(encoding_list, target)
134 |             if df_descriptors.empty:
135 |                 raise Exception("Descriptors could not be computed for given molecules")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
136 |             self.__df_descriptors, self.__target = desc.select_descriptors_lasso(df_descriptors,target,kind=self.__target_type)
137 |         elif self.__sim_type == "structural":
    |

src\stk_search\utils\plotter.py:135:33: EM101 Exception must not use a string literal, assign to variable first
    |
133 |             self.__mols, df_descriptors, target = get_desc(encoding_list, target)
134 |             if df_descriptors.empty:
135 |                 raise Exception("Descriptors could not be computed for given molecules")
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
136 |             self.__df_descriptors, self.__target = desc.select_descriptors_lasso(df_descriptors,target,kind=self.__target_type)
137 |         elif self.__sim_type == "structural":
    |
    = help: Assign to variable; remove string literal

src\stk_search\utils\plotter.py:140:31: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
138 |             self.__mols, self.__df_descriptors, self.__target = get_fingerprints(encoding_list,target,2,2048)
139 | 
140 |         if len(self.__mols) < 2 or len(self.__df_descriptors.columns) < 2:
    |                               ^ PLR2004
141 |             raise Exception("Plotter object cannot be instantiated for given molecules")
    |

src\stk_search\utils\plotter.py:140:73: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
138 |             self.__mols, self.__df_descriptors, self.__target = get_fingerprints(encoding_list,target,2,2048)
139 | 
140 |         if len(self.__mols) < 2 or len(self.__df_descriptors.columns) < 2:
    |                                                                         ^ PLR2004
141 |             raise Exception("Plotter object cannot be instantiated for given molecules")
    |

src\stk_search\utils\plotter.py:141:19: TRY002 Create your own exception
    |
140 |         if len(self.__mols) < 2 or len(self.__df_descriptors.columns) < 2:
141 |             raise Exception("Plotter object cannot be instantiated for given molecules")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY002
142 | 
143 |         self.__df_2_components = None
    |

src\stk_search\utils\plotter.py:141:19: TRY003 Avoid specifying long messages outside the exception class
    |
140 |         if len(self.__mols) < 2 or len(self.__df_descriptors.columns) < 2:
141 |             raise Exception("Plotter object cannot be instantiated for given molecules")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
142 | 
143 |         self.__df_2_components = None
    |

src\stk_search\utils\plotter.py:141:29: EM101 Exception must not use a string literal, assign to variable first
    |
140 |         if len(self.__mols) < 2 or len(self.__df_descriptors.columns) < 2:
141 |             raise Exception("Plotter object cannot be instantiated for given molecules")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
142 | 
143 |         self.__df_2_components = None
    |
    = help: Assign to variable; remove string literal

src\stk_search\utils\plotter.py:148:9: ANN206 Missing return type annotation for classmethod `from_smiles`
    |
147 |     @classmethod
148 |     def from_smiles(cls, smiles_list, target=[], target_type=None, sim_type=None):
    |         ^^^^^^^^^^^ ANN206
149 |         """Class method to construct a Plotter object from a list of SMILES.
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:148:46: B006 Do not use mutable data structures for argument defaults
    |
147 |     @classmethod
148 |     def from_smiles(cls, smiles_list, target=[], target_type=None, sim_type=None):
    |                                              ^^ B006
149 |         """Class method to construct a Plotter object from a list of SMILES.
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\plotter.py:150:1: W293 Blank line contains whitespace
    |
148 |     def from_smiles(cls, smiles_list, target=[], target_type=None, sim_type=None):
149 |         """Class method to construct a Plotter object from a list of SMILES.
150 |         
    | ^^^^^^^^ W293
151 |         :param smile_list: List of the SMILES representation of the molecules to plot.       
152 |         :param target: target values       
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:151:87: W291 Trailing whitespace
    |
149 |         """Class method to construct a Plotter object from a list of SMILES.
150 |         
151 |         :param smile_list: List of the SMILES representation of the molecules to plot.       
    |                                                                                       ^^^^^^^ W291
152 |         :param target: target values       
153 |         :param target_type: target type R (regression) or C (classificatino)      
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:152:37: W291 Trailing whitespace
    |
151 |         :param smile_list: List of the SMILES representation of the molecules to plot.       
152 |         :param target: target values       
    |                                     ^^^^^^^ W291
153 |         :param target_type: target type R (regression) or C (classificatino)      
154 |         :param sim_type: similarity type structural or tailored     
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:153:77: W291 Trailing whitespace
    |
151 |         :param smile_list: List of the SMILES representation of the molecules to plot.       
152 |         :param target: target values       
153 |         :param target_type: target type R (regression) or C (classificatino)      
    |                                                                             ^^^^^^ W291
154 |         :param sim_type: similarity type structural or tailored     
155 |         :type smile_list: list
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:154:64: W291 Trailing whitespace
    |
152 |         :param target: target values       
153 |         :param target_type: target type R (regression) or C (classificatino)      
154 |         :param sim_type: similarity type structural or tailored     
    |                                                                ^^^^^ W291
155 |         :type smile_list: list
156 |         :type target: list
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:166:9: ANN206 Missing return type annotation for classmethod `from_inchi`
    |
165 |     @classmethod
166 |     def from_inchi(cls, inchi_list, target=[], target_type=None, sim_type=None):
    |         ^^^^^^^^^^ ANN206
167 |         """Class method to construct a Plotter object from a list of InChi.
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:166:44: B006 Do not use mutable data structures for argument defaults
    |
165 |     @classmethod
166 |     def from_inchi(cls, inchi_list, target=[], target_type=None, sim_type=None):
    |                                            ^^ B006
167 |         """Class method to construct a Plotter object from a list of InChi.
    |
    = help: Replace with `None`; initialize within function

src\stk_search\utils\plotter.py:168:1: W293 Blank line contains whitespace
    |
166 |     def from_inchi(cls, inchi_list, target=[], target_type=None, sim_type=None):
167 |         """Class method to construct a Plotter object from a list of InChi.
168 |         
    | ^^^^^^^^ W293
169 |         :param inchi_list: List of the InChi representation of the molecules to plot.
170 |         :type inchi_list: dict
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:175:64: W291 Trailing whitespace
    |
173 |         :param target_type: target type R (regression) or C (classificatino)
174 |         :type target_type: string
175 |         :param sim_type: similarity type structural or tailored 
    |                                                                ^ W291
176 |         :type sim_type: string
177 |         :returns: A Plotter object for the molecules given as input.
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:183:19: ANN003 Missing type annotation for `**kwargs`
    |
183 |     def pca(self, **kwargs):
    |                   ^^^^^^^^ ANN003
184 |         """Calculates the first 2 PCA components of the molecular descriptors.
    |

src\stk_search\utils\plotter.py:184:9: D401 First line of docstring should be in imperative mood: "Calculates the first 2 PCA components of the molecular descriptors."
    |
183 |       def pca(self, **kwargs):
184 |           """Calculates the first 2 PCA components of the molecular descriptors.
    |  _________^
185 | |         
186 | |         :param kwargs: Other keyword arguments are passed down to sklearn.decomposition.PCA
187 | |         :type kwargs: key, value mappings
188 | |         :returns: The dataframe containing the PCA components.
189 | |         :rtype: Dataframe
190 | |         """
    | |___________^ D401
191 |           self.__data = self.__data_scaler()
    |

src\stk_search\utils\plotter.py:185:1: W293 Blank line contains whitespace
    |
183 |     def pca(self, **kwargs):
184 |         """Calculates the first 2 PCA components of the molecular descriptors.
185 |         
    | ^^^^^^^^ W293
186 |         :param kwargs: Other keyword arguments are passed down to sklearn.decomposition.PCA
187 |         :type kwargs: key, value mappings
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:213:37: FBT002 Boolean default positional argument in function definition
    |
213 |     def tsne(self, perplexity=None, pca=False, random_state=None, **kwargs):
    |                                     ^^^ FBT002
214 |         """Calculates the first 2 t-SNE components of the molecular descriptors.
    |

src\stk_search\utils\plotter.py:213:67: ANN003 Missing type annotation for `**kwargs`
    |
213 |     def tsne(self, perplexity=None, pca=False, random_state=None, **kwargs):
    |                                                                   ^^^^^^^^ ANN003
214 |         """Calculates the first 2 t-SNE components of the molecular descriptors.
    |

src\stk_search\utils\plotter.py:214:9: D401 First line of docstring should be in imperative mood: "Calculates the first 2 t-SNE components of the molecular descriptors."
    |
213 |       def tsne(self, perplexity=None, pca=False, random_state=None, **kwargs):
214 |           """Calculates the first 2 t-SNE components of the molecular descriptors.
    |  _________^
215 | |         
216 | |         :param perplexity: perplexity value for the t-SNE model  
217 | |         :param pca: indicates if the features must be preprocessed by PCA
218 | |         :param random_state: random seed that can be passed as a parameter for reproducing the same results     
219 | |         :param kwargs: Other keyword arguments are passed down to sklearn.manifold.TSNE
220 | |         :type perplexity: int
221 | |         :type pca: boolean
222 | |         :type random_state: int
223 | |         :type kwargs: key, value mappings
224 | |         :returns: The dataframe containing the t-SNE components.
225 | |         :rtype: Dataframe
226 | |         """
    | |___________^ D401
227 |           self.__data = self.__data_scaler()
228 |           self.__plot_title = "t-SNE plot"
    |

src\stk_search\utils\plotter.py:215:1: W293 Blank line contains whitespace
    |
213 |     def tsne(self, perplexity=None, pca=False, random_state=None, **kwargs):
214 |         """Calculates the first 2 t-SNE components of the molecular descriptors.
215 |         
    | ^^^^^^^^ W293
216 |         :param perplexity: perplexity value for the t-SNE model  
217 |         :param pca: indicates if the features must be preprocessed by PCA
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:216:64: W291 Trailing whitespace
    |
214 |         """Calculates the first 2 t-SNE components of the molecular descriptors.
215 |         
216 |         :param perplexity: perplexity value for the t-SNE model  
    |                                                                ^^ W291
217 |         :param pca: indicates if the features must be preprocessed by PCA
218 |         :param random_state: random seed that can be passed as a parameter for reproducing the same results     
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:218:108: W291 Trailing whitespace
    |
216 |         :param perplexity: perplexity value for the t-SNE model  
217 |         :param pca: indicates if the features must be preprocessed by PCA
218 |         :param random_state: random seed that can be passed as a parameter for reproducing the same results     
    |                                                                                                            ^^^^^ W291
219 |         :param kwargs: Other keyword arguments are passed down to sklearn.manifold.TSNE
220 |         :type perplexity: int
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:247:25: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
245 |             else:
246 |                 perplexity = parameters.perplexity_tailored(len(self.__data))
247 |         elif perplexity<5 or perplexity>50:
    |                         ^ PLR2004
248 |             print("Robust results are obtained for values of perplexity between 5 and 50")
    |

src\stk_search\utils\plotter.py:247:41: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
    |
245 |             else:
246 |                 perplexity = parameters.perplexity_tailored(len(self.__data))
247 |         elif perplexity<5 or perplexity>50:
    |                                         ^^ PLR2004
248 |             print("Robust results are obtained for values of perplexity between 5 and 50")
    |

src\stk_search\utils\plotter.py:248:13: T201 `print` found
    |
246 |                 perplexity = parameters.perplexity_tailored(len(self.__data))
247 |         elif perplexity<5 or perplexity>50:
248 |             print("Robust results are obtained for values of perplexity between 5 and 50")
    |             ^^^^^ T201
249 | 
250 |         # Embed the data in two dimensions
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:263:9: PLR0912 Too many branches (14 > 12)
    |
263 |     def umap(self, n_neighbors=None, min_dist=None, pca=False, random_state=None, **kwargs):
    |         ^^^^ PLR0912
264 |         """Calculates the first 2 UMAP components of the molecular descriptors.
    |

src\stk_search\utils\plotter.py:263:53: FBT002 Boolean default positional argument in function definition
    |
263 |     def umap(self, n_neighbors=None, min_dist=None, pca=False, random_state=None, **kwargs):
    |                                                     ^^^ FBT002
264 |         """Calculates the first 2 UMAP components of the molecular descriptors.
    |

src\stk_search\utils\plotter.py:263:83: ANN003 Missing type annotation for `**kwargs`
    |
263 |     def umap(self, n_neighbors=None, min_dist=None, pca=False, random_state=None, **kwargs):
    |                                                                                   ^^^^^^^^ ANN003
264 |         """Calculates the first 2 UMAP components of the molecular descriptors.
    |

src\stk_search\utils\plotter.py:264:9: D401 First line of docstring should be in imperative mood: "Calculates the first 2 UMAP components of the molecular descriptors."
    |
263 |       def umap(self, n_neighbors=None, min_dist=None, pca=False, random_state=None, **kwargs):
264 |           """Calculates the first 2 UMAP components of the molecular descriptors.
    |  _________^
265 | |         
266 | |         :param num_neighbors: Number of neighbours used in the UMAP madel.
267 | |         :param min_dist: Value between 0.0 and 0.99, indicates how close to each other the points can be displayed.
268 | |         :param random_state: random seed that can be passed as a parameter for reproducing the same results
269 | |         :param kwargs: Other keyword arguments are passed down to umap.UMAP
270 | |         :type num_neighbors: int
271 | |         :type min_dist: float
272 | |         :type random_state: int
273 | |         :type kwargs: key, value mappings
274 | |         :returns: The dataframe containing the UMAP components.
275 | |         :rtype: Dataframe
276 | |         """
    | |___________^ D401
277 |           self.__data = self.__data_scaler()
    |

src\stk_search\utils\plotter.py:265:1: W293 Blank line contains whitespace
    |
263 |     def umap(self, n_neighbors=None, min_dist=None, pca=False, random_state=None, **kwargs):
264 |         """Calculates the first 2 UMAP components of the molecular descriptors.
265 |         
    | ^^^^^^^^ W293
266 |         :param num_neighbors: Number of neighbours used in the UMAP madel.
267 |         :param min_dist: Value between 0.0 and 0.99, indicates how close to each other the points can be displayed.
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:296:61: PLR2004 Magic value used in comparison, consider replacing `0.99` with a constant variable
    |
294 |                 n_neighbors = parameters.n_neighbors_tailored(len(self.__data))
295 | 
296 |         if min_dist is None or min_dist < 0.0 or min_dist > 0.99:
    |                                                             ^^^^ PLR2004
297 |             if min_dist is not None and (min_dist < 0.0 or min_dist > 0.99):
298 |                 print("min_dist must range from 0.0 up to 0.99. Default used.")
    |

src\stk_search\utils\plotter.py:297:71: PLR2004 Magic value used in comparison, consider replacing `0.99` with a constant variable
    |
296 |         if min_dist is None or min_dist < 0.0 or min_dist > 0.99:
297 |             if min_dist is not None and (min_dist < 0.0 or min_dist > 0.99):
    |                                                                       ^^^^ PLR2004
298 |                 print("min_dist must range from 0.0 up to 0.99. Default used.")
299 |             if self.__sim_type == "structural":
    |

src\stk_search\utils\plotter.py:298:17: T201 `print` found
    |
296 |         if min_dist is None or min_dist < 0.0 or min_dist > 0.99:
297 |             if min_dist is not None and (min_dist < 0.0 or min_dist > 0.99):
298 |                 print("min_dist must range from 0.0 up to 0.99. Default used.")
    |                 ^^^^^ T201
299 |             if self.__sim_type == "structural":
300 |                 if pca:
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:320:37: ANN003 Missing type annotation for `**kwargs`
    |
320 |     def cluster(self, n_clusters=5, **kwargs):
    |                                     ^^^^^^^^ ANN003
321 |         """Computes the clusters presents in the embedded chemical space.
    |

src\stk_search\utils\plotter.py:321:9: D401 First line of docstring should be in imperative mood: "Computes the clusters presents in the embedded chemical space."
    |
320 |       def cluster(self, n_clusters=5, **kwargs):
321 |           """Computes the clusters presents in the embedded chemical space.
    |  _________^
322 | |         
323 | |         :param n_clusters: Number of clusters that will be computed  
324 | |         :param kwargs: Other keyword arguments are passed down to sklearn.cluster.KMeans
325 | |         :type n_clusters: int
326 | |         :type kwargs: key, value mappings
327 | |         :returns: The dataframe containing the 2D embedding.
328 | |         :rtype: Dataframe
329 | |         """
    | |___________^ D401
330 |           if self.__df_2_components is None:
331 |               print("Reduce the dimensions of your molecules before clustering.")
    |

src\stk_search\utils\plotter.py:322:1: W293 Blank line contains whitespace
    |
320 |     def cluster(self, n_clusters=5, **kwargs):
321 |         """Computes the clusters presents in the embedded chemical space.
322 |         
    | ^^^^^^^^ W293
323 |         :param n_clusters: Number of clusters that will be computed  
324 |         :param kwargs: Other keyword arguments are passed down to sklearn.cluster.KMeans
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:323:68: W291 Trailing whitespace
    |
321 |         """Computes the clusters presents in the embedded chemical space.
322 |         
323 |         :param n_clusters: Number of clusters that will be computed  
    |                                                                    ^^ W291
324 |         :param kwargs: Other keyword arguments are passed down to sklearn.cluster.KMeans
325 |         :type n_clusters: int
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:331:13: T201 `print` found
    |
329 |         """
330 |         if self.__df_2_components is None:
331 |             print("Reduce the dimensions of your molecules before clustering.")
    |             ^^^^^ T201
332 |             return None
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:345:9: C901 `visualize_plot` is too complex (17 > 10)
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |         ^^^^^^^^^^^^^^ C901
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:345:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |         ^^^^^^^^^^^^^^ PLR0913
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:345:9: PLR0912 Too many branches (17 > 12)
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |         ^^^^^^^^^^^^^^ PLR0912
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:345:9: PLR0915 Too many statements (72 > 50)
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |         ^^^^^^^^^^^^^^ PLR0915
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:345:55: FBT002 Boolean default positional argument in function definition
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |                                                       ^^^^^^^^^^^^^^^ FBT002
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:345:78: FBT002 Boolean default positional argument in function definition
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |                                                                              ^^^^^^^^^^ FBT002
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:345:95: FBT002 Boolean default positional argument in function definition
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |                                                                                               ^^^^^^^^ FBT002
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:345:111: FBT002 Boolean default positional argument in function definition
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
    |                                                                                                               ^^^^^^^^ FBT002
346 |         """Generates a plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:346:9: D401 First line of docstring should be in imperative mood: "Generates a plot for the given molecules embedded in two dimensions."
    |
345 |       def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
346 |           """Generates a plot for the given molecules embedded in two dimensions.
    |  _________^
347 | |         
348 | |         :param size: Size of the plot  
349 | |         :param kind: Type of plot 
350 | |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
351 | |         :param is_colored: Indicates if the points must be colored according to target 
352 | |         :param colorbar: Indicates if the plot legend must be represented as a colorbar. Only considered when the target_type is "R".
353 | |         :param clusters: If True the clusters are shown instead of possible targets. Pass a list or a int to only show selected clusters (indexed by int).
354 | |         :param filename: Indicates the file where to save the plot
355 | |         :param title: Title of the plot.
356 | |         :type size: int
357 | |         :type kind: string
358 | |         :type remove_outliers: boolean
359 | |         :type is_colored: boolean
360 | |         :type colorbar: boolean
361 | |         :type clusters: boolean or list or int
362 | |         :type filename: string
363 | |         :type title: string
364 | |         :returns: The matplotlib axes containing the plot.
365 | |         :rtype: Axes
366 | |         """
    | |___________^ D401
367 |           if self.__df_2_components is None:
368 |               print("Reduce the dimensions of your molecules before creating a plot.")
    |

src\stk_search\utils\plotter.py:347:1: W293 Blank line contains whitespace
    |
345 |     def visualize_plot(self, size=20, kind="scatter", remove_outliers=False, is_colored=True, colorbar=False, clusters=False, filename=None, title=None):
346 |         """Generates a plot for the given molecules embedded in two dimensions.
347 |         
    | ^^^^^^^^ W293
348 |         :param size: Size of the plot  
349 |         :param kind: Type of plot 
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:348:38: W291 Trailing whitespace
    |
346 |         """Generates a plot for the given molecules embedded in two dimensions.
347 |         
348 |         :param size: Size of the plot  
    |                                      ^^ W291
349 |         :param kind: Type of plot 
350 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:349:34: W291 Trailing whitespace
    |
348 |         :param size: Size of the plot  
349 |         :param kind: Type of plot 
    |                                  ^ W291
350 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
351 |         :param is_colored: Indicates if the points must be colored according to target 
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:350:104: W291 Trailing whitespace
    |
348 |         :param size: Size of the plot  
349 |         :param kind: Type of plot 
350 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
    |                                                                                                        ^ W291
351 |         :param is_colored: Indicates if the points must be colored according to target 
352 |         :param colorbar: Indicates if the plot legend must be represented as a colorbar. Only considered when the target_type is "R".
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:351:87: W291 Trailing whitespace
    |
349 |         :param kind: Type of plot 
350 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
351 |         :param is_colored: Indicates if the points must be colored according to target 
    |                                                                                       ^ W291
352 |         :param colorbar: Indicates if the plot legend must be represented as a colorbar. Only considered when the target_type is "R".
353 |         :param clusters: If True the clusters are shown instead of possible targets. Pass a list or a int to only show selected clusters (indexed by int).
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:368:13: T201 `print` found
    |
366 |         """
367 |         if self.__df_2_components is None:
368 |             print("Reduce the dimensions of your molecules before creating a plot.")
    |             ^^^^^ T201
369 |             return None
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:372:13: T201 `print` found
    |
371 |         if clusters is not False and "clusters" not in self.__df_2_components:
372 |             print("Call cluster() before visualizing a plot with clusters.")
    |             ^^^^^ T201
373 | 
374 |         if title is None:
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:379:13: T201 `print` found
    |
377 |         if kind not in self._static_plots:
378 |             kind = "scatter"
379 |             print("kind indicates which type of plot must be visualized. Currently supported static visualization are:\n"+
    |             ^^^^^ T201
380 |                   "-scatter plot (scatter)\n"+
381 |                   "-hexagon plot (hex)\n"+
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:379:19: ISC003 Explicitly concatenated string should be implicitly concatenated
    |
377 |           if kind not in self._static_plots:
378 |               kind = "scatter"
379 |               print("kind indicates which type of plot must be visualized. Currently supported static visualization are:\n"+
    |  ___________________^
380 | |                   "-scatter plot (scatter)\n"+
    | |_____________________________________________^ ISC003
381 |                     "-hexagon plot (hex)\n"+
382 |                     "-kernel density estimation plot (kde)\n"+
    |

src\stk_search\utils\plotter.py:396:45: E701 Multiple statements on one line (colon)
    |
394 |             palette = "deep"
395 |             if not isinstance(clusters, bool):
396 |                 if isinstance(clusters, int): clusters = [clusters]
    |                                             ^ E701
397 |                 df_data["clusters"] = df_data["clusters"].isin(clusters)
398 |                 # Labels cluster
    |

src\stk_search\utils\plotter.py:407:50: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
405 |                     False: f"Other - {p_o:.0%}"
406 |                     }
407 |                 df_data.clusters.replace(labels, inplace=True)
    |                                                  ^^^^^^^^^^^^ PD002
408 |                 hue_order = list(labels.values())
409 |             else:
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\plotter.py:470:9: C901 `interactive_plot` is too complex (12 > 10)
    |
468 |         return axis
469 | 
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
    |         ^^^^^^^^^^^^^^^^ C901
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:470:9: PLR0913 Too many arguments in function definition (8 > 5)
    |
468 |         return axis
469 | 
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
    |         ^^^^^^^^^^^^^^^^ PLR0913
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:470:9: PLR0912 Too many branches (13 > 12)
    |
468 |         return axis
469 | 
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
    |         ^^^^^^^^^^^^^^^^ PLR0912
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:470:58: FBT002 Boolean default positional argument in function definition
    |
468 |         return axis
469 | 
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
    |                                                          ^^^^^^^^^^^^^^^ FBT002
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:470:81: FBT002 Boolean default positional argument in function definition
    |
468 |         return axis
469 | 
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
    |                                                                                 ^^^^^^^^^^ FBT002
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:470:98: FBT002 Boolean default positional argument in function definition
    |
468 |         return axis
469 | 
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
    |                                                                                                  ^^^^^^^^ FBT002
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:470:129: FBT002 Boolean default positional argument in function definition
    |
468 |         return axis
469 | 
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
    |                                                                                                                                 ^^^^^^^^^ FBT002
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |

src\stk_search\utils\plotter.py:471:9: D401 First line of docstring should be in imperative mood: "Generates an interactive Bokeh plot for the given molecules embedded in two dimensions."
    |
470 |       def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
471 |           """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
    |  _________^
472 | |         
473 | |         :param size: Size of the plot  
474 | |         :param kind: Type of plot 
475 | |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
476 | |         :param is_colored: Indicates if the points must be colored according to target 
477 | |         :param clusters: Indicates if to add a tab with the clusters if these have been computed
478 | |         :param filename: Indicates the file where to save the Bokeh plot
479 | |         :param show_plot: Immediately display the current plot. 
480 | |         :param title: Title of the plot.
481 | |         :type size: int
482 | |         :type kind: string
483 | |         :type remove_outliers: boolean
484 | |         :type is_colored: boolean
485 | |         :type cluster: boolean
486 | |         :type filename: string
487 | |         :type show_plot: boolean
488 | |         :type title: string
489 | |         :returns: The bokeh figure containing the plot.
490 | |         :rtype: Figure
491 | |         """
    | |___________^ D401
492 |           if self.__df_2_components is None:
493 |               print("Reduce the dimensions of your molecules before creating a plot.")
    |

src\stk_search\utils\plotter.py:472:1: W293 Blank line contains whitespace
    |
470 |     def interactive_plot(self, size=700, kind="scatter", remove_outliers=False, is_colored=True, clusters=False, filename=None, show_plot=False, title=None):
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
472 |         
    | ^^^^^^^^ W293
473 |         :param size: Size of the plot  
474 |         :param kind: Type of plot 
    |
    = help: Remove whitespace from blank line

src\stk_search\utils\plotter.py:473:38: W291 Trailing whitespace
    |
471 |         """Generates an interactive Bokeh plot for the given molecules embedded in two dimensions.
472 |         
473 |         :param size: Size of the plot  
    |                                      ^^ W291
474 |         :param kind: Type of plot 
475 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:474:34: W291 Trailing whitespace
    |
473 |         :param size: Size of the plot  
474 |         :param kind: Type of plot 
    |                                  ^ W291
475 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
476 |         :param is_colored: Indicates if the points must be colored according to target 
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:475:104: W291 Trailing whitespace
    |
473 |         :param size: Size of the plot  
474 |         :param kind: Type of plot 
475 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
    |                                                                                                        ^ W291
476 |         :param is_colored: Indicates if the points must be colored according to target 
477 |         :param clusters: Indicates if to add a tab with the clusters if these have been computed
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:476:87: W291 Trailing whitespace
    |
474 |         :param kind: Type of plot 
475 |         :param remove_outliers: Boolean value indicating if the outliers must be identified and removed 
476 |         :param is_colored: Indicates if the points must be colored according to target 
    |                                                                                       ^ W291
477 |         :param clusters: Indicates if to add a tab with the clusters if these have been computed
478 |         :param filename: Indicates the file where to save the Bokeh plot
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:479:64: W291 Trailing whitespace
    |
477 |         :param clusters: Indicates if to add a tab with the clusters if these have been computed
478 |         :param filename: Indicates the file where to save the Bokeh plot
479 |         :param show_plot: Immediately display the current plot. 
    |                                                                ^ W291
480 |         :param title: Title of the plot.
481 |         :type size: int
    |
    = help: Remove trailing whitespace

src\stk_search\utils\plotter.py:493:13: T201 `print` found
    |
491 |         """
492 |         if self.__df_2_components is None:
493 |             print("Reduce the dimensions of your molecules before creating a plot.")
    |             ^^^^^ T201
494 |             return None
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:497:13: T201 `print` found
    |
496 |         if clusters and "clusters" not in self.__df_2_components:
497 |             print("Call cluster() before visualizing a plot with clusters.")
    |             ^^^^^ T201
498 | 
499 |         if title is None:
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:504:13: T201 `print` found
    |
502 |         if kind not in self._interactive_plots:
503 |             kind = "scatter"
504 |             print("kind indicates which type of plot must be visualized. Currently supported interactive visualization are:\n"+
    |             ^^^^^ T201
505 |                   "-scatter plot (scatter)\n"+
506 |                   "-hexagon plot (hex)\n"+
    |
    = help: Remove `print`

src\stk_search\utils\plotter.py:504:19: ISC003 Explicitly concatenated string should be implicitly concatenated
    |
502 |           if kind not in self._interactive_plots:
503 |               kind = "scatter"
504 |               print("kind indicates which type of plot must be visualized. Currently supported interactive visualization are:\n"+
    |  ___________________^
505 | |                   "-scatter plot (scatter)\n"+
    | |_____________________________________________^ ISC003
506 |                     "-hexagon plot (hex)\n"+
507 |                     "Please input one between scatter, hex or kde for parameter kind.\n"+
    |

src\stk_search\utils\plotter.py:556:9: ANN202 Missing return type annotation for private function `__data_scaler`
    |
554 |         return p
555 | 
556 |     def __data_scaler(self):
    |         ^^^^^^^^^^^^^ ANN202
557 |         # Scale the data
558 |         if self.__sim_type != "structural":
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:559:58: PD011 Use `.to_numpy()` instead of `.values`
    |
557 |         # Scale the data
558 |         if self.__sim_type != "structural":
559 |             scaled_data = StandardScaler().fit_transform(self.__df_descriptors.values.tolist())
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
560 |         else:
561 |             scaled_data = self.__df_descriptors.values.tolist()
    |

src\stk_search\utils\plotter.py:561:27: PD011 Use `.to_numpy()` instead of `.values`
    |
559 |             scaled_data = StandardScaler().fit_transform(self.__df_descriptors.values.tolist())
560 |         else:
561 |             scaled_data = self.__df_descriptors.values.tolist()
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
562 | 
563 |         return scaled_data
    |

src\stk_search\utils\plotter.py:565:9: ANN202 Missing return type annotation for private function `__parse_dataframe`
    |
563 |         return scaled_data
564 | 
565 |     def __parse_dataframe(self):
    |         ^^^^^^^^^^^^^^^^^ ANN202
566 |         x = self.__df_2_components.columns[0]
567 |         y = self.__df_2_components.columns[1]
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:571:9: ANN202 Missing return type annotation for private function `__remove_outliers`
    |
569 |         return x, y, self.__df_2_components.copy()
570 | 
571 |     def __remove_outliers(self, x, y, df):
    |         ^^^^^^^^^^^^^^^^^ ANN202
572 |         # Remove outliers (using Z-score)
573 |         z_scores = stats.zscore(df[[x,y]])
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:575:44: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
573 |         z_scores = stats.zscore(df[[x,y]])
574 |         abs_z_scores = np.abs(z_scores)
575 |         filtered_entries = (abs_z_scores < 3).all(axis=1)
    |                                            ^ PLR2004
576 | 
577 |         return df[filtered_entries]
    |

src\stk_search\utils\plotter.py:579:9: ANN202 Missing return type annotation for private function `__percentage_clusters`
    |
577 |         return df[filtered_entries]
578 | 
579 |     def __percentage_clusters(self, df_data):
    |         ^^^^^^^^^^^^^^^^^^^^^ ANN202
580 |         total = df_data["clusters"].value_counts()
581 |         sum_tot = total.sum()
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:594:42: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
592 |             labels[key] = f"Cluster {key} - {value:.0f}%"
593 |         # Edit df_data and return labels
594 |         df_data.clusters.replace(labels, inplace=True)
    |                                          ^^^^^^^^^^^^ PD002
595 |         return list(labels.values())
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\plotter.py:597:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
595 |         return list(labels.values())
596 | 
597 |     def __interactive_scatter(self, x, y, df_data, size, is_colored, clusters, title):
    |         ^^^^^^^^^^^^^^^^^^^^^ PLR0913
598 |         # Add images column
599 |         df_data["imgs"] = self.__mol_to_2Dimage(list(df_data["mols"]))
    |

src\stk_search\utils\plotter.py:597:9: ANN202 Missing return type annotation for private function `__interactive_scatter`
    |
595 |         return list(labels.values())
596 | 
597 |     def __interactive_scatter(self, x, y, df_data, size, is_colored, clusters, title):
    |         ^^^^^^^^^^^^^^^^^^^^^ ANN202
598 |         # Add images column
599 |         df_data["imgs"] = self.__mol_to_2Dimage(list(df_data["mols"]))
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:600:40: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
598 |         # Add images column
599 |         df_data["imgs"] = self.__mol_to_2Dimage(list(df_data["mols"]))
600 |         df_data.drop(columns=["mols"], inplace=True)
    |                                        ^^^^^^^^^^^^ PD002
601 |         # Set tools
602 |         tools = "pan, lasso_select, wheel_zoom, hover, save, reset"
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\plotter.py:605:13: N806 Variable `TOOLTIPS` in function should be lowercase
    |
604 |         if len(self.__target) == 0:
605 |             TOOLTIPS = parameters.TOOLTIPS_NO_TARGET
    |             ^^^^^^^^ N806
606 |         else:
607 |             TOOLTIPS = parameters.TOOLTIPS_TARGET
    |

src\stk_search\utils\plotter.py:607:13: N806 Variable `TOOLTIPS` in function should be lowercase
    |
605 |             TOOLTIPS = parameters.TOOLTIPS_NO_TARGET
606 |         else:
607 |             TOOLTIPS = parameters.TOOLTIPS_TARGET
    |             ^^^^^^^^ N806
608 | 
609 |         # Create plot
    |

src\stk_search\utils\plotter.py:659:9: ANN202 Missing return type annotation for private function `__interactive_hex`
    |
657 |         return p, tabs
658 | 
659 |     def __interactive_hex(self, x, y, df_data, size, title):
    |         ^^^^^^^^^^^^^^^^^ ANN202
660 |         # Hex Plot
661 |         df_data.drop(columns=["mols"], inplace=True)
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:661:40: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
659 |     def __interactive_hex(self, x, y, df_data, size, title):
660 |         # Hex Plot
661 |         df_data.drop(columns=["mols"], inplace=True)
    |                                        ^^^^^^^^^^^^ PD002
662 | 
663 |         tools = "pan, wheel_zoom, save, reset"
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\plotter.py:686:9: N802 Function name `__mol_to_2Dimage` should be lowercase
    |
684 |         return p
685 | 
686 |     def __mol_to_2Dimage(self, list_mols):
    |         ^^^^^^^^^^^^^^^^ N802
687 |         # Create molecule images
688 |         images_mol=[]
    |

src\stk_search\utils\plotter.py:686:9: ANN202 Missing return type annotation for private function `__mol_to_2Dimage`
    |
684 |         return p
685 | 
686 |     def __mol_to_2Dimage(self, list_mols):
    |         ^^^^^^^^^^^^^^^^ ANN202
687 |         # Create molecule images
688 |         images_mol=[]
    |
    = help: Add return type annotation

src\stk_search\utils\plotter.py:697:13: E722 Do not use bare `except`
    |
695 |                 png = out.getvalue()
696 |                 url = "data:image/jpeg;base64," + base64.b64encode(png).decode("utf-8")
697 |             except:
    |             ^^^^^^ E722
698 |                 url = None
    |

src\stk_search\utils\plotter.py:705:9: ANN202 Missing return type annotation for private function `__open_plot`
    |
704 |     @calltracker
705 |     def __open_plot(self, p):
    |         ^^^^^^^^^^^ ANN202
706 |         show(p)
    |
    = help: Add return type annotation: `None`

src\stk_search\utils\plotter.py:708:9: D102 Missing docstring in public method
    |
706 |         show(p)
707 | 
708 |     def get_target(self):
    |         ^^^^^^^^^^ D102
709 |         return self.__target
    |

src\stk_search\utils\run_hpc_utils.py:1:1: INP001 File `src\stk_search\utils\run_hpc_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\run_hpc_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\run_hpc_utils.py:6:5: PLR0913 Too many arguments in function definition (16 > 5)
  |
6 | def generate_string_run(
  |     ^^^^^^^^^^^^^^^^^^^ PLR0913
7 | 
8 |     case = "BO_precursor",
  |

src\stk_search\utils\run_hpc_utils.py:6:5: D417 Missing argument descriptions in the docstring for `generate_string_run`: `aim`, `benchmark`, `budget`, `config_dir`, `dataset_representation_path`, `df_path`, `df_representation_path`, `frag_properties`, `lim_counter`, `num_elem_initialisation`, `num_iteration`, `search_space_loc`, `target`, `test_name`, `which_acquisition`
  |
6 | def generate_string_run(
  |     ^^^^^^^^^^^^^^^^^^^ D417
7 | 
8 |     case = "BO_precursor",
  |

src\stk_search\utils\run_hpc_utils.py:11:5: FBT002 Boolean default positional argument in function definition
   |
 9 |     test_name = "test",
10 |     target = "target", aim = 0,
11 |     benchmark = True,
   |     ^^^^^^^^^ FBT002
12 |     num_iteration = 2,
13 |     num_elem_initialisation = 10,
   |

src\stk_search\utils\run_hpc_utils.py:24:5: D400 First line should end with a period
   |
22 |       budget=None
23 |       ):
24 |       """ 
   |  _____^
25 | |     Generate the string to run the search notebook
26 | |     
27 | |     Args:
28 | |     ----
29 | |         case: str
30 | |             case name
31 | |         test_name: str
32 | |             test name
33 | |         target: str
34 | |             target name
35 | |         aim: int
36 | |             aim
37 | |         benchmark: bool
38 | |             benchmark
39 | |         num_iteration: int
40 | |             num_iteration
41 | |         num_elem_initialisation: int
42 | |             num_elem_initialisation
43 | |         which_acquisition: str
44 | |             which_acquisition
45 | |         dataset_representation_path: str
46 | |             dataset_representation_path
47 | |         df_path: str
48 | |             df_path
49 | |         df_precursors_path: str
50 | |             df_precursors_path
51 | |         config_dir: str
52 | |             config_dir
53 | |         search_space_loc: str
54 | |             search_space_loc
55 | |     Returns:
56 | |         string_to_run_notbook: str
57 | |             string to run the notebook
58 | |         script_qsub: str
59 | |             script to run the notebook on HPC
60 | |             
61 | |     """
   | |_______^ D400
62 |       input = locals()
   |
   = help: Add period

src\stk_search\utils\run_hpc_utils.py:24:5: D415 First line should end with a period, question mark, or exclamation point
   |
22 |       budget=None
23 |       ):
24 |       """ 
   |  _____^
25 | |     Generate the string to run the search notebook
26 | |     
27 | |     Args:
28 | |     ----
29 | |         case: str
30 | |             case name
31 | |         test_name: str
32 | |             test name
33 | |         target: str
34 | |             target name
35 | |         aim: int
36 | |             aim
37 | |         benchmark: bool
38 | |             benchmark
39 | |         num_iteration: int
40 | |             num_iteration
41 | |         num_elem_initialisation: int
42 | |             num_elem_initialisation
43 | |         which_acquisition: str
44 | |             which_acquisition
45 | |         dataset_representation_path: str
46 | |             dataset_representation_path
47 | |         df_path: str
48 | |             df_path
49 | |         df_precursors_path: str
50 | |             df_precursors_path
51 | |         config_dir: str
52 | |             config_dir
53 | |         search_space_loc: str
54 | |             search_space_loc
55 | |     Returns:
56 | |         string_to_run_notbook: str
57 | |             string to run the notebook
58 | |         script_qsub: str
59 | |             script to run the notebook on HPC
60 | |             
61 | |     """
   | |_______^ D415
62 |       input = locals()
   |
   = help: Add closing punctuation

src\stk_search\utils\run_hpc_utils.py:24:8: W291 Trailing whitespace
   |
22 |     budget=None
23 |     ):
24 |     """ 
   |        ^ W291
25 |     Generate the string to run the search notebook
   |
   = help: Remove trailing whitespace

src\stk_search\utils\run_hpc_utils.py:26:1: W293 Blank line contains whitespace
   |
24 |     """ 
25 |     Generate the string to run the search notebook
26 |     
   | ^^^^ W293
27 |     Args:
28 |     ----
   |
   = help: Remove whitespace from blank line

src\stk_search\utils\run_hpc_utils.py:60:1: W293 Blank line contains whitespace
   |
58 |         script_qsub: str
59 |             script to run the notebook on HPC
60 |             
   | ^^^^^^^^^^^^ W293
61 |     """
62 |     input = locals()
   |
   = help: Remove whitespace from blank line

src\stk_search\utils\run_hpc_utils.py:62:5: A001 Variable `input` is shadowing a Python builtin
   |
61 |     """
62 |     input = locals()
   |     ^^^^^ A001
63 | 
64 |     string_to_run_notbook = "src/dev_scripts/run_search_new.py "
   |

src\stk_search\utils\run_hpc_utils.py:68:12: E712 Avoid equality comparisons to `True`; use `if value:` for truth checks
   |
66 |         test_name = f"benchmark/{test_name}"
67 |     for key, value in input.items():
68 |         if value==True:
   |            ^^^^^^^^^^^ E712
69 |             string_to_run_notbook = f"{string_to_run_notbook} --{key} 1"
70 |         elif value==False:
   |
   = help: Replace with `value`

src\stk_search\utils\run_hpc_utils.py:70:14: E712 Avoid equality comparisons to `False`; use `if not value:` for false checks
   |
68 |         if value==True:
69 |             string_to_run_notbook = f"{string_to_run_notbook} --{key} 1"
70 |         elif value==False:
   |              ^^^^^^^^^^^^ E712
71 |             pass
72 |         elif value != "":
   |
   = help: Replace with `not value`

src\stk_search\utils\run_hpc_utils.py:81:19: ISC003 Explicitly concatenated string should be implicitly concatenated
   |
79 |           num_cpus, mem = 30 , 50
80 |           num_iterations = 20
81 |       script_qsub = "#!/bin/bash \n"+\
   |  ___________________^
82 | |                     "#PBS -l walltime=07:59:01 \n"+\
   | |__________________________________________________^ ISC003
83 |                       f"#PBS -l select=1:ncpus={num_cpus}:mem={mem}gb:avx=true \n"+\
84 |                       f"#PBS -J 1-{num_iterations} \n"+\
   |

src\stk_search\utils\run_hpc_utils.py:90:5: T201 `print` found
   |
88 |                     "source activate Geom3D     \n"+\
89 |                     string_to_run
90 |     print(string_to_run_notbook)
   |     ^^^^^ T201
91 |     return string_to_run_notbook, script_qsub
   |
   = help: Remove `print`

src\stk_search\utils\run_hpc_utils.py:93:5: D103 Missing docstring in public function
   |
91 |     return string_to_run_notbook, script_qsub
92 | 
93 | def submit_job(script_qsub, case_name):
   |     ^^^^^^^^^^ D103
94 | 
95 |     now = datetime.datetime.now()
   |

src\stk_search\utils\run_hpc_utils.py:95:11: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
93 | def submit_job(script_qsub, case_name):
94 | 
95 |     now = datetime.datetime.now()
   |           ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
96 |     # print (now.strftime("%Y-%m-%d %H:%M:%S"))
97 |     sh_file_name = (
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src\stk_search\utils\run_hpc_utils.py:96:5: ERA001 Found commented-out code
   |
95 |     now = datetime.datetime.now()
96 |     # print (now.strftime("%Y-%m-%d %H:%M:%S"))
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
97 |     sh_file_name = (
98 |         f"HPC_bash_script/Runsearch_{case_name}_{now.strftime('%M_%S_%f')}.sh"
   |
   = help: Remove commented-out code

src\stk_search\utils\run_hpc_utils.py:100:10: PTH123 `open()` should be replaced by `Path.open()`
    |
 98 |         f"HPC_bash_script/Runsearch_{case_name}_{now.strftime('%M_%S_%f')}.sh"
 99 |     )
100 |     with open(sh_file_name, "w") as text_file:
    |          ^^^^ PTH123
101 |         text_file.write(script_qsub)
    |

src\stk_search\utils\run_hpc_utils.py:103:5: S605 Starting a process with a shell, possible injection detected
    |
101 |         text_file.write(script_qsub)
102 | 
103 |     os.system(f"qsub -e ./cache -o ./cache {sh_file_name}")
    |     ^^^^^^^^^ S605
    |

src\stk_search\utils\sklearn_models.py:1:1: INP001 File `src\stk_search\utils\sklearn_models.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\sklearn_models.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\sklearn_models.py:10:5: PLR0913 Too many arguments in function definition (6 > 5)
   |
10 | def plot_results(y_test,y_pred_test,y_train,y_pred_train,y_val,y_pred_val):
   |     ^^^^^^^^^^^^ PLR0913
11 |     """Plot results of the model
12 |     Inputs: y_test, y_pred_test, y_train, y_pred_train, y_val, y_pred_val
   |

src\stk_search\utils\sklearn_models.py:11:5: D205 1 blank line required between summary line and description
   |
10 |   def plot_results(y_test,y_pred_test,y_train,y_pred_train,y_val,y_pred_val):
11 |       """Plot results of the model
   |  _____^
12 | |     Inputs: y_test, y_pred_test, y_train, y_pred_train, y_val, y_pred_val
13 | |     """
   | |_______^ D205
14 |       fig, ax = plt.subplots()
15 |       ax.scatter(y_test, y_pred_test,label="test")
   |
   = help: Insert single blank line

src\stk_search\utils\sklearn_models.py:11:5: D400 First line should end with a period
   |
10 |   def plot_results(y_test,y_pred_test,y_train,y_pred_train,y_val,y_pred_val):
11 |       """Plot results of the model
   |  _____^
12 | |     Inputs: y_test, y_pred_test, y_train, y_pred_train, y_val, y_pred_val
13 | |     """
   | |_______^ D400
14 |       fig, ax = plt.subplots()
15 |       ax.scatter(y_test, y_pred_test,label="test")
   |
   = help: Add period

src\stk_search\utils\sklearn_models.py:11:5: D415 First line should end with a period, question mark, or exclamation point
   |
10 |   def plot_results(y_test,y_pred_test,y_train,y_pred_train,y_val,y_pred_val):
11 |       """Plot results of the model
   |  _____^
12 | |     Inputs: y_test, y_pred_test, y_train, y_pred_train, y_val, y_pred_val
13 | |     """
   | |_______^ D415
14 |       fig, ax = plt.subplots()
15 |       ax.scatter(y_test, y_pred_test,label="test")
   |
   = help: Add closing punctuation

src\stk_search\utils\sklearn_models.py:23:5: T201 `print` found
   |
21 |     plt.show()
22 |     # calculate MAE, MSE, RMSE
23 |     print("Mean Absolute Error:", metrics.mean_absolute_error(y_test, y_pred_test))
   |     ^^^^^ T201
24 |     print("Mean Squared Error:", metrics.mean_squared_error(y_test, y_pred_test))
25 |     print("Root Mean Squared Error:", np.sqrt(metrics.mean_squared_error(y_test, y_pred_test)))
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:24:5: T201 `print` found
   |
22 |     # calculate MAE, MSE, RMSE
23 |     print("Mean Absolute Error:", metrics.mean_absolute_error(y_test, y_pred_test))
24 |     print("Mean Squared Error:", metrics.mean_squared_error(y_test, y_pred_test))
   |     ^^^^^ T201
25 |     print("Root Mean Squared Error:", np.sqrt(metrics.mean_squared_error(y_test, y_pred_test)))
26 |     print("R2:", metrics.r2_score(y_test, y_pred_test))
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:25:5: T201 `print` found
   |
23 |     print("Mean Absolute Error:", metrics.mean_absolute_error(y_test, y_pred_test))
24 |     print("Mean Squared Error:", metrics.mean_squared_error(y_test, y_pred_test))
25 |     print("Root Mean Squared Error:", np.sqrt(metrics.mean_squared_error(y_test, y_pred_test)))
   |     ^^^^^ T201
26 |     print("R2:", metrics.r2_score(y_test, y_pred_test))
27 |     print("val R2:", metrics.r2_score(y_val, y_pred_val))
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:26:5: T201 `print` found
   |
24 |     print("Mean Squared Error:", metrics.mean_squared_error(y_test, y_pred_test))
25 |     print("Root Mean Squared Error:", np.sqrt(metrics.mean_squared_error(y_test, y_pred_test)))
26 |     print("R2:", metrics.r2_score(y_test, y_pred_test))
   |     ^^^^^ T201
27 |     print("val R2:", metrics.r2_score(y_val, y_pred_val))
28 |     print("train R2:", metrics.r2_score(y_train, y_pred_train))
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:27:5: T201 `print` found
   |
25 |     print("Root Mean Squared Error:", np.sqrt(metrics.mean_squared_error(y_test, y_pred_test)))
26 |     print("R2:", metrics.r2_score(y_test, y_pred_test))
27 |     print("val R2:", metrics.r2_score(y_val, y_pred_val))
   |     ^^^^^ T201
28 |     print("train R2:", metrics.r2_score(y_train, y_pred_train))
29 |     print("val MAE:", metrics.mean_absolute_error(y_val, y_pred_val))
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:28:5: T201 `print` found
   |
26 |     print("R2:", metrics.r2_score(y_test, y_pred_test))
27 |     print("val R2:", metrics.r2_score(y_val, y_pred_val))
28 |     print("train R2:", metrics.r2_score(y_train, y_pred_train))
   |     ^^^^^ T201
29 |     print("val MAE:", metrics.mean_absolute_error(y_val, y_pred_val))
30 |     print("train MAE:", metrics.mean_absolute_error(y_train, y_pred_train))
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:29:5: T201 `print` found
   |
27 |     print("val R2:", metrics.r2_score(y_val, y_pred_val))
28 |     print("train R2:", metrics.r2_score(y_train, y_pred_train))
29 |     print("val MAE:", metrics.mean_absolute_error(y_val, y_pred_val))
   |     ^^^^^ T201
30 |     print("train MAE:", metrics.mean_absolute_error(y_train, y_pred_train))
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:30:5: T201 `print` found
   |
28 |     print("train R2:", metrics.r2_score(y_train, y_pred_train))
29 |     print("val MAE:", metrics.mean_absolute_error(y_val, y_pred_val))
30 |     print("train MAE:", metrics.mean_absolute_error(y_train, y_pred_train))
   |     ^^^^^ T201
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:33:5: PLR0913 Too many arguments in function definition (7 > 5)
   |
33 | def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
   |     ^^^^^^^^^^^^^^^^ PLR0913
34 |         """Function that trains a model, and tests it.
35 |         Inputs: sklearn model, train_data, test_data
   |

src\stk_search\utils\sklearn_models.py:33:29: N803 Argument name `X_train` should be lowercase
   |
33 | def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
   |                             ^^^^^^^ N803
34 |         """Function that trains a model, and tests it.
35 |         Inputs: sklearn model, train_data, test_data
   |

src\stk_search\utils\sklearn_models.py:33:47: N803 Argument name `X_test` should be lowercase
   |
33 | def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
   |                                               ^^^^^^ N803
34 |         """Function that trains a model, and tests it.
35 |         Inputs: sklearn model, train_data, test_data
   |

src\stk_search\utils\sklearn_models.py:33:62: N803 Argument name `X_val` should be lowercase
   |
33 | def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
   |                                                              ^^^^^ N803
34 |         """Function that trains a model, and tests it.
35 |         Inputs: sklearn model, train_data, test_data
   |

src\stk_search\utils\sklearn_models.py:33:68: ARG001 Unused function argument: `y_val`
   |
33 | def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
   |                                                                    ^^^^^ ARG001
34 |         """Function that trains a model, and tests it.
35 |         Inputs: sklearn model, train_data, test_data
   |

src\stk_search\utils\sklearn_models.py:34:9: D205 1 blank line required between summary line and description
   |
33 |   def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
34 |           """Function that trains a model, and tests it.
   |  _________^
35 | |         Inputs: sklearn model, train_data, test_data
36 | |         """
   | |___________^ D205
37 |           # Train model
38 |           model.fit(X_train, y_train)
   |
   = help: Insert single blank line

src\stk_search\utils\sklearn_models.py:34:9: D400 First line should end with a period
   |
33 |   def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
34 |           """Function that trains a model, and tests it.
   |  _________^
35 | |         Inputs: sklearn model, train_data, test_data
36 | |         """
   | |___________^ D400
37 |           # Train model
38 |           model.fit(X_train, y_train)
   |
   = help: Add period

src\stk_search\utils\sklearn_models.py:34:9: D401 First line of docstring should be in imperative mood: "Function that trains a model, and tests it."
   |
33 |   def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
34 |           """Function that trains a model, and tests it.
   |  _________^
35 | |         Inputs: sklearn model, train_data, test_data
36 | |         """
   | |___________^ D401
37 |           # Train model
38 |           model.fit(X_train, y_train)
   |

src\stk_search\utils\sklearn_models.py:34:9: D415 First line should end with a period, question mark, or exclamation point
   |
33 |   def train_test_model(model, X_train, y_train, X_test, y_test,X_val,y_val):
34 |           """Function that trains a model, and tests it.
   |  _________^
35 | |         Inputs: sklearn model, train_data, test_data
36 | |         """
   | |___________^ D415
37 |           # Train model
38 |           model.fit(X_train, y_train)
   |
   = help: Add closing punctuation

src\stk_search\utils\sklearn_models.py:48:9: T201 `print` found
   |
46 |         model_train_rmse = model_train_mse ** 0.5
47 |         model_test_rmse = model_test_mse ** 0.5
48 |         print(f"RMSE on train set: {model_train_rmse:.3f}, and test set: {model_test_rmse:.3f}.\n")
   |         ^^^^^ T201
49 |         return y_pred_train, y_pred_test, y_pred_val,model
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:51:17: N803 Argument name `X_rpr` should be lowercase
   |
49 |         return y_pred_train, y_pred_test, y_pred_val,model
50 | 
51 | def train_model(X_rpr,y,min_test_set=-3):
   |                 ^^^^^ N803
52 |     """Train a model using XGBoost
53 |     Inputs: X_rpr, y, min_test_set
   |

src\stk_search\utils\sklearn_models.py:52:5: D205 1 blank line required between summary line and description
   |
51 |   def train_model(X_rpr,y,min_test_set=-3):
52 |       """Train a model using XGBoost
   |  _____^
53 | |     Inputs: X_rpr, y, min_test_set
54 | |     Returns: y_train, y_test, y_val, y_pred_train, y_pred_test, y_pred_val, model
55 | |     """
   | |_______^ D205
56 |       X_test = X_rpr[y>min_test_set]#.detach().numpy()
57 |       y_test = y[y>min_test_set]#.detach().numpy()
   |
   = help: Insert single blank line

src\stk_search\utils\sklearn_models.py:52:5: D400 First line should end with a period
   |
51 |   def train_model(X_rpr,y,min_test_set=-3):
52 |       """Train a model using XGBoost
   |  _____^
53 | |     Inputs: X_rpr, y, min_test_set
54 | |     Returns: y_train, y_test, y_val, y_pred_train, y_pred_test, y_pred_val, model
55 | |     """
   | |_______^ D400
56 |       X_test = X_rpr[y>min_test_set]#.detach().numpy()
57 |       y_test = y[y>min_test_set]#.detach().numpy()
   |
   = help: Add period

src\stk_search\utils\sklearn_models.py:52:5: D415 First line should end with a period, question mark, or exclamation point
   |
51 |   def train_model(X_rpr,y,min_test_set=-3):
52 |       """Train a model using XGBoost
   |  _____^
53 | |     Inputs: X_rpr, y, min_test_set
54 | |     Returns: y_train, y_test, y_val, y_pred_train, y_pred_test, y_pred_val, model
55 | |     """
   | |_______^ D415
56 |       X_test = X_rpr[y>min_test_set]#.detach().numpy()
57 |       y_test = y[y>min_test_set]#.detach().numpy()
   |
   = help: Add closing punctuation

src\stk_search\utils\sklearn_models.py:56:5: N806 Variable `X_test` in function should be lowercase
   |
54 |     Returns: y_train, y_test, y_val, y_pred_train, y_pred_test, y_pred_val, model
55 |     """
56 |     X_test = X_rpr[y>min_test_set]#.detach().numpy()
   |     ^^^^^^ N806
57 |     y_test = y[y>min_test_set]#.detach().numpy()
   |

src\stk_search\utils\sklearn_models.py:59:5: N806 Variable `X_train` in function should be lowercase
   |
57 |     y_test = y[y>min_test_set]#.detach().numpy()
58 | 
59 |     X_train, X_val, y_train, y_val = train_test_split(X_rpr[y<min_test_set],y[y<min_test_set] , test_size=0.2, random_state=42)
   |     ^^^^^^^ N806
60 |     scaler = MinMaxScaler()
61 |     scaler.fit(X_train)
   |

src\stk_search\utils\sklearn_models.py:59:14: N806 Variable `X_val` in function should be lowercase
   |
57 |     y_test = y[y>min_test_set]#.detach().numpy()
58 | 
59 |     X_train, X_val, y_train, y_val = train_test_split(X_rpr[y<min_test_set],y[y<min_test_set] , test_size=0.2, random_state=42)
   |              ^^^^^ N806
60 |     scaler = MinMaxScaler()
61 |     scaler.fit(X_train)
   |

src\stk_search\utils\sklearn_models.py:63:5: N806 Variable `X_train` in function should be lowercase
   |
61 |     scaler.fit(X_train)
62 |     # transform data
63 |     X_train = scaler.transform(X_train)
   |     ^^^^^^^ N806
64 |     X_test = scaler.transform(X_test)
65 |     X_val = scaler.transform(X_val)
   |

src\stk_search\utils\sklearn_models.py:64:5: N806 Variable `X_test` in function should be lowercase
   |
62 |     # transform data
63 |     X_train = scaler.transform(X_train)
64 |     X_test = scaler.transform(X_test)
   |     ^^^^^^ N806
65 |     X_val = scaler.transform(X_val)
66 |     print(f"Train set size is {X_train.shape[0]} rows, test set size is {X_test.shape[0]} rows., val set size is {X_val.shape[0]} rows.")
   |

src\stk_search\utils\sklearn_models.py:65:5: N806 Variable `X_val` in function should be lowercase
   |
63 |     X_train = scaler.transform(X_train)
64 |     X_test = scaler.transform(X_test)
65 |     X_val = scaler.transform(X_val)
   |     ^^^^^ N806
66 |     print(f"Train set size is {X_train.shape[0]} rows, test set size is {X_test.shape[0]} rows., val set size is {X_val.shape[0]} rows.")
67 |     xgb_reg = HistGradientBoostingRegressor(random_state=0)  # using 10 trees and seed=0
   |

src\stk_search\utils\sklearn_models.py:66:5: T201 `print` found
   |
64 |     X_test = scaler.transform(X_test)
65 |     X_val = scaler.transform(X_val)
66 |     print(f"Train set size is {X_train.shape[0]} rows, test set size is {X_test.shape[0]} rows., val set size is {X_val.shape[0]} rows.")
   |     ^^^^^ T201
67 |     xgb_reg = HistGradientBoostingRegressor(random_state=0)  # using 10 trees and seed=0
68 |     #xgb_reg = GradientBoostingRegressor(n_estimators=50, random_state=0)  # using 10 trees and seed=0
   |
   = help: Remove `print`

src\stk_search\utils\sklearn_models.py:68:5: ERA001 Found commented-out code
   |
66 |     print(f"Train set size is {X_train.shape[0]} rows, test set size is {X_test.shape[0]} rows., val set size is {X_val.shape[0]} rows.")
67 |     xgb_reg = HistGradientBoostingRegressor(random_state=0)  # using 10 trees and seed=0
68 |     #xgb_reg = GradientBoostingRegressor(n_estimators=50, random_state=0)  # using 10 trees and seed=0
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
69 |     # Train and test XGBoost model
70 |     print("Evaluating XGBoost model.")
   |
   = help: Remove commented-out code

src\stk_search\utils\sklearn_models.py:70:5: T201 `print` found
   |
68 |     #xgb_reg = GradientBoostingRegressor(n_estimators=50, random_state=0)  # using 10 trees and seed=0
69 |     # Train and test XGBoost model
70 |     print("Evaluating XGBoost model.")
   |     ^^^^^ T201
71 |     y_pred_train, y_pred_test,y_pred_val,model = train_test_model(xgb_reg, X_train, y_train, X_test, y_test,X_val,y_val)
72 |     plot_results(y_test,y_pred_test,y_train,y_pred_train,y_val,y_pred_val)
   |
   = help: Remove `print`

src\stk_search\utils\tanimoto_similarity_utils.py:1:1: INP001 File `src\stk_search\utils\tanimoto_similarity_utils.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\tanimoto_similarity_utils.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\tanimoto_similarity_utils.py:13:5: D103 Missing docstring in public function
   |
12 | # Function to generate Morgan fingerprints
13 | def generate_morgan_fingerprints(molecules, radius=2, n_bits=2048):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
14 |     fingerprints = [
15 |         AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=n_bits)
   |

src\stk_search\utils\tanimoto_similarity_utils.py:18:12: RET504 Unnecessary assignment to `fingerprints` before `return` statement
   |
16 |         for mol in molecules
17 |     ]
18 |     return fingerprints
   |            ^^^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\utils\tanimoto_similarity_utils.py:22:5: D103 Missing docstring in public function
   |
21 | # Function to generate ECFP fingerprints
22 | def generate_ecfp_fingerprints(molecules, radius=2, n_bits=2048):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
23 |     fingerprints = [
24 |         AllChem.GetMorganFingerprintAsBitVect(mol, radius, nBits=n_bits)
   |

src\stk_search\utils\tanimoto_similarity_utils.py:27:12: RET504 Unnecessary assignment to `fingerprints` before `return` statement
   |
25 |         for mol in molecules
26 |     ]
27 |     return fingerprints
   |            ^^^^^^^^^^^^ RET504
   |
   = help: Remove unnecessary assignment

src\stk_search\utils\tanimoto_similarity_utils.py:31:5: D103 Missing docstring in public function
   |
30 | # Function to calculate Tanimoto similarity between fingerprints
31 | def calculate_tanimoto_similarity(fingerprint1, fingerprint2):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
32 |     return DataStructs.TanimotoSimilarity(fingerprint1, fingerprint2)
   |

src\stk_search\utils\tanimoto_similarity_utils.py:35:5: D103 Missing docstring in public function
   |
35 | def get_inchi_key(molecule):
   |     ^^^^^^^^^^^^^ D103
36 |     return stk.InchiKey().get_key(molecule)
   |

src\stk_search\utils\tanimoto_similarity_utils.py:39:5: D103 Missing docstring in public function
   |
39 | def get_mol_from_df_single(InChIKey):
   |     ^^^^^^^^^^^^^^^^^^^^^^ D103
40 |     client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
   |

src\stk_search\utils\tanimoto_similarity_utils.py:39:28: N803 Argument name `InChIKey` should be lowercase
   |
39 | def get_mol_from_df_single(InChIKey):
   |                            ^^^^^^^^ N803
40 |     client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
   |

src\stk_search\utils\tanimoto_similarity_utils.py:43:5: F841 Local variable `collection_name` is assigned to but never used
   |
42 |     database = "stk_mohammed_BO"
43 |     collection_name = "BO_exp1"
   |     ^^^^^^^^^^^^^^^ F841
44 |     client = pymongo.MongoClient(client)
45 |     db_polymer = stk.ConstructedMoleculeMongoDb(
   |
   = help: Remove assignment to unused variable `collection_name`

src\stk_search\utils\tanimoto_similarity_utils.py:54:5: D103 Missing docstring in public function
   |
54 | def get_mol_from_df(df, num_mol):
   |     ^^^^^^^^^^^^^^^ D103
55 |     client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
   |

src\stk_search\utils\tanimoto_similarity_utils.py:58:5: F841 Local variable `collection_name` is assigned to but never used
   |
57 |     database = "stk_mohammed_BO"
58 |     collection_name = "BO_exp1"
   |     ^^^^^^^^^^^^^^^ F841
59 |     client = pymongo.MongoClient(client)
60 |     db_polymer = stk.ConstructedMoleculeMongoDb(
   |
   = help: Remove assignment to unused variable `collection_name`

src\stk_search\utils\tanimoto_similarity_utils.py:65:9: N806 Variable `InChIKey` in function should be lowercase
   |
63 |     )
64 |     mol_list = []
65 |     for InChIKey in df["InChIKey"].sample(num_mol).values:
   |         ^^^^^^^^ N806
66 |         mol = db_polymer.get({"InChIKey": InChIKey}).to_rdkit_mol()
67 |         Chem.SanitizeMol(mol)
   |

src\stk_search\utils\tanimoto_similarity_utils.py:65:21: PD011 Use `.to_numpy()` instead of `.values`
   |
63 |     )
64 |     mol_list = []
65 |     for InChIKey in df["InChIKey"].sample(num_mol).values:
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD011
66 |         mol = db_polymer.get({"InChIKey": InChIKey}).to_rdkit_mol()
67 |         Chem.SanitizeMol(mol)
   |

src\stk_search\utils\tanimoto_similarity_utils.py:72:5: D103 Missing docstring in public function
   |
72 | def get_mol_from_res(results, num_initialisation,db_polymer=None,df_mol_dict=None):
   |     ^^^^^^^^^^^^^^^^ D103
73 |     if db_polymer is None:
74 |         client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
   |

src\stk_search\utils\tanimoto_similarity_utils.py:76:9: F841 Local variable `collection_name` is assigned to but never used
   |
74 |         client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
75 |         database = "stk_mohammed_BO"
76 |         collection_name = "BO_exp1"
   |         ^^^^^^^^^^^^^^^ F841
77 |         client = pymongo.MongoClient(client)
78 |         db_polymer = stk.ConstructedMoleculeMongoDb(
   |
   = help: Remove assignment to unused variable `collection_name`

src\stk_search\utils\tanimoto_similarity_utils.py:85:9: N806 Variable `InChIKey` in function should be lowercase
   |
83 |         df_mol_dict={}
84 |     mol_list_suggested, mol_list_init = [], []
85 |     for InChIKey in results["InchiKey_acquired"][num_initialisation:]:
   |         ^^^^^^^^ N806
86 |         if InChIKey in df_mol_dict:
87 |             mol = df_mol_dict[InChIKey]
   |

src\stk_search\utils\tanimoto_similarity_utils.py:94:9: N806 Variable `InChIKey` in function should be lowercase
   |
92 |             df_mol_dict[InChIKey]=mol
93 |         mol_list_suggested.append(mol)
94 |     for InChIKey in results["InchiKey_acquired"][:num_initialisation]:
   |         ^^^^^^^^ N806
95 |         if InChIKey in df_mol_dict:
96 |             mol = df_mol_dict[InChIKey]
   |

src\stk_search\utils\tanimoto_similarity_utils.py:107:5: D103 Missing docstring in public function
    |
107 | def get_tanimoto_similarity(mol_list):
    |     ^^^^^^^^^^^^^^^^^^^^^^^ D103
108 |     morgan_fingerprints = generate_morgan_fingerprints(mol_list)
    |

src\stk_search\utils\tanimoto_similarity_utils.py:111:5: T201 `print` found
    |
110 |     tanimoto_sim = np.zeros((len(mol_list), len(mol_list)))
111 |     print("Tanimoto similarity (Morgan):")
    |     ^^^^^ T201
112 |     for i in range(len(mol_list)):
113 |         for j in range(len(mol_list)):
    |
    = help: Remove `print`

src\stk_search\utils\tanimoto_similarity_utils.py:125:58: ARG001 Unused function argument: `group_size`
    |
124 | def plot_similarity_results_elem_suggested(
125 |     search_results, max_iteration=100, min_iteration=50, group_size=10
    |                                                          ^^^^^^^^^^ ARG001
126 | ):
127 |     """Plot the similarity of the molecules found in the search space
    |

src\stk_search\utils\tanimoto_similarity_utils.py:127:5: D205 1 blank line required between summary line and description
    |
125 |       search_results, max_iteration=100, min_iteration=50, group_size=10
126 |   ):
127 |       """Plot the similarity of the molecules found in the search space
    |  _____^
128 | |     search_results: list of dictionaries with the search results
129 | |     num_mol: number of molecules to plot
130 | |     num_mol_init: number of molecules in the initialisation
131 | |     group_size: number of iterations to group together
132 | |     return: array of the similarity of the molecules found
133 | | 
134 | |     """
    | |_______^ D205
135 |       print("Extracting molecules from the search results")
136 |       list_similarity_to_initial = []
    |
    = help: Insert single blank line

src\stk_search\utils\tanimoto_similarity_utils.py:127:5: D400 First line should end with a period
    |
125 |       search_results, max_iteration=100, min_iteration=50, group_size=10
126 |   ):
127 |       """Plot the similarity of the molecules found in the search space
    |  _____^
128 | |     search_results: list of dictionaries with the search results
129 | |     num_mol: number of molecules to plot
130 | |     num_mol_init: number of molecules in the initialisation
131 | |     group_size: number of iterations to group together
132 | |     return: array of the similarity of the molecules found
133 | | 
134 | |     """
    | |_______^ D400
135 |       print("Extracting molecules from the search results")
136 |       list_similarity_to_initial = []
    |
    = help: Add period

src\stk_search\utils\tanimoto_similarity_utils.py:127:5: D415 First line should end with a period, question mark, or exclamation point
    |
125 |       search_results, max_iteration=100, min_iteration=50, group_size=10
126 |   ):
127 |       """Plot the similarity of the molecules found in the search space
    |  _____^
128 | |     search_results: list of dictionaries with the search results
129 | |     num_mol: number of molecules to plot
130 | |     num_mol_init: number of molecules in the initialisation
131 | |     group_size: number of iterations to group together
132 | |     return: array of the similarity of the molecules found
133 | | 
134 | |     """
    | |_______^ D415
135 |       print("Extracting molecules from the search results")
136 |       list_similarity_to_initial = []
    |
    = help: Add closing punctuation

src\stk_search\utils\tanimoto_similarity_utils.py:135:5: T201 `print` found
    |
134 |     """
135 |     print("Extracting molecules from the search results")
    |     ^^^^^ T201
136 |     list_similarity_to_initial = []
137 |     mol_list = []
    |
    = help: Remove `print`

src\stk_search\utils\tanimoto_similarity_utils.py:136:5: F841 Local variable `list_similarity_to_initial` is assigned to but never used
    |
134 |     """
135 |     print("Extracting molecules from the search results")
136 |     list_similarity_to_initial = []
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ F841
137 |     mol_list = []
138 |     for dict_org in search_results:
    |
    = help: Remove assignment to unused variable `list_similarity_to_initial`

src\stk_search\utils\tanimoto_similarity_utils.py:139:9: A001 Variable `dict` is shadowing a Python builtin
    |
137 |     mol_list = []
138 |     for dict_org in search_results:
139 |         dict = dict_org.copy()
    |         ^^^^ A001
140 | 
141 |         dict.pop("searched_space_df")
    |

src\stk_search\utils\tanimoto_similarity_utils.py:142:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
141 |         dict.pop("searched_space_df")
142 |         df = pd.DataFrame.from_records(dict)
    |         ^^ PD901
143 |         df["InChIKey"] = df["InchiKey_acquired"]
144 |         df = df[df["ids_acquired"] < max_iteration]
    |

src\stk_search\utils\tanimoto_similarity_utils.py:144:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
142 |         df = pd.DataFrame.from_records(dict)
143 |         df["InChIKey"] = df["InchiKey_acquired"]
144 |         df = df[df["ids_acquired"] < max_iteration]
    |         ^^ PD901
145 |         df = df[df["ids_acquired"] > min_iteration]
146 |         [mol_list.append(x) for x in get_mol_from_df(df, df.shape[0])]
    |

src\stk_search\utils\tanimoto_similarity_utils.py:145:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
143 |         df["InChIKey"] = df["InchiKey_acquired"]
144 |         df = df[df["ids_acquired"] < max_iteration]
145 |         df = df[df["ids_acquired"] > min_iteration]
    |         ^^ PD901
146 |         [mol_list.append(x) for x in get_mol_from_df(df, df.shape[0])]
147 |         # Generate Morgan fingerprints for the dataset
    |

src\stk_search\utils\tanimoto_similarity_utils.py:148:5: T201 `print` found
    |
146 |         [mol_list.append(x) for x in get_mol_from_df(df, df.shape[0])]
147 |         # Generate Morgan fingerprints for the dataset
148 |     print("Generating Morgan fingerprints")
    |     ^^^^^ T201
149 |     morgan_fingerprints = generate_morgan_fingerprints(mol_list)
150 |     print("Calculating Tanimoto similarity")
    |
    = help: Remove `print`

src\stk_search\utils\tanimoto_similarity_utils.py:150:5: T201 `print` found
    |
148 |     print("Generating Morgan fingerprints")
149 |     morgan_fingerprints = generate_morgan_fingerprints(mol_list)
150 |     print("Calculating Tanimoto similarity")
    |     ^^^^^ T201
151 |     tanimoto_sim = np.zeros((len(mol_list), len(mol_list)))
152 |     print("Tanimoto similarity (Morgan):")
    |
    = help: Remove `print`

src\stk_search\utils\tanimoto_similarity_utils.py:152:5: T201 `print` found
    |
150 |     print("Calculating Tanimoto similarity")
151 |     tanimoto_sim = np.zeros((len(mol_list), len(mol_list)))
152 |     print("Tanimoto similarity (Morgan):")
    |     ^^^^^ T201
153 |     for i in range(1, len(mol_list)):
154 |         for j in range(i, len(mol_list)):
    |
    = help: Remove `print`

src\stk_search\utils\tanimoto_similarity_utils.py:163:12: RET504 Unnecessary assignment to `tanimoto_sim_off_diag` before `return` statement
    |
161 |     tanimoto_sim_off_diag = tanimoto_sim_off_diag[tanimoto_sim_off_diag > 0]
162 | 
163 |     return tanimoto_sim_off_diag
    |            ^^^^^^^^^^^^^^^^^^^^^ RET504
    |
    = help: Remove unnecessary assignment

src\stk_search\utils\tanimoto_similarity_utils.py:166:5: D103 Missing docstring in public function
    |
166 | def get_mean_similarity(mol_list_suggested, mol_list_init):
    |     ^^^^^^^^^^^^^^^^^^^ D103
167 |     morgan_fingerprints_suggested = generate_morgan_fingerprints(
168 |         mol_list_suggested
    |

src\stk_search\utils\tanimoto_similarity_utils.py:179:5: D103 Missing docstring in public function
    |
177 |     return tanimoto_sim
178 | 
179 | def moving_average(x, w):
    |     ^^^^^^^^^^^^^^ D103
180 |     return np.convolve(x, np.ones(w), "same") / w
    |

src\stk_search\utils\tanimoto_similarity_utils.py:182:5: PLR0913 Too many arguments in function definition (7 > 5)
    |
180 |     return np.convolve(x, np.ones(w), "same") / w
181 | 
182 | def plot_similarity_results_elem_suggested_to_initial(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
183 |     search_results,
184 |     nb_iterations=300,
    |

src\stk_search\utils\tanimoto_similarity_utils.py:182:5: D103 Missing docstring in public function
    |
180 |     return np.convolve(x, np.ones(w), "same") / w
181 | 
182 | def plot_similarity_results_elem_suggested_to_initial(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
183 |     search_results,
184 |     nb_iterations=300,
    |

src\stk_search\utils\tanimoto_similarity_utils.py:203:13: ERA001 Found commented-out code
    |
201 |             similarity[res_num, i] = np.max(tanimoto_sim[i, :])
202 |         similarity[res_num, 5:-5] = moving_average(similarity[res_num, 5:-5], 5)
203 |             # std_similarity.append(np.std(tanimoto_sim[:i,]))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
204 |     mean_similarity = np.mean(similarity, axis=0)
205 |     std_similarity = np.std(similarity, axis=0)
    |
    = help: Remove commented-out code

src\stk_search\utils\tanimoto_similarity_utils.py:222:5: PLR0913 Too many arguments in function definition (7 > 5)
    |
222 | def plot_similarity_results_elem_suggested_df(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0913
223 |     search_results,
224 |     nb_iterations=300,
    |

src\stk_search\utils\tanimoto_similarity_utils.py:222:5: D103 Missing docstring in public function
    |
222 | def plot_similarity_results_elem_suggested_df(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D103
223 |     search_results,
224 |     nb_iterations=300,
    |

src\stk_search\utils\tanimoto_similarity_utils.py:236:5: F841 Local variable `collection_name` is assigned to but never used
    |
234 |     client = "mongodb://ch-atarzia.ch.ic.ac.uk/"
235 |     database = "stk_mohammed_BO"
236 |     collection_name = "BO_exp1"
    |     ^^^^^^^^^^^^^^^ F841
237 |     client = pymongo.MongoClient(client)
238 |     db_polymer = stk.ConstructedMoleculeMongoDb(
    |
    = help: Remove assignment to unused variable `collection_name`

src\stk_search\utils\update_datasets.py:1:1: INP001 File `src\stk_search\utils\update_datasets.py` is part of an implicit namespace package. Add an `__init__.py`.
src\stk_search\utils\update_datasets.py:1:1: D100 Missing docstring in public module
src\stk_search\utils\update_datasets.py:13:5: D417 Missing argument descriptions in the docstring for `get_dataset_from_df`: `config`, `df`
   |
13 | def get_dataset_from_df(dataset_all, df, config):
   |     ^^^^^^^^^^^^^^^^^^^ D417
14 |     """Check the input dataset for the oligomer embeddiing model and add missing molecules to the dataset
   |

src\stk_search\utils\update_datasets.py:14:5: D400 First line should end with a period
   |
13 |   def get_dataset_from_df(dataset_all, df, config):
14 |       """Check the input dataset for the oligomer embeddiing model and add missing molecules to the dataset
   |  _____^
15 | | 
16 | |     Args:
17 | |     ----
18 | |         dataset_all: list of dictionaries
19 | |             list of dictionaries containing the information of the molecules in the dataset
20 | |         df: pandas dataframe
21 | |             dataframe containing the information of the molecules
22 | |         config: dictionary
23 | |             dictionary containing the configuration of the model
24 | |     Returns:
25 | |         dataset: list of dictionaries
26 | | 
27 | |     """
   | |_______^ D400
28 |       dataset_all_dict = {data["InChIKey"]: data for data in dataset_all}
29 |       dataset = []
   |
   = help: Add period

src\stk_search\utils\update_datasets.py:14:5: D415 First line should end with a period, question mark, or exclamation point
   |
13 |   def get_dataset_from_df(dataset_all, df, config):
14 |       """Check the input dataset for the oligomer embeddiing model and add missing molecules to the dataset
   |  _____^
15 | | 
16 | |     Args:
17 | |     ----
18 | |         dataset_all: list of dictionaries
19 | |             list of dictionaries containing the information of the molecules in the dataset
20 | |         df: pandas dataframe
21 | |             dataframe containing the information of the molecules
22 | |         config: dictionary
23 | |             dictionary containing the configuration of the model
24 | |     Returns:
25 | |         dataset: list of dictionaries
26 | | 
27 | |     """
   | |_______^ D415
28 |       dataset_all_dict = {data["InChIKey"]: data for data in dataset_all}
29 |       dataset = []
   |
   = help: Add closing punctuation

src\stk_search\utils\update_datasets.py:31:9: N806 Variable `Inchikey` in function should be lowercase
   |
29 |     dataset = []
30 |     missing_inchikey = []
31 |     for Inchikey in df["InChIKey"]:
   |         ^^^^^^^^ N806
32 |         if Inchikey in dataset_all_dict:
33 |             dataset.append(dataset_all_dict[Inchikey])
   |

src\stk_search\utils\update_datasets.py:37:39: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
35 |             missing_inchikey.append(Inchikey)
36 |     df_missing = df[df["InChIKey"].isin(missing_inchikey)].copy()
37 |     df_missing.reset_index(drop=True, inplace=True)
   |                                       ^^^^^^^^^^^^ PD002
38 |     print(f"Missing {len(missing_inchikey)} Inchikey in the dataset")
39 |     client = pymongo.MongoClient(config["pymongo_client"])
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\update_datasets.py:38:5: T201 `print` found
   |
36 |     df_missing = df[df["InChIKey"].isin(missing_inchikey)].copy()
37 |     df_missing.reset_index(drop=True, inplace=True)
38 |     print(f"Missing {len(missing_inchikey)} Inchikey in the dataset")
   |     ^^^^^ T201
39 |     client = pymongo.MongoClient(config["pymongo_client"])
40 |     db = stk.ConstructedMoleculeMongoDb(
   |
   = help: Remove `print`

src\stk_search\utils\update_datasets.py:44:14: SIM401 Use `config["model"].get("cutoff", 0.1)` instead of an `if` block
   |
42 |         database=config["database_name"],
43 |     )
44 |     radius = config["model"]["cutoff"] if "cutoff" in config["model"] else 0.1
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM401
45 |     dataset_missing = dataloader.generate_dataset(
46 |         df_missing,
   |
   = help: Replace with `config["model"].get("cutoff", 0.1)`

src\stk_search\utils\update_datasets.py:59:5: D417 Missing argument descriptions in the docstring for `get_dataset_frag_from_df`: `config`, `df`
   |
58 | # save the dataset for the transformer model if already calculated dataset all exists
59 | def get_dataset_frag_from_df(dataset_all_frag, df, config):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ D417
60 |     """Check the input dataset for the oligomer encoding model and add missing molecules to the dataset
   |

src\stk_search\utils\update_datasets.py:60:5: D400 First line should end with a period
   |
58 |   # save the dataset for the transformer model if already calculated dataset all exists
59 |   def get_dataset_frag_from_df(dataset_all_frag, df, config):
60 |       """Check the input dataset for the oligomer encoding model and add missing molecules to the dataset
   |  _____^
61 | | 
62 | |     Args:
63 | |     ----
64 | |         dataset_all_frag: list of dictionaries
65 | |             list of dictionaries containing the information of the molecules in the dataset
66 | |         df: pandas dataframe
67 | |             dataframe containing the information of the molecules
68 | |         config: dictionary
69 | |             dictionary containing the configuration of the model
70 | |     Returns:
71 | |     dataset: list of dictionaries
72 | | 
73 | |     """
   | |_______^ D400
74 |       if len(dataset_all_frag) == 0:
75 |           dataset_all_dict = {}
   |
   = help: Add period

src\stk_search\utils\update_datasets.py:60:5: D415 First line should end with a period, question mark, or exclamation point
   |
58 |   # save the dataset for the transformer model if already calculated dataset all exists
59 |   def get_dataset_frag_from_df(dataset_all_frag, df, config):
60 |       """Check the input dataset for the oligomer encoding model and add missing molecules to the dataset
   |  _____^
61 | | 
62 | |     Args:
63 | |     ----
64 | |         dataset_all_frag: list of dictionaries
65 | |             list of dictionaries containing the information of the molecules in the dataset
66 | |         df: pandas dataframe
67 | |             dataframe containing the information of the molecules
68 | |         config: dictionary
69 | |             dictionary containing the configuration of the model
70 | |     Returns:
71 | |     dataset: list of dictionaries
72 | | 
73 | |     """
   | |_______^ D415
74 |       if len(dataset_all_frag) == 0:
75 |           dataset_all_dict = {}
   |
   = help: Add closing punctuation

src\stk_search\utils\update_datasets.py:80:5: ERA001 Found commented-out code
   |
78 |             data[0]["InChIKey"]: data for data in dataset_all_frag
79 |         }
80 |     # dataset = [dataset_all_dict[Inchikey] for Inchikey in df['InChIKey']]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
81 |     dataset = []
82 |     missing_inchikey = []
   |
   = help: Remove commented-out code

src\stk_search\utils\update_datasets.py:83:9: N806 Variable `Inchikey` in function should be lowercase
   |
81 |     dataset = []
82 |     missing_inchikey = []
83 |     for Inchikey in df["InChIKey"]:
   |         ^^^^^^^^ N806
84 |         if Inchikey in dataset_all_dict.keys():
85 |             dataset.append(dataset_all_dict[Inchikey])
   |

src\stk_search\utils\update_datasets.py:84:12: SIM118 Use `key in dict` instead of `key in dict.keys()`
   |
82 |     missing_inchikey = []
83 |     for Inchikey in df["InChIKey"]:
84 |         if Inchikey in dataset_all_dict.keys():
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SIM118
85 |             dataset.append(dataset_all_dict[Inchikey])
86 |         else:
   |
   = help: Remove `.keys()`

src\stk_search\utils\update_datasets.py:89:39: PD002 `inplace=True` should be avoided; it has inconsistent behavior
   |
87 |             missing_inchikey.append(Inchikey)
88 |     df_missing = df[df["InChIKey"].isin(missing_inchikey)].copy()
89 |     df_missing.reset_index(drop=True, inplace=True)
   |                                       ^^^^^^^^^^^^ PD002
90 |     print(
91 |         f"Missing {len(missing_inchikey)} Inchikey in the dataset of frag input"
   |
   = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\update_datasets.py:90:5: T201 `print` found
   |
88 |     df_missing = df[df["InChIKey"].isin(missing_inchikey)].copy()
89 |     df_missing.reset_index(drop=True, inplace=True)
90 |     print(
   |     ^^^^^ T201
91 |         f"Missing {len(missing_inchikey)} Inchikey in the dataset of frag input"
92 |     )
   |
   = help: Remove `print`

src\stk_search\utils\update_datasets.py:101:5: D417 Missing argument descriptions in the docstring for `update_dataset_learned_embedding`: `config`, `dataset_all_frag`, `extension`
    |
101 | def update_dataset_learned_embedding(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D417
102 |     df, dataset_all_frag, config, extension="all"
103 | ):
    |

src\stk_search\utils\update_datasets.py:104:5: D400 First line should end with a period
    |
102 |       df, dataset_all_frag, config, extension="all"
103 |   ):
104 |       """Check the input dataset for the learned embedding model and add missing molecules to the dataset
    |  _____^
105 | | 
106 | |     Args:
107 | |     ----
108 | |         df: pandas dataframe
109 | |             dataframe containing the information of the molecules
110 | |         config: dictionary
111 | |             dictionary containing the configuration of the model
112 | |     Returns:
113 | |         dataset: list of dictionaries
114 | | 
115 | |     """
    | |_______^ D400
116 |       device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
117 |       dataset_learned_embedding = torch.load(
    |
    = help: Add period

src\stk_search\utils\update_datasets.py:104:5: D415 First line should end with a period, question mark, or exclamation point
    |
102 |       df, dataset_all_frag, config, extension="all"
103 |   ):
104 |       """Check the input dataset for the learned embedding model and add missing molecules to the dataset
    |  _____^
105 | | 
106 | |     Args:
107 | |     ----
108 | |         df: pandas dataframe
109 | |             dataframe containing the information of the molecules
110 | |         config: dictionary
111 | |             dictionary containing the configuration of the model
112 | |     Returns:
113 | |         dataset: list of dictionaries
114 | | 
115 | |     """
    | |_______^ D415
116 |       device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
117 |       dataset_learned_embedding = torch.load(
    |
    = help: Add closing punctuation

src\stk_search\utils\update_datasets.py:125:9: N806 Variable `Inchikey` in function should be lowercase
    |
123 |     dataset_learned_embedding_update = []
124 |     missing_inchikey = []
125 |     for Inchikey in df["InChIKey"]:
    |         ^^^^^^^^ N806
126 |         if Inchikey in dataset_all_dict:
127 |             dataset_learned_embedding_update.append(dataset_all_dict[Inchikey])
    |

src\stk_search\utils\update_datasets.py:131:39: PD002 `inplace=True` should be avoided; it has inconsistent behavior
    |
129 |             missing_inchikey.append(Inchikey)
130 |     df_missing = df[df["InChIKey"].isin(missing_inchikey)].copy()
131 |     df_missing.reset_index(drop=True, inplace=True)
    |                                       ^^^^^^^^^^^^ PD002
132 |     print(
133 |         f"Missing {len(missing_inchikey)} Inchikey in the dataset of learned embedding"
    |
    = help: Assign to variable; remove `inplace` arg

src\stk_search\utils\update_datasets.py:132:5: T201 `print` found
    |
130 |     df_missing = df[df["InChIKey"].isin(missing_inchikey)].copy()
131 |     df_missing.reset_index(drop=True, inplace=True)
132 |     print(
    |     ^^^^^ T201
133 |         f"Missing {len(missing_inchikey)} Inchikey in the dataset of learned embedding"
134 |     )
    |
    = help: Remove `print`

src\stk_search\utils\update_datasets.py:139:9: N806 Variable `Inchikey` in function should be lowercase
    |
137 |     }
138 |     dataset_frag_missing = []
139 |     for Inchikey in missing_inchikey:
    |         ^^^^^^^^ N806
140 |         if Inchikey in dataset_frag_dict:
141 |             dataset_frag_missing.append(dataset_frag_dict[Inchikey])
    |

src\stk_search\utils\update_datasets.py:141:13: PERF401 Use a list comprehension to create a transformed list
    |
139 |     for Inchikey in missing_inchikey:
140 |         if Inchikey in dataset_frag_dict:
141 |             dataset_frag_missing.append(dataset_frag_dict[Inchikey])
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
142 |     ephemeral_dir = (
143 |         config["ephemeral_path"] + f"/{config['name'].replace('_','/')}/"
    |

src\stk_search\utils\update_datasets.py:154:5: T201 `print` found
    |
152 |     )
153 |     dataset_learned_embedding_update.extend(dataset_learned_embedding_missing)
154 |     print(
    |     ^^^^^ T201
155 |         " length of new dataset learned embedding",
156 |         len(dataset_learned_embedding_update),
    |
    = help: Remove `print`

src\stk_search\utils\update_datasets.py:162:5: D103 Missing docstring in public function
    |
162 | def update_dataset_oligomer(dataset_path, df_total, config):
    |     ^^^^^^^^^^^^^^^^^^^^^^^ D103
163 |     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    |

src\stk_search\utils\update_datasets.py:171:5: D103 Missing docstring in public function
    |
171 | def update_dataset_frag(dataset_path, df_total, config):
    |     ^^^^^^^^^^^^^^^^^^^ D103
172 |     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
173 |     dataset = torch.load(dataset_path, map_location=device)
    |

src\stk_search\utils\update_datasets.py:180:5: D103 Missing docstring in public function
    |
179 | # save the dataset for the embedding model if already calculated dataset all exists
180 | def save_datasets(config, dataset_train, dataset_val, dataset_test):
    |     ^^^^^^^^^^^^^ D103
181 |     name = config["name"]
182 |     config_dir = config["running_dir"]
    |

src\stk_search\utils\update_datasets.py:196:5: D103 Missing docstring in public function
    |
196 | def save_datasets_frag(config, dataset_train, dataset_val, dataset_test):
    |     ^^^^^^^^^^^^^^^^^^ D103
197 |     name = config["name"]
198 |     config_dir = config["running_dir"]
    |

src\stk_search\utils\update_datasets.py:220:5: D200 One-line docstring should fit on one line
    |
219 |   def update_target_on_dataset(dataset, df, target_name):
220 |       """Update the dataset to have the y as the target property
    |  _____^
221 | |     """
    | |_______^ D200
222 |       df = df.copy()
223 |       df.index = df["InChIKey"]
    |
    = help: Reformat to one line

src\stk_search\utils\update_datasets.py:220:5: D400 First line should end with a period
    |
219 |   def update_target_on_dataset(dataset, df, target_name):
220 |       """Update the dataset to have the y as the target property
    |  _____^
221 | |     """
    | |_______^ D400
222 |       df = df.copy()
223 |       df.index = df["InChIKey"]
    |
    = help: Add period

src\stk_search\utils\update_datasets.py:220:5: D415 First line should end with a period, question mark, or exclamation point
    |
219 |   def update_target_on_dataset(dataset, df, target_name):
220 |       """Update the dataset to have the y as the target property
    |  _____^
221 | |     """
    | |_______^ D415
222 |       df = df.copy()
223 |       df.index = df["InChIKey"]
    |
    = help: Add closing punctuation

src\stk_search\utils\update_datasets.py:222:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
220 |     """Update the dataset to have the y as the target property
221 |     """
222 |     df = df.copy()
    |     ^^ PD901
223 |     df.index = df["InChIKey"]
224 |     if target_name not in df.columns:
    |

src\stk_search\utils\update_datasets.py:225:9: T201 `print` found
    |
223 |     df.index = df["InChIKey"]
224 |     if target_name not in df.columns:
225 |         print(f"target {target_name} not in the dataframe")
    |         ^^^^^ T201
226 |         return dataset
227 |     for data in dataset:
    |
    = help: Remove `print`

src\stk_search\utils\update_datasets.py:233:5: D400 First line should end with a period
    |
232 |   def save_datasets_for_training(config):
233 |       """Save the datasets for the embedding and the frag model
    |  _____^
234 | | 
235 | |     Args:
236 | |     ----
237 | |         config: dictionary
238 | |             dictionary containing the configuration of the model
239 | |     Returns:
240 | |         config: dictionary
241 | |             dictionary containing the configuration of the model
242 | | 
243 | |     """
    | |_______^ D400
244 |       config_dir = config["running_dir"]
    |
    = help: Add period

src\stk_search\utils\update_datasets.py:233:5: D415 First line should end with a period, question mark, or exclamation point
    |
232 |   def save_datasets_for_training(config):
233 |       """Save the datasets for the embedding and the frag model
    |  _____^
234 | | 
235 | |     Args:
236 | |     ----
237 | |         config: dictionary
238 | |             dictionary containing the configuration of the model
239 | |     Returns:
240 | |         config: dictionary
241 | |             dictionary containing the configuration of the model
242 | | 
243 | |     """
    | |_______^ D415
244 |       config_dir = config["running_dir"]
    |
    = help: Add closing punctuation

src\stk_search\utils\update_datasets.py:249:8: PTH113 `os.path.isfile()` should be replaced by `Path.is_file()`
    |
247 |     df_val = pd.read_csv(config_dir + "df_val.csv", low_memory=False)
248 |     df_test = pd.read_csv(config_dir + "df_test.csv")
249 |     if os.path.isfile(config["dataset_all_path"]):
    |        ^^^^^^^^^^^^^^ PTH113
250 |         dataset_all = torch.load(
251 |             config["dataset_all_path"], map_location=config["device"]
    |

src\stk_search\utils\update_datasets.py:254:9: T201 `print` found
    |
252 |         )
253 |     else:
254 |         print("No dataset found")
    |         ^^^^^ T201
255 |         dataset_all = []
256 |     dataset_train, _ = get_dataset_from_df(dataset_all, df_train, config)
    |
    = help: Remove `print`

src\stk_search\utils\update_datasets.py:262:8: PTH113 `os.path.isfile()` should be replaced by `Path.is_file()`
    |
260 |     save_datasets(config, dataset_train, dataset_val, dataset_test)
261 | 
262 |     if os.path.isfile(config["dataset_all_frag_path"]):
    |        ^^^^^^^^^^^^^^ PTH113
263 |         dataset_all_frag = torch.load(
264 |             config["dataset_all_frag_path"], map_location=config["device"]
    |

src\stk_search\utils\update_datasets.py:267:9: T201 `print` found
    |
265 |         )
266 |     else:
267 |         print("No frag dataset found")
    |         ^^^^^ T201
268 |         dataset_all_frag = []
269 |     dataset_train_frag = get_dataset_frag_from_df(
    |
    = help: Remove `print`

tests\test_objective_functions.py:1:1: INP001 File `tests\test_objective_functions.py` is part of an implicit namespace package. Add an `__init__.py`.
tests\test_objective_functions.py:24:5: SyntaxError: Expected an indented block after function definition
   |
24 |     def test_get_property_value_total_energy(self):
   |     ^
25 |         property_value = get_property_value(self.data, "TOTAL ENERGY")
26 |         self.assertEqual(property_value, -123.456)
   |

tests\test_objective_functions.py:46:20: W292 No newline at end of file
   |
45 | if __name__ == '__main__':
46 |     unittest.main()
   |                     W292
   |
   = help: Add trailing newline

tests\test_seachspace.py:1:1: INP001 File `tests\test_seachspace.py` is part of an implicit namespace package. Add an `__init__.py`.
tests\test_seachspace.py:1:1: D100 Missing docstring in public module
tests\test_seachspace.py:7:5: D103 Missing docstring in public function
  |
7 | def test_init():
  |     ^^^^^^^^^ D103
8 |     df_precursors = pd.read_pickle("tests/data/df_precursor_test.pkl")
9 |     SP = SearchedSpace.Searched_Space(
  |

tests\test_seachspace.py:8:21: S301 `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
   |
 7 | def test_init():
 8 |     df_precursors = pd.read_pickle("tests/data/df_precursor_test.pkl")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S301
 9 |     SP = SearchedSpace.Searched_Space(
10 |         number_of_fragments=2,
   |

tests\test_seachspace.py:9:5: N806 Variable `SP` in function should be lowercase
   |
 7 | def test_init():
 8 |     df_precursors = pd.read_pickle("tests/data/df_precursor_test.pkl")
 9 |     SP = SearchedSpace.Searched_Space(
   |     ^^ N806
10 |         number_of_fragments=2,
11 |         df=df_precursors,
   |

tests\test_seachspace.py:15:5: S101 Use of `assert` detected
   |
13 |         generation_type="conditional",
14 |     )
15 |     assert SP.number_of_fragments == 2
   |     ^^^^^^ S101
16 |     assert SP.generation_type == "conditional"
   |

tests\test_seachspace.py:15:38: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
13 |         generation_type="conditional",
14 |     )
15 |     assert SP.number_of_fragments == 2
   |                                      ^ PLR2004
16 |     assert SP.generation_type == "conditional"
   |

tests\test_seachspace.py:16:5: S101 Use of `assert` detected
   |
14 |     )
15 |     assert SP.number_of_fragments == 2
16 |     assert SP.generation_type == "conditional"
   |     ^^^^^^ S101
17 | 
18 |     assert SP.get_space_size() == 100
   |

tests\test_seachspace.py:18:5: S101 Use of `assert` detected
   |
16 |     assert SP.generation_type == "conditional"
17 | 
18 |     assert SP.get_space_size() == 100
   |     ^^^^^^ S101
   |

tests\test_seachspace.py:18:35: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
   |
16 |     assert SP.generation_type == "conditional"
17 | 
18 |     assert SP.get_space_size() == 100
   |                                   ^^^ PLR2004
   |

tests\test_search_exp.py:1:1: INP001 File `tests\test_search_exp.py` is part of an implicit namespace package. Add an `__init__.py`.
tests\test_search_exp.py:1:1: D100 Missing docstring in public module
tests\test_search_exp.py:23:5: PLR0915 Too many statements (71 > 50)
   |
22 | # %%
23 | def main(num_iteration, num_elem_initialisation, test_name="test",case="slatm"):
   |     ^^^^ PLR0915
24 |     # Load the searched space
25 |     df_path = "data/output/Full_dataset/df_total_subset_16_11_23.csv"
   |

tests\test_search_exp.py:23:5: D103 Missing docstring in public function
   |
22 | # %%
23 | def main(num_iteration, num_elem_initialisation, test_name="test",case="slatm"):
   |     ^^^^ D103
24 |     # Load the searched space
25 |     df_path = "data/output/Full_dataset/df_total_subset_16_11_23.csv"
   |

tests\test_search_exp.py:37:9: N806 Variable `BO` in function should be lowercase
   |
36 |     if case == "slatm":
37 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
38 |         BO.Representation = Representation_slatm.Representation_slatm()
39 |         BO.PCA_input = True
   |

tests\test_search_exp.py:42:9: N806 Variable `BO` in function should be lowercase
   |
40 |         search_algorithm = BO
41 |     elif case == "slatm_org":
42 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
43 |         BO.Representation = Representation_slatm.Representation_slatm_org(df_total)
44 |         BO.PCA_input = True
   |

tests\test_search_exp.py:47:9: N806 Variable `BO` in function should be lowercase
   |
45 |         search_algorithm = BO
46 |     elif case == "precursor":
47 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
48 |         frag_properties = []
49 |         frag_properties = df_precursors.columns[1:7]
   |

tests\test_search_exp.py:51:9: T201 `print` found
   |
49 |         frag_properties = df_precursors.columns[1:7]
50 |         frag_properties = frag_properties.append(df_precursors.columns[17:23])
51 |         print(frag_properties)
   |         ^^^^^ T201
52 |         BO.Representation = RepresentationPrecursor.RepresentationPrecursor(
53 |             df_precursors, frag_properties
   |
   = help: Remove `print`

tests\test_search_exp.py:69:9: N806 Variable `EncodingModel` in function should be lowercase
   |
67 |             node_class=model_config["node_class"],
68 |         )
69 |         EncodingModel = Fragment_encoder(
   |         ^^^^^^^^^^^^^ N806
70 |             input_dim = config["emb_dim"]*config["number_of_fragement"],
71 |             model_dim=config["emb_dim"],
   |

tests\test_search_exp.py:84:9: N806 Variable `BO` in function should be lowercase
   |
82 |         state_dict = torch.load(config["model_transformer_chkpt"],map_location=torch.device("cpu"))
83 |         EncodingModel.load_state_dict(state_dict["state_dict"])
84 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
   |         ^^ N806
85 |         client = pymongo.MongoClient(config["pymongo_client"])
86 |         db_poly = stk.ConstructedMoleculeMongoDb(
   |

tests\test_search_exp.py:100:9: ERA001 Found commented-out code
    |
 99 |         search_algorithm = BO
100 |         #X_explored_frag = BO.Representation.generate_repr(searched_space_df.iloc[inds])
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
101 |     elif case == "graph_geom":
102 |         config_dir = "/rds/general/user/ma11115/home/Geom3D/Geom3D/training/SchNet_Trans_80K"
    |
    = help: Remove commented-out code

tests\test_search_exp.py:108:9: N806 Variable `BO` in function should be lowercase
    |
106 |         pymodel.to(config["device"] )
107 |         model_embedding = pymodel.molecule_3D_repr
108 |         BO = Bayesian_Optimisation.Bayesian_Optimisation()
    |         ^^ N806
109 |         client = pymongo.MongoClient(config["pymongo_client"])
110 |         db_poly = stk.ConstructedMoleculeMongoDb(
    |

tests\test_search_exp.py:124:15: TRY003 Avoid specifying long messages outside the exception class
    |
122 |         search_algorithm = Search_algorithm.evolution_algorithm()
123 |     else:
124 |         raise ValueError("case not recognised")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
125 | 
126 |     number_of_iterations = num_iteration
    |

tests\test_search_exp.py:124:26: EM101 Exception must not use a string literal, assign to variable first
    |
122 |         search_algorithm = Search_algorithm.evolution_algorithm()
123 |     else:
124 |         raise ValueError("case not recognised")
    |                          ^^^^^^^^^^^^^^^^^^^^^ EM101
125 | 
126 |     number_of_iterations = num_iteration
    |
    = help: Assign to variable; remove string literal

tests\test_search_exp.py:128:5: PLW0127 Self-assignment of variable `num_elem_initialisation`
    |
126 |     number_of_iterations = num_iteration
127 |     verbose = True
128 |     num_elem_initialisation = num_elem_initialisation
    |     ^^^^^^^^^^^^^^^^^^^^^^^ PLW0127
129 |     S_exp = SearchExp.Search_exp(
130 |         search_space_loc,
    |

tests\test_search_exp.py:129:5: N806 Variable `S_exp` in function should be lowercase
    |
127 |     verbose = True
128 |     num_elem_initialisation = num_elem_initialisation
129 |     S_exp = SearchExp.Search_exp(
    |     ^^^^^ N806
130 |         search_space_loc,
131 |         search_algorithm,
    |

tests\test_search_exp.py:154:7: D101 Missing docstring in public class
    |
152 |     main(args.num_iteration, args.num_elem_initialisation, args.test_name,args.case)
153 | 
154 | class TestStkSearch(unittest.TestCase):
    |       ^^^^^^^^^^^^^ D101
155 |     def test_run_search(self):
156 |         try:
    |

tests\test_search_exp.py:155:9: D102 Missing docstring in public method
    |
154 | class TestStkSearch(unittest.TestCase):
155 |     def test_run_search(self):
    |         ^^^^^^^^^^^^^^^ D102
156 |         try:
157 |             run_search(num_iteration=10, num_elem_initialisation=5, test_name="Test")
    |

tests\test_search_exp.py:158:16: BLE001 Do not catch blind exception: `Exception`
    |
156 |         try:
157 |             run_search(num_iteration=10, num_elem_initialisation=5, test_name="Test")
158 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
159 |             self.fail(f"run_search raised an exception: {e}")
    |

Found 7805 errors (1 fixed, 7804 remaining).
No fixes available (2069 hidden fixes can be enabled with the `--unsafe-fixes` option).
